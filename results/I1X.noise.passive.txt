File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 234, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 235, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 235, character 36:
Warning: identifier h rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 274, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 278, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 288, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 293, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 334, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 335, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 346, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 347, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 350, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 351, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 355, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 550, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 543, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 536, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 346, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 347, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 350, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 351, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 355, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 528, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 274, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 278, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 618, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 620, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 610, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 603, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 595, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 288, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 293, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 588, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 334, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 335, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_575: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_575));
    (
        {6}let e_576: keypair = keypairpack(empty,empty) in
        {7}let rs_577: key = empty in
        {8}let re_578: key = empty in
        {9}let v_579: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_580: key = catch-fail(v_579) in
        {11}let v_581: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_582: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then symmetricstatepack(v_581,v_580,v_579) else fail-any) else fail-any) else fail-any))) in
        {13}let v_583: symmetricstate = catch-fail((if success?((if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then symmetricstatepack(v_581,v_580,v_579) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_583) then handshakestatepack(v_583,s_575,e_576,rs_577,re_578,empty,true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {49}get statestore(=alice,=bob,=sid,statepack_a(hs_584: handshakestate)) in
        {16}let v_585: bitstring = catch-fail(handshakestateunpack(hs_584)) in
        {17}let v_586: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_587: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {19}let v_588: keypair = catch-fail((if not-caught-fail(v_587) then keypairpack(v_587,key_e(alice,bob,sid)) else fail-any)) in
        {20}let v_589: bitstring = catch-fail(getpublickey(v_588)) in
        {21}let v_590: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_585))) in
        {22}let v_591: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_585)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),v_589)) else fail-any) else fail-any)) in
        {23}let v_592: key = catch-fail(dhexp(key_s(alice),g)) in
        {24}let v_593: keypair = catch-fail((if not-caught-fail(v_592) then keypairpack(v_592,key_s(alice)) else fail-any)) in
        {25}let v_594: bitstring = catch-fail(symmetricstateunpack(v_591)) in
        {26}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {27}let v_596: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),getpublickey(v_593))) in
        {28}let v_597: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {29}let v_598: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then cipherstatepack(1-proj-2-tuple(v_597),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {30}let v_599: bitstring = catch-fail((if (success?(getpublickey(v_593)) && (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_598) then (v_598,v_596) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_600: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_599),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {32}let v_601: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_599)) && success?(symmetricstatepack(1-proj-2-tuple(v_599),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),2-proj-2-tuple(v_599))) else fail-any) else fail-any)) in
        {33}let v_602: bitstring = catch-fail((if success?(getpublickey(v_593)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then (if not-caught-fail(v_601) then (v_601,2-proj-2-tuple(v_599)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_603: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_602))) in
        {35}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {36}let v_605: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_604),2-proj-2-tuple(v_604),3-proj-3-tuple(v_603),msg_a(alice,bob,sid))) in
        {37}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {38}let v_607: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_604))) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then cipherstatepack(1-proj-2-tuple(v_606),increment_nonce(2-proj-2-tuple(v_604))) else fail-any) else fail-any)) in
        {39}let v_608: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_603)) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (v_607,v_605) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_609: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_608),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) in
        {41}let v_610: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_608)) && success?(symmetricstatepack(1-proj-2-tuple(v_608),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),2-proj-2-tuple(v_608))) else fail-any) else fail-any)) in
        {42}let v_611: bitstring = catch-fail((if success?(1-proj-2-tuple(v_602)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then (if not-caught-fail(v_610) then (v_610,2-proj-2-tuple(v_608)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_612: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_611),v_593,v_588,4-proj-7-tuple(v_585),5-proj-7-tuple(v_585),6-proj-7-tuple(v_585),7-proj-7-tuple(v_585))) in
        {44}let v_613: bitstring = catch-fail(concat3(v_589,2-proj-2-tuple(v_602),2-proj-2-tuple(v_611))) in
        {45}let (hs_614: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-7-tuple(v_585))))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (if not-caught-fail(v_591) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (v_612,v_613) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {46}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {47}insert statestore(alice,bob,sid,statepack_b(hs_614));
        {48}out(pub, message_a)
    ) | (
        {97}get statestore(=alice,=bob,=sid,statepack_b(hs_615: handshakestate)) in
        {50}in(pub, message_b: bitstring);
        {51}let v_616: bitstring = catch-fail(handshakestateunpack(hs_615)) in
        {52}let v_617: bitstring = catch-fail(deconcat3(message_b)) in
        {53}let v_618: bool = catch-fail(true) in
        {54}let v_619: key = catch-fail(1-proj-3-tuple(v_617)) in
        {55}let v_620: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_616))) in
        {56}let v_621: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_616)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),v_619)) else fail-any) else fail-any)) in
        {57}let v_622: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_616))) in
        {58}let v_623: bitstring = catch-fail(symmetricstateunpack(v_621)) in
        {59}let v_624: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {60}let v_625: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {61}let v_626: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {62}let v_627: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_623))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (v_624,v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_628: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_627)) then cipherstatepack(2-proj-3-tuple(v_627),minnonce) else fail-any),1-proj-3-tuple(v_627),3-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_629: bitstring = catch-fail(symmetricstateunpack(v_628)) in
        {65}let v_630: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {66}let v_631: aead = catch-fail(decrypt(1-proj-2-tuple(v_630),2-proj-2-tuple(v_630),3-proj-3-tuple(v_629),2-proj-3-tuple(v_617))) in
        {67}let v_632: bitstring = catch-fail(aeadunpack(v_631)) in
        {68}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {69}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_630))) && success?(1-proj-3-tuple(v_629))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_630))) else fail-any) else fail-any)) in
        {70}let v_635: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_629)) && success?(1-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_634) then (v_634,3-proj-3-tuple(v_632),1-proj-3-tuple(v_632)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) in
        {72}let v_637: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),2-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {73}let v_638: bitstring = catch-fail((if success?(2-proj-3-tuple(v_617)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_639: key = catch-fail(2-proj-3-tuple(v_638)) in
        {75}let v_640: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_616))) in
        {76}let v_641: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_638))) in
        {77}let v_642: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_641),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any))) in
        {78}let v_643: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_641),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any))) in
        {79}let v_644: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_641),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any))) in
        {80}let v_645: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_641))) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (v_642,v_643,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_646: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_638))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_645)) then cipherstatepack(2-proj-3-tuple(v_645),minnonce) else fail-any),1-proj-3-tuple(v_645),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any)) in
        {82}let v_647: bitstring = catch-fail(symmetricstateunpack(v_646)) in
        {83}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {84}let v_649: aead = catch-fail(decrypt(1-proj-2-tuple(v_648),2-proj-2-tuple(v_648),3-proj-3-tuple(v_647),3-proj-3-tuple(v_617))) in
        {85}let v_650: bitstring = catch-fail(aeadunpack(v_649)) in
        {86}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {87}let v_652: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_648))) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then cipherstatepack(1-proj-2-tuple(v_651),increment_nonce(2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {88}let v_653: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_647)) && success?(1-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if not-caught-fail(v_652) then (v_652,3-proj-3-tuple(v_650),1-proj-3-tuple(v_650)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_654: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) in
        {90}let v_655: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack(1-proj-3-tuple(v_654),2-proj-3-tuple(v_654),hash(3-proj-3-tuple(v_654),3-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {91}let v_656: bitstring = catch-fail((if success?(3-proj-3-tuple(v_617)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,2-proj-3-tuple(v_653),3-proj-3-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_657: key = catch-fail(dhexp(key_s(bob),g)) in
        {93}let v_658: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_656),2-proj-7-tuple(v_616),3-proj-7-tuple(v_616),v_639,v_619,6-proj-7-tuple(v_616),7-proj-7-tuple(v_616))) in
        {94}let (hs_659: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-7-tuple(v_616))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (if not-caught-fail(v_628) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_646) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if ((3-proj-3-tuple(v_638) && 3-proj-3-tuple(v_656)) && (v_639 = getpublickey((if not-caught-fail(v_657) then keypairpack(v_657,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_658) then (v_658,2-proj-3-tuple(v_656),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {95}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {96}insert statestore(alice,bob,sid,statepack_c(hs_659))
    ) | (
        {130}get statestore(=alice,=bob,=sid,statepack_c(hs_660: handshakestate)) in
        {98}let v_661: bitstring = catch-fail(handshakestateunpack(hs_660)) in
        {99}let v_662: bitstring = catch-fail((empty,empty,empty)) in
        {100}let v_663: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_661))) in
        {101}let v_664: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_661))) in
        {102}let v_665: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_664),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then dhexp(2-proj-2-tuple(v_663),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {103}let v_666: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_664),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then dhexp(2-proj-2-tuple(v_663),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {104}let v_667: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_664),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then dhexp(2-proj-2-tuple(v_663),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {105}let v_668: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then dhexp(2-proj-2-tuple(v_663),5-proj-7-tuple(v_661)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_664))) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (v_665,v_666,v_667) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let v_669: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then dhexp(2-proj-2-tuple(v_663),5-proj-7-tuple(v_661)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_668)) then cipherstatepack(2-proj-3-tuple(v_668),minnonce) else fail-any),1-proj-3-tuple(v_668),3-proj-3-tuple(v_664)) else fail-any) else fail-any) else fail-any)) in
        {107}let v_670: bitstring = catch-fail(symmetricstateunpack(v_669)) in
        {108}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {109}let v_672: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_671),2-proj-2-tuple(v_671),3-proj-3-tuple(v_670),msg_c(alice,bob,sid))) in
        {110}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {111}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_671))) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {112}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_670)) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_672) then (if not-caught-fail(v_674) then (v_674,v_672) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {113}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) in
        {114}let v_677: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_675)) && success?(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),2-proj-2-tuple(v_675))) else fail-any) else fail-any)) in
        {115}let v_678: bitstring = catch-fail((if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-2-tuple(v_675)) else fail-any) else fail-any) else fail-any)) in
        {116}let v_679: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_678),2-proj-7-tuple(v_661),3-proj-7-tuple(v_661),4-proj-7-tuple(v_661),5-proj-7-tuple(v_661),6-proj-7-tuple(v_661),7-proj-7-tuple(v_661))) in
        {117}let v_680: bitstring = catch-fail(concat3(1-proj-3-tuple(v_662),2-proj-3-tuple(v_662),2-proj-2-tuple(v_678))) in
        {118}let v_681: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_678))) in
        {119}let v_682: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_681),zero)) in
        {120}let v_683: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_681),zero)) in
        {121}let v_684: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_681),zero)) in
        {122}let v_685: bitstring = catch-fail((if success?(2-proj-3-tuple(v_681)) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (v_682,v_683,v_684) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_686: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_685)) then cipherstatepack(1-proj-3-tuple(v_685),minnonce) else fail-any)) in
        {124}let v_687: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_685)) then cipherstatepack(2-proj-3-tuple(v_685),minnonce) else fail-any)) in
        {125}let v_688: bitstring = catch-fail((if success?(1-proj-2-tuple(v_678)) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (1-proj-2-tuple(v_678),v_686,v_687) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let (hs_689: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-7-tuple(v_661))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_669) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (v_679,v_680,2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {127}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {128}insert statestore(alice,bob,sid,statepack_d(hs_689,cs1,cs2));
        {129}out(pub, message_c)
    ) | (
        {131}!
        {151}get statestore(=alice,=bob,=sid,statepack_d(hs_690: handshakestate,cs1_691: cipherstate,cs2_692: cipherstate)) in
        {132}let hs_693: handshakestate = handshakestatesetcs(hs_690,cs2_692) in
        {133}in(pub, message_d: bitstring);
        {134}let v_694: bitstring = catch-fail(handshakestateunpack(hs_693)) in
        {135}let v_695: bitstring = catch-fail(deconcat3(message_d)) in
        {136}let v_696: bool = catch-fail(true) in
        {137}let v_697: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_694))) in
        {138}let v_698: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_697))) in
        {139}let v_699: aead = catch-fail(decrypt(1-proj-2-tuple(v_698),2-proj-2-tuple(v_698),3-proj-3-tuple(v_697),3-proj-3-tuple(v_695))) in
        {140}let v_700: bitstring = catch-fail(aeadunpack(v_699)) in
        {141}let v_701: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_697))) in
        {142}let v_702: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_698))) && success?(1-proj-3-tuple(v_697))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then cipherstatepack(1-proj-2-tuple(v_701),increment_nonce(2-proj-2-tuple(v_698))) else fail-any) else fail-any)) in
        {143}let v_703: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_695)) && (success?(3-proj-3-tuple(v_697)) && success?(1-proj-3-tuple(v_697)))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then (if not-caught-fail(v_699) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if not-caught-fail(v_702) then (v_702,3-proj-3-tuple(v_700),1-proj-3-tuple(v_700)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let v_704: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_703),2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)))) in
        {145}let v_705: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_695)) && success?(symmetricstatepack(1-proj-3-tuple(v_703),2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then symmetricstatepack(1-proj-3-tuple(v_704),2-proj-3-tuple(v_704),hash(3-proj-3-tuple(v_704),3-proj-3-tuple(v_695))) else fail-any) else fail-any)) in
        {146}let v_706: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_695)) && success?(1-proj-7-tuple(v_694))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_705) then (v_705,2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {147}let v_707: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_706),2-proj-7-tuple(v_694),3-proj-7-tuple(v_694),4-proj-7-tuple(v_694),5-proj-7-tuple(v_694),6-proj-7-tuple(v_694),7-proj-7-tuple(v_694))) in
        {148}let (hs_708: handshakestate,plaintext_d: bitstring,valid_709: bool) = (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-7-tuple(v_694))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_696) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if (v_696 && 3-proj-3-tuple(v_706)) then (if not-caught-fail(v_707) then (v_707,2-proj-3-tuple(v_706),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {150}insert statestore(alice,bob,sid,statepack_e(hs_708,cs1_691,handshakestategetcs(hs_708)))
    ) | (
        {152}!
        {170}get statestore(=alice,=bob,=sid,statepack_e(hs_710: handshakestate,cs1_711: cipherstate,cs2_712: cipherstate)) in
        {153}let hs_713: handshakestate = handshakestatesetcs(hs_710,cs1_711) in
        {154}let v_714: bitstring = catch-fail(handshakestateunpack(hs_713)) in
        {155}let v_715: bitstring = catch-fail((empty,empty,empty)) in
        {156}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {157}let v_717: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_716))) in
        {158}let v_718: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_717),2-proj-2-tuple(v_717),3-proj-3-tuple(v_716),msg_e(alice,bob,sid))) in
        {159}let v_719: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_716))) in
        {160}let v_720: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_717))) && success?(1-proj-3-tuple(v_716))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then cipherstatepack(1-proj-2-tuple(v_719),increment_nonce(2-proj-2-tuple(v_717))) else fail-any) else fail-any)) in
        {161}let v_721: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_716)) && success?(1-proj-3-tuple(v_716))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (v_720,v_718) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let v_722: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_721),2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)))) in
        {163}let v_723: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_721)) && success?(symmetricstatepack(1-proj-2-tuple(v_721),2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),2-proj-2-tuple(v_721))) else fail-any) else fail-any)) in
        {164}let v_724: bitstring = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_723) then (v_723,2-proj-2-tuple(v_721)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {165}let v_725: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_724),2-proj-7-tuple(v_714),3-proj-7-tuple(v_714),4-proj-7-tuple(v_714),5-proj-7-tuple(v_714),6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {166}let v_726: bitstring = catch-fail(concat3(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),2-proj-2-tuple(v_724))) in
        {167}let (hs_727: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (v_725,v_726) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {168}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {169}out(pub, message_e)
    ) | (
        {171}event LeakS(phase0,alice);
        {172}out(pub, key_s(alice))
    ) | (
        {173}phase 1;
        {174}event LeakS(phase1,alice);
        {175}out(pub, key_s(alice))
    )
) | (
    {176}let s_728: keypair = keypairpack(empty,empty) in
    {177}out(pub, getpublickey(s_728));
    (
        {178}let e_729: keypair = keypairpack(empty,empty) in
        {179}let rs_730: key = empty in
        {180}let re_731: key = empty in
        {181}let v_732: bitstring = catch-fail(hash(somename,empty)) in
        {182}let v_733: key = catch-fail(v_732) in
        {183}let v_734: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {184}let v_735: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then symmetricstatepack(v_734,v_733,v_732) else fail-any) else fail-any) else fail-any))) in
        {185}let v_736: symmetricstate = catch-fail((if success?((if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then symmetricstatepack(v_734,v_733,v_732) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_735),hash(3-proj-3-tuple(v_735),empty)) else fail-any) else fail-any)) in
        {186}let hs_737: handshakestate = (if not-caught-fail(v_736) then handshakestatepack(v_736,s_728,e_729,rs_730,re_731,empty,true) else fail-any) in
        {187}insert statestore(alice,charlie,sid,statepack_a(hs_737))
    ) | (
        {221}get statestore(=alice,=charlie,=sid,statepack_a(hs_738: handshakestate)) in
        {188}let v_739: bitstring = catch-fail(handshakestateunpack(hs_738)) in
        {189}let v_740: bitstring = catch-fail((empty,empty,empty)) in
        {190}let v_741: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {191}let v_742: keypair = catch-fail((if not-caught-fail(v_741) then keypairpack(v_741,key_e(alice,charlie,sid)) else fail-any)) in
        {192}let v_743: bitstring = catch-fail(getpublickey(v_742)) in
        {193}let v_744: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_739))) in
        {194}let v_745: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_739)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_744),hash(3-proj-3-tuple(v_744),v_743)) else fail-any) else fail-any)) in
        {195}let v_746: key = catch-fail(dhexp(key_s(alice),g)) in
        {196}let v_747: keypair = catch-fail((if not-caught-fail(v_746) then keypairpack(v_746,key_s(alice)) else fail-any)) in
        {197}let v_748: bitstring = catch-fail(symmetricstateunpack(v_745)) in
        {198}let v_749: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_748))) in
        {199}let v_750: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_749),2-proj-2-tuple(v_749),3-proj-3-tuple(v_748),getpublickey(v_747))) in
        {200}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_748))) in
        {201}let v_752: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_749))) && success?(1-proj-3-tuple(v_748))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then cipherstatepack(1-proj-2-tuple(v_751),increment_nonce(2-proj-2-tuple(v_749))) else fail-any) else fail-any)) in
        {202}let v_753: bitstring = catch-fail((if (success?(getpublickey(v_747)) && (success?(3-proj-3-tuple(v_748)) && success?(1-proj-3-tuple(v_748)))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then (if not-caught-fail(v_750) then (if not-caught-fail(v_752) then (v_752,v_750) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_754: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_753),2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)))) in
        {204}let v_755: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_753)) && success?(symmetricstatepack(1-proj-2-tuple(v_753),2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_754),hash(3-proj-3-tuple(v_754),2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {205}let v_756: bitstring = catch-fail((if success?(getpublickey(v_747)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_755) then (v_755,2-proj-2-tuple(v_753)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_757: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_756))) in
        {207}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {208}let v_759: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_758),2-proj-2-tuple(v_758),3-proj-3-tuple(v_757),msg_a(alice,charlie,sid))) in
        {209}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {210}let v_761: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_758))) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then cipherstatepack(1-proj-2-tuple(v_760),increment_nonce(2-proj-2-tuple(v_758))) else fail-any) else fail-any)) in
        {211}let v_762: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_757)) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_761) then (v_761,v_759) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_763: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_762),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) in
        {213}let v_764: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_762)) && success?(symmetricstatepack(1-proj-2-tuple(v_762),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {214}let v_765: bitstring = catch-fail((if success?(1-proj-2-tuple(v_756)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,2-proj-2-tuple(v_762)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_766: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_765),v_747,v_742,4-proj-7-tuple(v_739),5-proj-7-tuple(v_739),6-proj-7-tuple(v_739),7-proj-7-tuple(v_739))) in
        {216}let v_767: bitstring = catch-fail(concat3(v_743,2-proj-2-tuple(v_756),2-proj-2-tuple(v_765))) in
        {217}let (hs_768: handshakestate,message_a_769: bitstring) = (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-7-tuple(v_739))))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if not-caught-fail(v_742) then (if not-caught-fail(v_743) then (if not-caught-fail(v_745) then (if not-caught-fail(v_747) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (v_766,v_767) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {218}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {219}insert statestore(alice,charlie,sid,statepack_b(hs_768));
        {220}out(pub, message_a_769)
    ) | (
        {269}get statestore(=alice,=charlie,=sid,statepack_b(hs_770: handshakestate)) in
        {222}in(pub, message_b_771: bitstring);
        {223}let v_772: bitstring = catch-fail(handshakestateunpack(hs_770)) in
        {224}let v_773: bitstring = catch-fail(deconcat3(message_b_771)) in
        {225}let v_774: bool = catch-fail(true) in
        {226}let v_775: key = catch-fail(1-proj-3-tuple(v_773)) in
        {227}let v_776: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_772))) in
        {228}let v_777: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_772)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then symmetricstatepack(1-proj-3-tuple(v_776),2-proj-3-tuple(v_776),hash(3-proj-3-tuple(v_776),v_775)) else fail-any) else fail-any)) in
        {229}let v_778: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_772))) in
        {230}let v_779: bitstring = catch-fail(symmetricstateunpack(v_777)) in
        {231}let v_780: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_779),(if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),v_775) else fail-any) else fail-any))) in
        {232}let v_781: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_779),(if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),v_775) else fail-any) else fail-any))) in
        {233}let v_782: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_779),(if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),v_775) else fail-any) else fail-any))) in
        {234}let v_783: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),v_775) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_779))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (if not-caught-fail(v_782) then (v_780,v_781,v_782) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_784: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),v_775) else fail-any) else fail-any)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_783)) then cipherstatepack(2-proj-3-tuple(v_783),minnonce) else fail-any),1-proj-3-tuple(v_783),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any)) in
        {236}let v_785: bitstring = catch-fail(symmetricstateunpack(v_784)) in
        {237}let v_786: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_785))) in
        {238}let v_787: aead = catch-fail(decrypt(1-proj-2-tuple(v_786),2-proj-2-tuple(v_786),3-proj-3-tuple(v_785),2-proj-3-tuple(v_773))) in
        {239}let v_788: bitstring = catch-fail(aeadunpack(v_787)) in
        {240}let v_789: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_785))) in
        {241}let v_790: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_786))) && success?(1-proj-3-tuple(v_785))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then cipherstatepack(1-proj-2-tuple(v_789),increment_nonce(2-proj-2-tuple(v_786))) else fail-any) else fail-any)) in
        {242}let v_791: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_773)) && (success?(3-proj-3-tuple(v_785)) && success?(1-proj-3-tuple(v_785)))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then (if not-caught-fail(v_787) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_790) then (v_790,3-proj-3-tuple(v_788),1-proj-3-tuple(v_788)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_792: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)))) in
        {244}let v_793: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_773)) && success?(symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_792),hash(3-proj-3-tuple(v_792),2-proj-3-tuple(v_773))) else fail-any) else fail-any)) in
        {245}let v_794: bitstring = catch-fail((if success?(2-proj-3-tuple(v_773)) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_793) then (v_793,2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_795: key = catch-fail(2-proj-3-tuple(v_794)) in
        {247}let v_796: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_772))) in
        {248}let v_797: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_794))) in
        {249}let v_798: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_797),(if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then dhexp(2-proj-2-tuple(v_796),v_795) else fail-any) else fail-any))) in
        {250}let v_799: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_797),(if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then dhexp(2-proj-2-tuple(v_796),v_795) else fail-any) else fail-any))) in
        {251}let v_800: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_797),(if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then dhexp(2-proj-2-tuple(v_796),v_795) else fail-any) else fail-any))) in
        {252}let v_801: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then dhexp(2-proj-2-tuple(v_796),v_795) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_797))) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (if not-caught-fail(v_800) then (v_798,v_799,v_800) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_802: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_772)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then dhexp(2-proj-2-tuple(v_796),v_795) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_794))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_801)) then cipherstatepack(2-proj-3-tuple(v_801),minnonce) else fail-any),1-proj-3-tuple(v_801),3-proj-3-tuple(v_797)) else fail-any) else fail-any) else fail-any)) in
        {254}let v_803: bitstring = catch-fail(symmetricstateunpack(v_802)) in
        {255}let v_804: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {256}let v_805: aead = catch-fail(decrypt(1-proj-2-tuple(v_804),2-proj-2-tuple(v_804),3-proj-3-tuple(v_803),3-proj-3-tuple(v_773))) in
        {257}let v_806: bitstring = catch-fail(aeadunpack(v_805)) in
        {258}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {259}let v_808: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_804))) && success?(1-proj-3-tuple(v_803))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then cipherstatepack(1-proj-2-tuple(v_807),increment_nonce(2-proj-2-tuple(v_804))) else fail-any) else fail-any)) in
        {260}let v_809: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_773)) && (success?(3-proj-3-tuple(v_803)) && success?(1-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then (if not-caught-fail(v_805) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_808) then (v_808,3-proj-3-tuple(v_806),1-proj-3-tuple(v_806)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_810: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) in
        {262}let v_811: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_773)) && success?(symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),3-proj-3-tuple(v_773))) else fail-any) else fail-any)) in
        {263}let v_812: bitstring = catch-fail((if success?(3-proj-3-tuple(v_773)) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let v_813: key = catch-fail(dhexp(key_s(charlie),g)) in
        {265}let v_814: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_812),2-proj-7-tuple(v_772),3-proj-7-tuple(v_772),v_795,v_775,6-proj-7-tuple(v_772),7-proj-7-tuple(v_772))) in
        {266}let (hs_815: handshakestate,plaintext_b_816: bitstring,valid_817: bool) = (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-7-tuple(v_772))))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (if not-caught-fail(v_777) then (if not-caught-fail(v_784) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (if not-caught-fail(v_795) then (if not-caught-fail(v_802) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if ((3-proj-3-tuple(v_794) && 3-proj-3-tuple(v_812)) && (v_795 = getpublickey((if not-caught-fail(v_813) then keypairpack(v_813,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_814) then (v_814,2-proj-3-tuple(v_812),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {267}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_816);
        {268}insert statestore(alice,charlie,sid,statepack_c(hs_815))
    ) | (
        {302}get statestore(=alice,=charlie,=sid,statepack_c(hs_818: handshakestate)) in
        {270}let v_819: bitstring = catch-fail(handshakestateunpack(hs_818)) in
        {271}let v_820: bitstring = catch-fail((empty,empty,empty)) in
        {272}let v_821: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_819))) in
        {273}let v_822: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_819))) in
        {274}let v_823: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_822),(if (success?(5-proj-7-tuple(v_819)) && success?(2-proj-7-tuple(v_819))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),5-proj-7-tuple(v_819)) else fail-any) else fail-any))) in
        {275}let v_824: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_822),(if (success?(5-proj-7-tuple(v_819)) && success?(2-proj-7-tuple(v_819))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),5-proj-7-tuple(v_819)) else fail-any) else fail-any))) in
        {276}let v_825: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_822),(if (success?(5-proj-7-tuple(v_819)) && success?(2-proj-7-tuple(v_819))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),5-proj-7-tuple(v_819)) else fail-any) else fail-any))) in
        {277}let v_826: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_819)) && success?(2-proj-7-tuple(v_819))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),5-proj-7-tuple(v_819)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_822))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (v_823,v_824,v_825) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {278}let v_827: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_819)) && success?(2-proj-7-tuple(v_819))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),5-proj-7-tuple(v_819)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_819))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_826)) then cipherstatepack(2-proj-3-tuple(v_826),minnonce) else fail-any),1-proj-3-tuple(v_826),3-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any)) in
        {279}let v_828: bitstring = catch-fail(symmetricstateunpack(v_827)) in
        {280}let v_829: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_828))) in
        {281}let v_830: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_829),2-proj-2-tuple(v_829),3-proj-3-tuple(v_828),msg_c(alice,charlie,sid))) in
        {282}let v_831: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_828))) in
        {283}let v_832: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_829))) && success?(1-proj-3-tuple(v_828))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-2-tuple(v_831))))) then cipherstatepack(1-proj-2-tuple(v_831),increment_nonce(2-proj-2-tuple(v_829))) else fail-any) else fail-any)) in
        {284}let v_833: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_828)) && success?(1-proj-3-tuple(v_828))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then (if not-caught-fail(v_830) then (if not-caught-fail(v_832) then (v_832,v_830) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_834: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_833),2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)))) in
        {286}let v_835: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_833)) && success?(symmetricstatepack(1-proj-2-tuple(v_833),2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
        {287}let v_836: bitstring = catch-fail((if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_835) then (v_835,2-proj-2-tuple(v_833)) else fail-any) else fail-any) else fail-any)) in
        {288}let v_837: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_836),2-proj-7-tuple(v_819),3-proj-7-tuple(v_819),4-proj-7-tuple(v_819),5-proj-7-tuple(v_819),6-proj-7-tuple(v_819),7-proj-7-tuple(v_819))) in
        {289}let v_838: bitstring = catch-fail(concat3(1-proj-3-tuple(v_820),2-proj-3-tuple(v_820),2-proj-2-tuple(v_836))) in
        {290}let v_839: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_836))) in
        {291}let v_840: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_839),zero)) in
        {292}let v_841: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_839),zero)) in
        {293}let v_842: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_839),zero)) in
        {294}let v_843: bitstring = catch-fail((if success?(2-proj-3-tuple(v_839)) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (v_840,v_841,v_842) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_844: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_843)) then cipherstatepack(1-proj-3-tuple(v_843),minnonce) else fail-any)) in
        {296}let v_845: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_843)) then cipherstatepack(2-proj-3-tuple(v_843),minnonce) else fail-any)) in
        {297}let v_846: bitstring = catch-fail((if success?(1-proj-2-tuple(v_836)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (1-proj-2-tuple(v_836),v_844,v_845) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let (hs_847: handshakestate,message_c_848: bitstring,cs1_849: cipherstate,cs2_850: cipherstate) = (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-7-tuple(v_819))))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if not-caught-fail(v_827) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (v_837,v_838,2-proj-3-tuple(v_846),3-proj-3-tuple(v_846)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {299}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {300}insert statestore(alice,charlie,sid,statepack_d(hs_847,cs1_849,cs2_850));
        {301}out(pub, message_c_848)
    ) | (
        {303}!
        {323}get statestore(=alice,=charlie,=sid,statepack_d(hs_851: handshakestate,cs1_852: cipherstate,cs2_853: cipherstate)) in
        {304}let hs_854: handshakestate = handshakestatesetcs(hs_851,cs2_853) in
        {305}in(pub, message_d_855: bitstring);
        {306}let v_856: bitstring = catch-fail(handshakestateunpack(hs_854)) in
        {307}let v_857: bitstring = catch-fail(deconcat3(message_d_855)) in
        {308}let v_858: bool = catch-fail(true) in
        {309}let v_859: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_856))) in
        {310}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_859))) in
        {311}let v_861: aead = catch-fail(decrypt(1-proj-2-tuple(v_860),2-proj-2-tuple(v_860),3-proj-3-tuple(v_859),3-proj-3-tuple(v_857))) in
        {312}let v_862: bitstring = catch-fail(aeadunpack(v_861)) in
        {313}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_859))) in
        {314}let v_864: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_860))) && success?(1-proj-3-tuple(v_859))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then cipherstatepack(1-proj-2-tuple(v_863),increment_nonce(2-proj-2-tuple(v_860))) else fail-any) else fail-any)) in
        {315}let v_865: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_857)) && (success?(3-proj-3-tuple(v_859)) && success?(1-proj-3-tuple(v_859)))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then (if not-caught-fail(v_861) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,3-proj-3-tuple(v_862),1-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_866: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)))) in
        {317}let v_867: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_857)) && success?(symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack(1-proj-3-tuple(v_866),2-proj-3-tuple(v_866),hash(3-proj-3-tuple(v_866),3-proj-3-tuple(v_857))) else fail-any) else fail-any)) in
        {318}let v_868: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_857)) && success?(1-proj-7-tuple(v_856))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,2-proj-3-tuple(v_865),3-proj-3-tuple(v_865)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let v_869: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_868),2-proj-7-tuple(v_856),3-proj-7-tuple(v_856),4-proj-7-tuple(v_856),5-proj-7-tuple(v_856),6-proj-7-tuple(v_856),7-proj-7-tuple(v_856))) in
        {320}let (hs_870: handshakestate,plaintext_d_871: bitstring,valid_872: bool) = (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-7-tuple(v_856))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_858) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (v_858 && 3-proj-3-tuple(v_868)) then (if not-caught-fail(v_869) then (v_869,2-proj-3-tuple(v_868),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {321}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_871);
        {322}insert statestore(alice,charlie,sid,statepack_e(hs_870,cs1_852,handshakestategetcs(hs_870)))
    ) | (
        {324}!
        {342}get statestore(=alice,=charlie,=sid,statepack_e(hs_873: handshakestate,cs1_874: cipherstate,cs2_875: cipherstate)) in
        {325}let hs_876: handshakestate = handshakestatesetcs(hs_873,cs1_874) in
        {326}let v_877: bitstring = catch-fail(handshakestateunpack(hs_876)) in
        {327}let v_878: bitstring = catch-fail((empty,empty,empty)) in
        {328}let v_879: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_877))) in
        {329}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {330}let v_881: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_880),2-proj-2-tuple(v_880),3-proj-3-tuple(v_879),msg_e(alice,charlie,sid))) in
        {331}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {332}let v_883: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_880))) && success?(1-proj-3-tuple(v_879))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then cipherstatepack(1-proj-2-tuple(v_882),increment_nonce(2-proj-2-tuple(v_880))) else fail-any) else fail-any)) in
        {333}let v_884: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_879)) && success?(1-proj-3-tuple(v_879))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_883) then (v_883,v_881) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let v_885: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_884),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) in
        {335}let v_886: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_884)) && success?(symmetricstatepack(1-proj-2-tuple(v_884),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_885),hash(3-proj-3-tuple(v_885),2-proj-2-tuple(v_884))) else fail-any) else fail-any)) in
        {336}let v_887: bitstring = catch-fail((if success?(1-proj-7-tuple(v_877)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then (if not-caught-fail(v_886) then (v_886,2-proj-2-tuple(v_884)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_888: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_887),2-proj-7-tuple(v_877),3-proj-7-tuple(v_877),4-proj-7-tuple(v_877),5-proj-7-tuple(v_877),6-proj-7-tuple(v_877),7-proj-7-tuple(v_877))) in
        {338}let v_889: bitstring = catch-fail(concat3(1-proj-3-tuple(v_878),2-proj-3-tuple(v_878),2-proj-2-tuple(v_887))) in
        {339}let (hs_890: handshakestate,message_e_891: bitstring) = (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-7-tuple(v_877))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (v_888,v_889) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {340}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {341}out(pub, message_e_891)
    ) | (
        {343}event LeakS(phase0,alice);
        {344}out(pub, key_s(alice))
    ) | (
        {345}phase 1;
        {346}event LeakS(phase1,alice);
        {347}out(pub, key_s(alice))
    )
) | (
    {348}let s_892: keypair = keypairpack(empty,empty) in
    {349}out(pub, getpublickey(s_892));
    (
        {350}let e_893: keypair = keypairpack(empty,empty) in
        {351}let rs_894: key = empty in
        {352}let re_895: key = empty in
        {353}let v_896: bitstring = catch-fail(hash(somename,empty)) in
        {354}let v_897: key = catch-fail(v_896) in
        {355}let v_898: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {356}let v_899: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then symmetricstatepack(v_898,v_897,v_896) else fail-any) else fail-any) else fail-any))) in
        {357}let v_900: symmetricstate = catch-fail((if success?((if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then symmetricstatepack(v_898,v_897,v_896) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),empty)) else fail-any) else fail-any)) in
        {358}let hs_901: handshakestate = (if not-caught-fail(v_900) then handshakestatepack(v_900,s_892,e_893,rs_894,re_895,empty,false) else fail-any) in
        {359}insert statestore(bob,alice,sid,statepack_a(hs_901))
    ) | (
        {393}get statestore(=bob,=alice,=sid,statepack_a(hs_902: handshakestate)) in
        {360}in(pub, message_a_903: bitstring);
        {361}let v_904: bitstring = catch-fail(handshakestateunpack(hs_902)) in
        {362}let v_905: bitstring = catch-fail(deconcat3(message_a_903)) in
        {363}let v_906: bool = catch-fail(true) in
        {364}let v_907: key = catch-fail(1-proj-3-tuple(v_905)) in
        {365}let v_908: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_904))) in
        {366}let v_909: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_904)) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_908),hash(3-proj-3-tuple(v_908),v_907)) else fail-any) else fail-any)) in
        {367}let v_910: bitstring = catch-fail(symmetricstateunpack(v_909)) in
        {368}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {369}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),2-proj-3-tuple(v_905))) in
        {370}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {371}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {372}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {373}let v_916: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_905)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {375}let v_918: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_905)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),2-proj-3-tuple(v_905))) else fail-any) else fail-any)) in
        {376}let v_919: bitstring = catch-fail((if success?(2-proj-3-tuple(v_905)) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_920: key = catch-fail(2-proj-3-tuple(v_919)) in
        {378}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_919))) in
        {379}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {380}let v_923: aead = catch-fail(decrypt(1-proj-2-tuple(v_922),2-proj-2-tuple(v_922),3-proj-3-tuple(v_921),3-proj-3-tuple(v_905))) in
        {381}let v_924: bitstring = catch-fail(aeadunpack(v_923)) in
        {382}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {383}let v_926: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_922))) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then cipherstatepack(1-proj-2-tuple(v_925),increment_nonce(2-proj-2-tuple(v_922))) else fail-any) else fail-any)) in
        {384}let v_927: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_905)) && (success?(3-proj-3-tuple(v_921)) && success?(1-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if not-caught-fail(v_926) then (v_926,3-proj-3-tuple(v_924),1-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {385}let v_928: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) in
        {386}let v_929: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_905)) && success?(symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then symmetricstatepack(1-proj-3-tuple(v_928),2-proj-3-tuple(v_928),hash(3-proj-3-tuple(v_928),3-proj-3-tuple(v_905))) else fail-any) else fail-any)) in
        {387}let v_930: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_905)) && success?(1-proj-3-tuple(v_919))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_929) then (v_929,2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {388}let v_931: key = catch-fail(dhexp(key_s(alice),g)) in
        {389}let v_932: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_930),2-proj-7-tuple(v_904),3-proj-7-tuple(v_904),v_920,v_907,6-proj-7-tuple(v_904),7-proj-7-tuple(v_904))) in
        {390}let (hs_933: handshakestate,plaintext_a: bitstring,valid_934: bool) = (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-7-tuple(v_904))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if ((3-proj-3-tuple(v_919) && 3-proj-3-tuple(v_930)) && (v_920 = getpublickey((if not-caught-fail(v_931) then keypairpack(v_931,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_932) then (v_932,2-proj-3-tuple(v_930),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {392}insert statestore(bob,alice,sid,statepack_b(hs_933))
    ) | (
        {441}get statestore(=bob,=alice,=sid,statepack_b(hs_935: handshakestate)) in
        {394}let v_936: bitstring = catch-fail(handshakestateunpack(hs_935)) in
        {395}let v_937: bitstring = catch-fail((empty,empty,empty)) in
        {396}let v_938: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {397}let v_939: keypair = catch-fail((if not-caught-fail(v_938) then keypairpack(v_938,key_e(bob,alice,sid)) else fail-any)) in
        {398}let v_940: bitstring = catch-fail(getpublickey(v_939)) in
        {399}let v_941: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_936))) in
        {400}let v_942: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_936)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),hash(3-proj-3-tuple(v_941),v_940)) else fail-any) else fail-any)) in
        {401}let v_943: bitstring = catch-fail(keypairunpack(v_939)) in
        {402}let v_944: bitstring = catch-fail(symmetricstateunpack(v_942)) in
        {403}let v_945: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_944),(if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then dhexp(2-proj-2-tuple(v_943),5-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {404}let v_946: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_944),(if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then dhexp(2-proj-2-tuple(v_943),5-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {405}let v_947: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_944),(if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then dhexp(2-proj-2-tuple(v_943),5-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {406}let v_948: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then dhexp(2-proj-2-tuple(v_943),5-proj-7-tuple(v_936)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_944))) then (if not-caught-fail(v_945) then (if not-caught-fail(v_946) then (if not-caught-fail(v_947) then (v_945,v_946,v_947) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_949: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then dhexp(2-proj-2-tuple(v_943),5-proj-7-tuple(v_936)) else fail-any) else fail-any)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_948)) then cipherstatepack(2-proj-3-tuple(v_948),minnonce) else fail-any),1-proj-3-tuple(v_948),3-proj-3-tuple(v_944)) else fail-any) else fail-any) else fail-any)) in
        {408}let v_950: key = catch-fail(dhexp(key_s(bob),g)) in
        {409}let v_951: keypair = catch-fail((if not-caught-fail(v_950) then keypairpack(v_950,key_s(bob)) else fail-any)) in
        {410}let v_952: bitstring = catch-fail(symmetricstateunpack(v_949)) in
        {411}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
        {412}let v_954: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_953),2-proj-2-tuple(v_953),3-proj-3-tuple(v_952),getpublickey(v_951))) in
        {413}let v_955: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
        {414}let v_956: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_953))) && success?(1-proj-3-tuple(v_952))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then cipherstatepack(1-proj-2-tuple(v_955),increment_nonce(2-proj-2-tuple(v_953))) else fail-any) else fail-any)) in
        {415}let v_957: bitstring = catch-fail((if (success?(getpublickey(v_951)) && (success?(3-proj-3-tuple(v_952)) && success?(1-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_956) then (v_956,v_954) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {416}let v_958: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_957),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) in
        {417}let v_959: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_957)) && success?(symmetricstatepack(1-proj-2-tuple(v_957),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_958),hash(3-proj-3-tuple(v_958),2-proj-2-tuple(v_957))) else fail-any) else fail-any)) in
        {418}let v_960: bitstring = catch-fail((if success?(getpublickey(v_951)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then (if not-caught-fail(v_959) then (v_959,2-proj-2-tuple(v_957)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {419}let v_961: bitstring = catch-fail(keypairunpack(v_951)) in
        {420}let v_962: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_960))) in
        {421}let v_963: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_962),(if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then dhexp(2-proj-2-tuple(v_961),5-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {422}let v_964: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_962),(if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then dhexp(2-proj-2-tuple(v_961),5-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {423}let v_965: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_962),(if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then dhexp(2-proj-2-tuple(v_961),5-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {424}let v_966: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then dhexp(2-proj-2-tuple(v_961),5-proj-7-tuple(v_936)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_962))) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (v_963,v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_967: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_936)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then dhexp(2-proj-2-tuple(v_961),5-proj-7-tuple(v_936)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_960))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_966)) then cipherstatepack(2-proj-3-tuple(v_966),minnonce) else fail-any),1-proj-3-tuple(v_966),3-proj-3-tuple(v_962)) else fail-any) else fail-any) else fail-any)) in
        {426}let v_968: bitstring = catch-fail(symmetricstateunpack(v_967)) in
        {427}let v_969: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_968))) in
        {428}let v_970: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_969),2-proj-2-tuple(v_969),3-proj-3-tuple(v_968),msg_b(bob,alice,sid))) in
        {429}let v_971: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_968))) in
        {430}let v_972: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_969))) && success?(1-proj-3-tuple(v_968))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-2-tuple(v_971))))) then cipherstatepack(1-proj-2-tuple(v_971),increment_nonce(2-proj-2-tuple(v_969))) else fail-any) else fail-any)) in
        {431}let v_973: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_968)) && success?(1-proj-3-tuple(v_968))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then (if not-caught-fail(v_970) then (if not-caught-fail(v_972) then (v_972,v_970) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {432}let v_974: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_973),2-proj-3-tuple(v_968),3-proj-3-tuple(v_968)))) in
        {433}let v_975: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_973)) && success?(symmetricstatepack(1-proj-2-tuple(v_973),2-proj-3-tuple(v_968),3-proj-3-tuple(v_968)))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then symmetricstatepack(1-proj-3-tuple(v_974),2-proj-3-tuple(v_974),hash(3-proj-3-tuple(v_974),2-proj-2-tuple(v_973))) else fail-any) else fail-any)) in
        {434}let v_976: bitstring = catch-fail((if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-2-tuple(v_973))))) then (if not-caught-fail(v_975) then (v_975,2-proj-2-tuple(v_973)) else fail-any) else fail-any) else fail-any)) in
        {435}let v_977: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_976),v_951,v_939,4-proj-7-tuple(v_936),5-proj-7-tuple(v_936),6-proj-7-tuple(v_936),7-proj-7-tuple(v_936))) in
        {436}let v_978: bitstring = catch-fail(concat3(v_940,2-proj-2-tuple(v_960),2-proj-2-tuple(v_976))) in
        {437}let (hs_979: handshakestate,message_b_980: bitstring) = (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-7-tuple(v_936))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_940) then (if not-caught-fail(v_942) then (if not-caught-fail(v_949) then (if not-caught-fail(v_951) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-2-tuple(v_960))))) then (if not-caught-fail(v_967) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then (v_977,v_978) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {438}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {439}insert statestore(bob,alice,sid,statepack_c(hs_979));
        {440}out(pub, message_b_980)
    ) | (
        {475}get statestore(=bob,=alice,=sid,statepack_c(hs_981: handshakestate)) in
        {442}in(pub, message_c_982: bitstring);
        {443}let v_983: bitstring = catch-fail(handshakestateunpack(hs_981)) in
        {444}let v_984: bitstring = catch-fail(deconcat3(message_c_982)) in
        {445}let v_985: bool = catch-fail(true) in
        {446}let v_986: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_983))) in
        {447}let v_987: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_983))) in
        {448}let v_988: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_987),(if (success?(4-proj-7-tuple(v_983)) && success?(3-proj-7-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then dhexp(2-proj-2-tuple(v_986),4-proj-7-tuple(v_983)) else fail-any) else fail-any))) in
        {449}let v_989: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_987),(if (success?(4-proj-7-tuple(v_983)) && success?(3-proj-7-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then dhexp(2-proj-2-tuple(v_986),4-proj-7-tuple(v_983)) else fail-any) else fail-any))) in
        {450}let v_990: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_987),(if (success?(4-proj-7-tuple(v_983)) && success?(3-proj-7-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then dhexp(2-proj-2-tuple(v_986),4-proj-7-tuple(v_983)) else fail-any) else fail-any))) in
        {451}let v_991: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_983)) && success?(3-proj-7-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then dhexp(2-proj-2-tuple(v_986),4-proj-7-tuple(v_983)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_987))) then (if not-caught-fail(v_988) then (if not-caught-fail(v_989) then (if not-caught-fail(v_990) then (v_988,v_989,v_990) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {452}let v_992: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_983)) && success?(3-proj-7-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then dhexp(2-proj-2-tuple(v_986),4-proj-7-tuple(v_983)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_983))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_991)) then cipherstatepack(2-proj-3-tuple(v_991),minnonce) else fail-any),1-proj-3-tuple(v_991),3-proj-3-tuple(v_987)) else fail-any) else fail-any) else fail-any)) in
        {453}let v_993: bitstring = catch-fail(symmetricstateunpack(v_992)) in
        {454}let v_994: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_993))) in
        {455}let v_995: aead = catch-fail(decrypt(1-proj-2-tuple(v_994),2-proj-2-tuple(v_994),3-proj-3-tuple(v_993),3-proj-3-tuple(v_984))) in
        {456}let v_996: bitstring = catch-fail(aeadunpack(v_995)) in
        {457}let v_997: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_993))) in
        {458}let v_998: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_994))) && success?(1-proj-3-tuple(v_993))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then cipherstatepack(1-proj-2-tuple(v_997),increment_nonce(2-proj-2-tuple(v_994))) else fail-any) else fail-any)) in
        {459}let v_999: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_984)) && (success?(3-proj-3-tuple(v_993)) && success?(1-proj-3-tuple(v_993)))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then (if not-caught-fail(v_995) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_998) then (v_998,3-proj-3-tuple(v_996),1-proj-3-tuple(v_996)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_1000: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_999),2-proj-3-tuple(v_993),3-proj-3-tuple(v_993)))) in
        {461}let v_1001: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_984)) && success?(symmetricstatepack(1-proj-3-tuple(v_999),2-proj-3-tuple(v_993),3-proj-3-tuple(v_993)))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_1000),hash(3-proj-3-tuple(v_1000),3-proj-3-tuple(v_984))) else fail-any) else fail-any)) in
        {462}let v_1002: bitstring = catch-fail((if success?(3-proj-3-tuple(v_984)) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1001) then (v_1001,2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_1003: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1002),2-proj-7-tuple(v_983),3-proj-7-tuple(v_983),4-proj-7-tuple(v_983),5-proj-7-tuple(v_983),6-proj-7-tuple(v_983),7-proj-7-tuple(v_983))) in
        {464}let v_1004: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1002))) in
        {465}let v_1005: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1004),zero)) in
        {466}let v_1006: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1004),zero)) in
        {467}let v_1007: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1004),zero)) in
        {468}let v_1008: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1004)) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1006) then (if not-caught-fail(v_1007) then (v_1005,v_1006,v_1007) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {469}let v_1009: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1008)) then cipherstatepack(1-proj-3-tuple(v_1008),minnonce) else fail-any)) in
        {470}let v_1010: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1008)) then cipherstatepack(2-proj-3-tuple(v_1008),minnonce) else fail-any)) in
        {471}let v_1011: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1002)) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if not-caught-fail(v_1009) then (if not-caught-fail(v_1010) then (1-proj-3-tuple(v_1002),v_1009,v_1010) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {472}let (hs_1012: handshakestate,plaintext_c: bitstring,valid_1013: bool,cs1_1014: cipherstate,cs2_1015: cipherstate) = (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-7-tuple(v_983))))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then (if not-caught-fail(v_985) then (if not-caught-fail(v_992) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (v_985 && 3-proj-3-tuple(v_1002)) then (if not-caught-fail(v_1003) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (v_1003,2-proj-3-tuple(v_1002),true,2-proj-3-tuple(v_1011),3-proj-3-tuple(v_1011)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {473}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {474}insert statestore(bob,alice,sid,statepack_d(hs_1012,cs1_1014,cs2_1015))
    ) | (
        {476}!
        {495}get statestore(=bob,=alice,=sid,statepack_d(hs_1016: handshakestate,cs1_1017: cipherstate,cs2_1018: cipherstate)) in
        {477}let hs_1019: handshakestate = handshakestatesetcs(hs_1016,cs2_1018) in
        {478}let v_1020: bitstring = catch-fail(handshakestateunpack(hs_1019)) in
        {479}let v_1021: bitstring = catch-fail((empty,empty,empty)) in
        {480}let v_1022: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1020))) in
        {481}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {482}let v_1024: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1023),2-proj-2-tuple(v_1023),3-proj-3-tuple(v_1022),msg_d(bob,alice,sid))) in
        {483}let v_1025: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {484}let v_1026: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1023))) && success?(1-proj-3-tuple(v_1022))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then cipherstatepack(1-proj-2-tuple(v_1025),increment_nonce(2-proj-2-tuple(v_1023))) else fail-any) else fail-any)) in
        {485}let v_1027: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1022)) && success?(1-proj-3-tuple(v_1022))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1026) then (v_1026,v_1024) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1028: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1027),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) in
        {487}let v_1029: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1027)) && success?(symmetricstatepack(1-proj-2-tuple(v_1027),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1028),hash(3-proj-3-tuple(v_1028),2-proj-2-tuple(v_1027))) else fail-any) else fail-any)) in
        {488}let v_1030: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1020)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then (if not-caught-fail(v_1029) then (v_1029,2-proj-2-tuple(v_1027)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {489}let v_1031: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1030),2-proj-7-tuple(v_1020),3-proj-7-tuple(v_1020),4-proj-7-tuple(v_1020),5-proj-7-tuple(v_1020),6-proj-7-tuple(v_1020),7-proj-7-tuple(v_1020))) in
        {490}let v_1032: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1021),2-proj-3-tuple(v_1021),2-proj-2-tuple(v_1030))) in
        {491}let (hs_1033: handshakestate,message_d_1034: bitstring) = (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-7-tuple(v_1020))))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then (v_1031,v_1032) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {492}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {493}insert statestore(bob,alice,sid,statepack_e(hs_1033,cs1_1017,handshakestategetcs(hs_1033)));
        {494}out(pub, message_d_1034)
    ) | (
        {496}!
        {516}get statestore(=bob,=alice,=sid,statepack_e(hs_1035: handshakestate,cs1_1036: cipherstate,cs2_1037: cipherstate)) in
        {497}let hs_1038: handshakestate = handshakestatesetcs(hs_1035,cs1_1036) in
        {498}in(pub, message_e_1039: bitstring);
        {499}let v_1040: bitstring = catch-fail(handshakestateunpack(hs_1038)) in
        {500}let v_1041: bitstring = catch-fail(deconcat3(message_e_1039)) in
        {501}let v_1042: bool = catch-fail(true) in
        {502}let v_1043: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1040))) in
        {503}let v_1044: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1043))) in
        {504}let v_1045: aead = catch-fail(decrypt(1-proj-2-tuple(v_1044),2-proj-2-tuple(v_1044),3-proj-3-tuple(v_1043),3-proj-3-tuple(v_1041))) in
        {505}let v_1046: bitstring = catch-fail(aeadunpack(v_1045)) in
        {506}let v_1047: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1043))) in
        {507}let v_1048: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1044))) && success?(1-proj-3-tuple(v_1043))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then cipherstatepack(1-proj-2-tuple(v_1047),increment_nonce(2-proj-2-tuple(v_1044))) else fail-any) else fail-any)) in
        {508}let v_1049: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && (success?(3-proj-3-tuple(v_1043)) && success?(1-proj-3-tuple(v_1043)))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then (if not-caught-fail(v_1045) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if not-caught-fail(v_1048) then (v_1048,3-proj-3-tuple(v_1046),1-proj-3-tuple(v_1046)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_1050: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1049),2-proj-3-tuple(v_1043),3-proj-3-tuple(v_1043)))) in
        {510}let v_1051: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && success?(symmetricstatepack(1-proj-3-tuple(v_1049),2-proj-3-tuple(v_1043),3-proj-3-tuple(v_1043)))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1050),hash(3-proj-3-tuple(v_1050),3-proj-3-tuple(v_1041))) else fail-any) else fail-any)) in
        {511}let v_1052: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && success?(1-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then (if not-caught-fail(v_1051) then (v_1051,2-proj-3-tuple(v_1049),3-proj-3-tuple(v_1049)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_1053: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1052),2-proj-7-tuple(v_1040),3-proj-7-tuple(v_1040),4-proj-7-tuple(v_1040),5-proj-7-tuple(v_1040),6-proj-7-tuple(v_1040),7-proj-7-tuple(v_1040))) in
        {513}let (hs_1054: handshakestate,plaintext_e: bitstring,valid_1055: bool) = (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-7-tuple(v_1040))))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if not-caught-fail(v_1042) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (v_1042 && 3-proj-3-tuple(v_1052)) then (if not-caught-fail(v_1053) then (v_1053,2-proj-3-tuple(v_1052),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {514}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {515}event RecvEnd(valid_1055)
    ) | (
        {517}event LeakS(phase0,bob);
        {518}out(pub, key_s(bob))
    ) | (
        {519}phase 1;
        {520}event LeakS(phase1,bob);
        {521}out(pub, key_s(bob))
    )
) | (
    {522}let s_1056: keypair = keypairpack(empty,empty) in
    {523}out(pub, getpublickey(s_1056));
    (
        {524}let e_1057: keypair = keypairpack(empty,empty) in
        {525}let rs_1058: key = empty in
        {526}let re_1059: key = empty in
        {527}let v_1060: bitstring = catch-fail(hash(somename,empty)) in
        {528}let v_1061: key = catch-fail(v_1060) in
        {529}let v_1062: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {530}let v_1063: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then symmetricstatepack(v_1062,v_1061,v_1060) else fail-any) else fail-any) else fail-any))) in
        {531}let v_1064: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then symmetricstatepack(v_1062,v_1061,v_1060) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then symmetricstatepack(1-proj-3-tuple(v_1063),2-proj-3-tuple(v_1063),hash(3-proj-3-tuple(v_1063),empty)) else fail-any) else fail-any)) in
        {532}let hs_1065: handshakestate = (if not-caught-fail(v_1064) then handshakestatepack(v_1064,s_1056,e_1057,rs_1058,re_1059,empty,false) else fail-any) in
        {533}insert statestore(bob,charlie,sid,statepack_a(hs_1065))
    ) | (
        {567}get statestore(=bob,=charlie,=sid,statepack_a(hs_1066: handshakestate)) in
        {534}in(pub, message_a_1067: bitstring);
        {535}let v_1068: bitstring = catch-fail(handshakestateunpack(hs_1066)) in
        {536}let v_1069: bitstring = catch-fail(deconcat3(message_a_1067)) in
        {537}let v_1070: bool = catch-fail(true) in
        {538}let v_1071: key = catch-fail(1-proj-3-tuple(v_1069)) in
        {539}let v_1072: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1068))) in
        {540}let v_1073: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1068)) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then symmetricstatepack(1-proj-3-tuple(v_1072),2-proj-3-tuple(v_1072),hash(3-proj-3-tuple(v_1072),v_1071)) else fail-any) else fail-any)) in
        {541}let v_1074: bitstring = catch-fail(symmetricstateunpack(v_1073)) in
        {542}let v_1075: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1074))) in
        {543}let v_1076: aead = catch-fail(decrypt(1-proj-2-tuple(v_1075),2-proj-2-tuple(v_1075),3-proj-3-tuple(v_1074),2-proj-3-tuple(v_1069))) in
        {544}let v_1077: bitstring = catch-fail(aeadunpack(v_1076)) in
        {545}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1074))) in
        {546}let v_1079: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1075))) && success?(1-proj-3-tuple(v_1074))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then cipherstatepack(1-proj-2-tuple(v_1078),increment_nonce(2-proj-2-tuple(v_1075))) else fail-any) else fail-any)) in
        {547}let v_1080: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1069)) && (success?(3-proj-3-tuple(v_1074)) && success?(1-proj-3-tuple(v_1074)))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if not-caught-fail(v_1079) then (v_1079,3-proj-3-tuple(v_1077),1-proj-3-tuple(v_1077)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1081: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1080),2-proj-3-tuple(v_1074),3-proj-3-tuple(v_1074)))) in
        {549}let v_1082: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1069)) && success?(symmetricstatepack(1-proj-3-tuple(v_1080),2-proj-3-tuple(v_1074),3-proj-3-tuple(v_1074)))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then symmetricstatepack(1-proj-3-tuple(v_1081),2-proj-3-tuple(v_1081),hash(3-proj-3-tuple(v_1081),2-proj-3-tuple(v_1069))) else fail-any) else fail-any)) in
        {550}let v_1083: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1069)) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1084: key = catch-fail(2-proj-3-tuple(v_1083)) in
        {552}let v_1085: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1083))) in
        {553}let v_1086: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {554}let v_1087: aead = catch-fail(decrypt(1-proj-2-tuple(v_1086),2-proj-2-tuple(v_1086),3-proj-3-tuple(v_1085),3-proj-3-tuple(v_1069))) in
        {555}let v_1088: bitstring = catch-fail(aeadunpack(v_1087)) in
        {556}let v_1089: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {557}let v_1090: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1086))) && success?(1-proj-3-tuple(v_1085))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then cipherstatepack(1-proj-2-tuple(v_1089),increment_nonce(2-proj-2-tuple(v_1086))) else fail-any) else fail-any)) in
        {558}let v_1091: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1069)) && (success?(3-proj-3-tuple(v_1085)) && success?(1-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-2-tuple(v_1086))))) then (if not-caught-fail(v_1087) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-3-tuple(v_1088))))) then (if not-caught-fail(v_1090) then (v_1090,3-proj-3-tuple(v_1088),1-proj-3-tuple(v_1088)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1092: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) in
        {560}let v_1093: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1069)) && success?(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1092),hash(3-proj-3-tuple(v_1092),3-proj-3-tuple(v_1069))) else fail-any) else fail-any)) in
        {561}let v_1094: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1069)) && success?(1-proj-3-tuple(v_1083))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then (if not-caught-fail(v_1093) then (v_1093,2-proj-3-tuple(v_1091),3-proj-3-tuple(v_1091)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {562}let v_1095: key = catch-fail(dhexp(key_s(charlie),g)) in
        {563}let v_1096: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1094),2-proj-7-tuple(v_1068),3-proj-7-tuple(v_1068),v_1084,v_1071,6-proj-7-tuple(v_1068),7-proj-7-tuple(v_1068))) in
        {564}let (hs_1097: handshakestate,plaintext_a_1098: bitstring,valid_1099: bool) = (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-7-tuple(v_1068))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1073) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1084) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if ((3-proj-3-tuple(v_1083) && 3-proj-3-tuple(v_1094)) && (v_1084 = getpublickey((if not-caught-fail(v_1095) then keypairpack(v_1095,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1096) then (v_1096,2-proj-3-tuple(v_1094),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {565}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1098);
        {566}insert statestore(bob,charlie,sid,statepack_b(hs_1097))
    ) | (
        {615}get statestore(=bob,=charlie,=sid,statepack_b(hs_1100: handshakestate)) in
        {568}let v_1101: bitstring = catch-fail(handshakestateunpack(hs_1100)) in
        {569}let v_1102: bitstring = catch-fail((empty,empty,empty)) in
        {570}let v_1103: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {571}let v_1104: keypair = catch-fail((if not-caught-fail(v_1103) then keypairpack(v_1103,key_e(bob,charlie,sid)) else fail-any)) in
        {572}let v_1105: bitstring = catch-fail(getpublickey(v_1104)) in
        {573}let v_1106: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1101))) in
        {574}let v_1107: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1106),hash(3-proj-3-tuple(v_1106),v_1105)) else fail-any) else fail-any)) in
        {575}let v_1108: bitstring = catch-fail(keypairunpack(v_1104)) in
        {576}let v_1109: bitstring = catch-fail(symmetricstateunpack(v_1107)) in
        {577}let v_1110: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1109),(if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then dhexp(2-proj-2-tuple(v_1108),5-proj-7-tuple(v_1101)) else fail-any) else fail-any))) in
        {578}let v_1111: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1109),(if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then dhexp(2-proj-2-tuple(v_1108),5-proj-7-tuple(v_1101)) else fail-any) else fail-any))) in
        {579}let v_1112: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1109),(if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then dhexp(2-proj-2-tuple(v_1108),5-proj-7-tuple(v_1101)) else fail-any) else fail-any))) in
        {580}let v_1113: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then dhexp(2-proj-2-tuple(v_1108),5-proj-7-tuple(v_1101)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1109))) then (if not-caught-fail(v_1110) then (if not-caught-fail(v_1111) then (if not-caught-fail(v_1112) then (v_1110,v_1111,v_1112) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1114: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then dhexp(2-proj-2-tuple(v_1108),5-proj-7-tuple(v_1101)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-3-tuple(v_1113))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1113)) then cipherstatepack(2-proj-3-tuple(v_1113),minnonce) else fail-any),1-proj-3-tuple(v_1113),3-proj-3-tuple(v_1109)) else fail-any) else fail-any) else fail-any)) in
        {582}let v_1115: key = catch-fail(dhexp(key_s(bob),g)) in
        {583}let v_1116: keypair = catch-fail((if not-caught-fail(v_1115) then keypairpack(v_1115,key_s(bob)) else fail-any)) in
        {584}let v_1117: bitstring = catch-fail(symmetricstateunpack(v_1114)) in
        {585}let v_1118: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1117))) in
        {586}let v_1119: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1118),2-proj-2-tuple(v_1118),3-proj-3-tuple(v_1117),getpublickey(v_1116))) in
        {587}let v_1120: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1117))) in
        {588}let v_1121: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1118))) && success?(1-proj-3-tuple(v_1117))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then cipherstatepack(1-proj-2-tuple(v_1120),increment_nonce(2-proj-2-tuple(v_1118))) else fail-any) else fail-any)) in
        {589}let v_1122: bitstring = catch-fail((if (success?(getpublickey(v_1116)) && (success?(3-proj-3-tuple(v_1117)) && success?(1-proj-3-tuple(v_1117)))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-2-tuple(v_1118))))) then (if not-caught-fail(v_1119) then (if not-caught-fail(v_1121) then (v_1121,v_1119) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {590}let v_1123: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1122),2-proj-3-tuple(v_1117),3-proj-3-tuple(v_1117)))) in
        {591}let v_1124: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1122)) && success?(symmetricstatepack(1-proj-2-tuple(v_1122),2-proj-3-tuple(v_1117),3-proj-3-tuple(v_1117)))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then symmetricstatepack(1-proj-3-tuple(v_1123),2-proj-3-tuple(v_1123),hash(3-proj-3-tuple(v_1123),2-proj-2-tuple(v_1122))) else fail-any) else fail-any)) in
        {592}let v_1125: bitstring = catch-fail((if success?(getpublickey(v_1116)) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-2-tuple(v_1122))))) then (if not-caught-fail(v_1124) then (v_1124,2-proj-2-tuple(v_1122)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1126: bitstring = catch-fail(keypairunpack(v_1116)) in
        {594}let v_1127: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1125))) in
        {595}let v_1128: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1127),(if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then dhexp(2-proj-2-tuple(v_1126),5-proj-7-tuple(v_1101)) else fail-any) else fail-any))) in
        {596}let v_1129: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1127),(if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then dhexp(2-proj-2-tuple(v_1126),5-proj-7-tuple(v_1101)) else fail-any) else fail-any))) in
        {597}let v_1130: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1127),(if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then dhexp(2-proj-2-tuple(v_1126),5-proj-7-tuple(v_1101)) else fail-any) else fail-any))) in
        {598}let v_1131: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then dhexp(2-proj-2-tuple(v_1126),5-proj-7-tuple(v_1101)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1127))) then (if not-caught-fail(v_1128) then (if not-caught-fail(v_1129) then (if not-caught-fail(v_1130) then (v_1128,v_1129,v_1130) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1132: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then dhexp(2-proj-2-tuple(v_1126),5-proj-7-tuple(v_1101)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1125))) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-3-tuple(v_1127))))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1131)) then cipherstatepack(2-proj-3-tuple(v_1131),minnonce) else fail-any),1-proj-3-tuple(v_1131),3-proj-3-tuple(v_1127)) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1133: bitstring = catch-fail(symmetricstateunpack(v_1132)) in
        {601}let v_1134: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1133))) in
        {602}let v_1135: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1134),2-proj-2-tuple(v_1134),3-proj-3-tuple(v_1133),msg_b(bob,charlie,sid))) in
        {603}let v_1136: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1133))) in
        {604}let v_1137: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1134))) && success?(1-proj-3-tuple(v_1133))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then cipherstatepack(1-proj-2-tuple(v_1136),increment_nonce(2-proj-2-tuple(v_1134))) else fail-any) else fail-any)) in
        {605}let v_1138: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1133)) && success?(1-proj-3-tuple(v_1133))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-2-tuple(v_1134))))) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1137) then (v_1137,v_1135) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {606}let v_1139: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1138),2-proj-3-tuple(v_1133),3-proj-3-tuple(v_1133)))) in
        {607}let v_1140: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1138)) && success?(symmetricstatepack(1-proj-2-tuple(v_1138),2-proj-3-tuple(v_1133),3-proj-3-tuple(v_1133)))) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then symmetricstatepack(1-proj-3-tuple(v_1139),2-proj-3-tuple(v_1139),hash(3-proj-3-tuple(v_1139),2-proj-2-tuple(v_1138))) else fail-any) else fail-any)) in
        {608}let v_1141: bitstring = catch-fail((if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then (if not-caught-fail(v_1140) then (v_1140,2-proj-2-tuple(v_1138)) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1142: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1141),v_1116,v_1104,4-proj-7-tuple(v_1101),5-proj-7-tuple(v_1101),6-proj-7-tuple(v_1101),7-proj-7-tuple(v_1101))) in
        {610}let v_1143: bitstring = catch-fail(concat3(v_1105,2-proj-2-tuple(v_1125),2-proj-2-tuple(v_1141))) in
        {611}let (hs_1144: handshakestate,message_b_1145: bitstring) = (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-7-tuple(v_1101))))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (if not-caught-fail(v_1107) then (if not-caught-fail(v_1114) then (if not-caught-fail(v_1116) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-2-tuple(v_1125))))) then (if not-caught-fail(v_1132) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-2-tuple(v_1141))))) then (if not-caught-fail(v_1142) then (if not-caught-fail(v_1143) then (v_1142,v_1143) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {612}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {613}insert statestore(bob,charlie,sid,statepack_c(hs_1144));
        {614}out(pub, message_b_1145)
    ) | (
        {649}get statestore(=bob,=charlie,=sid,statepack_c(hs_1146: handshakestate)) in
        {616}in(pub, message_c_1147: bitstring);
        {617}let v_1148: bitstring = catch-fail(handshakestateunpack(hs_1146)) in
        {618}let v_1149: bitstring = catch-fail(deconcat3(message_c_1147)) in
        {619}let v_1150: bool = catch-fail(true) in
        {620}let v_1151: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1148))) in
        {621}let v_1152: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1148))) in
        {622}let v_1153: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1152),(if (success?(4-proj-7-tuple(v_1148)) && success?(3-proj-7-tuple(v_1148))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then dhexp(2-proj-2-tuple(v_1151),4-proj-7-tuple(v_1148)) else fail-any) else fail-any))) in
        {623}let v_1154: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1152),(if (success?(4-proj-7-tuple(v_1148)) && success?(3-proj-7-tuple(v_1148))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then dhexp(2-proj-2-tuple(v_1151),4-proj-7-tuple(v_1148)) else fail-any) else fail-any))) in
        {624}let v_1155: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1152),(if (success?(4-proj-7-tuple(v_1148)) && success?(3-proj-7-tuple(v_1148))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then dhexp(2-proj-2-tuple(v_1151),4-proj-7-tuple(v_1148)) else fail-any) else fail-any))) in
        {625}let v_1156: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1148)) && success?(3-proj-7-tuple(v_1148))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then dhexp(2-proj-2-tuple(v_1151),4-proj-7-tuple(v_1148)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1152))) then (if not-caught-fail(v_1153) then (if not-caught-fail(v_1154) then (if not-caught-fail(v_1155) then (v_1153,v_1154,v_1155) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1157: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1148)) && success?(3-proj-7-tuple(v_1148))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then dhexp(2-proj-2-tuple(v_1151),4-proj-7-tuple(v_1148)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1148))) then (if (not-caught-fail(v_1152) && success?(is-true(success?(1-proj-3-tuple(v_1152))))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1156)) then cipherstatepack(2-proj-3-tuple(v_1156),minnonce) else fail-any),1-proj-3-tuple(v_1156),3-proj-3-tuple(v_1152)) else fail-any) else fail-any) else fail-any)) in
        {627}let v_1158: bitstring = catch-fail(symmetricstateunpack(v_1157)) in
        {628}let v_1159: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1158))) in
        {629}let v_1160: aead = catch-fail(decrypt(1-proj-2-tuple(v_1159),2-proj-2-tuple(v_1159),3-proj-3-tuple(v_1158),3-proj-3-tuple(v_1149))) in
        {630}let v_1161: bitstring = catch-fail(aeadunpack(v_1160)) in
        {631}let v_1162: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1158))) in
        {632}let v_1163: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1159))) && success?(1-proj-3-tuple(v_1158))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-2-tuple(v_1162))))) then cipherstatepack(1-proj-2-tuple(v_1162),increment_nonce(2-proj-2-tuple(v_1159))) else fail-any) else fail-any)) in
        {633}let v_1164: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1149)) && (success?(3-proj-3-tuple(v_1158)) && success?(1-proj-3-tuple(v_1158)))) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then (if not-caught-fail(v_1160) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then (if not-caught-fail(v_1163) then (v_1163,3-proj-3-tuple(v_1161),1-proj-3-tuple(v_1161)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {634}let v_1165: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1164),2-proj-3-tuple(v_1158),3-proj-3-tuple(v_1158)))) in
        {635}let v_1166: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1149)) && success?(symmetricstatepack(1-proj-3-tuple(v_1164),2-proj-3-tuple(v_1158),3-proj-3-tuple(v_1158)))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then symmetricstatepack(1-proj-3-tuple(v_1165),2-proj-3-tuple(v_1165),hash(3-proj-3-tuple(v_1165),3-proj-3-tuple(v_1149))) else fail-any) else fail-any)) in
        {636}let v_1167: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1149)) then (if (not-caught-fail(v_1158) && success?(is-true(success?(1-proj-3-tuple(v_1158))))) then (if (not-caught-fail(v_1164) && success?(is-true(success?(1-proj-3-tuple(v_1164))))) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1164),3-proj-3-tuple(v_1164)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {637}let v_1168: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1167),2-proj-7-tuple(v_1148),3-proj-7-tuple(v_1148),4-proj-7-tuple(v_1148),5-proj-7-tuple(v_1148),6-proj-7-tuple(v_1148),7-proj-7-tuple(v_1148))) in
        {638}let v_1169: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1167))) in
        {639}let v_1170: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1169),zero)) in
        {640}let v_1171: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1169),zero)) in
        {641}let v_1172: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1169),zero)) in
        {642}let v_1173: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1169)) then (if not-caught-fail(v_1170) then (if not-caught-fail(v_1171) then (if not-caught-fail(v_1172) then (v_1170,v_1171,v_1172) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {643}let v_1174: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1173)) then cipherstatepack(1-proj-3-tuple(v_1173),minnonce) else fail-any)) in
        {644}let v_1175: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1173)) then cipherstatepack(2-proj-3-tuple(v_1173),minnonce) else fail-any)) in
        {645}let v_1176: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1167)) then (if (not-caught-fail(v_1169) && success?(is-true(success?(1-proj-3-tuple(v_1169))))) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-3-tuple(v_1173))))) then (if not-caught-fail(v_1174) then (if not-caught-fail(v_1175) then (1-proj-3-tuple(v_1167),v_1174,v_1175) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {646}let (hs_1177: handshakestate,plaintext_c_1178: bitstring,valid_1179: bool,cs1_1180: cipherstate,cs2_1181: cipherstate) = (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-7-tuple(v_1148))))) then (if (not-caught-fail(v_1149) && success?(is-true(success?(1-proj-3-tuple(v_1149))))) then (if not-caught-fail(v_1150) then (if not-caught-fail(v_1157) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if (v_1150 && 3-proj-3-tuple(v_1167)) then (if not-caught-fail(v_1168) then (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-3-tuple(v_1176))))) then (v_1168,2-proj-3-tuple(v_1167),true,2-proj-3-tuple(v_1176),3-proj-3-tuple(v_1176)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {647}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1178);
        {648}insert statestore(bob,charlie,sid,statepack_d(hs_1177,cs1_1180,cs2_1181))
    ) | (
        {650}!
        {669}get statestore(=bob,=charlie,=sid,statepack_d(hs_1182: handshakestate,cs1_1183: cipherstate,cs2_1184: cipherstate)) in
        {651}let hs_1185: handshakestate = handshakestatesetcs(hs_1182,cs2_1184) in
        {652}let v_1186: bitstring = catch-fail(handshakestateunpack(hs_1185)) in
        {653}let v_1187: bitstring = catch-fail((empty,empty,empty)) in
        {654}let v_1188: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1186))) in
        {655}let v_1189: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1188))) in
        {656}let v_1190: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1189),2-proj-2-tuple(v_1189),3-proj-3-tuple(v_1188),msg_d(bob,charlie,sid))) in
        {657}let v_1191: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1188))) in
        {658}let v_1192: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1189))) && success?(1-proj-3-tuple(v_1188))) then (if (not-caught-fail(v_1191) && success?(is-true(success?(1-proj-2-tuple(v_1191))))) then cipherstatepack(1-proj-2-tuple(v_1191),increment_nonce(2-proj-2-tuple(v_1189))) else fail-any) else fail-any)) in
        {659}let v_1193: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1188)) && success?(1-proj-3-tuple(v_1188))) then (if (not-caught-fail(v_1189) && success?(is-true(success?(1-proj-2-tuple(v_1189))))) then (if not-caught-fail(v_1190) then (if not-caught-fail(v_1192) then (v_1192,v_1190) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {660}let v_1194: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1193),2-proj-3-tuple(v_1188),3-proj-3-tuple(v_1188)))) in
        {661}let v_1195: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1193)) && success?(symmetricstatepack(1-proj-2-tuple(v_1193),2-proj-3-tuple(v_1188),3-proj-3-tuple(v_1188)))) then (if (not-caught-fail(v_1194) && success?(is-true(success?(1-proj-3-tuple(v_1194))))) then symmetricstatepack(1-proj-3-tuple(v_1194),2-proj-3-tuple(v_1194),hash(3-proj-3-tuple(v_1194),2-proj-2-tuple(v_1193))) else fail-any) else fail-any)) in
        {662}let v_1196: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1186)) then (if (not-caught-fail(v_1188) && success?(is-true(success?(1-proj-3-tuple(v_1188))))) then (if (not-caught-fail(v_1193) && success?(is-true(success?(1-proj-2-tuple(v_1193))))) then (if not-caught-fail(v_1195) then (v_1195,2-proj-2-tuple(v_1193)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {663}let v_1197: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1196),2-proj-7-tuple(v_1186),3-proj-7-tuple(v_1186),4-proj-7-tuple(v_1186),5-proj-7-tuple(v_1186),6-proj-7-tuple(v_1186),7-proj-7-tuple(v_1186))) in
        {664}let v_1198: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1187),2-proj-3-tuple(v_1187),2-proj-2-tuple(v_1196))) in
        {665}let (hs_1199: handshakestate,message_d_1200: bitstring) = (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-7-tuple(v_1186))))) then (if (not-caught-fail(v_1187) && success?(is-true(success?(1-proj-3-tuple(v_1187))))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then (if not-caught-fail(v_1197) then (if not-caught-fail(v_1198) then (v_1197,v_1198) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {666}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {667}insert statestore(bob,charlie,sid,statepack_e(hs_1199,cs1_1183,handshakestategetcs(hs_1199)));
        {668}out(pub, message_d_1200)
    ) | (
        {670}!
        {690}get statestore(=bob,=charlie,=sid,statepack_e(hs_1201: handshakestate,cs1_1202: cipherstate,cs2_1203: cipherstate)) in
        {671}let hs_1204: handshakestate = handshakestatesetcs(hs_1201,cs1_1202) in
        {672}in(pub, message_e_1205: bitstring);
        {673}let v_1206: bitstring = catch-fail(handshakestateunpack(hs_1204)) in
        {674}let v_1207: bitstring = catch-fail(deconcat3(message_e_1205)) in
        {675}let v_1208: bool = catch-fail(true) in
        {676}let v_1209: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1206))) in
        {677}let v_1210: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1209))) in
        {678}let v_1211: aead = catch-fail(decrypt(1-proj-2-tuple(v_1210),2-proj-2-tuple(v_1210),3-proj-3-tuple(v_1209),3-proj-3-tuple(v_1207))) in
        {679}let v_1212: bitstring = catch-fail(aeadunpack(v_1211)) in
        {680}let v_1213: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1209))) in
        {681}let v_1214: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1210))) && success?(1-proj-3-tuple(v_1209))) then (if (not-caught-fail(v_1213) && success?(is-true(success?(1-proj-2-tuple(v_1213))))) then cipherstatepack(1-proj-2-tuple(v_1213),increment_nonce(2-proj-2-tuple(v_1210))) else fail-any) else fail-any)) in
        {682}let v_1215: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1207)) && (success?(3-proj-3-tuple(v_1209)) && success?(1-proj-3-tuple(v_1209)))) then (if (not-caught-fail(v_1210) && success?(is-true(success?(1-proj-2-tuple(v_1210))))) then (if not-caught-fail(v_1211) then (if (not-caught-fail(v_1212) && success?(is-true(success?(1-proj-3-tuple(v_1212))))) then (if not-caught-fail(v_1214) then (v_1214,3-proj-3-tuple(v_1212),1-proj-3-tuple(v_1212)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {683}let v_1216: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1215),2-proj-3-tuple(v_1209),3-proj-3-tuple(v_1209)))) in
        {684}let v_1217: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1207)) && success?(symmetricstatepack(1-proj-3-tuple(v_1215),2-proj-3-tuple(v_1209),3-proj-3-tuple(v_1209)))) then (if (not-caught-fail(v_1216) && success?(is-true(success?(1-proj-3-tuple(v_1216))))) then symmetricstatepack(1-proj-3-tuple(v_1216),2-proj-3-tuple(v_1216),hash(3-proj-3-tuple(v_1216),3-proj-3-tuple(v_1207))) else fail-any) else fail-any)) in
        {685}let v_1218: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1207)) && success?(1-proj-7-tuple(v_1206))) then (if (not-caught-fail(v_1209) && success?(is-true(success?(1-proj-3-tuple(v_1209))))) then (if (not-caught-fail(v_1215) && success?(is-true(success?(1-proj-3-tuple(v_1215))))) then (if not-caught-fail(v_1217) then (v_1217,2-proj-3-tuple(v_1215),3-proj-3-tuple(v_1215)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {686}let v_1219: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1218),2-proj-7-tuple(v_1206),3-proj-7-tuple(v_1206),4-proj-7-tuple(v_1206),5-proj-7-tuple(v_1206),6-proj-7-tuple(v_1206),7-proj-7-tuple(v_1206))) in
        {687}let (hs_1220: handshakestate,plaintext_e_1221: bitstring,valid_1222: bool) = (if (not-caught-fail(v_1206) && success?(is-true(success?(1-proj-7-tuple(v_1206))))) then (if (not-caught-fail(v_1207) && success?(is-true(success?(1-proj-3-tuple(v_1207))))) then (if not-caught-fail(v_1208) then (if (not-caught-fail(v_1218) && success?(is-true(success?(1-proj-3-tuple(v_1218))))) then (if (v_1208 && 3-proj-3-tuple(v_1218)) then (if not-caught-fail(v_1219) then (v_1219,2-proj-3-tuple(v_1218),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {688}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1221);
        {689}event RecvEnd(valid_1222)
    ) | (
        {691}event LeakS(phase0,bob);
        {692}out(pub, key_s(bob))
    ) | (
        {693}phase 1;
        {694}event LeakS(phase1,bob);
        {695}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 180 rules in the queue.
400 rules inserted. The rule base contains 393 rules. 15 rules in the queue.
600 rules inserted. The rule base contains 576 rules. 200 rules in the queue.
800 rules inserted. The rule base contains 759 rules. 135 rules in the queue.
1000 rules inserted. The rule base contains 939 rules. 358 rules in the queue.
1200 rules inserted. The rule base contains 1116 rules. 321 rules in the queue.
1400 rules inserted. The rule base contains 1282 rules. 340 rules in the queue.
1600 rules inserted. The rule base contains 1462 rules. 453 rules in the queue.
1800 rules inserted. The rule base contains 1602 rules. 391 rules in the queue.
2000 rules inserted. The rule base contains 1769 rules. 344 rules in the queue.
2200 rules inserted. The rule base contains 1931 rules. 342 rules in the queue.
2400 rules inserted. The rule base contains 2094 rules. 349 rules in the queue.
2600 rules inserted. The rule base contains 2194 rules. 357 rules in the queue.
2800 rules inserted. The rule base contains 2338 rules. 404 rules in the queue.
3000 rules inserted. The rule base contains 2481 rules. 442 rules in the queue.
3200 rules inserted. The rule base contains 2586 rules. 410 rules in the queue.
3400 rules inserted. The rule base contains 2710 rules. 413 rules in the queue.
3600 rules inserted. The rule base contains 2845 rules. 436 rules in the queue.
3800 rules inserted. The rule base contains 2935 rules. 437 rules in the queue.
4000 rules inserted. The rule base contains 2996 rules. 422 rules in the queue.
4200 rules inserted. The rule base contains 3105 rules. 372 rules in the queue.
4400 rules inserted. The rule base contains 3229 rules. 354 rules in the queue.
4600 rules inserted. The rule base contains 3383 rules. 384 rules in the queue.
4800 rules inserted. The rule base contains 3465 rules. 322 rules in the queue.
5000 rules inserted. The rule base contains 3573 rules. 281 rules in the queue.
5200 rules inserted. The rule base contains 3710 rules. 276 rules in the queue.
5400 rules inserted. The rule base contains 3855 rules. 295 rules in the queue.
5600 rules inserted. The rule base contains 3948 rules. 249 rules in the queue.
5800 rules inserted. The rule base contains 4125 rules. 247 rules in the queue.
6000 rules inserted. The rule base contains 4240 rules. 239 rules in the queue.
6200 rules inserted. The rule base contains 4333 rules. 237 rules in the queue.
6400 rules inserted. The rule base contains 4477 rules. 237 rules in the queue.
6600 rules inserted. The rule base contains 4641 rules. 257 rules in the queue.
6800 rules inserted. The rule base contains 4810 rules. 295 rules in the queue.
7000 rules inserted. The rule base contains 4958 rules. 298 rules in the queue.
7200 rules inserted. The rule base contains 5088 rules. 274 rules in the queue.
7400 rules inserted. The rule base contains 5206 rules. 288 rules in the queue.
7600 rules inserted. The rule base contains 5336 rules. 252 rules in the queue.
7800 rules inserted. The rule base contains 5481 rules. 243 rules in the queue.
8000 rules inserted. The rule base contains 5631 rules. 250 rules in the queue.
8200 rules inserted. The rule base contains 5768 rules. 279 rules in the queue.
8400 rules inserted. The rule base contains 5894 rules. 259 rules in the queue.
8600 rules inserted. The rule base contains 6015 rules. 231 rules in the queue.
8800 rules inserted. The rule base contains 6143 rules. 189 rules in the queue.
9000 rules inserted. The rule base contains 6259 rules. 158 rules in the queue.
9200 rules inserted. The rule base contains 6371 rules. 162 rules in the queue.
9400 rules inserted. The rule base contains 6492 rules. 107 rules in the queue.
9600 rules inserted. The rule base contains 6613 rules. 34 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_357155850]),msg_a(alice,charlie,sid[!1 = @sid_357155850]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155851]),msg_a(alice,charlie,sid[!1 = @sid_357155850])))
Abbreviations:
sid_357155889 = sid[!1 = @sid_357155879]
sid_357155890 = sid[!1 = @sid_357155863]

1. The entry statestore(bob,alice,sid_357155889,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,sid_357155889,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_357155890,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {187}.
table(statestore(alice,charlie,sid_357155890,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_357155890,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {221}.
The event SendMsg(alice,charlie,stagepack_a(sid_357155890),msg_a(alice,charlie,sid_357155890)) may be executed at {218}.
So the message concat3(dhexp(key_e(alice,charlie,sid_357155890),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357155890))) may be sent on channel pub at output {220}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_357155890),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357155890)))).

4. The entry statestore(bob,alice,sid_357155889,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {393}.
The message concat3(dhexp(key_e(alice,charlie,sid_357155890),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155890),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357155890))) that may be sent on channel pub by 3 may be received at input {360}.
We have dhexp(key_e(alice,charlie,sid_357155890),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_357155889),msg_a(alice,charlie,sid_357155890)) may be executed at {391}.
end(RecvMsg(bob,alice,stagepack_a(sid_357155889),msg_a(alice,charlie,sid_357155890))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_357155893]),msg_a(alice,charlie,sid[!1 = @sid_357155893]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155894]),msg_a(alice,charlie,sid[!1 = @sid_357155893])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357155897]),msg_a(alice,bob,sid[!1 = @sid_357155897]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155898]),msg_a(alice,bob,sid[!1 = @sid_357155897])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_357155907]),msg_a(alice,charlie,sid[!1 = @sid_357155907]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155908]),msg_a(alice,charlie,sid[!1 = @sid_357155907])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357155911]),msg_a(alice,bob,sid[!1 = @sid_357155911]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155912]),msg_a(alice,bob,sid[!1 = @sid_357155911])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_357155921]),msg_a(alice,charlie,sid[!1 = @sid_357155921]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155922]),msg_a(alice,charlie,sid[!1 = @sid_357155921])))
Abbreviations:
sid_357155960 = sid[!1 = @sid_357155950]
sid_357155961 = sid[!1 = @sid_357155934]

1. The entry statestore(bob,alice,sid_357155960,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,sid_357155960,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_357155961,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {187}.
table(statestore(alice,charlie,sid_357155961,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_357155961,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {221}.
The event SendMsg(alice,charlie,stagepack_a(sid_357155961),msg_a(alice,charlie,sid_357155961)) may be executed at {218}.
So the message concat3(dhexp(key_e(alice,charlie,sid_357155961),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357155961))) may be sent on channel pub at output {220}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_357155961),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357155961)))).

4. The entry statestore(bob,alice,sid_357155960,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {393}.
The message concat3(dhexp(key_e(alice,charlie,sid_357155961),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357155961),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357155961))) that may be sent on channel pub by 3 may be received at input {360}.
We have dhexp(key_e(alice,charlie,sid_357155961),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_357155960),msg_a(alice,charlie,sid_357155961)) may be executed at {391}.
end(RecvMsg(bob,alice,stagepack_a(sid_357155960),msg_a(alice,charlie,sid_357155961))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_357155964]),msg_a(alice,charlie,sid[!1 = @sid_357155964]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_357155965]),msg_a(alice,charlie,sid[!1 = @sid_357155964])))
Abbreviations:
sid_357156003 = sid[!1 = @sid_357155993]
sid_357156004 = sid[!1 = @sid_357155977]

1. The entry statestore(bob,alice,sid_357156003,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,sid_357156003,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_357156004,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {187}.
table(statestore(alice,charlie,sid_357156004,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_357156004,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {221}.
The event SendMsg(alice,charlie,stagepack_a(sid_357156004),msg_a(alice,charlie,sid_357156004)) may be executed at {218}.
So the message concat3(dhexp(key_e(alice,charlie,sid_357156004),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357156004))) may be sent on channel pub at output {220}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_357156004),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357156004)))).

4. The entry statestore(bob,alice,sid_357156003,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {393}.
The message concat3(dhexp(key_e(alice,charlie,sid_357156004),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_357156004),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_357156004))) that may be sent on channel pub by 3 may be received at input {360}.
We have dhexp(key_e(alice,charlie,sid_357156004),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_357156003),msg_a(alice,charlie,sid_357156004)) may be executed at {391}.
end(RecvMsg(bob,alice,stagepack_a(sid_357156003),msg_a(alice,charlie,sid_357156004))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156007]),msg_a(alice,bob,sid[!1 = @sid_357156007]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_357156007]))
Abbreviations:
sid_357156079 = sid[!1 = @sid_357156054]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_357156079,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_357156079,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_357156079,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_357156079),msg_a(alice,bob,sid_357156079)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156079),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_357156079),g).
attacker(dhexp(key_e(alice,bob,sid_357156079),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_357156079),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156079),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156079)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_357156079).
attacker(msg_a(alice,bob,sid_357156079)).

18. By 17, the attacker may know msg_a(alice,bob,sid_357156079).
So the attacker may know msg_a(alice,bob,sid_357156079) in phase 1.
attacker_p1(msg_a(alice,bob,sid_357156079)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156082]),msg_a(alice,bob,sid[!1 = @sid_357156082]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_357156082]))
Abbreviations:
sid_357156154 = sid[!1 = @sid_357156129]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_357156154,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_357156154,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_357156154,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_357156154),msg_a(alice,bob,sid_357156154)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156154),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_357156154),g).
attacker(dhexp(key_e(alice,bob,sid_357156154),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_357156154),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156154),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156154)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_357156154).
attacker(msg_a(alice,bob,sid_357156154)).

18. By 17, the attacker may know msg_a(alice,bob,sid_357156154).
So the attacker may know msg_a(alice,bob,sid_357156154) in phase 1.
attacker_p1(msg_a(alice,bob,sid_357156154)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156157]),msg_a(alice,bob,sid[!1 = @sid_357156157]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_357156157]))
Abbreviations:
sid_357156230 = sid[!1 = @sid_357156205]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_357156230,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_357156230,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_357156230,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_357156230),msg_a(alice,bob,sid_357156230)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156230),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_357156230),g).
attacker(dhexp(key_e(alice,bob,sid_357156230),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_357156230),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156230),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156230)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_357156230).
attacker(msg_a(alice,bob,sid_357156230)).

18. By 17, the attacker may know msg_a(alice,bob,sid_357156230).
So the attacker may know msg_a(alice,bob,sid_357156230) in phase 1.
attacker_p1(msg_a(alice,bob,sid_357156230)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156233]),msg_a(alice,bob,sid[!1 = @sid_357156233]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_357156233]))
Abbreviations:
sid_357156305 = sid[!1 = @sid_357156280]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_357156305,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_357156305,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_357156305,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_357156305),msg_a(alice,bob,sid_357156305)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_357156305),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_357156305),g).
attacker(dhexp(key_e(alice,bob,sid_357156305),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_357156305),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156305),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156305)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_357156305).
attacker(msg_a(alice,bob,sid_357156305)).

18. By 17, the attacker may know msg_a(alice,bob,sid_357156305).
So the attacker may know msg_a(alice,bob,sid_357156305) in phase 1.
attacker_p1(msg_a(alice,bob,sid_357156305)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156308]),msg_b(bob,alice,sid[!1 = @sid_357156308]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156309]),msg_a(alice,bob,sid[!1 = @sid_357156309]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_357156309]),msg_b(bob,alice,sid[!1 = @sid_357156308])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156317]),msg_b(bob,alice,sid[!1 = @sid_357156317]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156318]),msg_a(alice,bob,sid[!1 = @sid_357156318]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_357156318]),msg_b(bob,alice,sid[!1 = @sid_357156317])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156327]),msg_b(bob,alice,sid[!1 = @sid_357156327]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156328]),msg_a(alice,bob,sid[!1 = @sid_357156328]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_357156328]),msg_b(bob,alice,sid[!1 = @sid_357156327])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156337]),msg_b(bob,alice,sid[!1 = @sid_357156337]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156338]),msg_a(alice,bob,sid[!1 = @sid_357156338]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_357156338]),msg_b(bob,alice,sid[!1 = @sid_357156337])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156346]),msg_b(bob,alice,sid[!1 = @sid_357156346]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156347]),msg_a(alice,bob,sid[!1 = @sid_357156347]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_357156347]),msg_b(bob,alice,sid[!1 = @sid_357156346])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156368]),msg_c(alice,bob,sid[!1 = @sid_357156368]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156369]),msg_b(bob,alice,sid[!1 = @sid_357156369]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156368]),msg_a(alice,bob,sid[!1 = @sid_357156368]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_357156369]),msg_c(alice,bob,sid[!1 = @sid_357156368])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156377]),msg_c(alice,bob,sid[!1 = @sid_357156377]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156378]),msg_b(bob,alice,sid[!1 = @sid_357156378]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156377]),msg_a(alice,bob,sid[!1 = @sid_357156377]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_357156378]),msg_c(alice,bob,sid[!1 = @sid_357156377])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156387]),msg_c(alice,bob,sid[!1 = @sid_357156387]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156388]),msg_b(bob,alice,sid[!1 = @sid_357156388]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156387]),msg_a(alice,bob,sid[!1 = @sid_357156387]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_357156388]),msg_c(alice,bob,sid[!1 = @sid_357156387])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156397]),msg_c(alice,bob,sid[!1 = @sid_357156397]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156398]),msg_b(bob,alice,sid[!1 = @sid_357156398]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156397]),msg_a(alice,bob,sid[!1 = @sid_357156397]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_357156398]),msg_c(alice,bob,sid[!1 = @sid_357156397])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156406]),msg_c(alice,bob,sid[!1 = @sid_357156406]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156407]),msg_b(bob,alice,sid[!1 = @sid_357156407]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156406]),msg_a(alice,bob,sid[!1 = @sid_357156406]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_357156407]),msg_c(alice,bob,sid[!1 = @sid_357156406])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156428]),msg_d(bob,alice,sid[!1 = @sid_357156428]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156429]),msg_c(alice,bob,sid[!1 = @sid_357156429]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156428]),msg_b(bob,alice,sid[!1 = @sid_357156428]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156429]),msg_a(alice,bob,sid[!1 = @sid_357156429]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_357156429]),msg_d(bob,alice,sid[!1 = @sid_357156428])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156437]),msg_d(bob,alice,sid[!1 = @sid_357156437]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156438]),msg_c(alice,bob,sid[!1 = @sid_357156438]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156437]),msg_b(bob,alice,sid[!1 = @sid_357156437]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156438]),msg_a(alice,bob,sid[!1 = @sid_357156438]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_357156438]),msg_d(bob,alice,sid[!1 = @sid_357156437])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156447]),msg_d(bob,alice,sid[!1 = @sid_357156447]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156448]),msg_c(alice,bob,sid[!1 = @sid_357156448]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156447]),msg_b(bob,alice,sid[!1 = @sid_357156447]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156448]),msg_a(alice,bob,sid[!1 = @sid_357156448]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_357156448]),msg_d(bob,alice,sid[!1 = @sid_357156447])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1325,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156457]),msg_d(bob,alice,sid[!1 = @sid_357156457]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156458]),msg_c(alice,bob,sid[!1 = @sid_357156458]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156457]),msg_b(bob,alice,sid[!1 = @sid_357156457]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156458]),msg_a(alice,bob,sid[!1 = @sid_357156458]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_357156458]),msg_d(bob,alice,sid[!1 = @sid_357156457])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156466]),msg_d(bob,alice,sid[!1 = @sid_357156466]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156467]),msg_c(alice,bob,sid[!1 = @sid_357156467]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156466]),msg_b(bob,alice,sid[!1 = @sid_357156466]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156467]),msg_a(alice,bob,sid[!1 = @sid_357156467]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_357156467]),msg_d(bob,alice,sid[!1 = @sid_357156466])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_357156488]),msg_e(alice,bob,sid[!1 = @sid_357156488]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156489]),msg_d(bob,alice,sid[!1 = @sid_357156489]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156488]),msg_c(alice,bob,sid[!1 = @sid_357156488]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156489]),msg_b(bob,alice,sid[!1 = @sid_357156489]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156488]),msg_a(alice,bob,sid[!1 = @sid_357156488]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_357156489]),msg_e(alice,bob,sid[!1 = @sid_357156488])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_357156497]),msg_e(alice,bob,sid[!1 = @sid_357156497]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156498]),msg_d(bob,alice,sid[!1 = @sid_357156498]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156497]),msg_c(alice,bob,sid[!1 = @sid_357156497]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156498]),msg_b(bob,alice,sid[!1 = @sid_357156498]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156497]),msg_a(alice,bob,sid[!1 = @sid_357156497]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_357156498]),msg_e(alice,bob,sid[!1 = @sid_357156497])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_357156507]),msg_e(alice,bob,sid[!1 = @sid_357156507]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156508]),msg_d(bob,alice,sid[!1 = @sid_357156508]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156507]),msg_c(alice,bob,sid[!1 = @sid_357156507]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156508]),msg_b(bob,alice,sid[!1 = @sid_357156508]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156507]),msg_a(alice,bob,sid[!1 = @sid_357156507]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_357156508]),msg_e(alice,bob,sid[!1 = @sid_357156507])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1325,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_357156517]),msg_e(alice,bob,sid[!1 = @sid_357156517]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156518]),msg_d(bob,alice,sid[!1 = @sid_357156518]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156517]),msg_c(alice,bob,sid[!1 = @sid_357156517]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156518]),msg_b(bob,alice,sid[!1 = @sid_357156518]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156517]),msg_a(alice,bob,sid[!1 = @sid_357156517]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_357156518]),msg_e(alice,bob,sid[!1 = @sid_357156517])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_357156526]),msg_e(alice,bob,sid[!1 = @sid_357156526]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156527]),msg_d(bob,alice,sid[!1 = @sid_357156527]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156526]),msg_c(alice,bob,sid[!1 = @sid_357156526]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156527]),msg_b(bob,alice,sid[!1 = @sid_357156527]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156526]),msg_a(alice,bob,sid[!1 = @sid_357156526]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_357156527]),msg_e(alice,bob,sid[!1 = @sid_357156526])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_357156546]),msg_e(alice,bob,sid[!1 = @sid_357156546]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_357156547]),msg_d(bob,alice,sid[!1 = @sid_357156547]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_357156546]),msg_c(alice,bob,sid[!1 = @sid_357156546]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_357156547]),msg_b(bob,alice,sid[!1 = @sid_357156547]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_357156546]),msg_a(alice,bob,sid[!1 = @sid_357156546]))) -> end(RecvEnd(true))
Abbreviations:
sid_357156942 = sid[!1 = @sid_357156863]
sid_357156943 = sid[!1 = @sid_357156931]

1. The entry statestore(bob,alice,sid_357156943,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,sid_357156943,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,sid_357156942,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_357156942,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_357156942,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_357156942),msg_a(alice,bob,sid_357156942)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_357156942),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_357156942),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))).

4. The entry statestore(bob,alice,sid_357156943,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {393}.
The message concat3(dhexp(key_e(alice,bob,sid_357156942),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))) that may be sent on channel pub by 3 may be received at input {360}.
We have dhexp(key_e(alice,bob,sid_357156942),g) <> caught-fail.
So the entry statestore(bob,alice,sid_357156943,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false))) may be inserted in a table at insert {392}.
table(statestore(bob,alice,sid_357156943,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false)))).

5. The entry statestore(bob,alice,sid_357156943,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false))) that may be in a table by 4 may be read at get {441}.
The event SendMsg(bob,alice,stagepack_b(sid_357156943),msg_b(bob,alice,sid_357156943)) may be executed at {438}.
So the entry statestore(bob,alice,sid_357156943,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false))) may be inserted in a table at insert {439}.
table(statestore(bob,alice,sid_357156943,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false)))).

6. The entry statestore(alice,bob,sid_357156942,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_357156942),msg_a(alice,bob,sid_357156942)) may be executed at {46}.
So the entry statestore(alice,bob,sid_357156942,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),empty,empty,empty,true))) may be inserted in a table at insert {47}.
table(statestore(alice,bob,sid_357156942,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_357156943,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false))) that may be in a table by 4 may be read at get {441}.
The event SendMsg(bob,alice,stagepack_b(sid_357156943),msg_b(bob,alice,sid_357156943)) may be executed at {438}.
So the message concat3(dhexp(key_e(bob,alice,sid_357156943),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))) may be sent on channel pub at output {440}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_357156943),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))).

8. The entry statestore(alice,bob,sid_357156942,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {97}.
The message concat3(dhexp(key_e(bob,alice,sid_357156943),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))) that may be sent on channel pub by 7 may be received at input {50}.
We have dhexp(key_e(bob,alice,sid_357156943),g) <> caught-fail.
So the entry statestore(alice,bob,sid_357156942,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true))) may be inserted in a table at insert {96}.
table(statestore(alice,bob,sid_357156942,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true)))).

9. The entry statestore(alice,bob,sid_357156942,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true))) that may be in a table by 8 may be read at get {130}.
The event SendMsg(alice,bob,stagepack_c(sid_357156942),msg_c(alice,bob,sid_357156942)) may be executed at {127}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))) may be sent on channel pub at output {129}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))).

10. The entry statestore(bob,alice,sid_357156943,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false))) that may be in a table by 5 may be read at get {475}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))) that may be sent on channel pub by 9 may be received at input {442}.
So the entry statestore(bob,alice,sid_357156943,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {474}.
table(statestore(bob,alice,sid_357156943,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_357156943,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {495}.
The event SendMsg(bob,alice,stagepack_d(sid_357156943),msg_d(bob,alice,sid_357156943)) may be executed at {492}.
So the entry statestore(bob,alice,sid_357156943,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {493}.
table(statestore(bob,alice,sid_357156943,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_357156942,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true))) that may be in a table by 8 may be read at get {130}.
The event SendMsg(alice,bob,stagepack_c(sid_357156942),msg_c(alice,bob,sid_357156942)) may be executed at {127}.
So the entry statestore(alice,bob,sid_357156942,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {128}.
table(statestore(alice,bob,sid_357156942,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_357156943,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {495}.
The event SendMsg(bob,alice,stagepack_d(sid_357156943),msg_d(bob,alice,sid_357156943)) may be executed at {492}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943))) may be sent on channel pub at output {494}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))).

14. The entry statestore(alice,bob,sid_357156942,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 12 may be read at get {151}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943))) that may be sent on channel pub by 13 may be received at input {133}.
So the entry statestore(alice,bob,sid_357156942,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {150}.
table(statestore(alice,bob,sid_357156942,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_357156942,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_357156942),g),key_e(alice,bob,sid_357156942)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_357156943),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {170}.
The event SendMsg(alice,bob,stagepack_e(sid_357156942),msg_e(alice,bob,sid_357156942)) may be executed at {168}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943))),msg_e(alice,bob,sid_357156942))) may be sent on channel pub at output {169}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943))),msg_e(alice,bob,sid_357156942)))).

16. The entry statestore(bob,alice,sid_357156943,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_357156943),g),key_e(bob,alice,sid_357156943)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_357156942),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {516}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_357156942),g))),dhexp(key_e(bob,alice,sid_357156943),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_357156942),dhexp(key_e(bob,alice,sid_357156943),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_357156942),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_357156942))),dhexp(key_e(bob,alice,sid_357156943),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_357156943))),msg_c(alice,bob,sid_357156942))),msg_d(bob,alice,sid_357156943))),msg_e(alice,bob,sid_357156942))) that may be sent on channel pub by 15 may be received at input {498}.
So event RecvEnd(true) may be executed at {515}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
