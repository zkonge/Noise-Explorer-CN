File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IKpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IKpsk2.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "IKpsk2.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "IKpsk2.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 274, character 6:
Warning: identifier s rebound.
File "IKpsk2.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 275, characters 26-27:
Warning: identifier ns rebound.
File "IKpsk2.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 277, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "IKpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "IKpsk2.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 309, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "IKpsk2.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 322, characters 26-27:
Warning: identifier ne rebound.
File "IKpsk2.noise.passive.pv", line 322, characters 40-45:
Warning: identifier valid1 rebound.
File "IKpsk2.noise.passive.pv", line 323, characters 6-7:
Warning: identifier rs rebound.
File "IKpsk2.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 327, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 335, characters 6-7:
Warning: identifier re rebound.
File "IKpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 522, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 515, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 516, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 509, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 335, characters 6-7:
Warning: identifier re rebound.
File "IKpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IKpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IKpsk2.noise.passive.pv", line 502, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "IKpsk2.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "IKpsk2.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 274, character 6:
Warning: identifier s rebound.
File "IKpsk2.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 275, characters 26-27:
Warning: identifier ns rebound.
File "IKpsk2.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 277, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 576, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 309, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 568, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 570, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "IKpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "IKpsk2.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "IKpsk2.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IKpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IKpsk2.noise.passive.pv", line 556, characters 8-9:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "IKpsk2.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 322, characters 26-27:
Warning: identifier ne rebound.
File "IKpsk2.noise.passive.pv", line 322, characters 40-45:
Warning: identifier valid1 rebound.
File "IKpsk2.noise.passive.pv", line 323, characters 6-7:
Warning: identifier rs rebound.
File "IKpsk2.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "IKpsk2.noise.passive.pv", line 327, characters 7-8:
Warning: identifier hs rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IKpsk2.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}new sid: sessionid;
(
    {3}let s_579: keypair = keypairpack(empty,empty) in
    {4}out(pub, getpublickey(s_579));
    (
        {5}let e_580: keypair = keypairpack(empty,empty) in
        {6}let v_581: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {7}let rs_582: key = getpublickey((if not-caught-fail(v_581) then keypairpack(validkey(v_581),key_s(bob)) else fail-any)) in
        {8}let re_583: key = empty in
        {9}let v_584: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_585: key = catch-fail(v_584) in
        {11}let v_586: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_587: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then symmetricstatepack(v_586,v_585,v_584) else fail-any) else fail-any) else fail-any))) in
        {13}let v_588: symmetricstate = catch-fail((if success?((if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then symmetricstatepack(v_586,v_585,v_584) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then symmetricstatepack(1-proj-3-tuple(v_587),2-proj-3-tuple(v_587),hash(3-proj-3-tuple(v_587),empty)) else fail-any) else fail-any)) in
        {14}let v_589: bitstring = catch-fail(symmetricstateunpack(v_588)) in
        {15}let v_590: symmetricstate = catch-fail((if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_589),hash(3-proj-3-tuple(v_589),rs_582)) else fail-any)) in
        {16}let hs: handshakestate = (if not-caught-fail(v_588) then (if not-caught-fail(v_590) then handshakestatepack(v_590,s_579,e_580,rs_582,re_583,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {17}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {71}get statestore(=alice,=bob,=sid,statepack_a(hs_591: handshakestate)) in
        {18}let v_592: bitstring = catch-fail(handshakestateunpack(hs_591)) in
        {19}let v_593: bitstring = catch-fail((empty,empty,empty)) in
        {20}let v_594: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {21}let v_595: keypair = catch-fail((if not-caught-fail(v_594) then keypairpack(validkey(v_594),key_e(alice,bob,sid)) else fail-any)) in
        {22}let v_596: bitstring = catch-fail(getpublickey(v_595)) in
        {23}let v_597: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_592))) in
        {24}let v_598: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_592)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_597),hash(3-proj-3-tuple(v_597),v_596)) else fail-any) else fail-any)) in
        {25}let v_599: bitstring = catch-fail(symmetricstateunpack(v_598)) in
        {26}let v_600: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_599),getpublickey(v_595))) in
        {27}let v_601: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_599),getpublickey(v_595))) in
        {28}let v_602: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_599),getpublickey(v_595))) in
        {29}let v_603: bitstring = catch-fail((if (success?(getpublickey(v_595)) && success?(2-proj-3-tuple(v_599))) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_600,v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_604: symmetricstate = catch-fail((if success?(getpublickey(v_595)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_603)) then cipherstatepack(2-proj-3-tuple(v_603),minnonce) else fail-any),1-proj-3-tuple(v_603),3-proj-3-tuple(v_599)) else fail-any) else fail-any) else fail-any)) in
        {31}let v_605: bitstring = catch-fail(keypairunpack(v_595)) in
        {32}let v_606: bitstring = catch-fail(symmetricstateunpack(v_604)) in
        {33}let v_607: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_606),(if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_592)) else fail-any) else fail-any))) in
        {34}let v_608: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_606),(if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_592)) else fail-any) else fail-any))) in
        {35}let v_609: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_606),(if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_592)) else fail-any) else fail-any))) in
        {36}let v_610: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_592)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_606))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (if not-caught-fail(v_609) then (v_607,v_608,v_609) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_611: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_592)) else fail-any) else fail-any)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_610)) then cipherstatepack(2-proj-3-tuple(v_610),minnonce) else fail-any),1-proj-3-tuple(v_610),3-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any)) in
        {38}let v_612: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {39}let v_613: keypair = catch-fail((if not-caught-fail(v_612) then keypairpack(validkey(v_612),key_s(alice)) else fail-any)) in
        {40}let v_614: bitstring = catch-fail(symmetricstateunpack(v_611)) in
        {41}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {42}let v_616: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_615),2-proj-2-tuple(v_615),3-proj-3-tuple(v_614),getpublickey(v_613))) in
        {43}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {44}let v_618: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_615))) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then cipherstatepack(1-proj-2-tuple(v_617),increment_nonce(2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {45}let v_619: bitstring = catch-fail((if (success?(getpublickey(v_613)) && (success?(3-proj-3-tuple(v_614)) && success?(1-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_618) then (v_618,v_616) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {46}let v_620: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) in
        {47}let v_621: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_619)) && success?(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {48}let v_622: bitstring = catch-fail((if success?(getpublickey(v_613)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,2-proj-2-tuple(v_619)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_623: bitstring = catch-fail(keypairunpack(v_613)) in
        {50}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_622))) in
        {51}let v_625: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_624),(if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),4-proj-7-tuple(v_592)) else fail-any) else fail-any))) in
        {52}let v_626: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_624),(if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),4-proj-7-tuple(v_592)) else fail-any) else fail-any))) in
        {53}let v_627: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_624),(if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),4-proj-7-tuple(v_592)) else fail-any) else fail-any))) in
        {54}let v_628: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),4-proj-7-tuple(v_592)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_624))) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_625,v_626,v_627) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_629: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_592)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),4-proj-7-tuple(v_592)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_622))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_628)) then cipherstatepack(2-proj-3-tuple(v_628),minnonce) else fail-any),1-proj-3-tuple(v_628),3-proj-3-tuple(v_624)) else fail-any) else fail-any) else fail-any)) in
        {56}let v_630: bitstring = catch-fail(symmetricstateunpack(v_629)) in
        {57}let v_631: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_630))) in
        {58}let v_632: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_631),2-proj-2-tuple(v_631),3-proj-3-tuple(v_630),msg_a(alice,bob,sid))) in
        {59}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_630))) in
        {60}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_631))) && success?(1-proj-3-tuple(v_630))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_631))) else fail-any) else fail-any)) in
        {61}let v_635: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_630)) && success?(1-proj-3-tuple(v_630))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then (if not-caught-fail(v_632) then (if not-caught-fail(v_634) then (v_634,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_635),2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)))) in
        {63}let v_637: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_635)) && success?(symmetricstatepack(1-proj-2-tuple(v_635),2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {64}let v_638: bitstring = catch-fail((if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-2-tuple(v_635)) else fail-any) else fail-any) else fail-any)) in
        {65}let v_639: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_638),v_613,v_595,4-proj-7-tuple(v_592),5-proj-7-tuple(v_592),6-proj-7-tuple(v_592),7-proj-7-tuple(v_592))) in
        {66}let v_640: bitstring = catch-fail(concat3(v_596,2-proj-2-tuple(v_622),2-proj-2-tuple(v_638))) in
        {67}let (hs_641: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-7-tuple(v_592))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if not-caught-fail(v_598) then (if not-caught-fail(v_604) then (if not-caught-fail(v_611) then (if not-caught-fail(v_613) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_629) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (v_639,v_640) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {68}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {69}insert statestore(alice,bob,sid,statepack_b(hs_641));
        {70}out(pub, message_a)
    ) | (
        {129}get statestore(=alice,=bob,=sid,statepack_b(hs_642: handshakestate)) in
        {72}in(pub, message_b: bitstring);
        {73}let v_643: bitstring = catch-fail(handshakestateunpack(hs_642)) in
        {74}let v_644: bitstring = catch-fail(deconcat3(message_b)) in
        {75}let v_645: bool = catch-fail(true) in
        {76}let v_646: key = catch-fail(1-proj-3-tuple(v_644)) in
        {77}let v_647: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_643))) in
        {78}let v_648: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_643)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),v_646)) else fail-any) else fail-any)) in
        {79}let v_649: bitstring = catch-fail(symmetricstateunpack(v_648)) in
        {80}let v_650: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_649),v_646)) in
        {81}let v_651: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_649),v_646)) in
        {82}let v_652: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_649),v_646)) in
        {83}let v_653: bitstring = catch-fail((if success?(2-proj-3-tuple(v_649)) then (if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (v_650,v_651,v_652) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_654: symmetricstate = catch-fail((if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_653)) then cipherstatepack(2-proj-3-tuple(v_653),minnonce) else fail-any),1-proj-3-tuple(v_653),3-proj-3-tuple(v_649)) else fail-any) else fail-any)) in
        {85}let v_655: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_643))) in
        {86}let v_656: bitstring = catch-fail(symmetricstateunpack(v_654)) in
        {87}let v_657: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_656),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then dhexp(2-proj-2-tuple(v_655),v_646) else fail-any) else fail-any))) in
        {88}let v_658: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_656),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then dhexp(2-proj-2-tuple(v_655),v_646) else fail-any) else fail-any))) in
        {89}let v_659: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_656),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then dhexp(2-proj-2-tuple(v_655),v_646) else fail-any) else fail-any))) in
        {90}let v_660: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then dhexp(2-proj-2-tuple(v_655),v_646) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_656))) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (v_657,v_658,v_659) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_661: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then dhexp(2-proj-2-tuple(v_655),v_646) else fail-any) else fail-any)) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_660)) then cipherstatepack(2-proj-3-tuple(v_660),minnonce) else fail-any),1-proj-3-tuple(v_660),3-proj-3-tuple(v_656)) else fail-any) else fail-any) else fail-any)) in
        {92}let v_662: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_643))) in
        {93}let v_663: bitstring = catch-fail(symmetricstateunpack(v_661)) in
        {94}let v_664: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_663),(if success?(2-proj-7-tuple(v_643)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_646) else fail-any) else fail-any))) in
        {95}let v_665: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_663),(if success?(2-proj-7-tuple(v_643)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_646) else fail-any) else fail-any))) in
        {96}let v_666: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_663),(if success?(2-proj-7-tuple(v_643)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_646) else fail-any) else fail-any))) in
        {97}let v_667: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_643)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_646) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_663))) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_664,v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_668: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_643)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_646) else fail-any) else fail-any)) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_667)) then cipherstatepack(2-proj-3-tuple(v_667),minnonce) else fail-any),1-proj-3-tuple(v_667),3-proj-3-tuple(v_663)) else fail-any) else fail-any) else fail-any)) in
        {99}let v_669: bitstring = catch-fail(symmetricstateunpack(v_668)) in
        {100}let v_670: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_669),6-proj-7-tuple(v_643))) in
        {101}let v_671: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_669),6-proj-7-tuple(v_643))) in
        {102}let v_672: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_669),6-proj-7-tuple(v_643))) in
        {103}let v_673: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_643)) && success?(2-proj-3-tuple(v_669))) then (if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (v_670,v_671,v_672) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_669),1-proj-3-tuple(v_673),3-proj-3-tuple(v_669)))) in
        {105}let v_675: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_673)) && success?(symmetricstatepack(1-proj-3-tuple(v_669),1-proj-3-tuple(v_673),3-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),2-proj-3-tuple(v_673))) else fail-any) else fail-any))) in
        {106}let v_676: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_643)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_673)) then cipherstatepack(3-proj-3-tuple(v_673),minnonce) else fail-any),1-proj-3-tuple(v_673),3-proj-3-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_677: bitstring = catch-fail(symmetricstateunpack(v_676)) in
        {108}let v_678: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_677))) in
        {109}let v_679: aead = catch-fail(decrypt(1-proj-2-tuple(v_678),2-proj-2-tuple(v_678),3-proj-3-tuple(v_677),3-proj-3-tuple(v_644))) in
        {110}let v_680: bitstring = catch-fail(aeadunpack(v_679)) in
        {111}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_677))) in
        {112}let v_682: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_678))) && success?(1-proj-3-tuple(v_677))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then cipherstatepack(1-proj-2-tuple(v_681),increment_nonce(2-proj-2-tuple(v_678))) else fail-any) else fail-any)) in
        {113}let v_683: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_644)) && (success?(3-proj-3-tuple(v_677)) && success?(1-proj-3-tuple(v_677)))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_679) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if not-caught-fail(v_682) then (v_682,3-proj-3-tuple(v_680),1-proj-3-tuple(v_680)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_684: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_677),3-proj-3-tuple(v_677)))) in
        {115}let v_685: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_644)) && success?(symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_677),3-proj-3-tuple(v_677)))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),3-proj-3-tuple(v_644))) else fail-any) else fail-any)) in
        {116}let v_686: bitstring = catch-fail((if success?(3-proj-3-tuple(v_644)) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_685) then (v_685,2-proj-3-tuple(v_683),3-proj-3-tuple(v_683)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let v_687: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_686),2-proj-7-tuple(v_643),3-proj-7-tuple(v_643),4-proj-7-tuple(v_643),v_646,6-proj-7-tuple(v_643),7-proj-7-tuple(v_643))) in
        {118}let v_688: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_686))) in
        {119}let v_689: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_688),zero)) in
        {120}let v_690: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_688),zero)) in
        {121}let v_691: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_688),zero)) in
        {122}let v_692: bitstring = catch-fail((if success?(2-proj-3-tuple(v_688)) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_689,v_690,v_691) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_693: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_692)) then cipherstatepack(1-proj-3-tuple(v_692),minnonce) else fail-any)) in
        {124}let v_694: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_692)) then cipherstatepack(2-proj-3-tuple(v_692),minnonce) else fail-any)) in
        {125}let v_695: bitstring = catch-fail((if success?(1-proj-3-tuple(v_686)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (1-proj-3-tuple(v_686),v_693,v_694) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let (hs_696: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-7-tuple(v_643))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_648) then (if not-caught-fail(v_654) then (if not-caught-fail(v_661) then (if not-caught-fail(v_668) then (if not-caught-fail(v_676) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (v_645 && 3-proj-3-tuple(v_686)) then (if not-caught-fail(v_687) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (v_687,2-proj-3-tuple(v_686),true,2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {127}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {128}insert statestore(alice,bob,sid,statepack_c(hs_696,cs1,cs2))
    ) | (
        {148}get statestore(=alice,=bob,=sid,statepack_c(hs_697: handshakestate,cs1_698: cipherstate,cs2_699: cipherstate)) in
        {130}let hs_700: handshakestate = handshakestatesetcs(hs_697,cs1_698) in
        {131}let v_701: bitstring = catch-fail(handshakestateunpack(hs_700)) in
        {132}let v_702: bitstring = catch-fail((empty,empty,empty)) in
        {133}let v_703: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_701))) in
        {134}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {135}let v_705: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_704),2-proj-2-tuple(v_704),3-proj-3-tuple(v_703),msg_c(alice,bob,sid))) in
        {136}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {137}let v_707: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_704))) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then cipherstatepack(1-proj-2-tuple(v_706),increment_nonce(2-proj-2-tuple(v_704))) else fail-any) else fail-any)) in
        {138}let v_708: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then (if not-caught-fail(v_705) then (if not-caught-fail(v_707) then (v_707,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_709: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_708),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) in
        {140}let v_710: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_708)) && success?(symmetricstatepack(1-proj-2-tuple(v_708),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),2-proj-2-tuple(v_708))) else fail-any) else fail-any)) in
        {141}let v_711: bitstring = catch-fail((if success?(1-proj-7-tuple(v_701)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,2-proj-2-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {142}let v_712: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_711),2-proj-7-tuple(v_701),3-proj-7-tuple(v_701),4-proj-7-tuple(v_701),5-proj-7-tuple(v_701),6-proj-7-tuple(v_701),7-proj-7-tuple(v_701))) in
        {143}let v_713: bitstring = catch-fail(concat3(1-proj-3-tuple(v_702),2-proj-3-tuple(v_702),2-proj-2-tuple(v_711))) in
        {144}let (hs_714: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-7-tuple(v_701))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (v_712,v_713) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {146}insert statestore(alice,bob,sid,statepack_d(hs_714,handshakestategetcs(hs_714),cs2_699));
        {147}out(pub, message_c)
    ) | (
        {168}get statestore(=alice,=bob,=sid,statepack_d(hs_715: handshakestate,cs1_716: cipherstate,cs2_717: cipherstate)) in
        {149}let hs_718: handshakestate = handshakestatesetcs(hs_715,cs2_717) in
        {150}in(pub, message_d: bitstring);
        {151}let v_719: bitstring = catch-fail(handshakestateunpack(hs_718)) in
        {152}let v_720: bitstring = catch-fail(deconcat3(message_d)) in
        {153}let v_721: bool = catch-fail(true) in
        {154}let v_722: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_719))) in
        {155}let v_723: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_722))) in
        {156}let v_724: aead = catch-fail(decrypt(1-proj-2-tuple(v_723),2-proj-2-tuple(v_723),3-proj-3-tuple(v_722),3-proj-3-tuple(v_720))) in
        {157}let v_725: bitstring = catch-fail(aeadunpack(v_724)) in
        {158}let v_726: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_722))) in
        {159}let v_727: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_723))) && success?(1-proj-3-tuple(v_722))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then cipherstatepack(1-proj-2-tuple(v_726),increment_nonce(2-proj-2-tuple(v_723))) else fail-any) else fail-any)) in
        {160}let v_728: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_720)) && (success?(3-proj-3-tuple(v_722)) && success?(1-proj-3-tuple(v_722)))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then (if not-caught-fail(v_724) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if not-caught-fail(v_727) then (v_727,3-proj-3-tuple(v_725),1-proj-3-tuple(v_725)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {161}let v_729: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_722),3-proj-3-tuple(v_722)))) in
        {162}let v_730: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_720)) && success?(symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_722),3-proj-3-tuple(v_722)))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_729),hash(3-proj-3-tuple(v_729),3-proj-3-tuple(v_720))) else fail-any) else fail-any)) in
        {163}let v_731: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_720)) && success?(1-proj-7-tuple(v_719))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if not-caught-fail(v_730) then (v_730,2-proj-3-tuple(v_728),3-proj-3-tuple(v_728)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {164}let v_732: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_731),2-proj-7-tuple(v_719),3-proj-7-tuple(v_719),4-proj-7-tuple(v_719),5-proj-7-tuple(v_719),6-proj-7-tuple(v_719),7-proj-7-tuple(v_719))) in
        {165}let (hs_733: handshakestate,plaintext_d: bitstring,valid_734: bool) = (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-7-tuple(v_719))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if not-caught-fail(v_721) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (v_721 && 3-proj-3-tuple(v_731)) then (if not-caught-fail(v_732) then (v_732,2-proj-3-tuple(v_731),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {166}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {167}event RecvEnd(valid_734)
    ) | (
        {169}event LeakPsk(phase0,alice,bob);
        {170}out(pub, key_psk(alice,bob))
    ) | (
        {171}phase 1;
        {172}event LeakPsk(phase1,alice,bob);
        {173}out(pub, key_psk(alice,bob))
    ) | (
        {174}event LeakS(phase0,alice);
        {175}out(pub, key_s(alice))
    ) | (
        {176}phase 1;
        {177}event LeakS(phase1,alice);
        {178}out(pub, key_s(alice))
    )
) | (
    {179}let s_735: keypair = keypairpack(empty,empty) in
    {180}out(pub, getpublickey(s_735));
    (
        {181}let e_736: keypair = keypairpack(empty,empty) in
        {182}let v_737: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {183}let rs_738: key = getpublickey((if not-caught-fail(v_737) then keypairpack(validkey(v_737),key_s(charlie)) else fail-any)) in
        {184}let re_739: key = empty in
        {185}let v_740: bitstring = catch-fail(hash(somename,empty)) in
        {186}let v_741: key = catch-fail(v_740) in
        {187}let v_742: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {188}let v_743: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then symmetricstatepack(v_742,v_741,v_740) else fail-any) else fail-any) else fail-any))) in
        {189}let v_744: symmetricstate = catch-fail((if success?((if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then symmetricstatepack(v_742,v_741,v_740) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_743),hash(3-proj-3-tuple(v_743),empty)) else fail-any) else fail-any)) in
        {190}let v_745: bitstring = catch-fail(symmetricstateunpack(v_744)) in
        {191}let v_746: symmetricstate = catch-fail((if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),rs_738)) else fail-any)) in
        {192}let hs_747: handshakestate = (if not-caught-fail(v_744) then (if not-caught-fail(v_746) then handshakestatepack(v_746,s_735,e_736,rs_738,re_739,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {193}insert statestore(alice,charlie,sid,statepack_a(hs_747))
    ) | (
        {247}get statestore(=alice,=charlie,=sid,statepack_a(hs_748: handshakestate)) in
        {194}let v_749: bitstring = catch-fail(handshakestateunpack(hs_748)) in
        {195}let v_750: bitstring = catch-fail((empty,empty,empty)) in
        {196}let v_751: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {197}let v_752: keypair = catch-fail((if not-caught-fail(v_751) then keypairpack(validkey(v_751),key_e(alice,charlie,sid)) else fail-any)) in
        {198}let v_753: bitstring = catch-fail(getpublickey(v_752)) in
        {199}let v_754: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_749))) in
        {200}let v_755: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_749)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_754),hash(3-proj-3-tuple(v_754),v_753)) else fail-any) else fail-any)) in
        {201}let v_756: bitstring = catch-fail(symmetricstateunpack(v_755)) in
        {202}let v_757: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_756),getpublickey(v_752))) in
        {203}let v_758: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_756),getpublickey(v_752))) in
        {204}let v_759: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_756),getpublickey(v_752))) in
        {205}let v_760: bitstring = catch-fail((if (success?(getpublickey(v_752)) && success?(2-proj-3-tuple(v_756))) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (if not-caught-fail(v_759) then (v_757,v_758,v_759) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_761: symmetricstate = catch-fail((if success?(getpublickey(v_752)) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_760)) then cipherstatepack(2-proj-3-tuple(v_760),minnonce) else fail-any),1-proj-3-tuple(v_760),3-proj-3-tuple(v_756)) else fail-any) else fail-any) else fail-any)) in
        {207}let v_762: bitstring = catch-fail(keypairunpack(v_752)) in
        {208}let v_763: bitstring = catch-fail(symmetricstateunpack(v_761)) in
        {209}let v_764: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_763),(if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then dhexp(2-proj-2-tuple(v_762),4-proj-7-tuple(v_749)) else fail-any) else fail-any))) in
        {210}let v_765: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_763),(if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then dhexp(2-proj-2-tuple(v_762),4-proj-7-tuple(v_749)) else fail-any) else fail-any))) in
        {211}let v_766: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_763),(if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then dhexp(2-proj-2-tuple(v_762),4-proj-7-tuple(v_749)) else fail-any) else fail-any))) in
        {212}let v_767: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then dhexp(2-proj-2-tuple(v_762),4-proj-7-tuple(v_749)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_763))) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (if not-caught-fail(v_766) then (v_764,v_765,v_766) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_768: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then dhexp(2-proj-2-tuple(v_762),4-proj-7-tuple(v_749)) else fail-any) else fail-any)) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_767)) then cipherstatepack(2-proj-3-tuple(v_767),minnonce) else fail-any),1-proj-3-tuple(v_767),3-proj-3-tuple(v_763)) else fail-any) else fail-any) else fail-any)) in
        {214}let v_769: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {215}let v_770: keypair = catch-fail((if not-caught-fail(v_769) then keypairpack(validkey(v_769),key_s(alice)) else fail-any)) in
        {216}let v_771: bitstring = catch-fail(symmetricstateunpack(v_768)) in
        {217}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {218}let v_773: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_772),2-proj-2-tuple(v_772),3-proj-3-tuple(v_771),getpublickey(v_770))) in
        {219}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {220}let v_775: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_772))) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then cipherstatepack(1-proj-2-tuple(v_774),increment_nonce(2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {221}let v_776: bitstring = catch-fail((if (success?(getpublickey(v_770)) && (success?(3-proj-3-tuple(v_771)) && success?(1-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_775) then (v_775,v_773) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {222}let v_777: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_776),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) in
        {223}let v_778: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_776)) && success?(symmetricstatepack(1-proj-2-tuple(v_776),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_777),hash(3-proj-3-tuple(v_777),2-proj-2-tuple(v_776))) else fail-any) else fail-any)) in
        {224}let v_779: bitstring = catch-fail((if success?(getpublickey(v_770)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,2-proj-2-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_780: bitstring = catch-fail(keypairunpack(v_770)) in
        {226}let v_781: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_779))) in
        {227}let v_782: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_781),(if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),4-proj-7-tuple(v_749)) else fail-any) else fail-any))) in
        {228}let v_783: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_781),(if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),4-proj-7-tuple(v_749)) else fail-any) else fail-any))) in
        {229}let v_784: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_781),(if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),4-proj-7-tuple(v_749)) else fail-any) else fail-any))) in
        {230}let v_785: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),4-proj-7-tuple(v_749)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_781))) then (if not-caught-fail(v_782) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (v_782,v_783,v_784) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_786: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_749)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),4-proj-7-tuple(v_749)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_779))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_785)) then cipherstatepack(2-proj-3-tuple(v_785),minnonce) else fail-any),1-proj-3-tuple(v_785),3-proj-3-tuple(v_781)) else fail-any) else fail-any) else fail-any)) in
        {232}let v_787: bitstring = catch-fail(symmetricstateunpack(v_786)) in
        {233}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {234}let v_789: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_788),2-proj-2-tuple(v_788),3-proj-3-tuple(v_787),msg_a(alice,charlie,sid))) in
        {235}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {236}let v_791: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_788))) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then cipherstatepack(1-proj-2-tuple(v_790),increment_nonce(2-proj-2-tuple(v_788))) else fail-any) else fail-any)) in
        {237}let v_792: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then (if not-caught-fail(v_789) then (if not-caught-fail(v_791) then (v_791,v_789) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_793: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_792),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) in
        {239}let v_794: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_792)) && success?(symmetricstatepack(1-proj-2-tuple(v_792),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {240}let v_795: bitstring = catch-fail((if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_794) then (v_794,2-proj-2-tuple(v_792)) else fail-any) else fail-any) else fail-any)) in
        {241}let v_796: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_795),v_770,v_752,4-proj-7-tuple(v_749),5-proj-7-tuple(v_749),6-proj-7-tuple(v_749),7-proj-7-tuple(v_749))) in
        {242}let v_797: bitstring = catch-fail(concat3(v_753,2-proj-2-tuple(v_779),2-proj-2-tuple(v_795))) in
        {243}let (hs_798: handshakestate,message_a_799: bitstring) = (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-7-tuple(v_749))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (if not-caught-fail(v_755) then (if not-caught-fail(v_761) then (if not-caught-fail(v_768) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (v_796,v_797) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {244}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {245}insert statestore(alice,charlie,sid,statepack_b(hs_798));
        {246}out(pub, message_a_799)
    ) | (
        {305}get statestore(=alice,=charlie,=sid,statepack_b(hs_800: handshakestate)) in
        {248}in(pub, message_b_801: bitstring);
        {249}let v_802: bitstring = catch-fail(handshakestateunpack(hs_800)) in
        {250}let v_803: bitstring = catch-fail(deconcat3(message_b_801)) in
        {251}let v_804: bool = catch-fail(true) in
        {252}let v_805: key = catch-fail(1-proj-3-tuple(v_803)) in
        {253}let v_806: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_802))) in
        {254}let v_807: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_802)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack(1-proj-3-tuple(v_806),2-proj-3-tuple(v_806),hash(3-proj-3-tuple(v_806),v_805)) else fail-any) else fail-any)) in
        {255}let v_808: bitstring = catch-fail(symmetricstateunpack(v_807)) in
        {256}let v_809: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_808),v_805)) in
        {257}let v_810: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_808),v_805)) in
        {258}let v_811: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_808),v_805)) in
        {259}let v_812: bitstring = catch-fail((if success?(2-proj-3-tuple(v_808)) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then (if not-caught-fail(v_811) then (v_809,v_810,v_811) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_813: symmetricstate = catch-fail((if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_812)) then cipherstatepack(2-proj-3-tuple(v_812),minnonce) else fail-any),1-proj-3-tuple(v_812),3-proj-3-tuple(v_808)) else fail-any) else fail-any)) in
        {261}let v_814: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_802))) in
        {262}let v_815: bitstring = catch-fail(symmetricstateunpack(v_813)) in
        {263}let v_816: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_815),(if success?(3-proj-7-tuple(v_802)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),v_805) else fail-any) else fail-any))) in
        {264}let v_817: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_815),(if success?(3-proj-7-tuple(v_802)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),v_805) else fail-any) else fail-any))) in
        {265}let v_818: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_815),(if success?(3-proj-7-tuple(v_802)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),v_805) else fail-any) else fail-any))) in
        {266}let v_819: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_802)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),v_805) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_815))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (v_816,v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_820: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_802)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),v_805) else fail-any) else fail-any)) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_819)) then cipherstatepack(2-proj-3-tuple(v_819),minnonce) else fail-any),1-proj-3-tuple(v_819),3-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any)) in
        {268}let v_821: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_802))) in
        {269}let v_822: bitstring = catch-fail(symmetricstateunpack(v_820)) in
        {270}let v_823: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_822),(if success?(2-proj-7-tuple(v_802)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),v_805) else fail-any) else fail-any))) in
        {271}let v_824: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_822),(if success?(2-proj-7-tuple(v_802)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),v_805) else fail-any) else fail-any))) in
        {272}let v_825: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_822),(if success?(2-proj-7-tuple(v_802)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),v_805) else fail-any) else fail-any))) in
        {273}let v_826: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_802)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),v_805) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_822))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (v_823,v_824,v_825) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_827: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_802)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),v_805) else fail-any) else fail-any)) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_826)) then cipherstatepack(2-proj-3-tuple(v_826),minnonce) else fail-any),1-proj-3-tuple(v_826),3-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any)) in
        {275}let v_828: bitstring = catch-fail(symmetricstateunpack(v_827)) in
        {276}let v_829: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_828),6-proj-7-tuple(v_802))) in
        {277}let v_830: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_828),6-proj-7-tuple(v_802))) in
        {278}let v_831: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_828),6-proj-7-tuple(v_802))) in
        {279}let v_832: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_802)) && success?(2-proj-3-tuple(v_828))) then (if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then (v_829,v_830,v_831) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_833: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_828),1-proj-3-tuple(v_832),3-proj-3-tuple(v_828)))) in
        {281}let v_834: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_832)) && success?(symmetricstatepack(1-proj-3-tuple(v_828),1-proj-3-tuple(v_832),3-proj-3-tuple(v_828)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then symmetricstatepack(1-proj-3-tuple(v_833),2-proj-3-tuple(v_833),hash(3-proj-3-tuple(v_833),2-proj-3-tuple(v_832))) else fail-any) else fail-any))) in
        {282}let v_835: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_802)) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_832)) then cipherstatepack(3-proj-3-tuple(v_832),minnonce) else fail-any),1-proj-3-tuple(v_832),3-proj-3-tuple(v_834)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_836: bitstring = catch-fail(symmetricstateunpack(v_835)) in
        {284}let v_837: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_836))) in
        {285}let v_838: aead = catch-fail(decrypt(1-proj-2-tuple(v_837),2-proj-2-tuple(v_837),3-proj-3-tuple(v_836),3-proj-3-tuple(v_803))) in
        {286}let v_839: bitstring = catch-fail(aeadunpack(v_838)) in
        {287}let v_840: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_836))) in
        {288}let v_841: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_837))) && success?(1-proj-3-tuple(v_836))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then cipherstatepack(1-proj-2-tuple(v_840),increment_nonce(2-proj-2-tuple(v_837))) else fail-any) else fail-any)) in
        {289}let v_842: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_803)) && (success?(3-proj-3-tuple(v_836)) && success?(1-proj-3-tuple(v_836)))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-2-tuple(v_837))))) then (if not-caught-fail(v_838) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if not-caught-fail(v_841) then (v_841,3-proj-3-tuple(v_839),1-proj-3-tuple(v_839)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {290}let v_843: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_842),2-proj-3-tuple(v_836),3-proj-3-tuple(v_836)))) in
        {291}let v_844: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_803)) && success?(symmetricstatepack(1-proj-3-tuple(v_842),2-proj-3-tuple(v_836),3-proj-3-tuple(v_836)))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_843),hash(3-proj-3-tuple(v_843),3-proj-3-tuple(v_803))) else fail-any) else fail-any)) in
        {292}let v_845: bitstring = catch-fail((if success?(3-proj-3-tuple(v_803)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_844) then (v_844,2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_846: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_845),2-proj-7-tuple(v_802),3-proj-7-tuple(v_802),4-proj-7-tuple(v_802),v_805,6-proj-7-tuple(v_802),7-proj-7-tuple(v_802))) in
        {294}let v_847: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_845))) in
        {295}let v_848: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_847),zero)) in
        {296}let v_849: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_847),zero)) in
        {297}let v_850: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_847),zero)) in
        {298}let v_851: bitstring = catch-fail((if success?(2-proj-3-tuple(v_847)) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (v_848,v_849,v_850) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {299}let v_852: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_851)) then cipherstatepack(1-proj-3-tuple(v_851),minnonce) else fail-any)) in
        {300}let v_853: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_851)) then cipherstatepack(2-proj-3-tuple(v_851),minnonce) else fail-any)) in
        {301}let v_854: bitstring = catch-fail((if success?(1-proj-3-tuple(v_845)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (1-proj-3-tuple(v_845),v_852,v_853) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let (hs_855: handshakestate,plaintext_b_856: bitstring,valid_857: bool,cs1_858: cipherstate,cs2_859: cipherstate) = (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-7-tuple(v_802))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_807) then (if not-caught-fail(v_813) then (if not-caught-fail(v_820) then (if not-caught-fail(v_827) then (if not-caught-fail(v_835) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (v_804 && 3-proj-3-tuple(v_845)) then (if not-caught-fail(v_846) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (v_846,2-proj-3-tuple(v_845),true,2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {303}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_856);
        {304}insert statestore(alice,charlie,sid,statepack_c(hs_855,cs1_858,cs2_859))
    ) | (
        {324}get statestore(=alice,=charlie,=sid,statepack_c(hs_860: handshakestate,cs1_861: cipherstate,cs2_862: cipherstate)) in
        {306}let hs_863: handshakestate = handshakestatesetcs(hs_860,cs1_861) in
        {307}let v_864: bitstring = catch-fail(handshakestateunpack(hs_863)) in
        {308}let v_865: bitstring = catch-fail((empty,empty,empty)) in
        {309}let v_866: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_864))) in
        {310}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_866))) in
        {311}let v_868: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_867),2-proj-2-tuple(v_867),3-proj-3-tuple(v_866),msg_c(alice,charlie,sid))) in
        {312}let v_869: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_866))) in
        {313}let v_870: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_867))) && success?(1-proj-3-tuple(v_866))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then cipherstatepack(1-proj-2-tuple(v_869),increment_nonce(2-proj-2-tuple(v_867))) else fail-any) else fail-any)) in
        {314}let v_871: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_866)) && success?(1-proj-3-tuple(v_866))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then (if not-caught-fail(v_868) then (if not-caught-fail(v_870) then (v_870,v_868) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {315}let v_872: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_871),2-proj-3-tuple(v_866),3-proj-3-tuple(v_866)))) in
        {316}let v_873: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_871)) && success?(symmetricstatepack(1-proj-2-tuple(v_871),2-proj-3-tuple(v_866),3-proj-3-tuple(v_866)))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),2-proj-2-tuple(v_871))) else fail-any) else fail-any)) in
        {317}let v_874: bitstring = catch-fail((if success?(1-proj-7-tuple(v_864)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then (if not-caught-fail(v_873) then (v_873,2-proj-2-tuple(v_871)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {318}let v_875: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_874),2-proj-7-tuple(v_864),3-proj-7-tuple(v_864),4-proj-7-tuple(v_864),5-proj-7-tuple(v_864),6-proj-7-tuple(v_864),7-proj-7-tuple(v_864))) in
        {319}let v_876: bitstring = catch-fail(concat3(1-proj-3-tuple(v_865),2-proj-3-tuple(v_865),2-proj-2-tuple(v_874))) in
        {320}let (hs_877: handshakestate,message_c_878: bitstring) = (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-7-tuple(v_864))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (v_875,v_876) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {321}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {322}insert statestore(alice,charlie,sid,statepack_d(hs_877,handshakestategetcs(hs_877),cs2_862));
        {323}out(pub, message_c_878)
    ) | (
        {344}get statestore(=alice,=charlie,=sid,statepack_d(hs_879: handshakestate,cs1_880: cipherstate,cs2_881: cipherstate)) in
        {325}let hs_882: handshakestate = handshakestatesetcs(hs_879,cs2_881) in
        {326}in(pub, message_d_883: bitstring);
        {327}let v_884: bitstring = catch-fail(handshakestateunpack(hs_882)) in
        {328}let v_885: bitstring = catch-fail(deconcat3(message_d_883)) in
        {329}let v_886: bool = catch-fail(true) in
        {330}let v_887: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_884))) in
        {331}let v_888: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_887))) in
        {332}let v_889: aead = catch-fail(decrypt(1-proj-2-tuple(v_888),2-proj-2-tuple(v_888),3-proj-3-tuple(v_887),3-proj-3-tuple(v_885))) in
        {333}let v_890: bitstring = catch-fail(aeadunpack(v_889)) in
        {334}let v_891: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_887))) in
        {335}let v_892: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_888))) && success?(1-proj-3-tuple(v_887))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then cipherstatepack(1-proj-2-tuple(v_891),increment_nonce(2-proj-2-tuple(v_888))) else fail-any) else fail-any)) in
        {336}let v_893: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_885)) && (success?(3-proj-3-tuple(v_887)) && success?(1-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then (if not-caught-fail(v_889) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_892) then (v_892,3-proj-3-tuple(v_890),1-proj-3-tuple(v_890)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_894: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)))) in
        {338}let v_895: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_885)) && success?(symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then symmetricstatepack(1-proj-3-tuple(v_894),2-proj-3-tuple(v_894),hash(3-proj-3-tuple(v_894),3-proj-3-tuple(v_885))) else fail-any) else fail-any)) in
        {339}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_885)) && success?(1-proj-7-tuple(v_884))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if not-caught-fail(v_895) then (v_895,2-proj-3-tuple(v_893),3-proj-3-tuple(v_893)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_897: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_896),2-proj-7-tuple(v_884),3-proj-7-tuple(v_884),4-proj-7-tuple(v_884),5-proj-7-tuple(v_884),6-proj-7-tuple(v_884),7-proj-7-tuple(v_884))) in
        {341}let (hs_898: handshakestate,plaintext_d_899: bitstring,valid_900: bool) = (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-7-tuple(v_884))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_886) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (v_886 && 3-proj-3-tuple(v_896)) then (if not-caught-fail(v_897) then (v_897,2-proj-3-tuple(v_896),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {342}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_899);
        {343}event RecvEnd(valid_900)
    ) | (
        {345}event LeakPsk(phase0,alice,charlie);
        {346}out(pub, key_psk(alice,charlie))
    ) | (
        {347}phase 1;
        {348}event LeakPsk(phase1,alice,charlie);
        {349}out(pub, key_psk(alice,charlie))
    ) | (
        {350}event LeakS(phase0,alice);
        {351}out(pub, key_s(alice))
    ) | (
        {352}phase 1;
        {353}event LeakS(phase1,alice);
        {354}out(pub, key_s(alice))
    )
) | (
    {355}let v_901: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {356}let s_902: keypair = (if not-caught-fail(v_901) then keypairpack(validkey(v_901),key_s(bob)) else fail-any) in
    {357}out(pub, getpublickey(s_902));
    (
        {358}let e_903: keypair = keypairpack(empty,empty) in
        {359}let rs_904: key = empty in
        {360}let re_905: key = empty in
        {361}let v_906: bitstring = catch-fail(hash(somename,empty)) in
        {362}let v_907: key = catch-fail(v_906) in
        {363}let v_908: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {364}let v_909: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then symmetricstatepack(v_908,v_907,v_906) else fail-any) else fail-any) else fail-any))) in
        {365}let v_910: symmetricstate = catch-fail((if success?((if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then symmetricstatepack(v_908,v_907,v_906) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),hash(3-proj-3-tuple(v_909),empty)) else fail-any) else fail-any)) in
        {366}let v_911: bitstring = catch-fail(symmetricstateunpack(v_910)) in
        {367}let v_912: symmetricstate = catch-fail((if success?(getpublickey(s_902)) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_911),hash(3-proj-3-tuple(v_911),getpublickey(s_902))) else fail-any) else fail-any)) in
        {368}let hs_913: handshakestate = (if not-caught-fail(v_910) then (if not-caught-fail(v_912) then handshakestatepack(v_912,s_902,e_903,rs_904,re_905,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {369}insert statestore(bob,alice,sid,statepack_a(hs_913))
    ) | (
        {423}get statestore(=bob,=alice,=sid,statepack_a(hs_914: handshakestate)) in
        {370}in(pub, message_a_915: bitstring);
        {371}let v_916: bitstring = catch-fail(handshakestateunpack(hs_914)) in
        {372}let v_917: bitstring = catch-fail(deconcat3(message_a_915)) in
        {373}let v_918: bool = catch-fail(true) in
        {374}let v_919: key = catch-fail(1-proj-3-tuple(v_917)) in
        {375}let v_920: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_916))) in
        {376}let v_921: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_916)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_920),hash(3-proj-3-tuple(v_920),v_919)) else fail-any) else fail-any)) in
        {377}let v_922: bitstring = catch-fail(symmetricstateunpack(v_921)) in
        {378}let v_923: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_922),v_919)) in
        {379}let v_924: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_922),v_919)) in
        {380}let v_925: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_922),v_919)) in
        {381}let v_926: bitstring = catch-fail((if success?(2-proj-3-tuple(v_922)) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (v_923,v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_927: symmetricstate = catch-fail((if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_926)) then cipherstatepack(2-proj-3-tuple(v_926),minnonce) else fail-any),1-proj-3-tuple(v_926),3-proj-3-tuple(v_922)) else fail-any) else fail-any)) in
        {383}let v_928: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_916))) in
        {384}let v_929: bitstring = catch-fail(symmetricstateunpack(v_927)) in
        {385}let v_930: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_929),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),v_919) else fail-any) else fail-any))) in
        {386}let v_931: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_929),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),v_919) else fail-any) else fail-any))) in
        {387}let v_932: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_929),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),v_919) else fail-any) else fail-any))) in
        {388}let v_933: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),v_919) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_929))) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if not-caught-fail(v_932) then (v_930,v_931,v_932) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_934: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),v_919) else fail-any) else fail-any)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_933)) then cipherstatepack(2-proj-3-tuple(v_933),minnonce) else fail-any),1-proj-3-tuple(v_933),3-proj-3-tuple(v_929)) else fail-any) else fail-any) else fail-any)) in
        {390}let v_935: bitstring = catch-fail(symmetricstateunpack(v_934)) in
        {391}let v_936: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_935))) in
        {392}let v_937: aead = catch-fail(decrypt(1-proj-2-tuple(v_936),2-proj-2-tuple(v_936),3-proj-3-tuple(v_935),2-proj-3-tuple(v_917))) in
        {393}let v_938: bitstring = catch-fail(aeadunpack(v_937)) in
        {394}let v_939: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_935))) in
        {395}let v_940: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_936))) && success?(1-proj-3-tuple(v_935))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then cipherstatepack(1-proj-2-tuple(v_939),increment_nonce(2-proj-2-tuple(v_936))) else fail-any) else fail-any)) in
        {396}let v_941: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_917)) && (success?(3-proj-3-tuple(v_935)) && success?(1-proj-3-tuple(v_935)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-2-tuple(v_936))))) then (if not-caught-fail(v_937) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if not-caught-fail(v_940) then (v_940,3-proj-3-tuple(v_938),1-proj-3-tuple(v_938)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_942: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)))) in
        {398}let v_943: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_917)) && success?(symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then symmetricstatepack(1-proj-3-tuple(v_942),2-proj-3-tuple(v_942),hash(3-proj-3-tuple(v_942),2-proj-3-tuple(v_917))) else fail-any) else fail-any)) in
        {399}let v_944: bitstring = catch-fail((if success?(2-proj-3-tuple(v_917)) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if not-caught-fail(v_943) then (v_943,2-proj-3-tuple(v_941),3-proj-3-tuple(v_941)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_945: key = catch-fail(2-proj-3-tuple(v_944)) in
        {401}let v_946: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_916))) in
        {402}let v_947: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_944))) in
        {403}let v_948: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_947),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then dhexp(2-proj-2-tuple(v_946),v_945) else fail-any) else fail-any))) in
        {404}let v_949: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_947),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then dhexp(2-proj-2-tuple(v_946),v_945) else fail-any) else fail-any))) in
        {405}let v_950: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_947),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then dhexp(2-proj-2-tuple(v_946),v_945) else fail-any) else fail-any))) in
        {406}let v_951: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then dhexp(2-proj-2-tuple(v_946),v_945) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_947))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (v_948,v_949,v_950) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_952: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then dhexp(2-proj-2-tuple(v_946),v_945) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_951)) then cipherstatepack(2-proj-3-tuple(v_951),minnonce) else fail-any),1-proj-3-tuple(v_951),3-proj-3-tuple(v_947)) else fail-any) else fail-any) else fail-any)) in
        {408}let v_953: bitstring = catch-fail(symmetricstateunpack(v_952)) in
        {409}let v_954: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_953))) in
        {410}let v_955: aead = catch-fail(decrypt(1-proj-2-tuple(v_954),2-proj-2-tuple(v_954),3-proj-3-tuple(v_953),3-proj-3-tuple(v_917))) in
        {411}let v_956: bitstring = catch-fail(aeadunpack(v_955)) in
        {412}let v_957: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_953))) in
        {413}let v_958: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_954))) && success?(1-proj-3-tuple(v_953))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then cipherstatepack(1-proj-2-tuple(v_957),increment_nonce(2-proj-2-tuple(v_954))) else fail-any) else fail-any)) in
        {414}let v_959: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_917)) && (success?(3-proj-3-tuple(v_953)) && success?(1-proj-3-tuple(v_953)))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then (if not-caught-fail(v_955) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if not-caught-fail(v_958) then (v_958,3-proj-3-tuple(v_956),1-proj-3-tuple(v_956)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_960: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_959),2-proj-3-tuple(v_953),3-proj-3-tuple(v_953)))) in
        {416}let v_961: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_917)) && success?(symmetricstatepack(1-proj-3-tuple(v_959),2-proj-3-tuple(v_953),3-proj-3-tuple(v_953)))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_960),hash(3-proj-3-tuple(v_960),3-proj-3-tuple(v_917))) else fail-any) else fail-any)) in
        {417}let v_962: bitstring = catch-fail((if success?(3-proj-3-tuple(v_917)) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if not-caught-fail(v_961) then (v_961,2-proj-3-tuple(v_959),3-proj-3-tuple(v_959)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_963: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {419}let v_964: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_962),2-proj-7-tuple(v_916),3-proj-7-tuple(v_916),v_945,v_919,6-proj-7-tuple(v_916),7-proj-7-tuple(v_916))) in
        {420}let (hs_965: handshakestate,plaintext_a: bitstring,valid_966: bool) = (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-7-tuple(v_916))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (if not-caught-fail(v_921) then (if not-caught-fail(v_927) then (if not-caught-fail(v_934) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if not-caught-fail(v_945) then (if not-caught-fail(v_952) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if ((3-proj-3-tuple(v_944) && 3-proj-3-tuple(v_962)) && (v_945 = getpublickey((if not-caught-fail(v_963) then keypairpack(validkey(v_963),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_964) then (v_964,2-proj-3-tuple(v_962),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {421}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {422}insert statestore(bob,alice,sid,statepack_b(hs_965))
    ) | (
        {482}get statestore(=bob,=alice,=sid,statepack_b(hs_967: handshakestate)) in
        {424}let v_968: bitstring = catch-fail(handshakestateunpack(hs_967)) in
        {425}let v_969: bitstring = catch-fail((empty,empty,empty)) in
        {426}let v_970: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {427}let v_971: keypair = catch-fail((if not-caught-fail(v_970) then keypairpack(validkey(v_970),key_e(bob,alice,sid)) else fail-any)) in
        {428}let v_972: bitstring = catch-fail(getpublickey(v_971)) in
        {429}let v_973: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_968))) in
        {430}let v_974: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_968)) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),v_972)) else fail-any) else fail-any)) in
        {431}let v_975: bitstring = catch-fail(symmetricstateunpack(v_974)) in
        {432}let v_976: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_975),getpublickey(v_971))) in
        {433}let v_977: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_975),getpublickey(v_971))) in
        {434}let v_978: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_975),getpublickey(v_971))) in
        {435}let v_979: bitstring = catch-fail((if (success?(getpublickey(v_971)) && success?(2-proj-3-tuple(v_975))) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then (v_976,v_977,v_978) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_980: symmetricstate = catch-fail((if success?(getpublickey(v_971)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_979)) then cipherstatepack(2-proj-3-tuple(v_979),minnonce) else fail-any),1-proj-3-tuple(v_979),3-proj-3-tuple(v_975)) else fail-any) else fail-any) else fail-any)) in
        {437}let v_981: bitstring = catch-fail(keypairunpack(v_971)) in
        {438}let v_982: bitstring = catch-fail(symmetricstateunpack(v_980)) in
        {439}let v_983: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_982),(if success?(5-proj-7-tuple(v_968)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then dhexp(2-proj-2-tuple(v_981),5-proj-7-tuple(v_968)) else fail-any) else fail-any))) in
        {440}let v_984: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_982),(if success?(5-proj-7-tuple(v_968)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then dhexp(2-proj-2-tuple(v_981),5-proj-7-tuple(v_968)) else fail-any) else fail-any))) in
        {441}let v_985: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_982),(if success?(5-proj-7-tuple(v_968)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then dhexp(2-proj-2-tuple(v_981),5-proj-7-tuple(v_968)) else fail-any) else fail-any))) in
        {442}let v_986: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_968)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then dhexp(2-proj-2-tuple(v_981),5-proj-7-tuple(v_968)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_982))) then (if not-caught-fail(v_983) then (if not-caught-fail(v_984) then (if not-caught-fail(v_985) then (v_983,v_984,v_985) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_987: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_968)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then dhexp(2-proj-2-tuple(v_981),5-proj-7-tuple(v_968)) else fail-any) else fail-any)) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_986)) then cipherstatepack(2-proj-3-tuple(v_986),minnonce) else fail-any),1-proj-3-tuple(v_986),3-proj-3-tuple(v_982)) else fail-any) else fail-any) else fail-any)) in
        {444}let v_988: bitstring = catch-fail(keypairunpack(v_971)) in
        {445}let v_989: bitstring = catch-fail(symmetricstateunpack(v_987)) in
        {446}let v_990: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_989),(if success?(4-proj-7-tuple(v_968)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),4-proj-7-tuple(v_968)) else fail-any) else fail-any))) in
        {447}let v_991: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_989),(if success?(4-proj-7-tuple(v_968)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),4-proj-7-tuple(v_968)) else fail-any) else fail-any))) in
        {448}let v_992: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_989),(if success?(4-proj-7-tuple(v_968)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),4-proj-7-tuple(v_968)) else fail-any) else fail-any))) in
        {449}let v_993: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_968)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),4-proj-7-tuple(v_968)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_989))) then (if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (v_990,v_991,v_992) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_994: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_968)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),4-proj-7-tuple(v_968)) else fail-any) else fail-any)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_993)) then cipherstatepack(2-proj-3-tuple(v_993),minnonce) else fail-any),1-proj-3-tuple(v_993),3-proj-3-tuple(v_989)) else fail-any) else fail-any) else fail-any)) in
        {451}let v_995: bitstring = catch-fail(symmetricstateunpack(v_994)) in
        {452}let v_996: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_995),6-proj-7-tuple(v_968))) in
        {453}let v_997: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_995),6-proj-7-tuple(v_968))) in
        {454}let v_998: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_995),6-proj-7-tuple(v_968))) in
        {455}let v_999: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_968)) && success?(2-proj-3-tuple(v_995))) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then (if not-caught-fail(v_998) then (v_996,v_997,v_998) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {456}let v_1000: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_995),1-proj-3-tuple(v_999),3-proj-3-tuple(v_995)))) in
        {457}let v_1001: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_999)) && success?(symmetricstatepack(1-proj-3-tuple(v_995),1-proj-3-tuple(v_999),3-proj-3-tuple(v_995)))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_1000),hash(3-proj-3-tuple(v_1000),2-proj-3-tuple(v_999))) else fail-any) else fail-any))) in
        {458}let v_1002: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_968)) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_999)) then cipherstatepack(3-proj-3-tuple(v_999),minnonce) else fail-any),1-proj-3-tuple(v_999),3-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_1003: bitstring = catch-fail(symmetricstateunpack(v_1002)) in
        {460}let v_1004: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {461}let v_1005: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1004),2-proj-2-tuple(v_1004),3-proj-3-tuple(v_1003),msg_b(bob,alice,sid))) in
        {462}let v_1006: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {463}let v_1007: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1004))) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then cipherstatepack(1-proj-2-tuple(v_1006),increment_nonce(2-proj-2-tuple(v_1004))) else fail-any) else fail-any)) in
        {464}let v_1008: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1003)) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1007) then (v_1007,v_1005) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {465}let v_1009: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1008),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) in
        {466}let v_1010: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1008)) && success?(symmetricstatepack(1-proj-2-tuple(v_1008),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1009),hash(3-proj-3-tuple(v_1009),2-proj-2-tuple(v_1008))) else fail-any) else fail-any)) in
        {467}let v_1011: bitstring = catch-fail((if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-2-tuple(v_1008))))) then (if not-caught-fail(v_1010) then (v_1010,2-proj-2-tuple(v_1008)) else fail-any) else fail-any) else fail-any)) in
        {468}let v_1012: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1011),2-proj-7-tuple(v_968),v_971,4-proj-7-tuple(v_968),5-proj-7-tuple(v_968),6-proj-7-tuple(v_968),7-proj-7-tuple(v_968))) in
        {469}let v_1013: bitstring = catch-fail(concat3(v_972,2-proj-3-tuple(v_969),2-proj-2-tuple(v_1011))) in
        {470}let v_1014: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1011))) in
        {471}let v_1015: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1014),zero)) in
        {472}let v_1016: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1014),zero)) in
        {473}let v_1017: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1014),zero)) in
        {474}let v_1018: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1014)) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (v_1015,v_1016,v_1017) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let v_1019: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1018)) then cipherstatepack(1-proj-3-tuple(v_1018),minnonce) else fail-any)) in
        {476}let v_1020: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1018)) then cipherstatepack(2-proj-3-tuple(v_1018),minnonce) else fail-any)) in
        {477}let v_1021: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1011)) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1020) then (1-proj-2-tuple(v_1011),v_1019,v_1020) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let (hs_1022: handshakestate,message_b_1023: bitstring,cs1_1024: cipherstate,cs2_1025: cipherstate) = (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-7-tuple(v_968))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_971) then (if not-caught-fail(v_972) then (if not-caught-fail(v_974) then (if not-caught-fail(v_980) then (if not-caught-fail(v_987) then (if not-caught-fail(v_994) then (if not-caught-fail(v_1002) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (v_1012,v_1013,2-proj-3-tuple(v_1021),3-proj-3-tuple(v_1021)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {479}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {480}insert statestore(bob,alice,sid,statepack_c(hs_1022,cs1_1024,cs2_1025));
        {481}out(pub, message_b_1023)
    ) | (
        {502}get statestore(=bob,=alice,=sid,statepack_c(hs_1026: handshakestate,cs1_1027: cipherstate,cs2_1028: cipherstate)) in
        {483}let hs_1029: handshakestate = handshakestatesetcs(hs_1026,cs1_1027) in
        {484}in(pub, message_c_1030: bitstring);
        {485}let v_1031: bitstring = catch-fail(handshakestateunpack(hs_1029)) in
        {486}let v_1032: bitstring = catch-fail(deconcat3(message_c_1030)) in
        {487}let v_1033: bool = catch-fail(true) in
        {488}let v_1034: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1031))) in
        {489}let v_1035: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1034))) in
        {490}let v_1036: aead = catch-fail(decrypt(1-proj-2-tuple(v_1035),2-proj-2-tuple(v_1035),3-proj-3-tuple(v_1034),3-proj-3-tuple(v_1032))) in
        {491}let v_1037: bitstring = catch-fail(aeadunpack(v_1036)) in
        {492}let v_1038: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1034))) in
        {493}let v_1039: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1035))) && success?(1-proj-3-tuple(v_1034))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then cipherstatepack(1-proj-2-tuple(v_1038),increment_nonce(2-proj-2-tuple(v_1035))) else fail-any) else fail-any)) in
        {494}let v_1040: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1032)) && (success?(3-proj-3-tuple(v_1034)) && success?(1-proj-3-tuple(v_1034)))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-2-tuple(v_1035))))) then (if not-caught-fail(v_1036) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (if not-caught-fail(v_1039) then (v_1039,3-proj-3-tuple(v_1037),1-proj-3-tuple(v_1037)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {495}let v_1041: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1034),3-proj-3-tuple(v_1034)))) in
        {496}let v_1042: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1032)) && success?(symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1034),3-proj-3-tuple(v_1034)))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then symmetricstatepack(1-proj-3-tuple(v_1041),2-proj-3-tuple(v_1041),hash(3-proj-3-tuple(v_1041),3-proj-3-tuple(v_1032))) else fail-any) else fail-any)) in
        {497}let v_1043: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1032)) && success?(1-proj-7-tuple(v_1031))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then (if not-caught-fail(v_1042) then (v_1042,2-proj-3-tuple(v_1040),3-proj-3-tuple(v_1040)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_1044: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1043),2-proj-7-tuple(v_1031),3-proj-7-tuple(v_1031),4-proj-7-tuple(v_1031),5-proj-7-tuple(v_1031),6-proj-7-tuple(v_1031),7-proj-7-tuple(v_1031))) in
        {499}let (hs_1045: handshakestate,plaintext_c: bitstring,valid_1046: bool) = (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-7-tuple(v_1031))))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then (if not-caught-fail(v_1033) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then (if (v_1033 && 3-proj-3-tuple(v_1043)) then (if not-caught-fail(v_1044) then (v_1044,2-proj-3-tuple(v_1043),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {500}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {501}insert statestore(bob,alice,sid,statepack_d(hs_1045,handshakestategetcs(hs_1045),cs2_1028))
    ) | (
        {520}get statestore(=bob,=alice,=sid,statepack_d(hs_1047: handshakestate,cs1_1048: cipherstate,cs2_1049: cipherstate)) in
        {503}let hs_1050: handshakestate = handshakestatesetcs(hs_1047,cs2_1049) in
        {504}let v_1051: bitstring = catch-fail(handshakestateunpack(hs_1050)) in
        {505}let v_1052: bitstring = catch-fail((empty,empty,empty)) in
        {506}let v_1053: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1051))) in
        {507}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1053))) in
        {508}let v_1055: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1054),2-proj-2-tuple(v_1054),3-proj-3-tuple(v_1053),msg_d(bob,alice,sid))) in
        {509}let v_1056: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1053))) in
        {510}let v_1057: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1054))) && success?(1-proj-3-tuple(v_1053))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then cipherstatepack(1-proj-2-tuple(v_1056),increment_nonce(2-proj-2-tuple(v_1054))) else fail-any) else fail-any)) in
        {511}let v_1058: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1053)) && success?(1-proj-3-tuple(v_1053))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1057) then (v_1057,v_1055) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_1059: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1058),2-proj-3-tuple(v_1053),3-proj-3-tuple(v_1053)))) in
        {513}let v_1060: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1058)) && success?(symmetricstatepack(1-proj-2-tuple(v_1058),2-proj-3-tuple(v_1053),3-proj-3-tuple(v_1053)))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then symmetricstatepack(1-proj-3-tuple(v_1059),2-proj-3-tuple(v_1059),hash(3-proj-3-tuple(v_1059),2-proj-2-tuple(v_1058))) else fail-any) else fail-any)) in
        {514}let v_1061: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then (if not-caught-fail(v_1060) then (v_1060,2-proj-2-tuple(v_1058)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {515}let v_1062: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1061),2-proj-7-tuple(v_1051),3-proj-7-tuple(v_1051),4-proj-7-tuple(v_1051),5-proj-7-tuple(v_1051),6-proj-7-tuple(v_1051),7-proj-7-tuple(v_1051))) in
        {516}let v_1063: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1052),2-proj-3-tuple(v_1052),2-proj-2-tuple(v_1061))) in
        {517}let (hs_1064: handshakestate,message_d_1065: bitstring) = (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-7-tuple(v_1051))))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (v_1062,v_1063) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {518}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {519}out(pub, message_d_1065)
    ) | (
        {521}event LeakPsk(phase0,alice,bob);
        {522}out(pub, key_psk(alice,bob))
    ) | (
        {523}phase 1;
        {524}event LeakPsk(phase1,alice,bob);
        {525}out(pub, key_psk(alice,bob))
    ) | (
        {526}event LeakS(phase0,bob);
        {527}out(pub, key_s(bob))
    ) | (
        {528}phase 1;
        {529}event LeakS(phase1,bob);
        {530}out(pub, key_s(bob))
    )
) | (
    {531}let v_1066: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {532}let s_1067: keypair = (if not-caught-fail(v_1066) then keypairpack(validkey(v_1066),key_s(bob)) else fail-any) in
    {533}out(pub, getpublickey(s_1067));
    (
        {534}let e_1068: keypair = keypairpack(empty,empty) in
        {535}let rs_1069: key = empty in
        {536}let re_1070: key = empty in
        {537}let v_1071: bitstring = catch-fail(hash(somename,empty)) in
        {538}let v_1072: key = catch-fail(v_1071) in
        {539}let v_1073: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {540}let v_1074: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then symmetricstatepack(v_1073,v_1072,v_1071) else fail-any) else fail-any) else fail-any))) in
        {541}let v_1075: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then symmetricstatepack(v_1073,v_1072,v_1071) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then symmetricstatepack(1-proj-3-tuple(v_1074),2-proj-3-tuple(v_1074),hash(3-proj-3-tuple(v_1074),empty)) else fail-any) else fail-any)) in
        {542}let v_1076: bitstring = catch-fail(symmetricstateunpack(v_1075)) in
        {543}let v_1077: symmetricstate = catch-fail((if success?(getpublickey(s_1067)) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then symmetricstatepack(1-proj-3-tuple(v_1076),2-proj-3-tuple(v_1076),hash(3-proj-3-tuple(v_1076),getpublickey(s_1067))) else fail-any) else fail-any)) in
        {544}let hs_1078: handshakestate = (if not-caught-fail(v_1075) then (if not-caught-fail(v_1077) then handshakestatepack(v_1077,s_1067,e_1068,rs_1069,re_1070,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {545}insert statestore(bob,charlie,sid,statepack_a(hs_1078))
    ) | (
        {599}get statestore(=bob,=charlie,=sid,statepack_a(hs_1079: handshakestate)) in
        {546}in(pub, message_a_1080: bitstring);
        {547}let v_1081: bitstring = catch-fail(handshakestateunpack(hs_1079)) in
        {548}let v_1082: bitstring = catch-fail(deconcat3(message_a_1080)) in
        {549}let v_1083: bool = catch-fail(true) in
        {550}let v_1084: key = catch-fail(1-proj-3-tuple(v_1082)) in
        {551}let v_1085: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1081))) in
        {552}let v_1086: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then symmetricstatepack(1-proj-3-tuple(v_1085),2-proj-3-tuple(v_1085),hash(3-proj-3-tuple(v_1085),v_1084)) else fail-any) else fail-any)) in
        {553}let v_1087: bitstring = catch-fail(symmetricstateunpack(v_1086)) in
        {554}let v_1088: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1087),v_1084)) in
        {555}let v_1089: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1087),v_1084)) in
        {556}let v_1090: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1087),v_1084)) in
        {557}let v_1091: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1087)) then (if not-caught-fail(v_1088) then (if not-caught-fail(v_1089) then (if not-caught-fail(v_1090) then (v_1088,v_1089,v_1090) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1092: symmetricstate = catch-fail((if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-3-tuple(v_1087))))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1091)) then cipherstatepack(2-proj-3-tuple(v_1091),minnonce) else fail-any),1-proj-3-tuple(v_1091),3-proj-3-tuple(v_1087)) else fail-any) else fail-any)) in
        {559}let v_1093: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1081))) in
        {560}let v_1094: bitstring = catch-fail(symmetricstateunpack(v_1092)) in
        {561}let v_1095: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1094),(if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),v_1084) else fail-any) else fail-any))) in
        {562}let v_1096: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1094),(if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),v_1084) else fail-any) else fail-any))) in
        {563}let v_1097: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1094),(if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),v_1084) else fail-any) else fail-any))) in
        {564}let v_1098: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),v_1084) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1094))) then (if not-caught-fail(v_1095) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1097) then (v_1095,v_1096,v_1097) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1099: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),v_1084) else fail-any) else fail-any)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-3-tuple(v_1098))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1098)) then cipherstatepack(2-proj-3-tuple(v_1098),minnonce) else fail-any),1-proj-3-tuple(v_1098),3-proj-3-tuple(v_1094)) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1100: bitstring = catch-fail(symmetricstateunpack(v_1099)) in
        {567}let v_1101: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {568}let v_1102: aead = catch-fail(decrypt(1-proj-2-tuple(v_1101),2-proj-2-tuple(v_1101),3-proj-3-tuple(v_1100),2-proj-3-tuple(v_1082))) in
        {569}let v_1103: bitstring = catch-fail(aeadunpack(v_1102)) in
        {570}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {571}let v_1105: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1101))) && success?(1-proj-3-tuple(v_1100))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then cipherstatepack(1-proj-2-tuple(v_1104),increment_nonce(2-proj-2-tuple(v_1101))) else fail-any) else fail-any)) in
        {572}let v_1106: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1082)) && (success?(3-proj-3-tuple(v_1100)) && success?(1-proj-3-tuple(v_1100)))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then (if not-caught-fail(v_1102) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if not-caught-fail(v_1105) then (v_1105,3-proj-3-tuple(v_1103),1-proj-3-tuple(v_1103)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1107: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) in
        {574}let v_1108: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1082)) && success?(symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1107),hash(3-proj-3-tuple(v_1107),2-proj-3-tuple(v_1082))) else fail-any) else fail-any)) in
        {575}let v_1109: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1082)) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then (if not-caught-fail(v_1108) then (v_1108,2-proj-3-tuple(v_1106),3-proj-3-tuple(v_1106)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {576}let v_1110: key = catch-fail(2-proj-3-tuple(v_1109)) in
        {577}let v_1111: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1081))) in
        {578}let v_1112: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1109))) in
        {579}let v_1113: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1112),(if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-2-tuple(v_1111))))) then dhexp(2-proj-2-tuple(v_1111),v_1110) else fail-any) else fail-any))) in
        {580}let v_1114: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1112),(if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-2-tuple(v_1111))))) then dhexp(2-proj-2-tuple(v_1111),v_1110) else fail-any) else fail-any))) in
        {581}let v_1115: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1112),(if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-2-tuple(v_1111))))) then dhexp(2-proj-2-tuple(v_1111),v_1110) else fail-any) else fail-any))) in
        {582}let v_1116: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-2-tuple(v_1111))))) then dhexp(2-proj-2-tuple(v_1111),v_1110) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1112))) then (if not-caught-fail(v_1113) then (if not-caught-fail(v_1114) then (if not-caught-fail(v_1115) then (v_1113,v_1114,v_1115) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1117: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-2-tuple(v_1111))))) then dhexp(2-proj-2-tuple(v_1111),v_1110) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_1109))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1116)) then cipherstatepack(2-proj-3-tuple(v_1116),minnonce) else fail-any),1-proj-3-tuple(v_1116),3-proj-3-tuple(v_1112)) else fail-any) else fail-any) else fail-any)) in
        {584}let v_1118: bitstring = catch-fail(symmetricstateunpack(v_1117)) in
        {585}let v_1119: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1118))) in
        {586}let v_1120: aead = catch-fail(decrypt(1-proj-2-tuple(v_1119),2-proj-2-tuple(v_1119),3-proj-3-tuple(v_1118),3-proj-3-tuple(v_1082))) in
        {587}let v_1121: bitstring = catch-fail(aeadunpack(v_1120)) in
        {588}let v_1122: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1118))) in
        {589}let v_1123: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1119))) && success?(1-proj-3-tuple(v_1118))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-2-tuple(v_1122))))) then cipherstatepack(1-proj-2-tuple(v_1122),increment_nonce(2-proj-2-tuple(v_1119))) else fail-any) else fail-any)) in
        {590}let v_1124: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1082)) && (success?(3-proj-3-tuple(v_1118)) && success?(1-proj-3-tuple(v_1118)))) then (if (not-caught-fail(v_1119) && success?(is-true(success?(1-proj-2-tuple(v_1119))))) then (if not-caught-fail(v_1120) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (if not-caught-fail(v_1123) then (v_1123,3-proj-3-tuple(v_1121),1-proj-3-tuple(v_1121)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {591}let v_1125: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1124),2-proj-3-tuple(v_1118),3-proj-3-tuple(v_1118)))) in
        {592}let v_1126: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1082)) && success?(symmetricstatepack(1-proj-3-tuple(v_1124),2-proj-3-tuple(v_1118),3-proj-3-tuple(v_1118)))) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then symmetricstatepack(1-proj-3-tuple(v_1125),2-proj-3-tuple(v_1125),hash(3-proj-3-tuple(v_1125),3-proj-3-tuple(v_1082))) else fail-any) else fail-any)) in
        {593}let v_1127: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1082)) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-3-tuple(v_1124))))) then (if not-caught-fail(v_1126) then (v_1126,2-proj-3-tuple(v_1124),3-proj-3-tuple(v_1124)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1128: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {595}let v_1129: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1127),2-proj-7-tuple(v_1081),3-proj-7-tuple(v_1081),v_1110,v_1084,6-proj-7-tuple(v_1081),7-proj-7-tuple(v_1081))) in
        {596}let (hs_1130: handshakestate,plaintext_a_1131: bitstring,valid_1132: bool) = (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-7-tuple(v_1081))))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-3-tuple(v_1082))))) then (if not-caught-fail(v_1083) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1086) then (if not-caught-fail(v_1092) then (if not-caught-fail(v_1099) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if not-caught-fail(v_1110) then (if not-caught-fail(v_1117) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-3-tuple(v_1127))))) then (if ((3-proj-3-tuple(v_1109) && 3-proj-3-tuple(v_1127)) && (v_1110 = getpublickey((if not-caught-fail(v_1128) then keypairpack(validkey(v_1128),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1129) then (v_1129,2-proj-3-tuple(v_1127),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {597}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1131);
        {598}insert statestore(bob,charlie,sid,statepack_b(hs_1130))
    ) | (
        {658}get statestore(=bob,=charlie,=sid,statepack_b(hs_1133: handshakestate)) in
        {600}let v_1134: bitstring = catch-fail(handshakestateunpack(hs_1133)) in
        {601}let v_1135: bitstring = catch-fail((empty,empty,empty)) in
        {602}let v_1136: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {603}let v_1137: keypair = catch-fail((if not-caught-fail(v_1136) then keypairpack(validkey(v_1136),key_e(bob,charlie,sid)) else fail-any)) in
        {604}let v_1138: bitstring = catch-fail(getpublickey(v_1137)) in
        {605}let v_1139: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1134))) in
        {606}let v_1140: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then symmetricstatepack(1-proj-3-tuple(v_1139),2-proj-3-tuple(v_1139),hash(3-proj-3-tuple(v_1139),v_1138)) else fail-any) else fail-any)) in
        {607}let v_1141: bitstring = catch-fail(symmetricstateunpack(v_1140)) in
        {608}let v_1142: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1141),getpublickey(v_1137))) in
        {609}let v_1143: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1141),getpublickey(v_1137))) in
        {610}let v_1144: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1141),getpublickey(v_1137))) in
        {611}let v_1145: bitstring = catch-fail((if (success?(getpublickey(v_1137)) && success?(2-proj-3-tuple(v_1141))) then (if not-caught-fail(v_1142) then (if not-caught-fail(v_1143) then (if not-caught-fail(v_1144) then (v_1142,v_1143,v_1144) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let v_1146: symmetricstate = catch-fail((if success?(getpublickey(v_1137)) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1145)) then cipherstatepack(2-proj-3-tuple(v_1145),minnonce) else fail-any),1-proj-3-tuple(v_1145),3-proj-3-tuple(v_1141)) else fail-any) else fail-any) else fail-any)) in
        {613}let v_1147: bitstring = catch-fail(keypairunpack(v_1137)) in
        {614}let v_1148: bitstring = catch-fail(symmetricstateunpack(v_1146)) in
        {615}let v_1149: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1148),(if success?(5-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-2-tuple(v_1147))))) then dhexp(2-proj-2-tuple(v_1147),5-proj-7-tuple(v_1134)) else fail-any) else fail-any))) in
        {616}let v_1150: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1148),(if success?(5-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-2-tuple(v_1147))))) then dhexp(2-proj-2-tuple(v_1147),5-proj-7-tuple(v_1134)) else fail-any) else fail-any))) in
        {617}let v_1151: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1148),(if success?(5-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-2-tuple(v_1147))))) then dhexp(2-proj-2-tuple(v_1147),5-proj-7-tuple(v_1134)) else fail-any) else fail-any))) in
        {618}let v_1152: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-2-tuple(v_1147))))) then dhexp(2-proj-2-tuple(v_1147),5-proj-7-tuple(v_1134)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1148))) then (if not-caught-fail(v_1149) then (if not-caught-fail(v_1150) then (if not-caught-fail(v_1151) then (v_1149,v_1150,v_1151) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {619}let v_1153: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-2-tuple(v_1147))))) then dhexp(2-proj-2-tuple(v_1147),5-proj-7-tuple(v_1134)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-3-tuple(v_1148))))) then (if (not-caught-fail(v_1152) && success?(is-true(success?(1-proj-3-tuple(v_1152))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1152)) then cipherstatepack(2-proj-3-tuple(v_1152),minnonce) else fail-any),1-proj-3-tuple(v_1152),3-proj-3-tuple(v_1148)) else fail-any) else fail-any) else fail-any)) in
        {620}let v_1154: bitstring = catch-fail(keypairunpack(v_1137)) in
        {621}let v_1155: bitstring = catch-fail(symmetricstateunpack(v_1153)) in
        {622}let v_1156: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1155),(if success?(4-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-2-tuple(v_1154))))) then dhexp(2-proj-2-tuple(v_1154),4-proj-7-tuple(v_1134)) else fail-any) else fail-any))) in
        {623}let v_1157: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1155),(if success?(4-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-2-tuple(v_1154))))) then dhexp(2-proj-2-tuple(v_1154),4-proj-7-tuple(v_1134)) else fail-any) else fail-any))) in
        {624}let v_1158: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1155),(if success?(4-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-2-tuple(v_1154))))) then dhexp(2-proj-2-tuple(v_1154),4-proj-7-tuple(v_1134)) else fail-any) else fail-any))) in
        {625}let v_1159: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-2-tuple(v_1154))))) then dhexp(2-proj-2-tuple(v_1154),4-proj-7-tuple(v_1134)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1155))) then (if not-caught-fail(v_1156) then (if not-caught-fail(v_1157) then (if not-caught-fail(v_1158) then (v_1156,v_1157,v_1158) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1160: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-2-tuple(v_1154))))) then dhexp(2-proj-2-tuple(v_1154),4-proj-7-tuple(v_1134)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-3-tuple(v_1155))))) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1159)) then cipherstatepack(2-proj-3-tuple(v_1159),minnonce) else fail-any),1-proj-3-tuple(v_1159),3-proj-3-tuple(v_1155)) else fail-any) else fail-any) else fail-any)) in
        {627}let v_1161: bitstring = catch-fail(symmetricstateunpack(v_1160)) in
        {628}let v_1162: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1161),6-proj-7-tuple(v_1134))) in
        {629}let v_1163: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1161),6-proj-7-tuple(v_1134))) in
        {630}let v_1164: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1161),6-proj-7-tuple(v_1134))) in
        {631}let v_1165: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1134)) && success?(2-proj-3-tuple(v_1161))) then (if not-caught-fail(v_1162) then (if not-caught-fail(v_1163) then (if not-caught-fail(v_1164) then (v_1162,v_1163,v_1164) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {632}let v_1166: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1161),1-proj-3-tuple(v_1165),3-proj-3-tuple(v_1161)))) in
        {633}let v_1167: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1165)) && success?(symmetricstatepack(1-proj-3-tuple(v_1161),1-proj-3-tuple(v_1165),3-proj-3-tuple(v_1161)))) then (if (not-caught-fail(v_1166) && success?(is-true(success?(1-proj-3-tuple(v_1166))))) then symmetricstatepack(1-proj-3-tuple(v_1166),2-proj-3-tuple(v_1166),hash(3-proj-3-tuple(v_1166),2-proj-3-tuple(v_1165))) else fail-any) else fail-any))) in
        {634}let v_1168: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_1134)) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1165)) then cipherstatepack(3-proj-3-tuple(v_1165),minnonce) else fail-any),1-proj-3-tuple(v_1165),3-proj-3-tuple(v_1167)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {635}let v_1169: bitstring = catch-fail(symmetricstateunpack(v_1168)) in
        {636}let v_1170: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1169))) in
        {637}let v_1171: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1170),2-proj-2-tuple(v_1170),3-proj-3-tuple(v_1169),msg_b(bob,charlie,sid))) in
        {638}let v_1172: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1169))) in
        {639}let v_1173: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1170))) && success?(1-proj-3-tuple(v_1169))) then (if (not-caught-fail(v_1172) && success?(is-true(success?(1-proj-2-tuple(v_1172))))) then cipherstatepack(1-proj-2-tuple(v_1172),increment_nonce(2-proj-2-tuple(v_1170))) else fail-any) else fail-any)) in
        {640}let v_1174: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1169)) && success?(1-proj-3-tuple(v_1169))) then (if (not-caught-fail(v_1170) && success?(is-true(success?(1-proj-2-tuple(v_1170))))) then (if not-caught-fail(v_1171) then (if not-caught-fail(v_1173) then (v_1173,v_1171) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {641}let v_1175: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1174),2-proj-3-tuple(v_1169),3-proj-3-tuple(v_1169)))) in
        {642}let v_1176: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1174)) && success?(symmetricstatepack(1-proj-2-tuple(v_1174),2-proj-3-tuple(v_1169),3-proj-3-tuple(v_1169)))) then (if (not-caught-fail(v_1175) && success?(is-true(success?(1-proj-3-tuple(v_1175))))) then symmetricstatepack(1-proj-3-tuple(v_1175),2-proj-3-tuple(v_1175),hash(3-proj-3-tuple(v_1175),2-proj-2-tuple(v_1174))) else fail-any) else fail-any)) in
        {643}let v_1177: bitstring = catch-fail((if (not-caught-fail(v_1169) && success?(is-true(success?(1-proj-3-tuple(v_1169))))) then (if (not-caught-fail(v_1174) && success?(is-true(success?(1-proj-2-tuple(v_1174))))) then (if not-caught-fail(v_1176) then (v_1176,2-proj-2-tuple(v_1174)) else fail-any) else fail-any) else fail-any)) in
        {644}let v_1178: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1177),2-proj-7-tuple(v_1134),v_1137,4-proj-7-tuple(v_1134),5-proj-7-tuple(v_1134),6-proj-7-tuple(v_1134),7-proj-7-tuple(v_1134))) in
        {645}let v_1179: bitstring = catch-fail(concat3(v_1138,2-proj-3-tuple(v_1135),2-proj-2-tuple(v_1177))) in
        {646}let v_1180: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1177))) in
        {647}let v_1181: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1180),zero)) in
        {648}let v_1182: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1180),zero)) in
        {649}let v_1183: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1180),zero)) in
        {650}let v_1184: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1180)) then (if not-caught-fail(v_1181) then (if not-caught-fail(v_1182) then (if not-caught-fail(v_1183) then (v_1181,v_1182,v_1183) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {651}let v_1185: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1184)) then cipherstatepack(1-proj-3-tuple(v_1184),minnonce) else fail-any)) in
        {652}let v_1186: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1184)) then cipherstatepack(2-proj-3-tuple(v_1184),minnonce) else fail-any)) in
        {653}let v_1187: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1177)) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-3-tuple(v_1180))))) then (if (not-caught-fail(v_1184) && success?(is-true(success?(1-proj-3-tuple(v_1184))))) then (if not-caught-fail(v_1185) then (if not-caught-fail(v_1186) then (1-proj-2-tuple(v_1177),v_1185,v_1186) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {654}let (hs_1188: handshakestate,message_b_1189: bitstring,cs1_1190: cipherstate,cs2_1191: cipherstate) = (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-7-tuple(v_1134))))) then (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-3-tuple(v_1135))))) then (if not-caught-fail(v_1137) then (if not-caught-fail(v_1138) then (if not-caught-fail(v_1140) then (if not-caught-fail(v_1146) then (if not-caught-fail(v_1153) then (if not-caught-fail(v_1160) then (if not-caught-fail(v_1168) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-2-tuple(v_1177))))) then (if not-caught-fail(v_1178) then (if not-caught-fail(v_1179) then (if (not-caught-fail(v_1187) && success?(is-true(success?(1-proj-3-tuple(v_1187))))) then (v_1178,v_1179,2-proj-3-tuple(v_1187),3-proj-3-tuple(v_1187)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {655}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {656}insert statestore(bob,charlie,sid,statepack_c(hs_1188,cs1_1190,cs2_1191));
        {657}out(pub, message_b_1189)
    ) | (
        {678}get statestore(=bob,=charlie,=sid,statepack_c(hs_1192: handshakestate,cs1_1193: cipherstate,cs2_1194: cipherstate)) in
        {659}let hs_1195: handshakestate = handshakestatesetcs(hs_1192,cs1_1193) in
        {660}in(pub, message_c_1196: bitstring);
        {661}let v_1197: bitstring = catch-fail(handshakestateunpack(hs_1195)) in
        {662}let v_1198: bitstring = catch-fail(deconcat3(message_c_1196)) in
        {663}let v_1199: bool = catch-fail(true) in
        {664}let v_1200: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1197))) in
        {665}let v_1201: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1200))) in
        {666}let v_1202: aead = catch-fail(decrypt(1-proj-2-tuple(v_1201),2-proj-2-tuple(v_1201),3-proj-3-tuple(v_1200),3-proj-3-tuple(v_1198))) in
        {667}let v_1203: bitstring = catch-fail(aeadunpack(v_1202)) in
        {668}let v_1204: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1200))) in
        {669}let v_1205: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1201))) && success?(1-proj-3-tuple(v_1200))) then (if (not-caught-fail(v_1204) && success?(is-true(success?(1-proj-2-tuple(v_1204))))) then cipherstatepack(1-proj-2-tuple(v_1204),increment_nonce(2-proj-2-tuple(v_1201))) else fail-any) else fail-any)) in
        {670}let v_1206: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1198)) && (success?(3-proj-3-tuple(v_1200)) && success?(1-proj-3-tuple(v_1200)))) then (if (not-caught-fail(v_1201) && success?(is-true(success?(1-proj-2-tuple(v_1201))))) then (if not-caught-fail(v_1202) then (if (not-caught-fail(v_1203) && success?(is-true(success?(1-proj-3-tuple(v_1203))))) then (if not-caught-fail(v_1205) then (v_1205,3-proj-3-tuple(v_1203),1-proj-3-tuple(v_1203)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {671}let v_1207: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1206),2-proj-3-tuple(v_1200),3-proj-3-tuple(v_1200)))) in
        {672}let v_1208: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1198)) && success?(symmetricstatepack(1-proj-3-tuple(v_1206),2-proj-3-tuple(v_1200),3-proj-3-tuple(v_1200)))) then (if (not-caught-fail(v_1207) && success?(is-true(success?(1-proj-3-tuple(v_1207))))) then symmetricstatepack(1-proj-3-tuple(v_1207),2-proj-3-tuple(v_1207),hash(3-proj-3-tuple(v_1207),3-proj-3-tuple(v_1198))) else fail-any) else fail-any)) in
        {673}let v_1209: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1198)) && success?(1-proj-7-tuple(v_1197))) then (if (not-caught-fail(v_1200) && success?(is-true(success?(1-proj-3-tuple(v_1200))))) then (if (not-caught-fail(v_1206) && success?(is-true(success?(1-proj-3-tuple(v_1206))))) then (if not-caught-fail(v_1208) then (v_1208,2-proj-3-tuple(v_1206),3-proj-3-tuple(v_1206)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {674}let v_1210: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1209),2-proj-7-tuple(v_1197),3-proj-7-tuple(v_1197),4-proj-7-tuple(v_1197),5-proj-7-tuple(v_1197),6-proj-7-tuple(v_1197),7-proj-7-tuple(v_1197))) in
        {675}let (hs_1211: handshakestate,plaintext_c_1212: bitstring,valid_1213: bool) = (if (not-caught-fail(v_1197) && success?(is-true(success?(1-proj-7-tuple(v_1197))))) then (if (not-caught-fail(v_1198) && success?(is-true(success?(1-proj-3-tuple(v_1198))))) then (if not-caught-fail(v_1199) then (if (not-caught-fail(v_1209) && success?(is-true(success?(1-proj-3-tuple(v_1209))))) then (if (v_1199 && 3-proj-3-tuple(v_1209)) then (if not-caught-fail(v_1210) then (v_1210,2-proj-3-tuple(v_1209),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {676}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1212);
        {677}insert statestore(bob,charlie,sid,statepack_d(hs_1211,handshakestategetcs(hs_1211),cs2_1194))
    ) | (
        {696}get statestore(=bob,=charlie,=sid,statepack_d(hs_1214: handshakestate,cs1_1215: cipherstate,cs2_1216: cipherstate)) in
        {679}let hs_1217: handshakestate = handshakestatesetcs(hs_1214,cs2_1216) in
        {680}let v_1218: bitstring = catch-fail(handshakestateunpack(hs_1217)) in
        {681}let v_1219: bitstring = catch-fail((empty,empty,empty)) in
        {682}let v_1220: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1218))) in
        {683}let v_1221: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1220))) in
        {684}let v_1222: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1221),2-proj-2-tuple(v_1221),3-proj-3-tuple(v_1220),msg_d(bob,charlie,sid))) in
        {685}let v_1223: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1220))) in
        {686}let v_1224: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1221))) && success?(1-proj-3-tuple(v_1220))) then (if (not-caught-fail(v_1223) && success?(is-true(success?(1-proj-2-tuple(v_1223))))) then cipherstatepack(1-proj-2-tuple(v_1223),increment_nonce(2-proj-2-tuple(v_1221))) else fail-any) else fail-any)) in
        {687}let v_1225: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1220)) && success?(1-proj-3-tuple(v_1220))) then (if (not-caught-fail(v_1221) && success?(is-true(success?(1-proj-2-tuple(v_1221))))) then (if not-caught-fail(v_1222) then (if not-caught-fail(v_1224) then (v_1224,v_1222) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {688}let v_1226: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1225),2-proj-3-tuple(v_1220),3-proj-3-tuple(v_1220)))) in
        {689}let v_1227: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1225)) && success?(symmetricstatepack(1-proj-2-tuple(v_1225),2-proj-3-tuple(v_1220),3-proj-3-tuple(v_1220)))) then (if (not-caught-fail(v_1226) && success?(is-true(success?(1-proj-3-tuple(v_1226))))) then symmetricstatepack(1-proj-3-tuple(v_1226),2-proj-3-tuple(v_1226),hash(3-proj-3-tuple(v_1226),2-proj-2-tuple(v_1225))) else fail-any) else fail-any)) in
        {690}let v_1228: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1218)) then (if (not-caught-fail(v_1220) && success?(is-true(success?(1-proj-3-tuple(v_1220))))) then (if (not-caught-fail(v_1225) && success?(is-true(success?(1-proj-2-tuple(v_1225))))) then (if not-caught-fail(v_1227) then (v_1227,2-proj-2-tuple(v_1225)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {691}let v_1229: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1228),2-proj-7-tuple(v_1218),3-proj-7-tuple(v_1218),4-proj-7-tuple(v_1218),5-proj-7-tuple(v_1218),6-proj-7-tuple(v_1218),7-proj-7-tuple(v_1218))) in
        {692}let v_1230: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1219),2-proj-3-tuple(v_1219),2-proj-2-tuple(v_1228))) in
        {693}let (hs_1231: handshakestate,message_d_1232: bitstring) = (if (not-caught-fail(v_1218) && success?(is-true(success?(1-proj-7-tuple(v_1218))))) then (if (not-caught-fail(v_1219) && success?(is-true(success?(1-proj-3-tuple(v_1219))))) then (if (not-caught-fail(v_1228) && success?(is-true(success?(1-proj-2-tuple(v_1228))))) then (if not-caught-fail(v_1229) then (if not-caught-fail(v_1230) then (v_1229,v_1230) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {694}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {695}out(pub, message_d_1232)
    ) | (
        {697}event LeakPsk(phase0,charlie,bob);
        {698}out(pub, key_psk(charlie,bob))
    ) | (
        {699}phase 1;
        {700}event LeakPsk(phase1,charlie,bob);
        {701}out(pub, key_psk(charlie,bob))
    ) | (
        {702}event LeakS(phase0,bob);
        {703}out(pub, key_s(bob))
    ) | (
        {704}phase 1;
        {705}event LeakS(phase1,bob);
        {706}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 209 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 76 rules in the queue.
600 rules inserted. The rule base contains 562 rules. 132 rules in the queue.
800 rules inserted. The rule base contains 762 rules. 469 rules in the queue.
1000 rules inserted. The rule base contains 931 rules. 351 rules in the queue.
1200 rules inserted. The rule base contains 1099 rules. 223 rules in the queue.
1400 rules inserted. The rule base contains 1272 rules. 354 rules in the queue.
1600 rules inserted. The rule base contains 1456 rules. 458 rules in the queue.
1800 rules inserted. The rule base contains 1656 rules. 576 rules in the queue.
2000 rules inserted. The rule base contains 1834 rules. 567 rules in the queue.
2200 rules inserted. The rule base contains 2011 rules. 542 rules in the queue.
2400 rules inserted. The rule base contains 2192 rules. 541 rules in the queue.
2600 rules inserted. The rule base contains 2390 rules. 568 rules in the queue.
2800 rules inserted. The rule base contains 2590 rules. 596 rules in the queue.
3000 rules inserted. The rule base contains 2769 rules. 624 rules in the queue.
3200 rules inserted. The rule base contains 2929 rules. 668 rules in the queue.
3400 rules inserted. The rule base contains 3090 rules. 705 rules in the queue.
3600 rules inserted. The rule base contains 3194 rules. 702 rules in the queue.
3800 rules inserted. The rule base contains 3285 rules. 687 rules in the queue.
4000 rules inserted. The rule base contains 3380 rules. 675 rules in the queue.
4200 rules inserted. The rule base contains 3494 rules. 679 rules in the queue.
4400 rules inserted. The rule base contains 3622 rules. 679 rules in the queue.
4600 rules inserted. The rule base contains 3733 rules. 680 rules in the queue.
4800 rules inserted. The rule base contains 3876 rules. 738 rules in the queue.
5000 rules inserted. The rule base contains 4040 rules. 819 rules in the queue.
5200 rules inserted. The rule base contains 4205 rules. 871 rules in the queue.
5400 rules inserted. The rule base contains 4332 rules. 888 rules in the queue.
5600 rules inserted. The rule base contains 4441 rules. 896 rules in the queue.
5800 rules inserted. The rule base contains 4546 rules. 886 rules in the queue.
6000 rules inserted. The rule base contains 4652 rules. 874 rules in the queue.
6200 rules inserted. The rule base contains 4762 rules. 901 rules in the queue.
6400 rules inserted. The rule base contains 4907 rules. 927 rules in the queue.
6600 rules inserted. The rule base contains 5067 rules. 957 rules in the queue.
6800 rules inserted. The rule base contains 5226 rules. 987 rules in the queue.
7000 rules inserted. The rule base contains 5345 rules. 984 rules in the queue.
7200 rules inserted. The rule base contains 5465 rules. 1014 rules in the queue.
7400 rules inserted. The rule base contains 5606 rules. 1060 rules in the queue.
7600 rules inserted. The rule base contains 5737 rules. 1103 rules in the queue.
7800 rules inserted. The rule base contains 5767 rules. 1132 rules in the queue.
8000 rules inserted. The rule base contains 5880 rules. 1072 rules in the queue.
8200 rules inserted. The rule base contains 5956 rules. 995 rules in the queue.
8400 rules inserted. The rule base contains 6064 rules. 927 rules in the queue.
8600 rules inserted. The rule base contains 6174 rules. 871 rules in the queue.
8800 rules inserted. The rule base contains 6274 rules. 836 rules in the queue.
9000 rules inserted. The rule base contains 6434 rules. 835 rules in the queue.
9200 rules inserted. The rule base contains 6570 rules. 803 rules in the queue.
9400 rules inserted. The rule base contains 6710 rules. 800 rules in the queue.
9600 rules inserted. The rule base contains 6829 rules. 770 rules in the queue.
9800 rules inserted. The rule base contains 6970 rules. 786 rules in the queue.
10000 rules inserted. The rule base contains 7105 rules. 816 rules in the queue.
10200 rules inserted. The rule base contains 7266 rules. 792 rules in the queue.
10400 rules inserted. The rule base contains 7434 rules. 792 rules in the queue.
10600 rules inserted. The rule base contains 7606 rules. 779 rules in the queue.
10800 rules inserted. The rule base contains 7759 rules. 779 rules in the queue.
11000 rules inserted. The rule base contains 7920 rules. 778 rules in the queue.
11200 rules inserted. The rule base contains 8069 rules. 779 rules in the queue.
11400 rules inserted. The rule base contains 8225 rules. 783 rules in the queue.
11600 rules inserted. The rule base contains 8365 rules. 767 rules in the queue.
11800 rules inserted. The rule base contains 8496 rules. 748 rules in the queue.
12000 rules inserted. The rule base contains 8647 rules. 732 rules in the queue.
12200 rules inserted. The rule base contains 8490 rules. 743 rules in the queue.
12400 rules inserted. The rule base contains 8644 rules. 777 rules in the queue.
12600 rules inserted. The rule base contains 8802 rules. 813 rules in the queue.
12800 rules inserted. The rule base contains 8950 rules. 849 rules in the queue.
13000 rules inserted. The rule base contains 9129 rules. 882 rules in the queue.
13200 rules inserted. The rule base contains 9322 rules. 931 rules in the queue.
13400 rules inserted. The rule base contains 9504 rules. 966 rules in the queue.
13600 rules inserted. The rule base contains 9697 rules. 1015 rules in the queue.
13800 rules inserted. The rule base contains 9851 rules. 1030 rules in the queue.
14000 rules inserted. The rule base contains 10017 rules. 1036 rules in the queue.
14200 rules inserted. The rule base contains 10179 rules. 1043 rules in the queue.
14400 rules inserted. The rule base contains 10339 rules. 1049 rules in the queue.
14600 rules inserted. The rule base contains 10480 rules. 1069 rules in the queue.
14800 rules inserted. The rule base contains 10606 rules. 1044 rules in the queue.
15000 rules inserted. The rule base contains 10727 rules. 993 rules in the queue.
15200 rules inserted. The rule base contains 10861 rules. 922 rules in the queue.
15400 rules inserted. The rule base contains 10995 rules. 921 rules in the queue.
15600 rules inserted. The rule base contains 11128 rules. 959 rules in the queue.
15800 rules inserted. The rule base contains 11263 rules. 1034 rules in the queue.
16000 rules inserted. The rule base contains 11442 rules. 1029 rules in the queue.
16200 rules inserted. The rule base contains 11603 rules. 1032 rules in the queue.
16400 rules inserted. The rule base contains 11690 rules. 1113 rules in the queue.
16600 rules inserted. The rule base contains 11782 rules. 1137 rules in the queue.
16800 rules inserted. The rule base contains 11902 rules. 1207 rules in the queue.
17000 rules inserted. The rule base contains 12042 rules. 1230 rules in the queue.
17200 rules inserted. The rule base contains 12178 rules. 1235 rules in the queue.
17400 rules inserted. The rule base contains 12226 rules. 1246 rules in the queue.
17600 rules inserted. The rule base contains 12372 rules. 1183 rules in the queue.
17800 rules inserted. The rule base contains 12438 rules. 1222 rules in the queue.
18000 rules inserted. The rule base contains 12605 rules. 1202 rules in the queue.
18200 rules inserted. The rule base contains 12791 rules. 1191 rules in the queue.
18400 rules inserted. The rule base contains 12884 rules. 1151 rules in the queue.
18600 rules inserted. The rule base contains 12931 rules. 1128 rules in the queue.
18800 rules inserted. The rule base contains 12983 rules. 1109 rules in the queue.
19000 rules inserted. The rule base contains 13097 rules. 1096 rules in the queue.
19200 rules inserted. The rule base contains 13249 rules. 1088 rules in the queue.
19400 rules inserted. The rule base contains 13327 rules. 1098 rules in the queue.
19600 rules inserted. The rule base contains 13451 rules. 1051 rules in the queue.
19800 rules inserted. The rule base contains 13561 rules. 1022 rules in the queue.
20000 rules inserted. The rule base contains 13714 rules. 1014 rules in the queue.
20200 rules inserted. The rule base contains 13834 rules. 970 rules in the queue.
20400 rules inserted. The rule base contains 13865 rules. 951 rules in the queue.
20600 rules inserted. The rule base contains 13987 rules. 891 rules in the queue.
20800 rules inserted. The rule base contains 14158 rules. 892 rules in the queue.
21000 rules inserted. The rule base contains 14328 rules. 923 rules in the queue.
21200 rules inserted. The rule base contains 14424 rules. 875 rules in the queue.
21400 rules inserted. The rule base contains 14603 rules. 881 rules in the queue.
21600 rules inserted. The rule base contains 14785 rules. 850 rules in the queue.
21800 rules inserted. The rule base contains 14958 rules. 875 rules in the queue.
22000 rules inserted. The rule base contains 14976 rules. 828 rules in the queue.
22200 rules inserted. The rule base contains 15105 rules. 886 rules in the queue.
22400 rules inserted. The rule base contains 15287 rules. 841 rules in the queue.
22600 rules inserted. The rule base contains 15395 rules. 843 rules in the queue.
22800 rules inserted. The rule base contains 15493 rules. 888 rules in the queue.
23000 rules inserted. The rule base contains 15591 rules. 985 rules in the queue.
23200 rules inserted. The rule base contains 15754 rules. 967 rules in the queue.
23400 rules inserted. The rule base contains 15857 rules. 959 rules in the queue.
23600 rules inserted. The rule base contains 15895 rules. 916 rules in the queue.
23800 rules inserted. The rule base contains 15993 rules. 941 rules in the queue.
24000 rules inserted. The rule base contains 16112 rules. 955 rules in the queue.
24200 rules inserted. The rule base contains 16219 rules. 946 rules in the queue.
24400 rules inserted. The rule base contains 16253 rules. 929 rules in the queue.
24600 rules inserted. The rule base contains 16326 rules. 906 rules in the queue.
24800 rules inserted. The rule base contains 16439 rules. 921 rules in the queue.
25000 rules inserted. The rule base contains 16571 rules. 950 rules in the queue.
25200 rules inserted. The rule base contains 16647 rules. 927 rules in the queue.
25400 rules inserted. The rule base contains 16773 rules. 897 rules in the queue.
25600 rules inserted. The rule base contains 16919 rules. 863 rules in the queue.
25800 rules inserted. The rule base contains 17066 rules. 896 rules in the queue.
26000 rules inserted. The rule base contains 17078 rules. 834 rules in the queue.
26200 rules inserted. The rule base contains 17172 rules. 824 rules in the queue.
26400 rules inserted. The rule base contains 17300 rules. 756 rules in the queue.
26600 rules inserted. The rule base contains 17361 rules. 797 rules in the queue.
26800 rules inserted. The rule base contains 17448 rules. 784 rules in the queue.
27000 rules inserted. The rule base contains 17553 rules. 846 rules in the queue.
27200 rules inserted. The rule base contains 17634 rules. 812 rules in the queue.
27400 rules inserted. The rule base contains 17629 rules. 707 rules in the queue.
27600 rules inserted. The rule base contains 17687 rules. 700 rules in the queue.
27800 rules inserted. The rule base contains 17735 rules. 619 rules in the queue.
28000 rules inserted. The rule base contains 17763 rules. 602 rules in the queue.
28200 rules inserted. The rule base contains 17779 rules. 568 rules in the queue.
28400 rules inserted. The rule base contains 17837 rules. 516 rules in the queue.
28600 rules inserted. The rule base contains 17908 rules. 455 rules in the queue.
28800 rules inserted. The rule base contains 17958 rules. 398 rules in the queue.
29000 rules inserted. The rule base contains 17954 rules. 228 rules in the queue.
29200 rules inserted. The rule base contains 18045 rules. 134 rules in the queue.
29400 rules inserted. The rule base contains 18033 rules. 47 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {71}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {68}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {70}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {357}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

21. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

22. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

23. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

24. The event LeakS(phase1,bob) may be executed at {529}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {530}.
mess_p1(pub,key_s(bob)).

25. By 23, the attacker may have the channel pub in phase 1.
By 24, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

26. By 25, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))).

27. By 13, the attacker may know hash(somename,empty).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

28. By 27, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

30. By 29, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

32. By 25, the attacker may know key_s(bob) in phase 1.
By 31, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

33. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 32, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {71}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {68}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {70}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {357}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

21. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

22. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

23. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

24. The event LeakS(phase1,bob) may be executed at {529}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {530}.
mess_p1(pub,key_s(bob)).

25. By 23, the attacker may have the channel pub in phase 1.
By 24, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

26. By 25, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))).

27. By 13, the attacker may know hash(somename,empty).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

28. By 27, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

30. By 29, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

32. By 25, the attacker may know key_s(bob) in phase 1.
By 31, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

33. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 32, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {71}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {68}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {70}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {357}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

21. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

22. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

23. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

24. The event LeakS(phase1,bob) may be executed at {529}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {530}.
mess_p1(pub,key_s(bob)).

25. By 23, the attacker may have the channel pub in phase 1.
By 24, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

26. By 25, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))).

27. By 13, the attacker may know hash(somename,empty).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

28. By 27, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

30. By 29, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

32. By 25, the attacker may know key_s(bob) in phase 1.
By 31, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

33. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 32, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {71}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {68}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {70}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {357}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

21. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

22. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid[]),g))).

23. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

24. The event LeakS(phase1,bob) may be executed at {529}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {530}.
mess_p1(pub,key_s(bob)).

25. By 23, the attacker may have the channel pub in phase 1.
By 24, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

26. By 25, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))).

27. By 13, the attacker may know hash(somename,empty).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid[]),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

28. By 27, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

30. By 29, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

32. By 25, the attacker may know key_s(bob) in phase 1.
By 31, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

33. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g)))).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))) in phase 1.
By 32, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1342,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1342,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {71}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {68}.
So the entry statestore(alice,bob,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {69}.
table(statestore(alice,bob,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {369}.
table(statestore(bob,alice,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {71}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {68}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {70}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))).

5. The entry statestore(bob,alice,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {423}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))) that may be sent on channel pub by 4 may be received at input {370}.
So the entry statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {422}.
table(statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {482}.
The event SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[])) may be executed at {479}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))) may be sent on channel pub at output {481}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))).

7. The entry statestore(alice,bob,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {129}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))) that may be sent on channel pub by 6 may be received at input {72}.
So the entry statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {128}.
table(statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

8. The entry statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {148}.
The event SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[])) may be executed at {145}.
So the entry statestore(alice,bob,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {146}.
table(statestore(alice,bob,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

9. The entry statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {482}.
The event SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[])) may be executed at {479}.
So the entry statestore(bob,alice,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_e(bob,alice,sid[])),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {480}.
table(statestore(bob,alice,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_e(bob,alice,sid[])),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

10. The entry statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {148}.
The event SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[])) may be executed at {145}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))) may be sent on channel pub at output {147}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))).

11. The entry statestore(bob,alice,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_e(bob,alice,sid[])),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 9 may be read at get {502}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))) that may be sent on channel pub by 10 may be received at input {484}.
So the entry statestore(bob,alice,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_e(bob,alice,sid[])),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {501}.
table(statestore(bob,alice,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_e(bob,alice,sid[])),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

12. The entry statestore(bob,alice,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_e(bob,alice,sid[])),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 11 may be read at get {520}.
The event SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[])) may be executed at {518}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))),msg_d(bob,alice,sid[]))) may be sent on channel pub at output {519}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))),msg_d(bob,alice,sid[])))).

13. The entry statestore(alice,bob,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid[]),g)),key_e(alice,bob,sid[])),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid[]),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 8 may be read at get {168}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid[]))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_e(alice,bob,sid[]),g))),dhexp_real(key_e(bob,alice,sid[]),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))),msg_d(bob,alice,sid[]))) that may be sent on channel pub by 12 may be received at input {150}.
So event RecvEnd(true) may be executed at {167}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
