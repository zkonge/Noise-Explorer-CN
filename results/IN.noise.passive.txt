File "IN.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IN.noise.passive.pv", line 267, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 271, character 6:
Warning: identifier s rebound.
File "IN.noise.passive.pv", line 272, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 272, characters 26-27:
Warning: identifier ns rebound.
File "IN.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 287, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 287, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 288, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 296, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 304, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 304, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 305, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 313, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 316, characters 26-27:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 316, characters 40-45:
Warning: identifier valid1 rebound.
File "IN.noise.passive.pv", line 317, characters 6-7:
Warning: identifier rs rebound.
File "IN.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 320, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 333, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 335, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 511, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 504, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 296, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 333, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 335, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 491, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 267, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 271, character 6:
Warning: identifier s rebound.
File "IN.noise.passive.pv", line 272, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 272, characters 26-27:
Warning: identifier ns rebound.
File "IN.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 558, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 304, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 304, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 305, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 550, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 544, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 287, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 287, characters 26-35:
Warning: identifier ciphertext rebound.
File "IN.noise.passive.pv", line 288, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 538, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 313, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 316, characters 26-27:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 316, characters 40-45:
Warning: identifier valid1 rebound.
File "IN.noise.passive.pv", line 317, characters 6-7:
Warning: identifier rs rebound.
File "IN.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 320, characters 7-8:
Warning: identifier hs rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_493: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_493));
    (
        {6}let e_494: keypair = keypairpack(empty,empty) in
        {7}let rs_495: key = empty in
        {8}let re_496: key = empty in
        {9}let v_497: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_498: key = catch-fail(v_497) in
        {11}let v_499: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_500: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then symmetricstatepack(v_499,v_498,v_497) else fail-any) else fail-any) else fail-any))) in
        {13}let v_501: symmetricstate = catch-fail((if success?((if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then symmetricstatepack(v_499,v_498,v_497) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack(1-proj-3-tuple(v_500),2-proj-3-tuple(v_500),hash(3-proj-3-tuple(v_500),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_501) then handshakestatepack(v_501,s_493,e_494,rs_495,re_496,empty,true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {49}get statestore(=alice,=bob,=sid,statepack_a(hs_502: handshakestate)) in
        {16}let v_503: bitstring = catch-fail(handshakestateunpack(hs_502)) in
        {17}let v_504: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_505: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {19}let v_506: keypair = catch-fail((if not-caught-fail(v_505) then keypairpack(validkey(v_505),key_e(alice,bob,sid)) else fail-any)) in
        {20}let v_507: bitstring = catch-fail(getpublickey(v_506)) in
        {21}let v_508: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_503))) in
        {22}let v_509: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_503)) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack(1-proj-3-tuple(v_508),2-proj-3-tuple(v_508),hash(3-proj-3-tuple(v_508),v_507)) else fail-any) else fail-any)) in
        {23}let v_510: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {24}let v_511: keypair = catch-fail((if not-caught-fail(v_510) then keypairpack(validkey(v_510),key_s(alice)) else fail-any)) in
        {25}let v_512: bitstring = catch-fail(symmetricstateunpack(v_509)) in
        {26}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {27}let v_514: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_513),2-proj-2-tuple(v_513),3-proj-3-tuple(v_512),getpublickey(v_511))) in
        {28}let v_515: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {29}let v_516: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_513))) && success?(1-proj-3-tuple(v_512))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then cipherstatepack(1-proj-2-tuple(v_515),increment_nonce(2-proj-2-tuple(v_513))) else fail-any) else fail-any)) in
        {30}let v_517: bitstring = catch-fail((if (success?(getpublickey(v_511)) && (success?(3-proj-3-tuple(v_512)) && success?(1-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then (if not-caught-fail(v_514) then (if not-caught-fail(v_516) then (v_516,v_514) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_518: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_517),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) in
        {32}let v_519: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_517)) && success?(symmetricstatepack(1-proj-2-tuple(v_517),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),2-proj-2-tuple(v_517))) else fail-any) else fail-any)) in
        {33}let v_520: bitstring = catch-fail((if success?(getpublickey(v_511)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then (if not-caught-fail(v_519) then (v_519,2-proj-2-tuple(v_517)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_521: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_520))) in
        {35}let v_522: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_521))) in
        {36}let v_523: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_522),2-proj-2-tuple(v_522),3-proj-3-tuple(v_521),msg_a(alice,bob,sid))) in
        {37}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_521))) in
        {38}let v_525: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_522))) && success?(1-proj-3-tuple(v_521))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then cipherstatepack(1-proj-2-tuple(v_524),increment_nonce(2-proj-2-tuple(v_522))) else fail-any) else fail-any)) in
        {39}let v_526: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_521)) && success?(1-proj-3-tuple(v_521))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then (if not-caught-fail(v_523) then (if not-caught-fail(v_525) then (v_525,v_523) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_527: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_526),2-proj-3-tuple(v_521),3-proj-3-tuple(v_521)))) in
        {41}let v_528: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_526)) && success?(symmetricstatepack(1-proj-2-tuple(v_526),2-proj-3-tuple(v_521),3-proj-3-tuple(v_521)))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),2-proj-2-tuple(v_526))) else fail-any) else fail-any)) in
        {42}let v_529: bitstring = catch-fail((if success?(1-proj-2-tuple(v_520)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then (if not-caught-fail(v_528) then (v_528,2-proj-2-tuple(v_526)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_530: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_529),v_511,v_506,4-proj-7-tuple(v_503),5-proj-7-tuple(v_503),6-proj-7-tuple(v_503),7-proj-7-tuple(v_503))) in
        {44}let v_531: bitstring = catch-fail(concat3(v_507,2-proj-2-tuple(v_520),2-proj-2-tuple(v_529))) in
        {45}let (hs_532: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-7-tuple(v_503))))) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-2-tuple(v_529))))) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then (v_530,v_531) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {46}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {47}insert statestore(alice,bob,sid,statepack_b(hs_532));
        {48}out(pub, message_a)
    ) | (
        {93}get statestore(=alice,=bob,=sid,statepack_b(hs_533: handshakestate)) in
        {50}in(pub, message_b: bitstring);
        {51}let v_534: bitstring = catch-fail(handshakestateunpack(hs_533)) in
        {52}let v_535: bitstring = catch-fail(deconcat3(message_b)) in
        {53}let v_536: bool = catch-fail(true) in
        {54}let v_537: key = catch-fail(1-proj-3-tuple(v_535)) in
        {55}let v_538: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_534))) in
        {56}let v_539: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_534)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then symmetricstatepack(1-proj-3-tuple(v_538),2-proj-3-tuple(v_538),hash(3-proj-3-tuple(v_538),v_537)) else fail-any) else fail-any)) in
        {57}let v_540: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_534))) in
        {58}let v_541: bitstring = catch-fail(symmetricstateunpack(v_539)) in
        {59}let v_542: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_541),(if success?(3-proj-7-tuple(v_534)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then dhexp(2-proj-2-tuple(v_540),v_537) else fail-any) else fail-any))) in
        {60}let v_543: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_541),(if success?(3-proj-7-tuple(v_534)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then dhexp(2-proj-2-tuple(v_540),v_537) else fail-any) else fail-any))) in
        {61}let v_544: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_541),(if success?(3-proj-7-tuple(v_534)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then dhexp(2-proj-2-tuple(v_540),v_537) else fail-any) else fail-any))) in
        {62}let v_545: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_534)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then dhexp(2-proj-2-tuple(v_540),v_537) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_541))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (if not-caught-fail(v_544) then (v_542,v_543,v_544) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_546: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_534)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then dhexp(2-proj-2-tuple(v_540),v_537) else fail-any) else fail-any)) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_545)) then cipherstatepack(2-proj-3-tuple(v_545),minnonce) else fail-any),1-proj-3-tuple(v_545),3-proj-3-tuple(v_541)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_547: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_534))) in
        {65}let v_548: bitstring = catch-fail(symmetricstateunpack(v_546)) in
        {66}let v_549: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_548),(if success?(2-proj-7-tuple(v_534)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then dhexp(2-proj-2-tuple(v_547),v_537) else fail-any) else fail-any))) in
        {67}let v_550: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_548),(if success?(2-proj-7-tuple(v_534)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then dhexp(2-proj-2-tuple(v_547),v_537) else fail-any) else fail-any))) in
        {68}let v_551: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_548),(if success?(2-proj-7-tuple(v_534)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then dhexp(2-proj-2-tuple(v_547),v_537) else fail-any) else fail-any))) in
        {69}let v_552: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_534)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then dhexp(2-proj-2-tuple(v_547),v_537) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_548))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (v_549,v_550,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_553: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_534)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then dhexp(2-proj-2-tuple(v_547),v_537) else fail-any) else fail-any)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_552)) then cipherstatepack(2-proj-3-tuple(v_552),minnonce) else fail-any),1-proj-3-tuple(v_552),3-proj-3-tuple(v_548)) else fail-any) else fail-any) else fail-any)) in
        {71}let v_554: bitstring = catch-fail(symmetricstateunpack(v_553)) in
        {72}let v_555: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_554))) in
        {73}let v_556: aead = catch-fail(decrypt(1-proj-2-tuple(v_555),2-proj-2-tuple(v_555),3-proj-3-tuple(v_554),3-proj-3-tuple(v_535))) in
        {74}let v_557: bitstring = catch-fail(aeadunpack(v_556)) in
        {75}let v_558: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_554))) in
        {76}let v_559: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_555))) && success?(1-proj-3-tuple(v_554))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then cipherstatepack(1-proj-2-tuple(v_558),increment_nonce(2-proj-2-tuple(v_555))) else fail-any) else fail-any)) in
        {77}let v_560: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_535)) && (success?(3-proj-3-tuple(v_554)) && success?(1-proj-3-tuple(v_554)))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then (if not-caught-fail(v_556) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then (if not-caught-fail(v_559) then (v_559,3-proj-3-tuple(v_557),1-proj-3-tuple(v_557)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_561: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_560),2-proj-3-tuple(v_554),3-proj-3-tuple(v_554)))) in
        {79}let v_562: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_535)) && success?(symmetricstatepack(1-proj-3-tuple(v_560),2-proj-3-tuple(v_554),3-proj-3-tuple(v_554)))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_561),hash(3-proj-3-tuple(v_561),3-proj-3-tuple(v_535))) else fail-any) else fail-any)) in
        {80}let v_563: bitstring = catch-fail((if success?(3-proj-3-tuple(v_535)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if not-caught-fail(v_562) then (v_562,2-proj-3-tuple(v_560),3-proj-3-tuple(v_560)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_564: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_563),2-proj-7-tuple(v_534),3-proj-7-tuple(v_534),4-proj-7-tuple(v_534),v_537,6-proj-7-tuple(v_534),7-proj-7-tuple(v_534))) in
        {82}let v_565: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_563))) in
        {83}let v_566: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_565),zero)) in
        {84}let v_567: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_565),zero)) in
        {85}let v_568: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_565),zero)) in
        {86}let v_569: bitstring = catch-fail((if success?(2-proj-3-tuple(v_565)) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (v_566,v_567,v_568) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_570: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_569)) then cipherstatepack(1-proj-3-tuple(v_569),minnonce) else fail-any)) in
        {88}let v_571: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_569)) then cipherstatepack(2-proj-3-tuple(v_569),minnonce) else fail-any)) in
        {89}let v_572: bitstring = catch-fail((if success?(1-proj-3-tuple(v_563)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (1-proj-3-tuple(v_563),v_570,v_571) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let (hs_573: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-7-tuple(v_534))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_539) then (if not-caught-fail(v_546) then (if not-caught-fail(v_553) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (v_536 && 3-proj-3-tuple(v_563)) then (if not-caught-fail(v_564) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (v_564,2-proj-3-tuple(v_563),true,2-proj-3-tuple(v_572),3-proj-3-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {91}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {92}insert statestore(alice,bob,sid,statepack_c(hs_573,cs1,cs2))
    ) | (
        {94}!
        {113}get statestore(=alice,=bob,=sid,statepack_c(hs_574: handshakestate,cs1_575: cipherstate,cs2_576: cipherstate)) in
        {95}let hs_577: handshakestate = handshakestatesetcs(hs_574,cs1_575) in
        {96}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {97}let v_579: bitstring = catch-fail((empty,empty,empty)) in
        {98}let v_580: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {99}let v_581: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_580))) in
        {100}let v_582: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_581),2-proj-2-tuple(v_581),3-proj-3-tuple(v_580),msg_c(alice,bob,sid))) in
        {101}let v_583: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_580))) in
        {102}let v_584: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_581))) && success?(1-proj-3-tuple(v_580))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then cipherstatepack(1-proj-2-tuple(v_583),increment_nonce(2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {103}let v_585: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_580)) && success?(1-proj-3-tuple(v_580))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (v_584,v_582) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_586: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_585),2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)))) in
        {105}let v_587: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_585)) && success?(symmetricstatepack(1-proj-2-tuple(v_585),2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then symmetricstatepack(1-proj-3-tuple(v_586),2-proj-3-tuple(v_586),hash(3-proj-3-tuple(v_586),2-proj-2-tuple(v_585))) else fail-any) else fail-any)) in
        {106}let v_588: bitstring = catch-fail((if success?(1-proj-7-tuple(v_578)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then (if not-caught-fail(v_587) then (v_587,2-proj-2-tuple(v_585)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_589: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_588),2-proj-7-tuple(v_578),3-proj-7-tuple(v_578),4-proj-7-tuple(v_578),5-proj-7-tuple(v_578),6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {108}let v_590: bitstring = catch-fail(concat3(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),2-proj-2-tuple(v_588))) in
        {109}let (hs_591: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (v_589,v_590) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {111}insert statestore(alice,bob,sid,statepack_d(hs_591,handshakestategetcs(hs_591),cs2_576));
        {112}out(pub, message_c)
    ) | (
        {114}!
        {134}get statestore(=alice,=bob,=sid,statepack_d(hs_592: handshakestate,cs1_593: cipherstate,cs2_594: cipherstate)) in
        {115}let hs_595: handshakestate = handshakestatesetcs(hs_592,cs2_594) in
        {116}in(pub, message_d: bitstring);
        {117}let v_596: bitstring = catch-fail(handshakestateunpack(hs_595)) in
        {118}let v_597: bitstring = catch-fail(deconcat3(message_d)) in
        {119}let v_598: bool = catch-fail(true) in
        {120}let v_599: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_596))) in
        {121}let v_600: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_599))) in
        {122}let v_601: aead = catch-fail(decrypt(1-proj-2-tuple(v_600),2-proj-2-tuple(v_600),3-proj-3-tuple(v_599),3-proj-3-tuple(v_597))) in
        {123}let v_602: bitstring = catch-fail(aeadunpack(v_601)) in
        {124}let v_603: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_599))) in
        {125}let v_604: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_600))) && success?(1-proj-3-tuple(v_599))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-2-tuple(v_603))))) then cipherstatepack(1-proj-2-tuple(v_603),increment_nonce(2-proj-2-tuple(v_600))) else fail-any) else fail-any)) in
        {126}let v_605: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_597)) && (success?(3-proj-3-tuple(v_599)) && success?(1-proj-3-tuple(v_599)))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if not-caught-fail(v_601) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_604) then (v_604,3-proj-3-tuple(v_602),1-proj-3-tuple(v_602)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_606: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_599),3-proj-3-tuple(v_599)))) in
        {128}let v_607: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_597)) && success?(symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_599),3-proj-3-tuple(v_599)))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then symmetricstatepack(1-proj-3-tuple(v_606),2-proj-3-tuple(v_606),hash(3-proj-3-tuple(v_606),3-proj-3-tuple(v_597))) else fail-any) else fail-any)) in
        {129}let v_608: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_597)) && success?(1-proj-7-tuple(v_596))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_607) then (v_607,2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {130}let v_609: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_608),2-proj-7-tuple(v_596),3-proj-7-tuple(v_596),4-proj-7-tuple(v_596),5-proj-7-tuple(v_596),6-proj-7-tuple(v_596),7-proj-7-tuple(v_596))) in
        {131}let (hs_610: handshakestate,plaintext_d: bitstring,valid_611: bool) = (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-7-tuple(v_596))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_598) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (v_598 && 3-proj-3-tuple(v_608)) then (if not-caught-fail(v_609) then (v_609,2-proj-3-tuple(v_608),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {132}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {133}event RecvEnd(valid_611)
    ) | (
        {135}event LeakS(phase0,alice);
        {136}out(pub, key_s(alice))
    ) | (
        {137}phase 1;
        {138}event LeakS(phase1,alice);
        {139}out(pub, key_s(alice))
    )
) | (
    {140}let s_612: keypair = keypairpack(empty,empty) in
    {141}out(pub, getpublickey(s_612));
    (
        {142}let e_613: keypair = keypairpack(empty,empty) in
        {143}let rs_614: key = empty in
        {144}let re_615: key = empty in
        {145}let v_616: bitstring = catch-fail(hash(somename,empty)) in
        {146}let v_617: key = catch-fail(v_616) in
        {147}let v_618: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {148}let v_619: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then symmetricstatepack(v_618,v_617,v_616) else fail-any) else fail-any) else fail-any))) in
        {149}let v_620: symmetricstate = catch-fail((if success?((if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then symmetricstatepack(v_618,v_617,v_616) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_619),hash(3-proj-3-tuple(v_619),empty)) else fail-any) else fail-any)) in
        {150}let hs_621: handshakestate = (if not-caught-fail(v_620) then handshakestatepack(v_620,s_612,e_613,rs_614,re_615,empty,true) else fail-any) in
        {151}insert statestore(alice,charlie,sid,statepack_a(hs_621))
    ) | (
        {185}get statestore(=alice,=charlie,=sid,statepack_a(hs_622: handshakestate)) in
        {152}let v_623: bitstring = catch-fail(handshakestateunpack(hs_622)) in
        {153}let v_624: bitstring = catch-fail((empty,empty,empty)) in
        {154}let v_625: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {155}let v_626: keypair = catch-fail((if not-caught-fail(v_625) then keypairpack(validkey(v_625),key_e(alice,charlie,sid)) else fail-any)) in
        {156}let v_627: bitstring = catch-fail(getpublickey(v_626)) in
        {157}let v_628: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_623))) in
        {158}let v_629: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_623)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),v_627)) else fail-any) else fail-any)) in
        {159}let v_630: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {160}let v_631: keypair = catch-fail((if not-caught-fail(v_630) then keypairpack(validkey(v_630),key_s(alice)) else fail-any)) in
        {161}let v_632: bitstring = catch-fail(symmetricstateunpack(v_629)) in
        {162}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {163}let v_634: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_633),2-proj-2-tuple(v_633),3-proj-3-tuple(v_632),getpublickey(v_631))) in
        {164}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {165}let v_636: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_633))) && success?(1-proj-3-tuple(v_632))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then cipherstatepack(1-proj-2-tuple(v_635),increment_nonce(2-proj-2-tuple(v_633))) else fail-any) else fail-any)) in
        {166}let v_637: bitstring = catch-fail((if (success?(getpublickey(v_631)) && (success?(3-proj-3-tuple(v_632)) && success?(1-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then (if not-caught-fail(v_634) then (if not-caught-fail(v_636) then (v_636,v_634) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {167}let v_638: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_637),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) in
        {168}let v_639: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_637)) && success?(symmetricstatepack(1-proj-2-tuple(v_637),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),hash(3-proj-3-tuple(v_638),2-proj-2-tuple(v_637))) else fail-any) else fail-any)) in
        {169}let v_640: bitstring = catch-fail((if success?(getpublickey(v_631)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,2-proj-2-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {170}let v_641: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_640))) in
        {171}let v_642: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_641))) in
        {172}let v_643: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_642),2-proj-2-tuple(v_642),3-proj-3-tuple(v_641),msg_a(alice,charlie,sid))) in
        {173}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_641))) in
        {174}let v_645: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_642))) && success?(1-proj-3-tuple(v_641))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then cipherstatepack(1-proj-2-tuple(v_644),increment_nonce(2-proj-2-tuple(v_642))) else fail-any) else fail-any)) in
        {175}let v_646: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_641)) && success?(1-proj-3-tuple(v_641))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then (if not-caught-fail(v_643) then (if not-caught-fail(v_645) then (v_645,v_643) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_646),2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)))) in
        {177}let v_648: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_646)) && success?(symmetricstatepack(1-proj-2-tuple(v_646),2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),2-proj-2-tuple(v_646))) else fail-any) else fail-any)) in
        {178}let v_649: bitstring = catch-fail((if success?(1-proj-2-tuple(v_640)) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,2-proj-2-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_650: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_649),v_631,v_626,4-proj-7-tuple(v_623),5-proj-7-tuple(v_623),6-proj-7-tuple(v_623),7-proj-7-tuple(v_623))) in
        {180}let v_651: bitstring = catch-fail(concat3(v_627,2-proj-2-tuple(v_640),2-proj-2-tuple(v_649))) in
        {181}let (hs_652: handshakestate,message_a_653: bitstring) = (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-7-tuple(v_623))))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (if not-caught-fail(v_629) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then (if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (v_650,v_651) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {182}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {183}insert statestore(alice,charlie,sid,statepack_b(hs_652));
        {184}out(pub, message_a_653)
    ) | (
        {229}get statestore(=alice,=charlie,=sid,statepack_b(hs_654: handshakestate)) in
        {186}in(pub, message_b_655: bitstring);
        {187}let v_656: bitstring = catch-fail(handshakestateunpack(hs_654)) in
        {188}let v_657: bitstring = catch-fail(deconcat3(message_b_655)) in
        {189}let v_658: bool = catch-fail(true) in
        {190}let v_659: key = catch-fail(1-proj-3-tuple(v_657)) in
        {191}let v_660: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_656))) in
        {192}let v_661: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_656)) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_660),hash(3-proj-3-tuple(v_660),v_659)) else fail-any) else fail-any)) in
        {193}let v_662: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_656))) in
        {194}let v_663: bitstring = catch-fail(symmetricstateunpack(v_661)) in
        {195}let v_664: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_663),(if success?(3-proj-7-tuple(v_656)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_659) else fail-any) else fail-any))) in
        {196}let v_665: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_663),(if success?(3-proj-7-tuple(v_656)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_659) else fail-any) else fail-any))) in
        {197}let v_666: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_663),(if success?(3-proj-7-tuple(v_656)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_659) else fail-any) else fail-any))) in
        {198}let v_667: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_656)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_659) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_663))) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_664,v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_668: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_656)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_659) else fail-any) else fail-any)) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_667)) then cipherstatepack(2-proj-3-tuple(v_667),minnonce) else fail-any),1-proj-3-tuple(v_667),3-proj-3-tuple(v_663)) else fail-any) else fail-any) else fail-any)) in
        {200}let v_669: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_656))) in
        {201}let v_670: bitstring = catch-fail(symmetricstateunpack(v_668)) in
        {202}let v_671: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_670),(if success?(2-proj-7-tuple(v_656)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),v_659) else fail-any) else fail-any))) in
        {203}let v_672: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_670),(if success?(2-proj-7-tuple(v_656)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),v_659) else fail-any) else fail-any))) in
        {204}let v_673: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_670),(if success?(2-proj-7-tuple(v_656)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),v_659) else fail-any) else fail-any))) in
        {205}let v_674: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_656)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),v_659) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_670))) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (if not-caught-fail(v_673) then (v_671,v_672,v_673) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_675: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_656)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),v_659) else fail-any) else fail-any)) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_674)) then cipherstatepack(2-proj-3-tuple(v_674),minnonce) else fail-any),1-proj-3-tuple(v_674),3-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any)) in
        {207}let v_676: bitstring = catch-fail(symmetricstateunpack(v_675)) in
        {208}let v_677: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {209}let v_678: aead = catch-fail(decrypt(1-proj-2-tuple(v_677),2-proj-2-tuple(v_677),3-proj-3-tuple(v_676),3-proj-3-tuple(v_657))) in
        {210}let v_679: bitstring = catch-fail(aeadunpack(v_678)) in
        {211}let v_680: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {212}let v_681: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_677))) && success?(1-proj-3-tuple(v_676))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then cipherstatepack(1-proj-2-tuple(v_680),increment_nonce(2-proj-2-tuple(v_677))) else fail-any) else fail-any)) in
        {213}let v_682: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_657)) && (success?(3-proj-3-tuple(v_676)) && success?(1-proj-3-tuple(v_676)))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then (if not-caught-fail(v_678) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if not-caught-fail(v_681) then (v_681,3-proj-3-tuple(v_679),1-proj-3-tuple(v_679)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_683: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) in
        {215}let v_684: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_657)) && success?(symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_683),hash(3-proj-3-tuple(v_683),3-proj-3-tuple(v_657))) else fail-any) else fail-any)) in
        {216}let v_685: bitstring = catch-fail((if success?(3-proj-3-tuple(v_657)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then (if not-caught-fail(v_684) then (v_684,2-proj-3-tuple(v_682),3-proj-3-tuple(v_682)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_686: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_685),2-proj-7-tuple(v_656),3-proj-7-tuple(v_656),4-proj-7-tuple(v_656),v_659,6-proj-7-tuple(v_656),7-proj-7-tuple(v_656))) in
        {218}let v_687: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_685))) in
        {219}let v_688: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_687),zero)) in
        {220}let v_689: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_687),zero)) in
        {221}let v_690: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_687),zero)) in
        {222}let v_691: bitstring = catch-fail((if success?(2-proj-3-tuple(v_687)) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (v_688,v_689,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {223}let v_692: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_691)) then cipherstatepack(1-proj-3-tuple(v_691),minnonce) else fail-any)) in
        {224}let v_693: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_691)) then cipherstatepack(2-proj-3-tuple(v_691),minnonce) else fail-any)) in
        {225}let v_694: bitstring = catch-fail((if success?(1-proj-3-tuple(v_685)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (1-proj-3-tuple(v_685),v_692,v_693) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let (hs_695: handshakestate,plaintext_b_696: bitstring,valid_697: bool,cs1_698: cipherstate,cs2_699: cipherstate) = (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-7-tuple(v_656))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (if not-caught-fail(v_661) then (if not-caught-fail(v_668) then (if not-caught-fail(v_675) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if (v_658 && 3-proj-3-tuple(v_685)) then (if not-caught-fail(v_686) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (v_686,2-proj-3-tuple(v_685),true,2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {227}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_696);
        {228}insert statestore(alice,charlie,sid,statepack_c(hs_695,cs1_698,cs2_699))
    ) | (
        {230}!
        {249}get statestore(=alice,=charlie,=sid,statepack_c(hs_700: handshakestate,cs1_701: cipherstate,cs2_702: cipherstate)) in
        {231}let hs_703: handshakestate = handshakestatesetcs(hs_700,cs1_701) in
        {232}let v_704: bitstring = catch-fail(handshakestateunpack(hs_703)) in
        {233}let v_705: bitstring = catch-fail((empty,empty,empty)) in
        {234}let v_706: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_704))) in
        {235}let v_707: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_706))) in
        {236}let v_708: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_707),2-proj-2-tuple(v_707),3-proj-3-tuple(v_706),msg_c(alice,charlie,sid))) in
        {237}let v_709: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_706))) in
        {238}let v_710: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_707))) && success?(1-proj-3-tuple(v_706))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then cipherstatepack(1-proj-2-tuple(v_709),increment_nonce(2-proj-2-tuple(v_707))) else fail-any) else fail-any)) in
        {239}let v_711: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_706)) && success?(1-proj-3-tuple(v_706))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then (if not-caught-fail(v_708) then (if not-caught-fail(v_710) then (v_710,v_708) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_712: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_711),2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)))) in
        {241}let v_713: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_711)) && success?(symmetricstatepack(1-proj-2-tuple(v_711),2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),hash(3-proj-3-tuple(v_712),2-proj-2-tuple(v_711))) else fail-any) else fail-any)) in
        {242}let v_714: bitstring = catch-fail((if success?(1-proj-7-tuple(v_704)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_713) then (v_713,2-proj-2-tuple(v_711)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_715: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_714),2-proj-7-tuple(v_704),3-proj-7-tuple(v_704),4-proj-7-tuple(v_704),5-proj-7-tuple(v_704),6-proj-7-tuple(v_704),7-proj-7-tuple(v_704))) in
        {244}let v_716: bitstring = catch-fail(concat3(1-proj-3-tuple(v_705),2-proj-3-tuple(v_705),2-proj-2-tuple(v_714))) in
        {245}let (hs_717: handshakestate,message_c_718: bitstring) = (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-7-tuple(v_704))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (v_715,v_716) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {246}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {247}insert statestore(alice,charlie,sid,statepack_d(hs_717,handshakestategetcs(hs_717),cs2_702));
        {248}out(pub, message_c_718)
    ) | (
        {250}!
        {270}get statestore(=alice,=charlie,=sid,statepack_d(hs_719: handshakestate,cs1_720: cipherstate,cs2_721: cipherstate)) in
        {251}let hs_722: handshakestate = handshakestatesetcs(hs_719,cs2_721) in
        {252}in(pub, message_d_723: bitstring);
        {253}let v_724: bitstring = catch-fail(handshakestateunpack(hs_722)) in
        {254}let v_725: bitstring = catch-fail(deconcat3(message_d_723)) in
        {255}let v_726: bool = catch-fail(true) in
        {256}let v_727: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_724))) in
        {257}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {258}let v_729: aead = catch-fail(decrypt(1-proj-2-tuple(v_728),2-proj-2-tuple(v_728),3-proj-3-tuple(v_727),3-proj-3-tuple(v_725))) in
        {259}let v_730: bitstring = catch-fail(aeadunpack(v_729)) in
        {260}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {261}let v_732: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_728))) && success?(1-proj-3-tuple(v_727))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then cipherstatepack(1-proj-2-tuple(v_731),increment_nonce(2-proj-2-tuple(v_728))) else fail-any) else fail-any)) in
        {262}let v_733: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && (success?(3-proj-3-tuple(v_727)) && success?(1-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (v_732,3-proj-3-tuple(v_730),1-proj-3-tuple(v_730)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_734: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) in
        {264}let v_735: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),3-proj-3-tuple(v_725))) else fail-any) else fail-any)) in
        {265}let v_736: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(1-proj-7-tuple(v_724))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_737: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_736),2-proj-7-tuple(v_724),3-proj-7-tuple(v_724),4-proj-7-tuple(v_724),5-proj-7-tuple(v_724),6-proj-7-tuple(v_724),7-proj-7-tuple(v_724))) in
        {267}let (hs_738: handshakestate,plaintext_d_739: bitstring,valid_740: bool) = (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-7-tuple(v_724))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if not-caught-fail(v_726) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if (v_726 && 3-proj-3-tuple(v_736)) then (if not-caught-fail(v_737) then (v_737,2-proj-3-tuple(v_736),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {268}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_739);
        {269}event RecvEnd(valid_740)
    ) | (
        {271}event LeakS(phase0,alice);
        {272}out(pub, key_s(alice))
    ) | (
        {273}phase 1;
        {274}event LeakS(phase1,alice);
        {275}out(pub, key_s(alice))
    )
) | (
    {276}let s_741: keypair = keypairpack(empty,empty) in
    (
        {277}let e_742: keypair = keypairpack(empty,empty) in
        {278}let rs_743: key = empty in
        {279}let re_744: key = empty in
        {280}let v_745: bitstring = catch-fail(hash(somename,empty)) in
        {281}let v_746: key = catch-fail(v_745) in
        {282}let v_747: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {283}let v_748: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then symmetricstatepack(v_747,v_746,v_745) else fail-any) else fail-any) else fail-any))) in
        {284}let v_749: symmetricstate = catch-fail((if success?((if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then symmetricstatepack(v_747,v_746,v_745) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_748),hash(3-proj-3-tuple(v_748),empty)) else fail-any) else fail-any)) in
        {285}let hs_750: handshakestate = (if not-caught-fail(v_749) then handshakestatepack(v_749,s_741,e_742,rs_743,re_744,empty,false) else fail-any) in
        {286}insert statestore(bob,alice,sid,statepack_a(hs_750))
    ) | (
        {320}get statestore(=bob,=alice,=sid,statepack_a(hs_751: handshakestate)) in
        {287}in(pub, message_a_752: bitstring);
        {288}let v_753: bitstring = catch-fail(handshakestateunpack(hs_751)) in
        {289}let v_754: bitstring = catch-fail(deconcat3(message_a_752)) in
        {290}let v_755: bool = catch-fail(true) in
        {291}let v_756: key = catch-fail(1-proj-3-tuple(v_754)) in
        {292}let v_757: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_753))) in
        {293}let v_758: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_753)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then symmetricstatepack(1-proj-3-tuple(v_757),2-proj-3-tuple(v_757),hash(3-proj-3-tuple(v_757),v_756)) else fail-any) else fail-any)) in
        {294}let v_759: bitstring = catch-fail(symmetricstateunpack(v_758)) in
        {295}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_759))) in
        {296}let v_761: aead = catch-fail(decrypt(1-proj-2-tuple(v_760),2-proj-2-tuple(v_760),3-proj-3-tuple(v_759),2-proj-3-tuple(v_754))) in
        {297}let v_762: bitstring = catch-fail(aeadunpack(v_761)) in
        {298}let v_763: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_759))) in
        {299}let v_764: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_760))) && success?(1-proj-3-tuple(v_759))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then cipherstatepack(1-proj-2-tuple(v_763),increment_nonce(2-proj-2-tuple(v_760))) else fail-any) else fail-any)) in
        {300}let v_765: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_754)) && (success?(3-proj-3-tuple(v_759)) && success?(1-proj-3-tuple(v_759)))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_761) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,3-proj-3-tuple(v_762),1-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_766: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_765),2-proj-3-tuple(v_759),3-proj-3-tuple(v_759)))) in
        {302}let v_767: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_754)) && success?(symmetricstatepack(1-proj-3-tuple(v_765),2-proj-3-tuple(v_759),3-proj-3-tuple(v_759)))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack(1-proj-3-tuple(v_766),2-proj-3-tuple(v_766),hash(3-proj-3-tuple(v_766),2-proj-3-tuple(v_754))) else fail-any) else fail-any)) in
        {303}let v_768: bitstring = catch-fail((if success?(2-proj-3-tuple(v_754)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if not-caught-fail(v_767) then (v_767,2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_769: key = catch-fail(2-proj-3-tuple(v_768)) in
        {305}let v_770: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_768))) in
        {306}let v_771: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_770))) in
        {307}let v_772: aead = catch-fail(decrypt(1-proj-2-tuple(v_771),2-proj-2-tuple(v_771),3-proj-3-tuple(v_770),3-proj-3-tuple(v_754))) in
        {308}let v_773: bitstring = catch-fail(aeadunpack(v_772)) in
        {309}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_770))) in
        {310}let v_775: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_771))) && success?(1-proj-3-tuple(v_770))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then cipherstatepack(1-proj-2-tuple(v_774),increment_nonce(2-proj-2-tuple(v_771))) else fail-any) else fail-any)) in
        {311}let v_776: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_754)) && (success?(3-proj-3-tuple(v_770)) && success?(1-proj-3-tuple(v_770)))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if not-caught-fail(v_775) then (v_775,3-proj-3-tuple(v_773),1-proj-3-tuple(v_773)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {312}let v_777: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_776),2-proj-3-tuple(v_770),3-proj-3-tuple(v_770)))) in
        {313}let v_778: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_754)) && success?(symmetricstatepack(1-proj-3-tuple(v_776),2-proj-3-tuple(v_770),3-proj-3-tuple(v_770)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_777),hash(3-proj-3-tuple(v_777),3-proj-3-tuple(v_754))) else fail-any) else fail-any)) in
        {314}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_754)) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {315}let v_780: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {316}let v_781: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_779),2-proj-7-tuple(v_753),3-proj-7-tuple(v_753),v_769,v_756,6-proj-7-tuple(v_753),7-proj-7-tuple(v_753))) in
        {317}let (hs_782: handshakestate,plaintext_a: bitstring,valid_783: bool) = (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-7-tuple(v_753))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if not-caught-fail(v_755) then (if not-caught-fail(v_756) then (if not-caught-fail(v_758) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_769) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if ((3-proj-3-tuple(v_768) && 3-proj-3-tuple(v_779)) && (v_769 = getpublickey((if not-caught-fail(v_780) then keypairpack(validkey(v_780),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {318}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {319}insert statestore(bob,alice,sid,statepack_b(hs_782))
    ) | (
        {365}get statestore(=bob,=alice,=sid,statepack_b(hs_784: handshakestate)) in
        {321}let v_785: bitstring = catch-fail(handshakestateunpack(hs_784)) in
        {322}let v_786: bitstring = catch-fail((empty,empty,empty)) in
        {323}let v_787: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {324}let v_788: keypair = catch-fail((if not-caught-fail(v_787) then keypairpack(validkey(v_787),key_e(bob,alice,sid)) else fail-any)) in
        {325}let v_789: bitstring = catch-fail(getpublickey(v_788)) in
        {326}let v_790: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_785))) in
        {327}let v_791: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_785)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_790),hash(3-proj-3-tuple(v_790),v_789)) else fail-any) else fail-any)) in
        {328}let v_792: bitstring = catch-fail(keypairunpack(v_788)) in
        {329}let v_793: bitstring = catch-fail(symmetricstateunpack(v_791)) in
        {330}let v_794: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_793),(if success?(5-proj-7-tuple(v_785)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),5-proj-7-tuple(v_785)) else fail-any) else fail-any))) in
        {331}let v_795: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_793),(if success?(5-proj-7-tuple(v_785)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),5-proj-7-tuple(v_785)) else fail-any) else fail-any))) in
        {332}let v_796: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_793),(if success?(5-proj-7-tuple(v_785)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),5-proj-7-tuple(v_785)) else fail-any) else fail-any))) in
        {333}let v_797: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_785)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),5-proj-7-tuple(v_785)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_793))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then (v_794,v_795,v_796) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let v_798: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_785)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),5-proj-7-tuple(v_785)) else fail-any) else fail-any)) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_797)) then cipherstatepack(2-proj-3-tuple(v_797),minnonce) else fail-any),1-proj-3-tuple(v_797),3-proj-3-tuple(v_793)) else fail-any) else fail-any) else fail-any)) in
        {335}let v_799: bitstring = catch-fail(keypairunpack(v_788)) in
        {336}let v_800: bitstring = catch-fail(symmetricstateunpack(v_798)) in
        {337}let v_801: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_800),(if success?(4-proj-7-tuple(v_785)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then dhexp(2-proj-2-tuple(v_799),4-proj-7-tuple(v_785)) else fail-any) else fail-any))) in
        {338}let v_802: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_800),(if success?(4-proj-7-tuple(v_785)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then dhexp(2-proj-2-tuple(v_799),4-proj-7-tuple(v_785)) else fail-any) else fail-any))) in
        {339}let v_803: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_800),(if success?(4-proj-7-tuple(v_785)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then dhexp(2-proj-2-tuple(v_799),4-proj-7-tuple(v_785)) else fail-any) else fail-any))) in
        {340}let v_804: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_785)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then dhexp(2-proj-2-tuple(v_799),4-proj-7-tuple(v_785)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_800))) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (v_801,v_802,v_803) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {341}let v_805: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_785)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then dhexp(2-proj-2-tuple(v_799),4-proj-7-tuple(v_785)) else fail-any) else fail-any)) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_804)) then cipherstatepack(2-proj-3-tuple(v_804),minnonce) else fail-any),1-proj-3-tuple(v_804),3-proj-3-tuple(v_800)) else fail-any) else fail-any) else fail-any)) in
        {342}let v_806: bitstring = catch-fail(symmetricstateunpack(v_805)) in
        {343}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_806))) in
        {344}let v_808: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_807),2-proj-2-tuple(v_807),3-proj-3-tuple(v_806),msg_b(bob,alice,sid))) in
        {345}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_806))) in
        {346}let v_810: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_807))) && success?(1-proj-3-tuple(v_806))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then cipherstatepack(1-proj-2-tuple(v_809),increment_nonce(2-proj-2-tuple(v_807))) else fail-any) else fail-any)) in
        {347}let v_811: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_806)) && success?(1-proj-3-tuple(v_806))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then (if not-caught-fail(v_808) then (if not-caught-fail(v_810) then (v_810,v_808) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_812: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_811),2-proj-3-tuple(v_806),3-proj-3-tuple(v_806)))) in
        {349}let v_813: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_811)) && success?(symmetricstatepack(1-proj-2-tuple(v_811),2-proj-3-tuple(v_806),3-proj-3-tuple(v_806)))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_812),hash(3-proj-3-tuple(v_812),2-proj-2-tuple(v_811))) else fail-any) else fail-any)) in
        {350}let v_814: bitstring = catch-fail((if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,2-proj-2-tuple(v_811)) else fail-any) else fail-any) else fail-any)) in
        {351}let v_815: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_814),2-proj-7-tuple(v_785),v_788,4-proj-7-tuple(v_785),5-proj-7-tuple(v_785),6-proj-7-tuple(v_785),7-proj-7-tuple(v_785))) in
        {352}let v_816: bitstring = catch-fail(concat3(v_789,2-proj-3-tuple(v_786),2-proj-2-tuple(v_814))) in
        {353}let v_817: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_814))) in
        {354}let v_818: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_817),zero)) in
        {355}let v_819: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_817),zero)) in
        {356}let v_820: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_817),zero)) in
        {357}let v_821: bitstring = catch-fail((if success?(2-proj-3-tuple(v_817)) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (if not-caught-fail(v_820) then (v_818,v_819,v_820) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_822: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_821)) then cipherstatepack(1-proj-3-tuple(v_821),minnonce) else fail-any)) in
        {359}let v_823: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_821)) then cipherstatepack(2-proj-3-tuple(v_821),minnonce) else fail-any)) in
        {360}let v_824: bitstring = catch-fail((if success?(1-proj-2-tuple(v_814)) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (1-proj-2-tuple(v_814),v_822,v_823) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let (hs_825: handshakestate,message_b_826: bitstring,cs1_827: cipherstate,cs2_828: cipherstate) = (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-7-tuple(v_785))))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_791) then (if not-caught-fail(v_798) then (if not-caught-fail(v_805) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then (if not-caught-fail(v_815) then (if not-caught-fail(v_816) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (v_815,v_816,2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {362}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {363}insert statestore(bob,alice,sid,statepack_c(hs_825,cs1_827,cs2_828));
        {364}out(pub, message_b_826)
    ) | (
        {366}!
        {386}get statestore(=bob,=alice,=sid,statepack_c(hs_829: handshakestate,cs1_830: cipherstate,cs2_831: cipherstate)) in
        {367}let hs_832: handshakestate = handshakestatesetcs(hs_829,cs1_830) in
        {368}in(pub, message_c_833: bitstring);
        {369}let v_834: bitstring = catch-fail(handshakestateunpack(hs_832)) in
        {370}let v_835: bitstring = catch-fail(deconcat3(message_c_833)) in
        {371}let v_836: bool = catch-fail(true) in
        {372}let v_837: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_834))) in
        {373}let v_838: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_837))) in
        {374}let v_839: aead = catch-fail(decrypt(1-proj-2-tuple(v_838),2-proj-2-tuple(v_838),3-proj-3-tuple(v_837),3-proj-3-tuple(v_835))) in
        {375}let v_840: bitstring = catch-fail(aeadunpack(v_839)) in
        {376}let v_841: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_837))) in
        {377}let v_842: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_838))) && success?(1-proj-3-tuple(v_837))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then cipherstatepack(1-proj-2-tuple(v_841),increment_nonce(2-proj-2-tuple(v_838))) else fail-any) else fail-any)) in
        {378}let v_843: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_835)) && (success?(3-proj-3-tuple(v_837)) && success?(1-proj-3-tuple(v_837)))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then (if not-caught-fail(v_839) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if not-caught-fail(v_842) then (v_842,3-proj-3-tuple(v_840),1-proj-3-tuple(v_840)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_844: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_837),3-proj-3-tuple(v_837)))) in
        {380}let v_845: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_835)) && success?(symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_837),3-proj-3-tuple(v_837)))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then symmetricstatepack(1-proj-3-tuple(v_844),2-proj-3-tuple(v_844),hash(3-proj-3-tuple(v_844),3-proj-3-tuple(v_835))) else fail-any) else fail-any)) in
        {381}let v_846: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_835)) && success?(1-proj-7-tuple(v_834))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if not-caught-fail(v_845) then (v_845,2-proj-3-tuple(v_843),3-proj-3-tuple(v_843)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_847: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_846),2-proj-7-tuple(v_834),3-proj-7-tuple(v_834),4-proj-7-tuple(v_834),5-proj-7-tuple(v_834),6-proj-7-tuple(v_834),7-proj-7-tuple(v_834))) in
        {383}let (hs_848: handshakestate,plaintext_c: bitstring,valid_849: bool) = (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-7-tuple(v_834))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_836) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (if (v_836 && 3-proj-3-tuple(v_846)) then (if not-caught-fail(v_847) then (v_847,2-proj-3-tuple(v_846),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {384}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {385}insert statestore(bob,alice,sid,statepack_d(hs_848,handshakestategetcs(hs_848),cs2_831))
    ) | (
        {387}!
        {405}get statestore(=bob,=alice,=sid,statepack_d(hs_850: handshakestate,cs1_851: cipherstate,cs2_852: cipherstate)) in
        {388}let hs_853: handshakestate = handshakestatesetcs(hs_850,cs2_852) in
        {389}let v_854: bitstring = catch-fail(handshakestateunpack(hs_853)) in
        {390}let v_855: bitstring = catch-fail((empty,empty,empty)) in
        {391}let v_856: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_854))) in
        {392}let v_857: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {393}let v_858: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_857),2-proj-2-tuple(v_857),3-proj-3-tuple(v_856),msg_d(bob,alice,sid))) in
        {394}let v_859: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {395}let v_860: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_857))) && success?(1-proj-3-tuple(v_856))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then cipherstatepack(1-proj-2-tuple(v_859),increment_nonce(2-proj-2-tuple(v_857))) else fail-any) else fail-any)) in
        {396}let v_861: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_856)) && success?(1-proj-3-tuple(v_856))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then (if not-caught-fail(v_858) then (if not-caught-fail(v_860) then (v_860,v_858) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_862: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_861),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) in
        {398}let v_863: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_861)) && success?(symmetricstatepack(1-proj-2-tuple(v_861),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_862),hash(3-proj-3-tuple(v_862),2-proj-2-tuple(v_861))) else fail-any) else fail-any)) in
        {399}let v_864: bitstring = catch-fail((if success?(1-proj-7-tuple(v_854)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then (if not-caught-fail(v_863) then (v_863,2-proj-2-tuple(v_861)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_865: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_864),2-proj-7-tuple(v_854),3-proj-7-tuple(v_854),4-proj-7-tuple(v_854),5-proj-7-tuple(v_854),6-proj-7-tuple(v_854),7-proj-7-tuple(v_854))) in
        {401}let v_866: bitstring = catch-fail(concat3(1-proj-3-tuple(v_855),2-proj-3-tuple(v_855),2-proj-2-tuple(v_864))) in
        {402}let (hs_867: handshakestate,message_d_868: bitstring) = (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-7-tuple(v_854))))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then (if not-caught-fail(v_865) then (if not-caught-fail(v_866) then (v_865,v_866) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {403}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {404}out(pub, message_d_868)
    ) | (
        0
    )
) | (
    {406}let s_869: keypair = keypairpack(empty,empty) in
    (
        {407}let e_870: keypair = keypairpack(empty,empty) in
        {408}let rs_871: key = empty in
        {409}let re_872: key = empty in
        {410}let v_873: bitstring = catch-fail(hash(somename,empty)) in
        {411}let v_874: key = catch-fail(v_873) in
        {412}let v_875: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {413}let v_876: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then symmetricstatepack(v_875,v_874,v_873) else fail-any) else fail-any) else fail-any))) in
        {414}let v_877: symmetricstate = catch-fail((if success?((if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then symmetricstatepack(v_875,v_874,v_873) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then symmetricstatepack(1-proj-3-tuple(v_876),2-proj-3-tuple(v_876),hash(3-proj-3-tuple(v_876),empty)) else fail-any) else fail-any)) in
        {415}let hs_878: handshakestate = (if not-caught-fail(v_877) then handshakestatepack(v_877,s_869,e_870,rs_871,re_872,empty,false) else fail-any) in
        {416}insert statestore(bob,charlie,sid,statepack_a(hs_878))
    ) | (
        {450}get statestore(=bob,=charlie,=sid,statepack_a(hs_879: handshakestate)) in
        {417}in(pub, message_a_880: bitstring);
        {418}let v_881: bitstring = catch-fail(handshakestateunpack(hs_879)) in
        {419}let v_882: bitstring = catch-fail(deconcat3(message_a_880)) in
        {420}let v_883: bool = catch-fail(true) in
        {421}let v_884: key = catch-fail(1-proj-3-tuple(v_882)) in
        {422}let v_885: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_881))) in
        {423}let v_886: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_881)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_885),hash(3-proj-3-tuple(v_885),v_884)) else fail-any) else fail-any)) in
        {424}let v_887: bitstring = catch-fail(symmetricstateunpack(v_886)) in
        {425}let v_888: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_887))) in
        {426}let v_889: aead = catch-fail(decrypt(1-proj-2-tuple(v_888),2-proj-2-tuple(v_888),3-proj-3-tuple(v_887),2-proj-3-tuple(v_882))) in
        {427}let v_890: bitstring = catch-fail(aeadunpack(v_889)) in
        {428}let v_891: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_887))) in
        {429}let v_892: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_888))) && success?(1-proj-3-tuple(v_887))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then cipherstatepack(1-proj-2-tuple(v_891),increment_nonce(2-proj-2-tuple(v_888))) else fail-any) else fail-any)) in
        {430}let v_893: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_882)) && (success?(3-proj-3-tuple(v_887)) && success?(1-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then (if not-caught-fail(v_889) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_892) then (v_892,3-proj-3-tuple(v_890),1-proj-3-tuple(v_890)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_894: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)))) in
        {432}let v_895: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_882)) && success?(symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then symmetricstatepack(1-proj-3-tuple(v_894),2-proj-3-tuple(v_894),hash(3-proj-3-tuple(v_894),2-proj-3-tuple(v_882))) else fail-any) else fail-any)) in
        {433}let v_896: bitstring = catch-fail((if success?(2-proj-3-tuple(v_882)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if not-caught-fail(v_895) then (v_895,2-proj-3-tuple(v_893),3-proj-3-tuple(v_893)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_897: key = catch-fail(2-proj-3-tuple(v_896)) in
        {435}let v_898: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_896))) in
        {436}let v_899: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_898))) in
        {437}let v_900: aead = catch-fail(decrypt(1-proj-2-tuple(v_899),2-proj-2-tuple(v_899),3-proj-3-tuple(v_898),3-proj-3-tuple(v_882))) in
        {438}let v_901: bitstring = catch-fail(aeadunpack(v_900)) in
        {439}let v_902: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_898))) in
        {440}let v_903: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_899))) && success?(1-proj-3-tuple(v_898))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then cipherstatepack(1-proj-2-tuple(v_902),increment_nonce(2-proj-2-tuple(v_899))) else fail-any) else fail-any)) in
        {441}let v_904: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_882)) && (success?(3-proj-3-tuple(v_898)) && success?(1-proj-3-tuple(v_898)))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if not-caught-fail(v_903) then (v_903,3-proj-3-tuple(v_901),1-proj-3-tuple(v_901)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_905: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_904),2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)))) in
        {443}let v_906: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_882)) && success?(symmetricstatepack(1-proj-3-tuple(v_904),2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then symmetricstatepack(1-proj-3-tuple(v_905),2-proj-3-tuple(v_905),hash(3-proj-3-tuple(v_905),3-proj-3-tuple(v_882))) else fail-any) else fail-any)) in
        {444}let v_907: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_882)) && success?(1-proj-3-tuple(v_896))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then (if not-caught-fail(v_906) then (v_906,2-proj-3-tuple(v_904),3-proj-3-tuple(v_904)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_908: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {446}let v_909: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_907),2-proj-7-tuple(v_881),3-proj-7-tuple(v_881),v_897,v_884,6-proj-7-tuple(v_881),7-proj-7-tuple(v_881))) in
        {447}let (hs_910: handshakestate,plaintext_a_911: bitstring,valid_912: bool) = (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-7-tuple(v_881))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (if not-caught-fail(v_886) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_897) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if ((3-proj-3-tuple(v_896) && 3-proj-3-tuple(v_907)) && (v_897 = getpublickey((if not-caught-fail(v_908) then keypairpack(validkey(v_908),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_909) then (v_909,2-proj-3-tuple(v_907),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_911);
        {449}insert statestore(bob,charlie,sid,statepack_b(hs_910))
    ) | (
        {495}get statestore(=bob,=charlie,=sid,statepack_b(hs_913: handshakestate)) in
        {451}let v_914: bitstring = catch-fail(handshakestateunpack(hs_913)) in
        {452}let v_915: bitstring = catch-fail((empty,empty,empty)) in
        {453}let v_916: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {454}let v_917: keypair = catch-fail((if not-caught-fail(v_916) then keypairpack(validkey(v_916),key_e(bob,charlie,sid)) else fail-any)) in
        {455}let v_918: bitstring = catch-fail(getpublickey(v_917)) in
        {456}let v_919: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_914))) in
        {457}let v_920: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_914)) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),v_918)) else fail-any) else fail-any)) in
        {458}let v_921: bitstring = catch-fail(keypairunpack(v_917)) in
        {459}let v_922: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {460}let v_923: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_922),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {461}let v_924: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_922),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {462}let v_925: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_922),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {463}let v_926: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_922))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (v_923,v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {464}let v_927: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_914)) else fail-any) else fail-any)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_926)) then cipherstatepack(2-proj-3-tuple(v_926),minnonce) else fail-any),1-proj-3-tuple(v_926),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any)) in
        {465}let v_928: bitstring = catch-fail(keypairunpack(v_917)) in
        {466}let v_929: bitstring = catch-fail(symmetricstateunpack(v_927)) in
        {467}let v_930: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_929),(if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {468}let v_931: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_929),(if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {469}let v_932: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_929),(if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {470}let v_933: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),4-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_929))) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if not-caught-fail(v_932) then (v_930,v_931,v_932) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_934: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then dhexp(2-proj-2-tuple(v_928),4-proj-7-tuple(v_914)) else fail-any) else fail-any)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_933)) then cipherstatepack(2-proj-3-tuple(v_933),minnonce) else fail-any),1-proj-3-tuple(v_933),3-proj-3-tuple(v_929)) else fail-any) else fail-any) else fail-any)) in
        {472}let v_935: bitstring = catch-fail(symmetricstateunpack(v_934)) in
        {473}let v_936: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_935))) in
        {474}let v_937: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_936),2-proj-2-tuple(v_936),3-proj-3-tuple(v_935),msg_b(bob,charlie,sid))) in
        {475}let v_938: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_935))) in
        {476}let v_939: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_936))) && success?(1-proj-3-tuple(v_935))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then cipherstatepack(1-proj-2-tuple(v_938),increment_nonce(2-proj-2-tuple(v_936))) else fail-any) else fail-any)) in
        {477}let v_940: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_935)) && success?(1-proj-3-tuple(v_935))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-2-tuple(v_936))))) then (if not-caught-fail(v_937) then (if not-caught-fail(v_939) then (v_939,v_937) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let v_941: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_940),2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)))) in
        {479}let v_942: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_940)) && success?(symmetricstatepack(1-proj-2-tuple(v_940),2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),hash(3-proj-3-tuple(v_941),2-proj-2-tuple(v_940))) else fail-any) else fail-any)) in
        {480}let v_943: bitstring = catch-fail((if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then (if not-caught-fail(v_942) then (v_942,2-proj-2-tuple(v_940)) else fail-any) else fail-any) else fail-any)) in
        {481}let v_944: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_943),2-proj-7-tuple(v_914),v_917,4-proj-7-tuple(v_914),5-proj-7-tuple(v_914),6-proj-7-tuple(v_914),7-proj-7-tuple(v_914))) in
        {482}let v_945: bitstring = catch-fail(concat3(v_918,2-proj-3-tuple(v_915),2-proj-2-tuple(v_943))) in
        {483}let v_946: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_943))) in
        {484}let v_947: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_946),zero)) in
        {485}let v_948: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_946),zero)) in
        {486}let v_949: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_946),zero)) in
        {487}let v_950: bitstring = catch-fail((if success?(2-proj-3-tuple(v_946)) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (v_947,v_948,v_949) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {488}let v_951: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_950)) then cipherstatepack(1-proj-3-tuple(v_950),minnonce) else fail-any)) in
        {489}let v_952: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_950)) then cipherstatepack(2-proj-3-tuple(v_950),minnonce) else fail-any)) in
        {490}let v_953: bitstring = catch-fail((if success?(1-proj-2-tuple(v_943)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (1-proj-2-tuple(v_943),v_951,v_952) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {491}let (hs_954: handshakestate,message_b_955: bitstring,cs1_956: cipherstate,cs2_957: cipherstate) = (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-7-tuple(v_914))))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_920) then (if not-caught-fail(v_927) then (if not-caught-fail(v_934) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (v_944,v_945,2-proj-3-tuple(v_953),3-proj-3-tuple(v_953)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {492}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {493}insert statestore(bob,charlie,sid,statepack_c(hs_954,cs1_956,cs2_957));
        {494}out(pub, message_b_955)
    ) | (
        {496}!
        {516}get statestore(=bob,=charlie,=sid,statepack_c(hs_958: handshakestate,cs1_959: cipherstate,cs2_960: cipherstate)) in
        {497}let hs_961: handshakestate = handshakestatesetcs(hs_958,cs1_959) in
        {498}in(pub, message_c_962: bitstring);
        {499}let v_963: bitstring = catch-fail(handshakestateunpack(hs_961)) in
        {500}let v_964: bitstring = catch-fail(deconcat3(message_c_962)) in
        {501}let v_965: bool = catch-fail(true) in
        {502}let v_966: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_963))) in
        {503}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {504}let v_968: aead = catch-fail(decrypt(1-proj-2-tuple(v_967),2-proj-2-tuple(v_967),3-proj-3-tuple(v_966),3-proj-3-tuple(v_964))) in
        {505}let v_969: bitstring = catch-fail(aeadunpack(v_968)) in
        {506}let v_970: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {507}let v_971: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_967))) && success?(1-proj-3-tuple(v_966))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-2-tuple(v_970))))) then cipherstatepack(1-proj-2-tuple(v_970),increment_nonce(2-proj-2-tuple(v_967))) else fail-any) else fail-any)) in
        {508}let v_972: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_964)) && (success?(3-proj-3-tuple(v_966)) && success?(1-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then (if not-caught-fail(v_968) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,3-proj-3-tuple(v_969),1-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_973: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) in
        {510}let v_974: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_964)) && success?(symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),3-proj-3-tuple(v_964))) else fail-any) else fail-any)) in
        {511}let v_975: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_964)) && success?(1-proj-7-tuple(v_963))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_974) then (v_974,2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_976: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_975),2-proj-7-tuple(v_963),3-proj-7-tuple(v_963),4-proj-7-tuple(v_963),5-proj-7-tuple(v_963),6-proj-7-tuple(v_963),7-proj-7-tuple(v_963))) in
        {513}let (hs_977: handshakestate,plaintext_c_978: bitstring,valid_979: bool) = (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-7-tuple(v_963))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if not-caught-fail(v_965) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (v_965 && 3-proj-3-tuple(v_975)) then (if not-caught-fail(v_976) then (v_976,2-proj-3-tuple(v_975),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {514}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_978);
        {515}insert statestore(bob,charlie,sid,statepack_d(hs_977,handshakestategetcs(hs_977),cs2_960))
    ) | (
        {517}!
        {535}get statestore(=bob,=charlie,=sid,statepack_d(hs_980: handshakestate,cs1_981: cipherstate,cs2_982: cipherstate)) in
        {518}let hs_983: handshakestate = handshakestatesetcs(hs_980,cs2_982) in
        {519}let v_984: bitstring = catch-fail(handshakestateunpack(hs_983)) in
        {520}let v_985: bitstring = catch-fail((empty,empty,empty)) in
        {521}let v_986: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_984))) in
        {522}let v_987: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_986))) in
        {523}let v_988: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_987),2-proj-2-tuple(v_987),3-proj-3-tuple(v_986),msg_d(bob,charlie,sid))) in
        {524}let v_989: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_986))) in
        {525}let v_990: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_987))) && success?(1-proj-3-tuple(v_986))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then cipherstatepack(1-proj-2-tuple(v_989),increment_nonce(2-proj-2-tuple(v_987))) else fail-any) else fail-any)) in
        {526}let v_991: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_986)) && success?(1-proj-3-tuple(v_986))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then (if not-caught-fail(v_988) then (if not-caught-fail(v_990) then (v_990,v_988) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_992: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_991),2-proj-3-tuple(v_986),3-proj-3-tuple(v_986)))) in
        {528}let v_993: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_991)) && success?(symmetricstatepack(1-proj-2-tuple(v_991),2-proj-3-tuple(v_986),3-proj-3-tuple(v_986)))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then symmetricstatepack(1-proj-3-tuple(v_992),2-proj-3-tuple(v_992),hash(3-proj-3-tuple(v_992),2-proj-2-tuple(v_991))) else fail-any) else fail-any)) in
        {529}let v_994: bitstring = catch-fail((if success?(1-proj-7-tuple(v_984)) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_993) then (v_993,2-proj-2-tuple(v_991)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {530}let v_995: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_994),2-proj-7-tuple(v_984),3-proj-7-tuple(v_984),4-proj-7-tuple(v_984),5-proj-7-tuple(v_984),6-proj-7-tuple(v_984),7-proj-7-tuple(v_984))) in
        {531}let v_996: bitstring = catch-fail(concat3(1-proj-3-tuple(v_985),2-proj-3-tuple(v_985),2-proj-2-tuple(v_994))) in
        {532}let (hs_997: handshakestate,message_d_998: bitstring) = (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-7-tuple(v_984))))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (v_995,v_996) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {533}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {534}out(pub, message_d_998)
    ) | (
        0
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); not attacker_p1(msg_a(alice,bob,sid_a)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_b(sid_b),m)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); not attacker_p1(msg_c(alice,bob,sid_a)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_d(sid_b),m)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 116 rules in the queue.
400 rules inserted. The rule base contains 386 rules. 105 rules in the queue.
600 rules inserted. The rule base contains 556 rules. 102 rules in the queue.
800 rules inserted. The rule base contains 713 rules. 100 rules in the queue.
1000 rules inserted. The rule base contains 833 rules. 117 rules in the queue.
1200 rules inserted. The rule base contains 967 rules. 144 rules in the queue.
1400 rules inserted. The rule base contains 1062 rules. 161 rules in the queue.
1600 rules inserted. The rule base contains 1211 rules. 164 rules in the queue.
1800 rules inserted. The rule base contains 1370 rules. 164 rules in the queue.
2000 rules inserted. The rule base contains 1507 rules. 173 rules in the queue.
2200 rules inserted. The rule base contains 1633 rules. 179 rules in the queue.
2400 rules inserted. The rule base contains 1723 rules. 160 rules in the queue.
2600 rules inserted. The rule base contains 1859 rules. 158 rules in the queue.
2800 rules inserted. The rule base contains 2003 rules. 172 rules in the queue.
3000 rules inserted. The rule base contains 2140 rules. 153 rules in the queue.
3200 rules inserted. The rule base contains 2252 rules. 125 rules in the queue.
3400 rules inserted. The rule base contains 2376 rules. 115 rules in the queue.
3600 rules inserted. The rule base contains 2480 rules. 29 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648297630]),msg_a(alice,charlie,sid[!1 = @sid_648297630]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297631]),msg_a(alice,charlie,sid[!1 = @sid_648297630])))
Abbreviations:
sid_648297669 = sid[!1 = @sid_648297659]
sid_648297670 = sid[!1 = @sid_648297643]

1. The entry statestore(bob,alice,sid_648297669,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648297669,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_648297670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648297670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_648297670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648297670),msg_a(alice,charlie,sid_648297670)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297670))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297670)))).

4. The entry statestore(bob,alice,sid_648297669,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297670))) that may be sent on channel pub by 3 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648297670),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_648297669),msg_a(alice,charlie,sid_648297670)) may be executed at {318}.
end(RecvMsg(bob,alice,stagepack_a(sid_648297669),msg_a(alice,charlie,sid_648297670))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648297673]),msg_a(alice,charlie,sid[!1 = @sid_648297673]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297674]),msg_a(alice,charlie,sid[!1 = @sid_648297673])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648297677]),msg_a(alice,bob,sid[!1 = @sid_648297677]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297678]),msg_a(alice,bob,sid[!1 = @sid_648297677])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648297687]),msg_a(alice,charlie,sid[!1 = @sid_648297687]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297688]),msg_a(alice,charlie,sid[!1 = @sid_648297687])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648297691]),msg_a(alice,bob,sid[!1 = @sid_648297691]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297692]),msg_a(alice,bob,sid[!1 = @sid_648297691])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648297701]),msg_a(alice,charlie,sid[!1 = @sid_648297701]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297702]),msg_a(alice,charlie,sid[!1 = @sid_648297701])))
Abbreviations:
sid_648297740 = sid[!1 = @sid_648297730]
sid_648297741 = sid[!1 = @sid_648297714]

1. The entry statestore(bob,alice,sid_648297740,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648297740,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_648297741,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648297741,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_648297741,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648297741),msg_a(alice,charlie,sid_648297741)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297741))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297741)))).

4. The entry statestore(bob,alice,sid_648297740,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297741))) that may be sent on channel pub by 3 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648297741),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_648297740),msg_a(alice,charlie,sid_648297741)) may be executed at {318}.
end(RecvMsg(bob,alice,stagepack_a(sid_648297740),msg_a(alice,charlie,sid_648297741))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648297744]),msg_a(alice,charlie,sid[!1 = @sid_648297744]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_648297745]),msg_a(alice,charlie,sid[!1 = @sid_648297744])))
Abbreviations:
sid_648297783 = sid[!1 = @sid_648297773]
sid_648297784 = sid[!1 = @sid_648297757]

1. The entry statestore(bob,alice,sid_648297783,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648297783,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_648297784,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648297784,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_648297784,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648297784),msg_a(alice,charlie,sid_648297784)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297784))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297784)))).

4. The entry statestore(bob,alice,sid_648297783,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648297784))) that may be sent on channel pub by 3 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648297784),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_648297783),msg_a(alice,charlie,sid_648297784)) may be executed at {318}.
end(RecvMsg(bob,alice,stagepack_a(sid_648297783),msg_a(alice,charlie,sid_648297784))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648297787]),msg_a(alice,bob,sid[!1 = @sid_648297787]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_648297787]))
Abbreviations:
sid_648297859 = sid[!1 = @sid_648297834]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_648297859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_648297859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_648297859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_648297859),msg_a(alice,bob,sid_648297859)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297859),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297859)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_648297859).
attacker(msg_a(alice,bob,sid_648297859)).

18. By 17, the attacker may know msg_a(alice,bob,sid_648297859).
So the attacker may know msg_a(alice,bob,sid_648297859) in phase 1.
attacker_p1(msg_a(alice,bob,sid_648297859)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648297862]),msg_a(alice,bob,sid[!1 = @sid_648297862]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_648297862]))
Abbreviations:
sid_648297934 = sid[!1 = @sid_648297909]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_648297934,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_648297934,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_648297934,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_648297934),msg_a(alice,bob,sid_648297934)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648297934),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648297934)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_648297934).
attacker(msg_a(alice,bob,sid_648297934)).

18. By 17, the attacker may know msg_a(alice,bob,sid_648297934).
So the attacker may know msg_a(alice,bob,sid_648297934) in phase 1.
attacker_p1(msg_a(alice,bob,sid_648297934)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648297937]),msg_a(alice,bob,sid[!1 = @sid_648297937]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_648297937]))
Abbreviations:
sid_648298011 = sid[!1 = @sid_648297986]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_648298011,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_648298011,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_648298011,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_648298011),msg_a(alice,bob,sid_648298011)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298011),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298011)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_648298011).
attacker(msg_a(alice,bob,sid_648298011)).

18. By 17, the attacker may know msg_a(alice,bob,sid_648298011).
So the attacker may know msg_a(alice,bob,sid_648298011) in phase 1.
attacker_p1(msg_a(alice,bob,sid_648298011)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298014]),msg_a(alice,bob,sid[!1 = @sid_648298014]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_648298014]))
Abbreviations:
sid_648298086 = sid[!1 = @sid_648298061]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_648298086,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_648298086,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_648298086,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_648298086),msg_a(alice,bob,sid_648298086)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_648298086),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_648298086)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_648298086).
attacker(msg_a(alice,bob,sid_648298086)).

18. By 17, the attacker may know msg_a(alice,bob,sid_648298086).
So the attacker may know msg_a(alice,bob,sid_648298086) in phase 1.
attacker_p1(msg_a(alice,bob,sid_648298086)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298089]),msg_b(bob,alice,sid[!1 = @sid_648298089]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298090]),msg_a(alice,bob,sid[!1 = @sid_648298090]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_648298090]),msg_b(bob,alice,sid[!1 = @sid_648298089])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_b(sid_b),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298098]),msg_b(bob,alice,sid[!1 = @sid_648298098]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298099]),msg_a(alice,bob,sid[!1 = @sid_648298099]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_648298099]),msg_b(bob,alice,sid[!1 = @sid_648298098])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_b(sid_b),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298108]),msg_b(bob,alice,sid[!1 = @sid_648298108]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298109]),msg_a(alice,bob,sid[!1 = @sid_648298109]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_648298109]),msg_b(bob,alice,sid[!1 = @sid_648298108])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298118]),msg_b(bob,alice,sid[!1 = @sid_648298118]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298119]),msg_a(alice,bob,sid[!1 = @sid_648298119]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_648298119]),msg_b(bob,alice,sid[!1 = @sid_648298118])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298127]),msg_b(bob,alice,sid[!1 = @sid_648298127]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298128]),msg_a(alice,bob,sid[!1 = @sid_648298128]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_648298128]),msg_b(bob,alice,sid[!1 = @sid_648298127])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_648298151]),msg_c(alice,charlie,sid[!1 = @sid_648298151]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298152]),msg_b(bob,alice,sid[!1 = @sid_648298152]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648298151]),msg_a(alice,charlie,sid[!1 = @sid_648298151]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298152]),msg_c(alice,charlie,sid[!1 = @sid_648298151])))
Abbreviations:
sid_648298294 = sid[!1 = @sid_648298281]
sid_648298295 = sid[!1 = @sid_648298241]

1. The entry statestore(bob,alice,sid_648298294,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648298294,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_648298295,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648298295,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_648298295,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298295),msg_a(alice,charlie,sid_648298295)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))).

4. The entry statestore(bob,alice,sid_648298294,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))) that may be sent on channel pub by 3 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_648298294,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_648298294,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_648298294,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298294),msg_b(bob,alice,sid_648298294)) may be executed at {362}.
So the entry statestore(bob,alice,sid_648298294,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),key_e(bob,alice,sid_648298294)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_648298294,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),key_e(bob,alice,sid_648298294)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_648298295,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298295),msg_a(alice,charlie,sid_648298295)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_648298295,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),key_e(alice,charlie,sid_648298295)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_648298295,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),key_e(alice,charlie,sid_648298295)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_648298294,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298294),msg_b(bob,alice,sid_648298294)) may be executed at {362}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294))) may be sent on channel pub at output {364}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))).

8. The entry statestore(alice,charlie,sid_648298295,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),key_e(alice,charlie,sid_648298295)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {229}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294))) that may be sent on channel pub by 7 may be received at input {186}.
So the entry statestore(alice,charlie,sid_648298295,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),key_e(alice,charlie,sid_648298295)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_648298295,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),key_e(alice,charlie,sid_648298295)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_648298295,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),key_e(alice,charlie,sid_648298295)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce))) that may be in a table by 8 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_648298295),msg_c(alice,charlie,sid_648298295)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294))),msg_c(alice,charlie,sid_648298295))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294))),msg_c(alice,charlie,sid_648298295)))).

10. The entry statestore(bob,alice,sid_648298294,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298294),g)),key_e(bob,alice,sid_648298294)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce))) that may be in a table by 5 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298294),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_e(alice,charlie,sid_648298295),g))),dhexp_real(key_e(bob,alice,sid_648298294),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298295),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298295))),validkey(dhexp_real(key_e(bob,alice,sid_648298294),g))),msg_b(bob,alice,sid_648298294))),msg_c(alice,charlie,sid_648298295))) that may be sent on channel pub by 9 may be received at input {368}.
So event RecvMsg(bob,alice,stagepack_c(sid_648298294),msg_c(alice,charlie,sid_648298295)) may be executed at {384}.
end(RecvMsg(bob,alice,stagepack_c(sid_648298294),msg_c(alice,charlie,sid_648298295))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_648298298]),msg_c(alice,charlie,sid[!1 = @sid_648298298]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298299]),msg_b(bob,alice,sid[!1 = @sid_648298299]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648298298]),msg_a(alice,charlie,sid[!1 = @sid_648298298]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298299]),msg_c(alice,charlie,sid[!1 = @sid_648298298])))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298302]),msg_c(alice,bob,sid[!1 = @sid_648298302]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298303]),msg_b(bob,alice,sid[!1 = @sid_648298303]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298302]),msg_a(alice,bob,sid[!1 = @sid_648298302]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298303]),msg_c(alice,bob,sid[!1 = @sid_648298302])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_648298312]),msg_c(alice,charlie,sid[!1 = @sid_648298312]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298313]),msg_b(bob,alice,sid[!1 = @sid_648298313]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648298312]),msg_a(alice,charlie,sid[!1 = @sid_648298312]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298313]),msg_c(alice,charlie,sid[!1 = @sid_648298312])))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298316]),msg_c(alice,bob,sid[!1 = @sid_648298316]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298317]),msg_b(bob,alice,sid[!1 = @sid_648298317]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298316]),msg_a(alice,bob,sid[!1 = @sid_648298316]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298317]),msg_c(alice,bob,sid[!1 = @sid_648298316])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1108,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_648298326]),msg_c(alice,charlie,sid[!1 = @sid_648298326]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298327]),msg_b(bob,alice,sid[!1 = @sid_648298327]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648298326]),msg_a(alice,charlie,sid[!1 = @sid_648298326]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298327]),msg_c(alice,charlie,sid[!1 = @sid_648298326])))
Abbreviations:
sid_648298469 = sid[!1 = @sid_648298456]
sid_648298470 = sid[!1 = @sid_648298416]

1. The entry statestore(bob,alice,sid_648298469,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648298469,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_648298470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648298470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_648298470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298470),msg_a(alice,charlie,sid_648298470)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))).

4. The entry statestore(bob,alice,sid_648298469,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))) that may be sent on channel pub by 3 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_648298469,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_648298469,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_648298469,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298469),msg_b(bob,alice,sid_648298469)) may be executed at {362}.
So the entry statestore(bob,alice,sid_648298469,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),key_e(bob,alice,sid_648298469)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_648298469,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),key_e(bob,alice,sid_648298469)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_648298470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298470),msg_a(alice,charlie,sid_648298470)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_648298470,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),key_e(alice,charlie,sid_648298470)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_648298470,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),key_e(alice,charlie,sid_648298470)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_648298469,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298469),msg_b(bob,alice,sid_648298469)) may be executed at {362}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469))) may be sent on channel pub at output {364}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))).

8. The entry statestore(alice,charlie,sid_648298470,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),key_e(alice,charlie,sid_648298470)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {229}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469))) that may be sent on channel pub by 7 may be received at input {186}.
So the entry statestore(alice,charlie,sid_648298470,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),key_e(alice,charlie,sid_648298470)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_648298470,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),key_e(alice,charlie,sid_648298470)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_648298470,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),key_e(alice,charlie,sid_648298470)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce))) that may be in a table by 8 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_648298470),msg_c(alice,charlie,sid_648298470)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469))),msg_c(alice,charlie,sid_648298470))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469))),msg_c(alice,charlie,sid_648298470)))).

10. The entry statestore(bob,alice,sid_648298469,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298469),g)),key_e(bob,alice,sid_648298469)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce))) that may be in a table by 5 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298469),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_e(alice,charlie,sid_648298470),g))),dhexp_real(key_e(bob,alice,sid_648298469),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298470),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298470))),validkey(dhexp_real(key_e(bob,alice,sid_648298469),g))),msg_b(bob,alice,sid_648298469))),msg_c(alice,charlie,sid_648298470))) that may be sent on channel pub by 9 may be received at input {368}.
So event RecvMsg(bob,alice,stagepack_c(sid_648298469),msg_c(alice,charlie,sid_648298470)) may be executed at {384}.
end(RecvMsg(bob,alice,stagepack_c(sid_648298469),msg_c(alice,charlie,sid_648298470))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_648298473]),msg_c(alice,charlie,sid[!1 = @sid_648298473]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298474]),msg_b(bob,alice,sid[!1 = @sid_648298474]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648298473]),msg_a(alice,charlie,sid[!1 = @sid_648298473]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_648298474]),msg_c(alice,charlie,sid[!1 = @sid_648298473])))
Abbreviations:
sid_648298616 = sid[!1 = @sid_648298603]
sid_648298617 = sid[!1 = @sid_648298563]

1. The entry statestore(bob,alice,sid_648298616,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648298616,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_648298617,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648298617,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_648298617,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298617),msg_a(alice,charlie,sid_648298617)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))).

4. The entry statestore(bob,alice,sid_648298616,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))) that may be sent on channel pub by 3 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_648298616,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_648298616,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_648298616,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298616),msg_b(bob,alice,sid_648298616)) may be executed at {362}.
So the entry statestore(bob,alice,sid_648298616,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),key_e(bob,alice,sid_648298616)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_648298616,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),key_e(bob,alice,sid_648298616)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_648298617,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298617),msg_a(alice,charlie,sid_648298617)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_648298617,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),key_e(alice,charlie,sid_648298617)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_648298617,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),key_e(alice,charlie,sid_648298617)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_648298616,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298616),msg_b(bob,alice,sid_648298616)) may be executed at {362}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616))) may be sent on channel pub at output {364}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))).

8. The entry statestore(alice,charlie,sid_648298617,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),key_e(alice,charlie,sid_648298617)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {229}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616))) that may be sent on channel pub by 7 may be received at input {186}.
So the entry statestore(alice,charlie,sid_648298617,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),key_e(alice,charlie,sid_648298617)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_648298617,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),key_e(alice,charlie,sid_648298617)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_648298617,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),key_e(alice,charlie,sid_648298617)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce))) that may be in a table by 8 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_648298617),msg_c(alice,charlie,sid_648298617)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616))),msg_c(alice,charlie,sid_648298617))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616))),msg_c(alice,charlie,sid_648298617)))).

10. The entry statestore(bob,alice,sid_648298616,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298616),g)),key_e(bob,alice,sid_648298616)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce))) that may be in a table by 5 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298616),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_e(alice,charlie,sid_648298617),g))),dhexp_real(key_e(bob,alice,sid_648298616),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298617),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298617))),validkey(dhexp_real(key_e(bob,alice,sid_648298616),g))),msg_b(bob,alice,sid_648298616))),msg_c(alice,charlie,sid_648298617))) that may be sent on channel pub by 9 may be received at input {368}.
So event RecvMsg(bob,alice,stagepack_c(sid_648298616),msg_c(alice,charlie,sid_648298617)) may be executed at {384}.
end(RecvMsg(bob,alice,stagepack_c(sid_648298616),msg_c(alice,charlie,sid_648298617))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_648298634]),msg_d(bob,alice,sid[!1 = @sid_648298634]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298635]),msg_c(alice,bob,sid[!1 = @sid_648298635]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298634]),msg_b(bob,alice,sid[!1 = @sid_648298634]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298635]),msg_a(alice,bob,sid[!1 = @sid_648298635]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_648298635]),msg_d(bob,alice,sid[!1 = @sid_648298634])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_d(sid_b),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_648298643]),msg_d(bob,alice,sid[!1 = @sid_648298643]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298644]),msg_c(alice,bob,sid[!1 = @sid_648298644]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298643]),msg_b(bob,alice,sid[!1 = @sid_648298643]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298644]),msg_a(alice,bob,sid[!1 = @sid_648298644]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_648298644]),msg_d(bob,alice,sid[!1 = @sid_648298643])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_d(sid_b),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_648298653]),msg_d(bob,alice,sid[!1 = @sid_648298653]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298654]),msg_c(alice,bob,sid[!1 = @sid_648298654]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298653]),msg_b(bob,alice,sid[!1 = @sid_648298653]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298654]),msg_a(alice,bob,sid[!1 = @sid_648298654]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_648298654]),msg_d(bob,alice,sid[!1 = @sid_648298653])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1108,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_648298663]),msg_d(bob,alice,sid[!1 = @sid_648298663]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298664]),msg_c(alice,bob,sid[!1 = @sid_648298664]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298663]),msg_b(bob,alice,sid[!1 = @sid_648298663]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298664]),msg_a(alice,bob,sid[!1 = @sid_648298664]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_648298664]),msg_d(bob,alice,sid[!1 = @sid_648298663])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_648298672]),msg_d(bob,alice,sid[!1 = @sid_648298672]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_648298673]),msg_c(alice,bob,sid[!1 = @sid_648298673]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298672]),msg_b(bob,alice,sid[!1 = @sid_648298672]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_648298673]),msg_a(alice,bob,sid[!1 = @sid_648298673]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_648298673]),msg_d(bob,alice,sid[!1 = @sid_648298672])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_648298694]),msg_d(bob,alice,sid[!1 = @sid_648298694]))) && begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_648298695]),msg_c(alice,charlie,sid[!1 = @sid_648298695]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_648298694]),msg_b(bob,alice,sid[!1 = @sid_648298694]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_648298695]),msg_a(alice,charlie,sid[!1 = @sid_648298695]))) -> end(RecvEnd(true))
Abbreviations:
sid_648298944 = sid[!1 = @sid_648298888]
sid_648298945 = sid[!1 = @sid_648298933]

1. The entry statestore(alice,charlie,sid_648298945,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_648298945,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,charlie,sid_648298945,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298945),msg_a(alice,charlie,sid_648298945)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_648298945,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_648298945,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,sid_648298944,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_648298944,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,charlie,sid_648298945,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_648298945),msg_a(alice,charlie,sid_648298945)) may be executed at {182}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))) may be sent on channel pub at output {184}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))).

5. The entry statestore(bob,alice,sid_648298944,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {320}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))) that may be sent on channel pub by 4 may be received at input {287}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_648298944,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_648298944,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false)))).

6. The entry statestore(bob,alice,sid_648298944,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false))) that may be in a table by 5 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298944),msg_b(bob,alice,sid_648298944)) may be executed at {362}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))) may be sent on channel pub at output {364}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))).

7. The entry statestore(alice,charlie,sid_648298945,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {229}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))) that may be sent on channel pub by 6 may be received at input {186}.
So the entry statestore(alice,charlie,sid_648298945,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_648298945,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce)))).

8. The entry statestore(alice,charlie,sid_648298945,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) that may be in a table by 7 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_648298945),msg_c(alice,charlie,sid_648298945)) may be executed at {246}.
So the entry statestore(alice,charlie,sid_648298945,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) may be inserted in a table at insert {247}.
table(statestore(alice,charlie,sid_648298945,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_648298944,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false))) that may be in a table by 5 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_648298944),msg_b(bob,alice,sid_648298944)) may be executed at {362}.
So the entry statestore(bob,alice,sid_648298944,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),key_e(bob,alice,sid_648298944)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_648298944,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),key_e(bob,alice,sid_648298944)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce)))).

10. The entry statestore(alice,charlie,sid_648298945,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) that may be in a table by 7 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_648298945),msg_c(alice,charlie,sid_648298945)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))).

11. The entry statestore(bob,alice,sid_648298944,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),key_e(bob,alice,sid_648298944)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) that may be in a table by 9 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945))) that may be sent on channel pub by 10 may be received at input {368}.
So the entry statestore(bob,alice,sid_648298944,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),key_e(bob,alice,sid_648298944)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) may be inserted in a table at insert {385}.
table(statestore(bob,alice,sid_648298944,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),key_e(bob,alice,sid_648298944)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_648298944,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),key_e(bob,alice,sid_648298944)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) that may be in a table by 11 may be read at get {405}.
The event SendMsg(bob,alice,stagepack_d(sid_648298944),msg_d(bob,alice,sid_648298944)) may be executed at {403}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945))),msg_d(bob,alice,sid_648298944))) may be sent on channel pub at output {404}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945))),msg_d(bob,alice,sid_648298944)))).

13. The entry statestore(alice,charlie,sid_648298945,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g)),key_e(alice,charlie,sid_648298945)),empty,validkey(dhexp_real(key_e(bob,alice,sid_648298944),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce))) that may be in a table by 8 may be read at get {270}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_648298944),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_e(alice,charlie,sid_648298945),g))),dhexp_real(key_e(bob,alice,sid_648298944),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_648298945),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_648298945))),validkey(dhexp_real(key_e(bob,alice,sid_648298944),g))),msg_b(bob,alice,sid_648298944))),msg_c(alice,charlie,sid_648298945))),msg_d(bob,alice,sid_648298944))) that may be sent on channel pub by 12 may be received at input {252}.
So event RecvEnd(true) may be executed at {269}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
