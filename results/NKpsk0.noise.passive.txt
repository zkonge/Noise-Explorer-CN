File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NKpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NKpsk0.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 270, character 6:
Warning: identifier e rebound.
File "NKpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ne rebound.
File "NKpsk0.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 275, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 276, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 283, character 6:
Warning: identifier e rebound.
File "NKpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ne rebound.
File "NKpsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 288, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 289, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 297, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 305, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 315, characters 6-7:
Warning: identifier re rebound.
File "NKpsk0.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 321, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 329, characters 6-7:
Warning: identifier re rebound.
File "NKpsk0.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 333, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 335, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 515, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 506, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 297, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 329, characters 6-7:
Warning: identifier re rebound.
File "NKpsk0.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 333, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 335, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 493, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 270, character 6:
Warning: identifier e rebound.
File "NKpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ne rebound.
File "NKpsk0.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 275, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 276, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NKpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 561, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 305, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 553, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 555, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 283, character 6:
Warning: identifier e rebound.
File "NKpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ne rebound.
File "NKpsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 288, characters 26-35:
Warning: identifier ciphertext rebound.
File "NKpsk0.noise.passive.pv", line 289, characters 6-7:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 541, characters 8-9:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 315, characters 6-7:
Warning: identifier re rebound.
File "NKpsk0.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "NKpsk0.noise.passive.pv", line 321, characters 7-8:
Warning: identifier hs rebound.
File "NKpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NKpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NKpsk0.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_520: keypair = keypairpack(empty,empty) in
    (
        {5}let e_521: keypair = keypairpack(empty,empty) in
        {6}let v_522: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {7}let rs_523: key = getpublickey((if not-caught-fail(v_522) then keypairpack(validkey(v_522),key_s(bob)) else fail-any)) in
        {8}let re_524: key = empty in
        {9}let v_525: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_526: key = catch-fail(v_525) in
        {11}let v_527: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_528: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_525) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then symmetricstatepack(v_527,v_526,v_525) else fail-any) else fail-any) else fail-any))) in
        {13}let v_529: symmetricstate = catch-fail((if success?((if not-caught-fail(v_525) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then symmetricstatepack(v_527,v_526,v_525) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then symmetricstatepack(1-proj-3-tuple(v_528),2-proj-3-tuple(v_528),hash(3-proj-3-tuple(v_528),empty)) else fail-any) else fail-any)) in
        {14}let v_530: bitstring = catch-fail(symmetricstateunpack(v_529)) in
        {15}let v_531: symmetricstate = catch-fail((if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then symmetricstatepack(1-proj-3-tuple(v_530),2-proj-3-tuple(v_530),hash(3-proj-3-tuple(v_530),rs_523)) else fail-any)) in
        {16}let hs: handshakestate = (if not-caught-fail(v_529) then (if not-caught-fail(v_531) then handshakestatepack(v_531,s_520,e_521,rs_523,re_524,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {17}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {61}get statestore(=alice,=bob,=sid,statepack_a(hs_532: handshakestate)) in
        {18}let v_533: bitstring = catch-fail(handshakestateunpack(hs_532)) in
        {19}let v_534: bitstring = catch-fail((empty,empty,empty)) in
        {20}let v_535: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_533))) in
        {21}let v_536: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_535),6-proj-7-tuple(v_533))) in
        {22}let v_537: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_535),6-proj-7-tuple(v_533))) in
        {23}let v_538: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_535),6-proj-7-tuple(v_533))) in
        {24}let v_539: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_533)) && success?(2-proj-3-tuple(v_535))) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then (v_536,v_537,v_538) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {25}let v_540: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_535),1-proj-3-tuple(v_539),3-proj-3-tuple(v_535)))) in
        {26}let v_541: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_539)) && success?(symmetricstatepack(1-proj-3-tuple(v_535),1-proj-3-tuple(v_539),3-proj-3-tuple(v_535)))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_540),hash(3-proj-3-tuple(v_540),2-proj-3-tuple(v_539))) else fail-any) else fail-any))) in
        {27}let v_542: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_533)) && success?(1-proj-7-tuple(v_533))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_539)) then cipherstatepack(3-proj-3-tuple(v_539),minnonce) else fail-any),1-proj-3-tuple(v_539),3-proj-3-tuple(v_541)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {28}let v_543: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {29}let v_544: keypair = catch-fail((if not-caught-fail(v_543) then keypairpack(validkey(v_543),key_e(alice,bob,sid)) else fail-any)) in
        {30}let v_545: bitstring = catch-fail(getpublickey(v_544)) in
        {31}let v_546: bitstring = catch-fail(symmetricstateunpack(v_542)) in
        {32}let v_547: symmetricstate = catch-fail((if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_546),hash(3-proj-3-tuple(v_546),v_545)) else fail-any)) in
        {33}let v_548: bitstring = catch-fail(symmetricstateunpack(v_547)) in
        {34}let v_549: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_548),getpublickey(v_544))) in
        {35}let v_550: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_548),getpublickey(v_544))) in
        {36}let v_551: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_548),getpublickey(v_544))) in
        {37}let v_552: bitstring = catch-fail((if (success?(getpublickey(v_544)) && success?(2-proj-3-tuple(v_548))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (v_549,v_550,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_553: symmetricstate = catch-fail((if success?(getpublickey(v_544)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_552)) then cipherstatepack(2-proj-3-tuple(v_552),minnonce) else fail-any),1-proj-3-tuple(v_552),3-proj-3-tuple(v_548)) else fail-any) else fail-any) else fail-any)) in
        {39}let v_554: bitstring = catch-fail(keypairunpack(v_544)) in
        {40}let v_555: bitstring = catch-fail(symmetricstateunpack(v_553)) in
        {41}let v_556: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_555),(if success?(4-proj-7-tuple(v_533)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then dhexp(2-proj-2-tuple(v_554),4-proj-7-tuple(v_533)) else fail-any) else fail-any))) in
        {42}let v_557: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_555),(if success?(4-proj-7-tuple(v_533)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then dhexp(2-proj-2-tuple(v_554),4-proj-7-tuple(v_533)) else fail-any) else fail-any))) in
        {43}let v_558: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_555),(if success?(4-proj-7-tuple(v_533)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then dhexp(2-proj-2-tuple(v_554),4-proj-7-tuple(v_533)) else fail-any) else fail-any))) in
        {44}let v_559: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_533)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then dhexp(2-proj-2-tuple(v_554),4-proj-7-tuple(v_533)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_555))) then (if not-caught-fail(v_556) then (if not-caught-fail(v_557) then (if not-caught-fail(v_558) then (v_556,v_557,v_558) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_560: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_533)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then dhexp(2-proj-2-tuple(v_554),4-proj-7-tuple(v_533)) else fail-any) else fail-any)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_559)) then cipherstatepack(2-proj-3-tuple(v_559),minnonce) else fail-any),1-proj-3-tuple(v_559),3-proj-3-tuple(v_555)) else fail-any) else fail-any) else fail-any)) in
        {46}let v_561: bitstring = catch-fail(symmetricstateunpack(v_560)) in
        {47}let v_562: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_561))) in
        {48}let v_563: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_562),2-proj-2-tuple(v_562),3-proj-3-tuple(v_561),msg_a(alice,bob,sid))) in
        {49}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_561))) in
        {50}let v_565: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_562))) && success?(1-proj-3-tuple(v_561))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then cipherstatepack(1-proj-2-tuple(v_564),increment_nonce(2-proj-2-tuple(v_562))) else fail-any) else fail-any)) in
        {51}let v_566: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(1-proj-3-tuple(v_561))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-2-tuple(v_562))))) then (if not-caught-fail(v_563) then (if not-caught-fail(v_565) then (v_565,v_563) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_567: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_566),2-proj-3-tuple(v_561),3-proj-3-tuple(v_561)))) in
        {53}let v_568: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_566)) && success?(symmetricstatepack(1-proj-2-tuple(v_566),2-proj-3-tuple(v_561),3-proj-3-tuple(v_561)))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),2-proj-2-tuple(v_566))) else fail-any) else fail-any)) in
        {54}let v_569: bitstring = catch-fail((if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then (if not-caught-fail(v_568) then (v_568,2-proj-2-tuple(v_566)) else fail-any) else fail-any) else fail-any)) in
        {55}let v_570: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_569),2-proj-7-tuple(v_533),v_544,4-proj-7-tuple(v_533),5-proj-7-tuple(v_533),6-proj-7-tuple(v_533),7-proj-7-tuple(v_533))) in
        {56}let v_571: bitstring = catch-fail(concat3(v_545,2-proj-3-tuple(v_534),2-proj-2-tuple(v_569))) in
        {57}let (hs_572: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-7-tuple(v_533))))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then (if not-caught-fail(v_547) then (if not-caught-fail(v_553) then (if not-caught-fail(v_560) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (v_570,v_571) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {58}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {59}insert statestore(alice,bob,sid,statepack_b(hs_572));
        {60}out(pub, message_a)
    ) | (
        {104}get statestore(=alice,=bob,=sid,statepack_b(hs_573: handshakestate)) in
        {62}in(pub, message_b: bitstring);
        {63}let v_574: bitstring = catch-fail(handshakestateunpack(hs_573)) in
        {64}let v_575: bitstring = catch-fail(deconcat3(message_b)) in
        {65}let v_576: bool = catch-fail(true) in
        {66}let v_577: key = catch-fail(1-proj-3-tuple(v_575)) in
        {67}let v_578: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_574))) in
        {68}let v_579: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_574)) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then symmetricstatepack(1-proj-3-tuple(v_578),2-proj-3-tuple(v_578),hash(3-proj-3-tuple(v_578),v_577)) else fail-any) else fail-any)) in
        {69}let v_580: bitstring = catch-fail(symmetricstateunpack(v_579)) in
        {70}let v_581: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_580),v_577)) in
        {71}let v_582: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_580),v_577)) in
        {72}let v_583: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_580),v_577)) in
        {73}let v_584: bitstring = catch-fail((if success?(2-proj-3-tuple(v_580)) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (v_581,v_582,v_583) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_585: symmetricstate = catch-fail((if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_584)) then cipherstatepack(2-proj-3-tuple(v_584),minnonce) else fail-any),1-proj-3-tuple(v_584),3-proj-3-tuple(v_580)) else fail-any) else fail-any)) in
        {75}let v_586: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_574))) in
        {76}let v_587: bitstring = catch-fail(symmetricstateunpack(v_585)) in
        {77}let v_588: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_587),(if success?(3-proj-7-tuple(v_574)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),v_577) else fail-any) else fail-any))) in
        {78}let v_589: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_587),(if success?(3-proj-7-tuple(v_574)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),v_577) else fail-any) else fail-any))) in
        {79}let v_590: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_587),(if success?(3-proj-7-tuple(v_574)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),v_577) else fail-any) else fail-any))) in
        {80}let v_591: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_574)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),v_577) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_587))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (v_588,v_589,v_590) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_592: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_574)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),v_577) else fail-any) else fail-any)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_591)) then cipherstatepack(2-proj-3-tuple(v_591),minnonce) else fail-any),1-proj-3-tuple(v_591),3-proj-3-tuple(v_587)) else fail-any) else fail-any) else fail-any)) in
        {82}let v_593: bitstring = catch-fail(symmetricstateunpack(v_592)) in
        {83}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_593))) in
        {84}let v_595: aead = catch-fail(decrypt(1-proj-2-tuple(v_594),2-proj-2-tuple(v_594),3-proj-3-tuple(v_593),3-proj-3-tuple(v_575))) in
        {85}let v_596: bitstring = catch-fail(aeadunpack(v_595)) in
        {86}let v_597: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_593))) in
        {87}let v_598: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_594))) && success?(1-proj-3-tuple(v_593))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then cipherstatepack(1-proj-2-tuple(v_597),increment_nonce(2-proj-2-tuple(v_594))) else fail-any) else fail-any)) in
        {88}let v_599: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_575)) && (success?(3-proj-3-tuple(v_593)) && success?(1-proj-3-tuple(v_593)))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then (if not-caught-fail(v_595) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (v_598,3-proj-3-tuple(v_596),1-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_600: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)))) in
        {90}let v_601: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_575)) && success?(symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),3-proj-3-tuple(v_575))) else fail-any) else fail-any)) in
        {91}let v_602: bitstring = catch-fail((if success?(3-proj-3-tuple(v_575)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_601) then (v_601,2-proj-3-tuple(v_599),3-proj-3-tuple(v_599)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_603: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_602),2-proj-7-tuple(v_574),3-proj-7-tuple(v_574),4-proj-7-tuple(v_574),v_577,6-proj-7-tuple(v_574),7-proj-7-tuple(v_574))) in
        {93}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_602))) in
        {94}let v_605: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_604),zero)) in
        {95}let v_606: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_604),zero)) in
        {96}let v_607: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_604),zero)) in
        {97}let v_608: bitstring = catch-fail((if success?(2-proj-3-tuple(v_604)) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (v_605,v_606,v_607) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_609: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_608)) then cipherstatepack(1-proj-3-tuple(v_608),minnonce) else fail-any)) in
        {99}let v_610: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_608)) then cipherstatepack(2-proj-3-tuple(v_608),minnonce) else fail-any)) in
        {100}let v_611: bitstring = catch-fail((if success?(1-proj-3-tuple(v_602)) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (1-proj-3-tuple(v_602),v_609,v_610) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let (hs_612: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-7-tuple(v_574))))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (if not-caught-fail(v_579) then (if not-caught-fail(v_585) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if (v_576 && 3-proj-3-tuple(v_602)) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (v_603,2-proj-3-tuple(v_602),true,2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {102}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {103}insert statestore(alice,bob,sid,statepack_c(hs_612,cs1,cs2))
    ) | (
        {105}!
        {124}get statestore(=alice,=bob,=sid,statepack_c(hs_613: handshakestate,cs1_614: cipherstate,cs2_615: cipherstate)) in
        {106}let hs_616: handshakestate = handshakestatesetcs(hs_613,cs1_614) in
        {107}let v_617: bitstring = catch-fail(handshakestateunpack(hs_616)) in
        {108}let v_618: bitstring = catch-fail((empty,empty,empty)) in
        {109}let v_619: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_617))) in
        {110}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_619))) in
        {111}let v_621: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_620),2-proj-2-tuple(v_620),3-proj-3-tuple(v_619),msg_c(alice,bob,sid))) in
        {112}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_619))) in
        {113}let v_623: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_620))) && success?(1-proj-3-tuple(v_619))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then cipherstatepack(1-proj-2-tuple(v_622),increment_nonce(2-proj-2-tuple(v_620))) else fail-any) else fail-any)) in
        {114}let v_624: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_619)) && success?(1-proj-3-tuple(v_619))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then (if not-caught-fail(v_621) then (if not-caught-fail(v_623) then (v_623,v_621) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_625: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_624),2-proj-3-tuple(v_619),3-proj-3-tuple(v_619)))) in
        {116}let v_626: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_624)) && success?(symmetricstatepack(1-proj-2-tuple(v_624),2-proj-3-tuple(v_619),3-proj-3-tuple(v_619)))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then symmetricstatepack(1-proj-3-tuple(v_625),2-proj-3-tuple(v_625),hash(3-proj-3-tuple(v_625),2-proj-2-tuple(v_624))) else fail-any) else fail-any)) in
        {117}let v_627: bitstring = catch-fail((if success?(1-proj-7-tuple(v_617)) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then (if not-caught-fail(v_626) then (v_626,2-proj-2-tuple(v_624)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_628: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_627),2-proj-7-tuple(v_617),3-proj-7-tuple(v_617),4-proj-7-tuple(v_617),5-proj-7-tuple(v_617),6-proj-7-tuple(v_617),7-proj-7-tuple(v_617))) in
        {119}let v_629: bitstring = catch-fail(concat3(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),2-proj-2-tuple(v_627))) in
        {120}let (hs_630: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-7-tuple(v_617))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (v_628,v_629) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {121}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {122}insert statestore(alice,bob,sid,statepack_d(hs_630,handshakestategetcs(hs_630),cs2_615));
        {123}out(pub, message_c)
    ) | (
        {125}!
        {145}get statestore(=alice,=bob,=sid,statepack_d(hs_631: handshakestate,cs1_632: cipherstate,cs2_633: cipherstate)) in
        {126}let hs_634: handshakestate = handshakestatesetcs(hs_631,cs2_633) in
        {127}in(pub, message_d: bitstring);
        {128}let v_635: bitstring = catch-fail(handshakestateunpack(hs_634)) in
        {129}let v_636: bitstring = catch-fail(deconcat3(message_d)) in
        {130}let v_637: bool = catch-fail(true) in
        {131}let v_638: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_635))) in
        {132}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_638))) in
        {133}let v_640: aead = catch-fail(decrypt(1-proj-2-tuple(v_639),2-proj-2-tuple(v_639),3-proj-3-tuple(v_638),3-proj-3-tuple(v_636))) in
        {134}let v_641: bitstring = catch-fail(aeadunpack(v_640)) in
        {135}let v_642: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_638))) in
        {136}let v_643: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_639))) && success?(1-proj-3-tuple(v_638))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then cipherstatepack(1-proj-2-tuple(v_642),increment_nonce(2-proj-2-tuple(v_639))) else fail-any) else fail-any)) in
        {137}let v_644: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_636)) && (success?(3-proj-3-tuple(v_638)) && success?(1-proj-3-tuple(v_638)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then (if not-caught-fail(v_640) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if not-caught-fail(v_643) then (v_643,3-proj-3-tuple(v_641),1-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_645: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_644),2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)))) in
        {139}let v_646: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_636)) && success?(symmetricstatepack(1-proj-3-tuple(v_644),2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_645),hash(3-proj-3-tuple(v_645),3-proj-3-tuple(v_636))) else fail-any) else fail-any)) in
        {140}let v_647: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_636)) && success?(1-proj-7-tuple(v_635))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if not-caught-fail(v_646) then (v_646,2-proj-3-tuple(v_644),3-proj-3-tuple(v_644)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_648: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_647),2-proj-7-tuple(v_635),3-proj-7-tuple(v_635),4-proj-7-tuple(v_635),5-proj-7-tuple(v_635),6-proj-7-tuple(v_635),7-proj-7-tuple(v_635))) in
        {142}let (hs_649: handshakestate,plaintext_d: bitstring,valid_650: bool) = (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-7-tuple(v_635))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (v_637 && 3-proj-3-tuple(v_647)) then (if not-caught-fail(v_648) then (v_648,2-proj-3-tuple(v_647),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {143}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {144}event RecvEnd(valid_650)
    ) | (
        {146}event LeakPsk(phase0,alice,bob);
        {147}out(pub, key_psk(alice,bob))
    ) | (
        {148}phase 1;
        {149}event LeakPsk(phase1,alice,bob);
        {150}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {151}let s_651: keypair = keypairpack(empty,empty) in
    (
        {152}let e_652: keypair = keypairpack(empty,empty) in
        {153}let v_653: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {154}let rs_654: key = getpublickey((if not-caught-fail(v_653) then keypairpack(validkey(v_653),key_s(charlie)) else fail-any)) in
        {155}let re_655: key = empty in
        {156}let v_656: bitstring = catch-fail(hash(somename,empty)) in
        {157}let v_657: key = catch-fail(v_656) in
        {158}let v_658: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {159}let v_659: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then symmetricstatepack(v_658,v_657,v_656) else fail-any) else fail-any) else fail-any))) in
        {160}let v_660: symmetricstate = catch-fail((if success?((if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then symmetricstatepack(v_658,v_657,v_656) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then symmetricstatepack(1-proj-3-tuple(v_659),2-proj-3-tuple(v_659),hash(3-proj-3-tuple(v_659),empty)) else fail-any) else fail-any)) in
        {161}let v_661: bitstring = catch-fail(symmetricstateunpack(v_660)) in
        {162}let v_662: symmetricstate = catch-fail((if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then symmetricstatepack(1-proj-3-tuple(v_661),2-proj-3-tuple(v_661),hash(3-proj-3-tuple(v_661),rs_654)) else fail-any)) in
        {163}let hs_663: handshakestate = (if not-caught-fail(v_660) then (if not-caught-fail(v_662) then handshakestatepack(v_662,s_651,e_652,rs_654,re_655,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {164}insert statestore(alice,charlie,sid,statepack_a(hs_663))
    ) | (
        {208}get statestore(=alice,=charlie,=sid,statepack_a(hs_664: handshakestate)) in
        {165}let v_665: bitstring = catch-fail(handshakestateunpack(hs_664)) in
        {166}let v_666: bitstring = catch-fail((empty,empty,empty)) in
        {167}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_665))) in
        {168}let v_668: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_667),6-proj-7-tuple(v_665))) in
        {169}let v_669: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_667),6-proj-7-tuple(v_665))) in
        {170}let v_670: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_667),6-proj-7-tuple(v_665))) in
        {171}let v_671: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_665)) && success?(2-proj-3-tuple(v_667))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (v_668,v_669,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {172}let v_672: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_667),1-proj-3-tuple(v_671),3-proj-3-tuple(v_667)))) in
        {173}let v_673: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_671)) && success?(symmetricstatepack(1-proj-3-tuple(v_667),1-proj-3-tuple(v_671),3-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then symmetricstatepack(1-proj-3-tuple(v_672),2-proj-3-tuple(v_672),hash(3-proj-3-tuple(v_672),2-proj-3-tuple(v_671))) else fail-any) else fail-any))) in
        {174}let v_674: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_665)) && success?(1-proj-7-tuple(v_665))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_671)) then cipherstatepack(3-proj-3-tuple(v_671),minnonce) else fail-any),1-proj-3-tuple(v_671),3-proj-3-tuple(v_673)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {175}let v_675: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {176}let v_676: keypair = catch-fail((if not-caught-fail(v_675) then keypairpack(validkey(v_675),key_e(alice,charlie,sid)) else fail-any)) in
        {177}let v_677: bitstring = catch-fail(getpublickey(v_676)) in
        {178}let v_678: bitstring = catch-fail(symmetricstateunpack(v_674)) in
        {179}let v_679: symmetricstate = catch-fail((if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack(1-proj-3-tuple(v_678),2-proj-3-tuple(v_678),hash(3-proj-3-tuple(v_678),v_677)) else fail-any)) in
        {180}let v_680: bitstring = catch-fail(symmetricstateunpack(v_679)) in
        {181}let v_681: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_680),getpublickey(v_676))) in
        {182}let v_682: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_680),getpublickey(v_676))) in
        {183}let v_683: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_680),getpublickey(v_676))) in
        {184}let v_684: bitstring = catch-fail((if (success?(getpublickey(v_676)) && success?(2-proj-3-tuple(v_680))) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (v_681,v_682,v_683) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {185}let v_685: symmetricstate = catch-fail((if success?(getpublickey(v_676)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_684)) then cipherstatepack(2-proj-3-tuple(v_684),minnonce) else fail-any),1-proj-3-tuple(v_684),3-proj-3-tuple(v_680)) else fail-any) else fail-any) else fail-any)) in
        {186}let v_686: bitstring = catch-fail(keypairunpack(v_676)) in
        {187}let v_687: bitstring = catch-fail(symmetricstateunpack(v_685)) in
        {188}let v_688: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_687),(if success?(4-proj-7-tuple(v_665)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then dhexp(2-proj-2-tuple(v_686),4-proj-7-tuple(v_665)) else fail-any) else fail-any))) in
        {189}let v_689: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_687),(if success?(4-proj-7-tuple(v_665)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then dhexp(2-proj-2-tuple(v_686),4-proj-7-tuple(v_665)) else fail-any) else fail-any))) in
        {190}let v_690: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_687),(if success?(4-proj-7-tuple(v_665)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then dhexp(2-proj-2-tuple(v_686),4-proj-7-tuple(v_665)) else fail-any) else fail-any))) in
        {191}let v_691: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_665)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then dhexp(2-proj-2-tuple(v_686),4-proj-7-tuple(v_665)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_687))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (v_688,v_689,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_692: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_665)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then dhexp(2-proj-2-tuple(v_686),4-proj-7-tuple(v_665)) else fail-any) else fail-any)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_691)) then cipherstatepack(2-proj-3-tuple(v_691),minnonce) else fail-any),1-proj-3-tuple(v_691),3-proj-3-tuple(v_687)) else fail-any) else fail-any) else fail-any)) in
        {193}let v_693: bitstring = catch-fail(symmetricstateunpack(v_692)) in
        {194}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {195}let v_695: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_694),2-proj-2-tuple(v_694),3-proj-3-tuple(v_693),msg_a(alice,charlie,sid))) in
        {196}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {197}let v_697: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_694))) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then cipherstatepack(1-proj-2-tuple(v_696),increment_nonce(2-proj-2-tuple(v_694))) else fail-any) else fail-any)) in
        {198}let v_698: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_697) then (v_697,v_695) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_699: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_698),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) in
        {200}let v_700: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_698)) && success?(symmetricstatepack(1-proj-2-tuple(v_698),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),2-proj-2-tuple(v_698))) else fail-any) else fail-any)) in
        {201}let v_701: bitstring = catch-fail((if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then (if not-caught-fail(v_700) then (v_700,2-proj-2-tuple(v_698)) else fail-any) else fail-any) else fail-any)) in
        {202}let v_702: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_701),2-proj-7-tuple(v_665),v_676,4-proj-7-tuple(v_665),5-proj-7-tuple(v_665),6-proj-7-tuple(v_665),7-proj-7-tuple(v_665))) in
        {203}let v_703: bitstring = catch-fail(concat3(v_677,2-proj-3-tuple(v_666),2-proj-2-tuple(v_701))) in
        {204}let (hs_704: handshakestate,message_a_705: bitstring) = (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-7-tuple(v_665))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_674) then (if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (if not-caught-fail(v_679) then (if not-caught-fail(v_685) then (if not-caught-fail(v_692) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (v_702,v_703) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {205}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {206}insert statestore(alice,charlie,sid,statepack_b(hs_704));
        {207}out(pub, message_a_705)
    ) | (
        {251}get statestore(=alice,=charlie,=sid,statepack_b(hs_706: handshakestate)) in
        {209}in(pub, message_b_707: bitstring);
        {210}let v_708: bitstring = catch-fail(handshakestateunpack(hs_706)) in
        {211}let v_709: bitstring = catch-fail(deconcat3(message_b_707)) in
        {212}let v_710: bool = catch-fail(true) in
        {213}let v_711: key = catch-fail(1-proj-3-tuple(v_709)) in
        {214}let v_712: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_708))) in
        {215}let v_713: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_708)) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),hash(3-proj-3-tuple(v_712),v_711)) else fail-any) else fail-any)) in
        {216}let v_714: bitstring = catch-fail(symmetricstateunpack(v_713)) in
        {217}let v_715: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_714),v_711)) in
        {218}let v_716: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_714),v_711)) in
        {219}let v_717: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_714),v_711)) in
        {220}let v_718: bitstring = catch-fail((if success?(2-proj-3-tuple(v_714)) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (v_715,v_716,v_717) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let v_719: symmetricstate = catch-fail((if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_718)) then cipherstatepack(2-proj-3-tuple(v_718),minnonce) else fail-any),1-proj-3-tuple(v_718),3-proj-3-tuple(v_714)) else fail-any) else fail-any)) in
        {222}let v_720: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_708))) in
        {223}let v_721: bitstring = catch-fail(symmetricstateunpack(v_719)) in
        {224}let v_722: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_721),(if success?(3-proj-7-tuple(v_708)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_711) else fail-any) else fail-any))) in
        {225}let v_723: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_721),(if success?(3-proj-7-tuple(v_708)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_711) else fail-any) else fail-any))) in
        {226}let v_724: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_721),(if success?(3-proj-7-tuple(v_708)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_711) else fail-any) else fail-any))) in
        {227}let v_725: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_708)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_711) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_721))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (v_722,v_723,v_724) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_726: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_708)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_711) else fail-any) else fail-any)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_725)) then cipherstatepack(2-proj-3-tuple(v_725),minnonce) else fail-any),1-proj-3-tuple(v_725),3-proj-3-tuple(v_721)) else fail-any) else fail-any) else fail-any)) in
        {229}let v_727: bitstring = catch-fail(symmetricstateunpack(v_726)) in
        {230}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {231}let v_729: aead = catch-fail(decrypt(1-proj-2-tuple(v_728),2-proj-2-tuple(v_728),3-proj-3-tuple(v_727),3-proj-3-tuple(v_709))) in
        {232}let v_730: bitstring = catch-fail(aeadunpack(v_729)) in
        {233}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {234}let v_732: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_728))) && success?(1-proj-3-tuple(v_727))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then cipherstatepack(1-proj-2-tuple(v_731),increment_nonce(2-proj-2-tuple(v_728))) else fail-any) else fail-any)) in
        {235}let v_733: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_709)) && (success?(3-proj-3-tuple(v_727)) && success?(1-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (v_732,3-proj-3-tuple(v_730),1-proj-3-tuple(v_730)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_734: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) in
        {237}let v_735: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_709)) && success?(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),3-proj-3-tuple(v_709))) else fail-any) else fail-any)) in
        {238}let v_736: bitstring = catch-fail((if success?(3-proj-3-tuple(v_709)) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_737: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_736),2-proj-7-tuple(v_708),3-proj-7-tuple(v_708),4-proj-7-tuple(v_708),v_711,6-proj-7-tuple(v_708),7-proj-7-tuple(v_708))) in
        {240}let v_738: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_736))) in
        {241}let v_739: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_738),zero)) in
        {242}let v_740: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_738),zero)) in
        {243}let v_741: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_738),zero)) in
        {244}let v_742: bitstring = catch-fail((if success?(2-proj-3-tuple(v_738)) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (v_739,v_740,v_741) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_743: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_742)) then cipherstatepack(1-proj-3-tuple(v_742),minnonce) else fail-any)) in
        {246}let v_744: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_742)) then cipherstatepack(2-proj-3-tuple(v_742),minnonce) else fail-any)) in
        {247}let v_745: bitstring = catch-fail((if success?(1-proj-3-tuple(v_736)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (1-proj-3-tuple(v_736),v_743,v_744) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let (hs_746: handshakestate,plaintext_b_747: bitstring,valid_748: bool,cs1_749: cipherstate,cs2_750: cipherstate) = (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-7-tuple(v_708))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_713) then (if not-caught-fail(v_719) then (if not-caught-fail(v_726) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if (v_710 && 3-proj-3-tuple(v_736)) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (v_737,2-proj-3-tuple(v_736),true,2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {249}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_747);
        {250}insert statestore(alice,charlie,sid,statepack_c(hs_746,cs1_749,cs2_750))
    ) | (
        {252}!
        {271}get statestore(=alice,=charlie,=sid,statepack_c(hs_751: handshakestate,cs1_752: cipherstate,cs2_753: cipherstate)) in
        {253}let hs_754: handshakestate = handshakestatesetcs(hs_751,cs1_752) in
        {254}let v_755: bitstring = catch-fail(handshakestateunpack(hs_754)) in
        {255}let v_756: bitstring = catch-fail((empty,empty,empty)) in
        {256}let v_757: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_755))) in
        {257}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {258}let v_759: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_758),2-proj-2-tuple(v_758),3-proj-3-tuple(v_757),msg_c(alice,charlie,sid))) in
        {259}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {260}let v_761: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_758))) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then cipherstatepack(1-proj-2-tuple(v_760),increment_nonce(2-proj-2-tuple(v_758))) else fail-any) else fail-any)) in
        {261}let v_762: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_757)) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_761) then (v_761,v_759) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_763: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_762),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) in
        {263}let v_764: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_762)) && success?(symmetricstatepack(1-proj-2-tuple(v_762),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {264}let v_765: bitstring = catch-fail((if success?(1-proj-7-tuple(v_755)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,2-proj-2-tuple(v_762)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {265}let v_766: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_765),2-proj-7-tuple(v_755),3-proj-7-tuple(v_755),4-proj-7-tuple(v_755),5-proj-7-tuple(v_755),6-proj-7-tuple(v_755),7-proj-7-tuple(v_755))) in
        {266}let v_767: bitstring = catch-fail(concat3(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),2-proj-2-tuple(v_765))) in
        {267}let (hs_768: handshakestate,message_c_769: bitstring) = (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-7-tuple(v_755))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (v_766,v_767) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {268}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {269}insert statestore(alice,charlie,sid,statepack_d(hs_768,handshakestategetcs(hs_768),cs2_753));
        {270}out(pub, message_c_769)
    ) | (
        {272}!
        {292}get statestore(=alice,=charlie,=sid,statepack_d(hs_770: handshakestate,cs1_771: cipherstate,cs2_772: cipherstate)) in
        {273}let hs_773: handshakestate = handshakestatesetcs(hs_770,cs2_772) in
        {274}in(pub, message_d_774: bitstring);
        {275}let v_775: bitstring = catch-fail(handshakestateunpack(hs_773)) in
        {276}let v_776: bitstring = catch-fail(deconcat3(message_d_774)) in
        {277}let v_777: bool = catch-fail(true) in
        {278}let v_778: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_775))) in
        {279}let v_779: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_778))) in
        {280}let v_780: aead = catch-fail(decrypt(1-proj-2-tuple(v_779),2-proj-2-tuple(v_779),3-proj-3-tuple(v_778),3-proj-3-tuple(v_776))) in
        {281}let v_781: bitstring = catch-fail(aeadunpack(v_780)) in
        {282}let v_782: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_778))) in
        {283}let v_783: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_779))) && success?(1-proj-3-tuple(v_778))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then cipherstatepack(1-proj-2-tuple(v_782),increment_nonce(2-proj-2-tuple(v_779))) else fail-any) else fail-any)) in
        {284}let v_784: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_776)) && (success?(3-proj-3-tuple(v_778)) && success?(1-proj-3-tuple(v_778)))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then (if not-caught-fail(v_780) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if not-caught-fail(v_783) then (v_783,3-proj-3-tuple(v_781),1-proj-3-tuple(v_781)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_785: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_784),2-proj-3-tuple(v_778),3-proj-3-tuple(v_778)))) in
        {286}let v_786: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_776)) && success?(symmetricstatepack(1-proj-3-tuple(v_784),2-proj-3-tuple(v_778),3-proj-3-tuple(v_778)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then symmetricstatepack(1-proj-3-tuple(v_785),2-proj-3-tuple(v_785),hash(3-proj-3-tuple(v_785),3-proj-3-tuple(v_776))) else fail-any) else fail-any)) in
        {287}let v_787: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_776)) && success?(1-proj-7-tuple(v_775))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if not-caught-fail(v_786) then (v_786,2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_788: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_787),2-proj-7-tuple(v_775),3-proj-7-tuple(v_775),4-proj-7-tuple(v_775),5-proj-7-tuple(v_775),6-proj-7-tuple(v_775),7-proj-7-tuple(v_775))) in
        {289}let (hs_789: handshakestate,plaintext_d_790: bitstring,valid_791: bool) = (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-7-tuple(v_775))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_777) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (v_777 && 3-proj-3-tuple(v_787)) then (if not-caught-fail(v_788) then (v_788,2-proj-3-tuple(v_787),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_790);
        {291}event RecvEnd(valid_791)
    ) | (
        {293}event LeakPsk(phase0,alice,charlie);
        {294}out(pub, key_psk(alice,charlie))
    ) | (
        {295}phase 1;
        {296}event LeakPsk(phase1,alice,charlie);
        {297}out(pub, key_psk(alice,charlie))
    ) | (
        0
    )
) | (
    {298}let v_792: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {299}let s_793: keypair = (if not-caught-fail(v_792) then keypairpack(validkey(v_792),key_s(bob)) else fail-any) in
    {300}out(pub, getpublickey(s_793));
    (
        {301}let e_794: keypair = keypairpack(empty,empty) in
        {302}let rs_795: key = empty in
        {303}let re_796: key = empty in
        {304}let v_797: bitstring = catch-fail(hash(somename,empty)) in
        {305}let v_798: key = catch-fail(v_797) in
        {306}let v_799: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {307}let v_800: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then symmetricstatepack(v_799,v_798,v_797) else fail-any) else fail-any) else fail-any))) in
        {308}let v_801: symmetricstate = catch-fail((if success?((if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then symmetricstatepack(v_799,v_798,v_797) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack(1-proj-3-tuple(v_800),2-proj-3-tuple(v_800),hash(3-proj-3-tuple(v_800),empty)) else fail-any) else fail-any)) in
        {309}let v_802: bitstring = catch-fail(symmetricstateunpack(v_801)) in
        {310}let v_803: symmetricstate = catch-fail((if success?(getpublickey(s_793)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_802),hash(3-proj-3-tuple(v_802),getpublickey(s_793))) else fail-any) else fail-any)) in
        {311}let hs_804: handshakestate = (if not-caught-fail(v_801) then (if not-caught-fail(v_803) then handshakestatepack(v_803,s_793,e_794,rs_795,re_796,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {312}insert statestore(bob,alice,sid,statepack_a(hs_804))
    ) | (
        {355}get statestore(=bob,=alice,=sid,statepack_a(hs_805: handshakestate)) in
        {313}in(pub, message_a_806: bitstring);
        {314}let v_807: bitstring = catch-fail(handshakestateunpack(hs_805)) in
        {315}let v_808: bitstring = catch-fail(deconcat3(message_a_806)) in
        {316}let v_809: bool = catch-fail(true) in
        {317}let v_810: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_807))) in
        {318}let v_811: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_810),6-proj-7-tuple(v_807))) in
        {319}let v_812: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_810),6-proj-7-tuple(v_807))) in
        {320}let v_813: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_810),6-proj-7-tuple(v_807))) in
        {321}let v_814: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_807)) && success?(2-proj-3-tuple(v_810))) then (if not-caught-fail(v_811) then (if not-caught-fail(v_812) then (if not-caught-fail(v_813) then (v_811,v_812,v_813) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_810),1-proj-3-tuple(v_814),3-proj-3-tuple(v_810)))) in
        {323}let v_816: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_814)) && success?(symmetricstatepack(1-proj-3-tuple(v_810),1-proj-3-tuple(v_814),3-proj-3-tuple(v_810)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),2-proj-3-tuple(v_814))) else fail-any) else fail-any))) in
        {324}let v_817: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_807)) && success?(1-proj-7-tuple(v_807))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_814)) then cipherstatepack(3-proj-3-tuple(v_814),minnonce) else fail-any),1-proj-3-tuple(v_814),3-proj-3-tuple(v_816)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_818: key = catch-fail(1-proj-3-tuple(v_808)) in
        {326}let v_819: bitstring = catch-fail(symmetricstateunpack(v_817)) in
        {327}let v_820: symmetricstate = catch-fail((if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),v_818)) else fail-any)) in
        {328}let v_821: bitstring = catch-fail(symmetricstateunpack(v_820)) in
        {329}let v_822: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_821),v_818)) in
        {330}let v_823: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_821),v_818)) in
        {331}let v_824: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_821),v_818)) in
        {332}let v_825: bitstring = catch-fail((if success?(2-proj-3-tuple(v_821)) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (v_822,v_823,v_824) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_826: symmetricstate = catch-fail((if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_825)) then cipherstatepack(2-proj-3-tuple(v_825),minnonce) else fail-any),1-proj-3-tuple(v_825),3-proj-3-tuple(v_821)) else fail-any) else fail-any)) in
        {334}let v_827: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_807))) in
        {335}let v_828: bitstring = catch-fail(symmetricstateunpack(v_826)) in
        {336}let v_829: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_828),(if success?(2-proj-7-tuple(v_807)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then dhexp(2-proj-2-tuple(v_827),v_818) else fail-any) else fail-any))) in
        {337}let v_830: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_828),(if success?(2-proj-7-tuple(v_807)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then dhexp(2-proj-2-tuple(v_827),v_818) else fail-any) else fail-any))) in
        {338}let v_831: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_828),(if success?(2-proj-7-tuple(v_807)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then dhexp(2-proj-2-tuple(v_827),v_818) else fail-any) else fail-any))) in
        {339}let v_832: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_807)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then dhexp(2-proj-2-tuple(v_827),v_818) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_828))) then (if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then (v_829,v_830,v_831) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_833: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_807)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then dhexp(2-proj-2-tuple(v_827),v_818) else fail-any) else fail-any)) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_832)) then cipherstatepack(2-proj-3-tuple(v_832),minnonce) else fail-any),1-proj-3-tuple(v_832),3-proj-3-tuple(v_828)) else fail-any) else fail-any) else fail-any)) in
        {341}let v_834: bitstring = catch-fail(symmetricstateunpack(v_833)) in
        {342}let v_835: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_834))) in
        {343}let v_836: aead = catch-fail(decrypt(1-proj-2-tuple(v_835),2-proj-2-tuple(v_835),3-proj-3-tuple(v_834),3-proj-3-tuple(v_808))) in
        {344}let v_837: bitstring = catch-fail(aeadunpack(v_836)) in
        {345}let v_838: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_834))) in
        {346}let v_839: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_835))) && success?(1-proj-3-tuple(v_834))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then cipherstatepack(1-proj-2-tuple(v_838),increment_nonce(2-proj-2-tuple(v_835))) else fail-any) else fail-any)) in
        {347}let v_840: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_808)) && (success?(3-proj-3-tuple(v_834)) && success?(1-proj-3-tuple(v_834)))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then (if not-caught-fail(v_836) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if not-caught-fail(v_839) then (v_839,3-proj-3-tuple(v_837),1-proj-3-tuple(v_837)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_841: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_840),2-proj-3-tuple(v_834),3-proj-3-tuple(v_834)))) in
        {349}let v_842: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_808)) && success?(symmetricstatepack(1-proj-3-tuple(v_840),2-proj-3-tuple(v_834),3-proj-3-tuple(v_834)))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then symmetricstatepack(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),hash(3-proj-3-tuple(v_841),3-proj-3-tuple(v_808))) else fail-any) else fail-any)) in
        {350}let v_843: bitstring = catch-fail((if success?(3-proj-3-tuple(v_808)) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if not-caught-fail(v_842) then (v_842,2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_844: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_843),2-proj-7-tuple(v_807),3-proj-7-tuple(v_807),4-proj-7-tuple(v_807),v_818,6-proj-7-tuple(v_807),7-proj-7-tuple(v_807))) in
        {352}let (hs_845: handshakestate,plaintext_a: bitstring,valid_846: bool) = (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-7-tuple(v_807))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if not-caught-fail(v_809) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (if not-caught-fail(v_820) then (if not-caught-fail(v_826) then (if not-caught-fail(v_833) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if (v_809 && 3-proj-3-tuple(v_843)) then (if not-caught-fail(v_844) then (v_844,2-proj-3-tuple(v_843),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {353}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {354}insert statestore(bob,alice,sid,statepack_b(hs_845))
    ) | (
        {399}get statestore(=bob,=alice,=sid,statepack_b(hs_847: handshakestate)) in
        {356}let v_848: bitstring = catch-fail(handshakestateunpack(hs_847)) in
        {357}let v_849: bitstring = catch-fail((empty,empty,empty)) in
        {358}let v_850: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {359}let v_851: keypair = catch-fail((if not-caught-fail(v_850) then keypairpack(validkey(v_850),key_e(bob,alice,sid)) else fail-any)) in
        {360}let v_852: bitstring = catch-fail(getpublickey(v_851)) in
        {361}let v_853: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_848))) in
        {362}let v_854: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_848)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_853),hash(3-proj-3-tuple(v_853),v_852)) else fail-any) else fail-any)) in
        {363}let v_855: bitstring = catch-fail(symmetricstateunpack(v_854)) in
        {364}let v_856: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_855),getpublickey(v_851))) in
        {365}let v_857: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_855),getpublickey(v_851))) in
        {366}let v_858: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_855),getpublickey(v_851))) in
        {367}let v_859: bitstring = catch-fail((if (success?(getpublickey(v_851)) && success?(2-proj-3-tuple(v_855))) then (if not-caught-fail(v_856) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (v_856,v_857,v_858) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {368}let v_860: symmetricstate = catch-fail((if success?(getpublickey(v_851)) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_859)) then cipherstatepack(2-proj-3-tuple(v_859),minnonce) else fail-any),1-proj-3-tuple(v_859),3-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any)) in
        {369}let v_861: bitstring = catch-fail(keypairunpack(v_851)) in
        {370}let v_862: bitstring = catch-fail(symmetricstateunpack(v_860)) in
        {371}let v_863: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_862),(if success?(5-proj-7-tuple(v_848)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),5-proj-7-tuple(v_848)) else fail-any) else fail-any))) in
        {372}let v_864: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_862),(if success?(5-proj-7-tuple(v_848)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),5-proj-7-tuple(v_848)) else fail-any) else fail-any))) in
        {373}let v_865: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_862),(if success?(5-proj-7-tuple(v_848)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),5-proj-7-tuple(v_848)) else fail-any) else fail-any))) in
        {374}let v_866: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_848)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),5-proj-7-tuple(v_848)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_862))) then (if not-caught-fail(v_863) then (if not-caught-fail(v_864) then (if not-caught-fail(v_865) then (v_863,v_864,v_865) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_867: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_848)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),5-proj-7-tuple(v_848)) else fail-any) else fail-any)) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_866)) then cipherstatepack(2-proj-3-tuple(v_866),minnonce) else fail-any),1-proj-3-tuple(v_866),3-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any)) in
        {376}let v_868: bitstring = catch-fail(symmetricstateunpack(v_867)) in
        {377}let v_869: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_868))) in
        {378}let v_870: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_869),2-proj-2-tuple(v_869),3-proj-3-tuple(v_868),msg_b(bob,alice,sid))) in
        {379}let v_871: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_868))) in
        {380}let v_872: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_869))) && success?(1-proj-3-tuple(v_868))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then cipherstatepack(1-proj-2-tuple(v_871),increment_nonce(2-proj-2-tuple(v_869))) else fail-any) else fail-any)) in
        {381}let v_873: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_868)) && success?(1-proj-3-tuple(v_868))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_872) then (v_872,v_870) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_874: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_873),2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)))) in
        {383}let v_875: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_873)) && success?(symmetricstatepack(1-proj-2-tuple(v_873),2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),2-proj-2-tuple(v_873))) else fail-any) else fail-any)) in
        {384}let v_876: bitstring = catch-fail((if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then (if not-caught-fail(v_875) then (v_875,2-proj-2-tuple(v_873)) else fail-any) else fail-any) else fail-any)) in
        {385}let v_877: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_876),2-proj-7-tuple(v_848),v_851,4-proj-7-tuple(v_848),5-proj-7-tuple(v_848),6-proj-7-tuple(v_848),7-proj-7-tuple(v_848))) in
        {386}let v_878: bitstring = catch-fail(concat3(v_852,2-proj-3-tuple(v_849),2-proj-2-tuple(v_876))) in
        {387}let v_879: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_876))) in
        {388}let v_880: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_879),zero)) in
        {389}let v_881: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_879),zero)) in
        {390}let v_882: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_879),zero)) in
        {391}let v_883: bitstring = catch-fail((if success?(2-proj-3-tuple(v_879)) then (if not-caught-fail(v_880) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (v_880,v_881,v_882) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {392}let v_884: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_883)) then cipherstatepack(1-proj-3-tuple(v_883),minnonce) else fail-any)) in
        {393}let v_885: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_883)) then cipherstatepack(2-proj-3-tuple(v_883),minnonce) else fail-any)) in
        {394}let v_886: bitstring = catch-fail((if success?(1-proj-2-tuple(v_876)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then (1-proj-2-tuple(v_876),v_884,v_885) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {395}let (hs_887: handshakestate,message_b_888: bitstring,cs1_889: cipherstate,cs2_890: cipherstate) = (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-7-tuple(v_848))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (if not-caught-fail(v_854) then (if not-caught-fail(v_860) then (if not-caught-fail(v_867) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (v_877,v_878,2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {396}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {397}insert statestore(bob,alice,sid,statepack_c(hs_887,cs1_889,cs2_890));
        {398}out(pub, message_b_888)
    ) | (
        {400}!
        {420}get statestore(=bob,=alice,=sid,statepack_c(hs_891: handshakestate,cs1_892: cipherstate,cs2_893: cipherstate)) in
        {401}let hs_894: handshakestate = handshakestatesetcs(hs_891,cs1_892) in
        {402}in(pub, message_c_895: bitstring);
        {403}let v_896: bitstring = catch-fail(handshakestateunpack(hs_894)) in
        {404}let v_897: bitstring = catch-fail(deconcat3(message_c_895)) in
        {405}let v_898: bool = catch-fail(true) in
        {406}let v_899: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_896))) in
        {407}let v_900: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_899))) in
        {408}let v_901: aead = catch-fail(decrypt(1-proj-2-tuple(v_900),2-proj-2-tuple(v_900),3-proj-3-tuple(v_899),3-proj-3-tuple(v_897))) in
        {409}let v_902: bitstring = catch-fail(aeadunpack(v_901)) in
        {410}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_899))) in
        {411}let v_904: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_900))) && success?(1-proj-3-tuple(v_899))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then cipherstatepack(1-proj-2-tuple(v_903),increment_nonce(2-proj-2-tuple(v_900))) else fail-any) else fail-any)) in
        {412}let v_905: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_897)) && (success?(3-proj-3-tuple(v_899)) && success?(1-proj-3-tuple(v_899)))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_901) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if not-caught-fail(v_904) then (v_904,3-proj-3-tuple(v_902),1-proj-3-tuple(v_902)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {413}let v_906: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_905),2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)))) in
        {414}let v_907: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_897)) && success?(symmetricstatepack(1-proj-3-tuple(v_905),2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_906),hash(3-proj-3-tuple(v_906),3-proj-3-tuple(v_897))) else fail-any) else fail-any)) in
        {415}let v_908: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_897)) && success?(1-proj-7-tuple(v_896))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,2-proj-3-tuple(v_905),3-proj-3-tuple(v_905)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {416}let v_909: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_908),2-proj-7-tuple(v_896),3-proj-7-tuple(v_896),4-proj-7-tuple(v_896),5-proj-7-tuple(v_896),6-proj-7-tuple(v_896),7-proj-7-tuple(v_896))) in
        {417}let (hs_910: handshakestate,plaintext_c: bitstring,valid_911: bool) = (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-7-tuple(v_896))))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if not-caught-fail(v_898) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if (v_898 && 3-proj-3-tuple(v_908)) then (if not-caught-fail(v_909) then (v_909,2-proj-3-tuple(v_908),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {418}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {419}insert statestore(bob,alice,sid,statepack_d(hs_910,handshakestategetcs(hs_910),cs2_893))
    ) | (
        {421}!
        {439}get statestore(=bob,=alice,=sid,statepack_d(hs_912: handshakestate,cs1_913: cipherstate,cs2_914: cipherstate)) in
        {422}let hs_915: handshakestate = handshakestatesetcs(hs_912,cs2_914) in
        {423}let v_916: bitstring = catch-fail(handshakestateunpack(hs_915)) in
        {424}let v_917: bitstring = catch-fail((empty,empty,empty)) in
        {425}let v_918: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_916))) in
        {426}let v_919: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_918))) in
        {427}let v_920: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_919),2-proj-2-tuple(v_919),3-proj-3-tuple(v_918),msg_d(bob,alice,sid))) in
        {428}let v_921: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_918))) in
        {429}let v_922: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_919))) && success?(1-proj-3-tuple(v_918))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then cipherstatepack(1-proj-2-tuple(v_921),increment_nonce(2-proj-2-tuple(v_919))) else fail-any) else fail-any)) in
        {430}let v_923: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_918)) && success?(1-proj-3-tuple(v_918))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then (if not-caught-fail(v_920) then (if not-caught-fail(v_922) then (v_922,v_920) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_924: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_923),2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)))) in
        {432}let v_925: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_923)) && success?(symmetricstatepack(1-proj-2-tuple(v_923),2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then symmetricstatepack(1-proj-3-tuple(v_924),2-proj-3-tuple(v_924),hash(3-proj-3-tuple(v_924),2-proj-2-tuple(v_923))) else fail-any) else fail-any)) in
        {433}let v_926: bitstring = catch-fail((if success?(1-proj-7-tuple(v_916)) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then (if not-caught-fail(v_925) then (v_925,2-proj-2-tuple(v_923)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_927: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_926),2-proj-7-tuple(v_916),3-proj-7-tuple(v_916),4-proj-7-tuple(v_916),5-proj-7-tuple(v_916),6-proj-7-tuple(v_916),7-proj-7-tuple(v_916))) in
        {435}let v_928: bitstring = catch-fail(concat3(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),2-proj-2-tuple(v_926))) in
        {436}let (hs_929: handshakestate,message_d_930: bitstring) = (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-7-tuple(v_916))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then (if not-caught-fail(v_927) then (if not-caught-fail(v_928) then (v_927,v_928) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {437}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {438}out(pub, message_d_930)
    ) | (
        {440}event LeakPsk(phase0,alice,bob);
        {441}out(pub, key_psk(alice,bob))
    ) | (
        {442}phase 1;
        {443}event LeakPsk(phase1,alice,bob);
        {444}out(pub, key_psk(alice,bob))
    ) | (
        {445}event LeakS(phase0,bob);
        {446}out(pub, key_s(bob))
    ) | (
        {447}phase 1;
        {448}event LeakS(phase1,bob);
        {449}out(pub, key_s(bob))
    )
) | (
    {450}let v_931: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {451}let s_932: keypair = (if not-caught-fail(v_931) then keypairpack(validkey(v_931),key_s(bob)) else fail-any) in
    {452}out(pub, getpublickey(s_932));
    (
        {453}let e_933: keypair = keypairpack(empty,empty) in
        {454}let rs_934: key = empty in
        {455}let re_935: key = empty in
        {456}let v_936: bitstring = catch-fail(hash(somename,empty)) in
        {457}let v_937: key = catch-fail(v_936) in
        {458}let v_938: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {459}let v_939: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then symmetricstatepack(v_938,v_937,v_936) else fail-any) else fail-any) else fail-any))) in
        {460}let v_940: symmetricstate = catch-fail((if success?((if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then symmetricstatepack(v_938,v_937,v_936) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then symmetricstatepack(1-proj-3-tuple(v_939),2-proj-3-tuple(v_939),hash(3-proj-3-tuple(v_939),empty)) else fail-any) else fail-any)) in
        {461}let v_941: bitstring = catch-fail(symmetricstateunpack(v_940)) in
        {462}let v_942: symmetricstate = catch-fail((if success?(getpublickey(s_932)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),hash(3-proj-3-tuple(v_941),getpublickey(s_932))) else fail-any) else fail-any)) in
        {463}let hs_943: handshakestate = (if not-caught-fail(v_940) then (if not-caught-fail(v_942) then handshakestatepack(v_942,s_932,e_933,rs_934,re_935,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {464}insert statestore(bob,charlie,sid,statepack_a(hs_943))
    ) | (
        {507}get statestore(=bob,=charlie,=sid,statepack_a(hs_944: handshakestate)) in
        {465}in(pub, message_a_945: bitstring);
        {466}let v_946: bitstring = catch-fail(handshakestateunpack(hs_944)) in
        {467}let v_947: bitstring = catch-fail(deconcat3(message_a_945)) in
        {468}let v_948: bool = catch-fail(true) in
        {469}let v_949: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_946))) in
        {470}let v_950: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_949),6-proj-7-tuple(v_946))) in
        {471}let v_951: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_949),6-proj-7-tuple(v_946))) in
        {472}let v_952: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_949),6-proj-7-tuple(v_946))) in
        {473}let v_953: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_946)) && success?(2-proj-3-tuple(v_949))) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (v_950,v_951,v_952) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_954: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_949),1-proj-3-tuple(v_953),3-proj-3-tuple(v_949)))) in
        {475}let v_955: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_953)) && success?(symmetricstatepack(1-proj-3-tuple(v_949),1-proj-3-tuple(v_953),3-proj-3-tuple(v_949)))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_954),hash(3-proj-3-tuple(v_954),2-proj-3-tuple(v_953))) else fail-any) else fail-any))) in
        {476}let v_956: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_946)) && success?(1-proj-7-tuple(v_946))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_953)) then cipherstatepack(3-proj-3-tuple(v_953),minnonce) else fail-any),1-proj-3-tuple(v_953),3-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_957: key = catch-fail(1-proj-3-tuple(v_947)) in
        {478}let v_958: bitstring = catch-fail(symmetricstateunpack(v_956)) in
        {479}let v_959: symmetricstate = catch-fail((if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_958),hash(3-proj-3-tuple(v_958),v_957)) else fail-any)) in
        {480}let v_960: bitstring = catch-fail(symmetricstateunpack(v_959)) in
        {481}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),v_957)) in
        {482}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),v_957)) in
        {483}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),v_957)) in
        {484}let v_964: bitstring = catch-fail((if success?(2-proj-3-tuple(v_960)) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_965: symmetricstate = catch-fail((if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_964)) then cipherstatepack(2-proj-3-tuple(v_964),minnonce) else fail-any),1-proj-3-tuple(v_964),3-proj-3-tuple(v_960)) else fail-any) else fail-any)) in
        {486}let v_966: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_946))) in
        {487}let v_967: bitstring = catch-fail(symmetricstateunpack(v_965)) in
        {488}let v_968: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_967),(if success?(2-proj-7-tuple(v_946)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then dhexp(2-proj-2-tuple(v_966),v_957) else fail-any) else fail-any))) in
        {489}let v_969: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_967),(if success?(2-proj-7-tuple(v_946)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then dhexp(2-proj-2-tuple(v_966),v_957) else fail-any) else fail-any))) in
        {490}let v_970: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_967),(if success?(2-proj-7-tuple(v_946)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then dhexp(2-proj-2-tuple(v_966),v_957) else fail-any) else fail-any))) in
        {491}let v_971: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_946)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then dhexp(2-proj-2-tuple(v_966),v_957) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_967))) then (if not-caught-fail(v_968) then (if not-caught-fail(v_969) then (if not-caught-fail(v_970) then (v_968,v_969,v_970) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {492}let v_972: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_946)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then dhexp(2-proj-2-tuple(v_966),v_957) else fail-any) else fail-any)) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_971)) then cipherstatepack(2-proj-3-tuple(v_971),minnonce) else fail-any),1-proj-3-tuple(v_971),3-proj-3-tuple(v_967)) else fail-any) else fail-any) else fail-any)) in
        {493}let v_973: bitstring = catch-fail(symmetricstateunpack(v_972)) in
        {494}let v_974: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_973))) in
        {495}let v_975: aead = catch-fail(decrypt(1-proj-2-tuple(v_974),2-proj-2-tuple(v_974),3-proj-3-tuple(v_973),3-proj-3-tuple(v_947))) in
        {496}let v_976: bitstring = catch-fail(aeadunpack(v_975)) in
        {497}let v_977: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_973))) in
        {498}let v_978: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_974))) && success?(1-proj-3-tuple(v_973))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-2-tuple(v_977))))) then cipherstatepack(1-proj-2-tuple(v_977),increment_nonce(2-proj-2-tuple(v_974))) else fail-any) else fail-any)) in
        {499}let v_979: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_947)) && (success?(3-proj-3-tuple(v_973)) && success?(1-proj-3-tuple(v_973)))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then (if not-caught-fail(v_975) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then (if not-caught-fail(v_978) then (v_978,3-proj-3-tuple(v_976),1-proj-3-tuple(v_976)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {500}let v_980: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_979),2-proj-3-tuple(v_973),3-proj-3-tuple(v_973)))) in
        {501}let v_981: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_947)) && success?(symmetricstatepack(1-proj-3-tuple(v_979),2-proj-3-tuple(v_973),3-proj-3-tuple(v_973)))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_980),hash(3-proj-3-tuple(v_980),3-proj-3-tuple(v_947))) else fail-any) else fail-any)) in
        {502}let v_982: bitstring = catch-fail((if success?(3-proj-3-tuple(v_947)) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if not-caught-fail(v_981) then (v_981,2-proj-3-tuple(v_979),3-proj-3-tuple(v_979)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {503}let v_983: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_982),2-proj-7-tuple(v_946),3-proj-7-tuple(v_946),4-proj-7-tuple(v_946),v_957,6-proj-7-tuple(v_946),7-proj-7-tuple(v_946))) in
        {504}let (hs_984: handshakestate,plaintext_a_985: bitstring,valid_986: bool) = (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-7-tuple(v_946))))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_956) then (if not-caught-fail(v_957) then (if not-caught-fail(v_959) then (if not-caught-fail(v_965) then (if not-caught-fail(v_972) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (if (v_948 && 3-proj-3-tuple(v_982)) then (if not-caught-fail(v_983) then (v_983,2-proj-3-tuple(v_982),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {505}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_985);
        {506}insert statestore(bob,charlie,sid,statepack_b(hs_984))
    ) | (
        {551}get statestore(=bob,=charlie,=sid,statepack_b(hs_987: handshakestate)) in
        {508}let v_988: bitstring = catch-fail(handshakestateunpack(hs_987)) in
        {509}let v_989: bitstring = catch-fail((empty,empty,empty)) in
        {510}let v_990: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {511}let v_991: keypair = catch-fail((if not-caught-fail(v_990) then keypairpack(validkey(v_990),key_e(bob,charlie,sid)) else fail-any)) in
        {512}let v_992: bitstring = catch-fail(getpublickey(v_991)) in
        {513}let v_993: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_988))) in
        {514}let v_994: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_988)) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack(1-proj-3-tuple(v_993),2-proj-3-tuple(v_993),hash(3-proj-3-tuple(v_993),v_992)) else fail-any) else fail-any)) in
        {515}let v_995: bitstring = catch-fail(symmetricstateunpack(v_994)) in
        {516}let v_996: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_995),getpublickey(v_991))) in
        {517}let v_997: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_995),getpublickey(v_991))) in
        {518}let v_998: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_995),getpublickey(v_991))) in
        {519}let v_999: bitstring = catch-fail((if (success?(getpublickey(v_991)) && success?(2-proj-3-tuple(v_995))) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then (if not-caught-fail(v_998) then (v_996,v_997,v_998) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {520}let v_1000: symmetricstate = catch-fail((if success?(getpublickey(v_991)) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_999)) then cipherstatepack(2-proj-3-tuple(v_999),minnonce) else fail-any),1-proj-3-tuple(v_999),3-proj-3-tuple(v_995)) else fail-any) else fail-any) else fail-any)) in
        {521}let v_1001: bitstring = catch-fail(keypairunpack(v_991)) in
        {522}let v_1002: bitstring = catch-fail(symmetricstateunpack(v_1000)) in
        {523}let v_1003: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1002),(if success?(5-proj-7-tuple(v_988)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),5-proj-7-tuple(v_988)) else fail-any) else fail-any))) in
        {524}let v_1004: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1002),(if success?(5-proj-7-tuple(v_988)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),5-proj-7-tuple(v_988)) else fail-any) else fail-any))) in
        {525}let v_1005: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1002),(if success?(5-proj-7-tuple(v_988)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),5-proj-7-tuple(v_988)) else fail-any) else fail-any))) in
        {526}let v_1006: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_988)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),5-proj-7-tuple(v_988)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1002))) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (v_1003,v_1004,v_1005) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_1007: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_988)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),5-proj-7-tuple(v_988)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1006)) then cipherstatepack(2-proj-3-tuple(v_1006),minnonce) else fail-any),1-proj-3-tuple(v_1006),3-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1008: bitstring = catch-fail(symmetricstateunpack(v_1007)) in
        {529}let v_1009: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1008))) in
        {530}let v_1010: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1009),2-proj-2-tuple(v_1009),3-proj-3-tuple(v_1008),msg_b(bob,charlie,sid))) in
        {531}let v_1011: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1008))) in
        {532}let v_1012: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1009))) && success?(1-proj-3-tuple(v_1008))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then cipherstatepack(1-proj-2-tuple(v_1011),increment_nonce(2-proj-2-tuple(v_1009))) else fail-any) else fail-any)) in
        {533}let v_1013: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1008)) && success?(1-proj-3-tuple(v_1008))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-2-tuple(v_1009))))) then (if not-caught-fail(v_1010) then (if not-caught-fail(v_1012) then (v_1012,v_1010) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {534}let v_1014: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1013),2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)))) in
        {535}let v_1015: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1013)) && success?(symmetricstatepack(1-proj-2-tuple(v_1013),2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then symmetricstatepack(1-proj-3-tuple(v_1014),2-proj-3-tuple(v_1014),hash(3-proj-3-tuple(v_1014),2-proj-2-tuple(v_1013))) else fail-any) else fail-any)) in
        {536}let v_1016: bitstring = catch-fail((if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-2-tuple(v_1013))))) then (if not-caught-fail(v_1015) then (v_1015,2-proj-2-tuple(v_1013)) else fail-any) else fail-any) else fail-any)) in
        {537}let v_1017: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1016),2-proj-7-tuple(v_988),v_991,4-proj-7-tuple(v_988),5-proj-7-tuple(v_988),6-proj-7-tuple(v_988),7-proj-7-tuple(v_988))) in
        {538}let v_1018: bitstring = catch-fail(concat3(v_992,2-proj-3-tuple(v_989),2-proj-2-tuple(v_1016))) in
        {539}let v_1019: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1016))) in
        {540}let v_1020: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1019),zero)) in
        {541}let v_1021: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1019),zero)) in
        {542}let v_1022: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1019),zero)) in
        {543}let v_1023: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1019)) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1022) then (v_1020,v_1021,v_1022) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {544}let v_1024: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1023)) then cipherstatepack(1-proj-3-tuple(v_1023),minnonce) else fail-any)) in
        {545}let v_1025: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1023)) then cipherstatepack(2-proj-3-tuple(v_1023),minnonce) else fail-any)) in
        {546}let v_1026: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1016)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1025) then (1-proj-2-tuple(v_1016),v_1024,v_1025) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let (hs_1027: handshakestate,message_b_1028: bitstring,cs1_1029: cipherstate,cs2_1030: cipherstate) = (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-7-tuple(v_988))))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (if not-caught-fail(v_994) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1007) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-2-tuple(v_1016))))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (v_1017,v_1018,2-proj-3-tuple(v_1026),3-proj-3-tuple(v_1026)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {548}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {549}insert statestore(bob,charlie,sid,statepack_c(hs_1027,cs1_1029,cs2_1030));
        {550}out(pub, message_b_1028)
    ) | (
        {552}!
        {572}get statestore(=bob,=charlie,=sid,statepack_c(hs_1031: handshakestate,cs1_1032: cipherstate,cs2_1033: cipherstate)) in
        {553}let hs_1034: handshakestate = handshakestatesetcs(hs_1031,cs1_1032) in
        {554}in(pub, message_c_1035: bitstring);
        {555}let v_1036: bitstring = catch-fail(handshakestateunpack(hs_1034)) in
        {556}let v_1037: bitstring = catch-fail(deconcat3(message_c_1035)) in
        {557}let v_1038: bool = catch-fail(true) in
        {558}let v_1039: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1036))) in
        {559}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {560}let v_1041: aead = catch-fail(decrypt(1-proj-2-tuple(v_1040),2-proj-2-tuple(v_1040),3-proj-3-tuple(v_1039),3-proj-3-tuple(v_1037))) in
        {561}let v_1042: bitstring = catch-fail(aeadunpack(v_1041)) in
        {562}let v_1043: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {563}let v_1044: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1040))) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then cipherstatepack(1-proj-2-tuple(v_1043),increment_nonce(2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {564}let v_1045: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1037)) && (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if not-caught-fail(v_1044) then (v_1044,3-proj-3-tuple(v_1042),1-proj-3-tuple(v_1042)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1046: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) in
        {566}let v_1047: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1037)) && success?(symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then symmetricstatepack(1-proj-3-tuple(v_1046),2-proj-3-tuple(v_1046),hash(3-proj-3-tuple(v_1046),3-proj-3-tuple(v_1037))) else fail-any) else fail-any)) in
        {567}let v_1048: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1037)) && success?(1-proj-7-tuple(v_1036))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then (if not-caught-fail(v_1047) then (v_1047,2-proj-3-tuple(v_1045),3-proj-3-tuple(v_1045)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1049: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1048),2-proj-7-tuple(v_1036),3-proj-7-tuple(v_1036),4-proj-7-tuple(v_1036),5-proj-7-tuple(v_1036),6-proj-7-tuple(v_1036),7-proj-7-tuple(v_1036))) in
        {569}let (hs_1050: handshakestate,plaintext_c_1051: bitstring,valid_1052: bool) = (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-7-tuple(v_1036))))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (if not-caught-fail(v_1038) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (v_1038 && 3-proj-3-tuple(v_1048)) then (if not-caught-fail(v_1049) then (v_1049,2-proj-3-tuple(v_1048),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {570}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1051);
        {571}insert statestore(bob,charlie,sid,statepack_d(hs_1050,handshakestategetcs(hs_1050),cs2_1033))
    ) | (
        {573}!
        {591}get statestore(=bob,=charlie,=sid,statepack_d(hs_1053: handshakestate,cs1_1054: cipherstate,cs2_1055: cipherstate)) in
        {574}let hs_1056: handshakestate = handshakestatesetcs(hs_1053,cs2_1055) in
        {575}let v_1057: bitstring = catch-fail(handshakestateunpack(hs_1056)) in
        {576}let v_1058: bitstring = catch-fail((empty,empty,empty)) in
        {577}let v_1059: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1057))) in
        {578}let v_1060: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1059))) in
        {579}let v_1061: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1060),2-proj-2-tuple(v_1060),3-proj-3-tuple(v_1059),msg_d(bob,charlie,sid))) in
        {580}let v_1062: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1059))) in
        {581}let v_1063: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1060))) && success?(1-proj-3-tuple(v_1059))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-2-tuple(v_1062))))) then cipherstatepack(1-proj-2-tuple(v_1062),increment_nonce(2-proj-2-tuple(v_1060))) else fail-any) else fail-any)) in
        {582}let v_1064: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1059)) && success?(1-proj-3-tuple(v_1059))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1063) then (v_1063,v_1061) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1065: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1064),2-proj-3-tuple(v_1059),3-proj-3-tuple(v_1059)))) in
        {584}let v_1066: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1064)) && success?(symmetricstatepack(1-proj-2-tuple(v_1064),2-proj-3-tuple(v_1059),3-proj-3-tuple(v_1059)))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then symmetricstatepack(1-proj-3-tuple(v_1065),2-proj-3-tuple(v_1065),hash(3-proj-3-tuple(v_1065),2-proj-2-tuple(v_1064))) else fail-any) else fail-any)) in
        {585}let v_1067: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1057)) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-2-tuple(v_1064))))) then (if not-caught-fail(v_1066) then (v_1066,2-proj-2-tuple(v_1064)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {586}let v_1068: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1067),2-proj-7-tuple(v_1057),3-proj-7-tuple(v_1057),4-proj-7-tuple(v_1057),5-proj-7-tuple(v_1057),6-proj-7-tuple(v_1057),7-proj-7-tuple(v_1057))) in
        {587}let v_1069: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1058),2-proj-3-tuple(v_1058),2-proj-2-tuple(v_1067))) in
        {588}let (hs_1070: handshakestate,message_d_1071: bitstring) = (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-7-tuple(v_1057))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1069) then (v_1068,v_1069) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {589}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {590}out(pub, message_d_1071)
    ) | (
        {592}event LeakPsk(phase0,charlie,bob);
        {593}out(pub, key_psk(charlie,bob))
    ) | (
        {594}phase 1;
        {595}event LeakPsk(phase1,charlie,bob);
        {596}out(pub, key_psk(charlie,bob))
    ) | (
        {597}event LeakS(phase0,bob);
        {598}out(pub, key_s(bob))
    ) | (
        {599}phase 1;
        {600}event LeakS(phase1,bob);
        {601}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 102 rules in the queue.
400 rules inserted. The rule base contains 380 rules. 15 rules in the queue.
600 rules inserted. The rule base contains 571 rules. 87 rules in the queue.
800 rules inserted. The rule base contains 757 rules. 116 rules in the queue.
1000 rules inserted. The rule base contains 923 rules. 118 rules in the queue.
1200 rules inserted. The rule base contains 1089 rules. 190 rules in the queue.
1400 rules inserted. The rule base contains 1220 rules. 186 rules in the queue.
1600 rules inserted. The rule base contains 1320 rules. 174 rules in the queue.
1800 rules inserted. The rule base contains 1409 rules. 148 rules in the queue.
2000 rules inserted. The rule base contains 1542 rules. 153 rules in the queue.
2200 rules inserted. The rule base contains 1679 rules. 151 rules in the queue.
2400 rules inserted. The rule base contains 1846 rules. 161 rules in the queue.
2600 rules inserted. The rule base contains 1979 rules. 143 rules in the queue.
2800 rules inserted. The rule base contains 2083 rules. 139 rules in the queue.
3000 rules inserted. The rule base contains 2217 rules. 171 rules in the queue.
3200 rules inserted. The rule base contains 2316 rules. 168 rules in the queue.
3400 rules inserted. The rule base contains 2440 rules. 169 rules in the queue.
3600 rules inserted. The rule base contains 2551 rules. 173 rules in the queue.
3800 rules inserted. The rule base contains 2636 rules. 147 rules in the queue.
4000 rules inserted. The rule base contains 2735 rules. 137 rules in the queue.
4200 rules inserted. The rule base contains 2801 rules. 118 rules in the queue.
4400 rules inserted. The rule base contains 2859 rules. 48 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625232]),msg_a(alice,bob,sid[!1 = @sid_42625232]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_42625233]),msg_a(alice,bob,sid[!1 = @sid_42625232])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625241]),msg_a(alice,bob,sid[!1 = @sid_42625241]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_42625242]),msg_a(alice,bob,sid[!1 = @sid_42625241])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625251]),msg_a(alice,bob,sid[!1 = @sid_42625251]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_42625252]),msg_a(alice,bob,sid[!1 = @sid_42625251])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625261]),msg_a(alice,bob,sid[!1 = @sid_42625261]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_42625262]),msg_a(alice,bob,sid[!1 = @sid_42625261])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625270]),msg_a(alice,bob,sid[!1 = @sid_42625270]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_42625271]),msg_a(alice,bob,sid[!1 = @sid_42625270])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625278]),msg_a(alice,bob,sid[!1 = @sid_42625278]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625278]))
Abbreviations:
sid_42625390 = sid[!1 = @sid_42625366]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_42625390,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_42625390,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_42625390,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {61}.
The event SendMsg(alice,bob,stagepack_a(sid_42625390),msg_a(alice,bob,sid_42625390)) may be executed at {58}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))) may be sent on channel pub at output {60}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {149}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {150}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {300}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {445}.
So the message key_s(bob) may be sent on channel pub at output {446}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625390),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625390),g))),msg_a(alice,bob,sid_42625390)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_42625390) in phase 1.
attacker_p1(msg_a(alice,bob,sid_42625390)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625392]),msg_a(alice,bob,sid[!1 = @sid_42625392]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625392]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625394]),msg_a(alice,bob,sid[!1 = @sid_42625394]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625394]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625396]),msg_a(alice,bob,sid[!1 = @sid_42625396]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625396]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625399]),msg_a(alice,bob,sid[!1 = @sid_42625399]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625399]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625417]),msg_a(alice,bob,sid[!1 = @sid_42625417]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625417]))
Abbreviations:
sid_42625532 = sid[!1 = @sid_42625508]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_42625532,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_42625532,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_42625532,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {61}.
The event SendMsg(alice,bob,stagepack_a(sid_42625532),msg_a(alice,bob,sid_42625532)) may be executed at {58}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))) may be sent on channel pub at output {60}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {149}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {150}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {300}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {445}.
So the message key_s(bob) may be sent on channel pub at output {446}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625532),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625532),g))),msg_a(alice,bob,sid_42625532)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_42625532) in phase 1.
attacker_p1(msg_a(alice,bob,sid_42625532)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625534]),msg_a(alice,bob,sid[!1 = @sid_42625534]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_42625534]))
Abbreviations:
sid_42625646 = sid[!1 = @sid_42625622]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_42625646,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_42625646,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_42625646,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {61}.
The event SendMsg(alice,bob,stagepack_a(sid_42625646),msg_a(alice,bob,sid_42625646)) may be executed at {58}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))) may be sent on channel pub at output {60}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {149}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {150}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {300}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {445}.
So the message key_s(bob) may be sent on channel pub at output {446}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42625646),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42625646),g))),msg_a(alice,bob,sid_42625646)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_42625646) in phase 1.
attacker_p1(msg_a(alice,bob,sid_42625646)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625649]),msg_b(bob,alice,sid[!1 = @sid_42625649]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625650]),msg_a(alice,bob,sid[!1 = @sid_42625650]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_42625650]),msg_b(bob,alice,sid[!1 = @sid_42625649])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625658]),msg_b(bob,alice,sid[!1 = @sid_42625658]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625659]),msg_a(alice,bob,sid[!1 = @sid_42625659]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_42625659]),msg_b(bob,alice,sid[!1 = @sid_42625658])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625668]),msg_b(bob,alice,sid[!1 = @sid_42625668]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625669]),msg_a(alice,bob,sid[!1 = @sid_42625669]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_42625669]),msg_b(bob,alice,sid[!1 = @sid_42625668])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625678]),msg_b(bob,alice,sid[!1 = @sid_42625678]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625679]),msg_a(alice,bob,sid[!1 = @sid_42625679]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_42625679]),msg_b(bob,alice,sid[!1 = @sid_42625678])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625687]),msg_b(bob,alice,sid[!1 = @sid_42625687]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625688]),msg_a(alice,bob,sid[!1 = @sid_42625688]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_42625688]),msg_b(bob,alice,sid[!1 = @sid_42625687])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625712]),msg_c(alice,bob,sid[!1 = @sid_42625712]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625713]),msg_b(bob,alice,sid[!1 = @sid_42625713]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625712]),msg_a(alice,bob,sid[!1 = @sid_42625712]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_42625713]),msg_c(alice,bob,sid[!1 = @sid_42625712])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625721]),msg_c(alice,bob,sid[!1 = @sid_42625721]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625722]),msg_b(bob,alice,sid[!1 = @sid_42625722]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625721]),msg_a(alice,bob,sid[!1 = @sid_42625721]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_42625722]),msg_c(alice,bob,sid[!1 = @sid_42625721])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625731]),msg_c(alice,bob,sid[!1 = @sid_42625731]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625732]),msg_b(bob,alice,sid[!1 = @sid_42625732]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625731]),msg_a(alice,bob,sid[!1 = @sid_42625731]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_42625732]),msg_c(alice,bob,sid[!1 = @sid_42625731])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1181,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625741]),msg_c(alice,bob,sid[!1 = @sid_42625741]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625742]),msg_b(bob,alice,sid[!1 = @sid_42625742]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625741]),msg_a(alice,bob,sid[!1 = @sid_42625741]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_42625742]),msg_c(alice,bob,sid[!1 = @sid_42625741])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625750]),msg_c(alice,bob,sid[!1 = @sid_42625750]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625751]),msg_b(bob,alice,sid[!1 = @sid_42625751]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625750]),msg_a(alice,bob,sid[!1 = @sid_42625750]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_42625751]),msg_c(alice,bob,sid[!1 = @sid_42625750])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_42625776]),msg_d(bob,alice,sid[!1 = @sid_42625776]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625777]),msg_c(alice,bob,sid[!1 = @sid_42625777]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625776]),msg_b(bob,alice,sid[!1 = @sid_42625776]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625777]),msg_a(alice,bob,sid[!1 = @sid_42625777]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_42625777]),msg_d(bob,alice,sid[!1 = @sid_42625776])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_42625785]),msg_d(bob,alice,sid[!1 = @sid_42625785]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625786]),msg_c(alice,bob,sid[!1 = @sid_42625786]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625785]),msg_b(bob,alice,sid[!1 = @sid_42625785]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625786]),msg_a(alice,bob,sid[!1 = @sid_42625786]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_42625786]),msg_d(bob,alice,sid[!1 = @sid_42625785])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_42625795]),msg_d(bob,alice,sid[!1 = @sid_42625795]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625796]),msg_c(alice,bob,sid[!1 = @sid_42625796]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625795]),msg_b(bob,alice,sid[!1 = @sid_42625795]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625796]),msg_a(alice,bob,sid[!1 = @sid_42625796]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_42625796]),msg_d(bob,alice,sid[!1 = @sid_42625795])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1181,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_42625805]),msg_d(bob,alice,sid[!1 = @sid_42625805]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625806]),msg_c(alice,bob,sid[!1 = @sid_42625806]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625805]),msg_b(bob,alice,sid[!1 = @sid_42625805]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625806]),msg_a(alice,bob,sid[!1 = @sid_42625806]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_42625806]),msg_d(bob,alice,sid[!1 = @sid_42625805])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_42625814]),msg_d(bob,alice,sid[!1 = @sid_42625814]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625815]),msg_c(alice,bob,sid[!1 = @sid_42625815]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625814]),msg_b(bob,alice,sid[!1 = @sid_42625814]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625815]),msg_a(alice,bob,sid[!1 = @sid_42625815]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_42625815]),msg_d(bob,alice,sid[!1 = @sid_42625814])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_42625837]),msg_d(bob,alice,sid[!1 = @sid_42625837]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_42625838]),msg_c(alice,bob,sid[!1 = @sid_42625838]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_42625837]),msg_b(bob,alice,sid[!1 = @sid_42625837]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_42625838]),msg_a(alice,bob,sid[!1 = @sid_42625838]))) -> end(RecvEnd(true))
Abbreviations:
sid_42626075 = sid[!1 = @sid_42626064]
sid_42626076 = sid[!1 = @sid_42626020]

1. The entry statestore(alice,bob,sid_42626075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_42626075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_42626075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {61}.
The event SendMsg(alice,bob,stagepack_a(sid_42626075),msg_a(alice,bob,sid_42626075)) may be executed at {58}.
So the entry statestore(alice,bob,sid_42626075,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {59}.
table(statestore(alice,bob,sid_42626075,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_42626076,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {312}.
table(statestore(bob,alice,sid_42626076,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_42626075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {61}.
The event SendMsg(alice,bob,stagepack_a(sid_42626075),msg_a(alice,bob,sid_42626075)) may be executed at {58}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))) may be sent on channel pub at output {60}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))).

5. The entry statestore(bob,alice,sid_42626076,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))) that may be sent on channel pub by 4 may be received at input {313}.
So the entry statestore(bob,alice,sid_42626076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {354}.
table(statestore(bob,alice,sid_42626076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_42626076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {399}.
The event SendMsg(bob,alice,stagepack_b(sid_42626076),msg_b(bob,alice,sid_42626076)) may be executed at {396}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))) may be sent on channel pub at output {398}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))).

7. The entry statestore(alice,bob,sid_42626075,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {104}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))) that may be sent on channel pub by 6 may be received at input {62}.
So the entry statestore(alice,bob,sid_42626075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) may be inserted in a table at insert {103}.
table(statestore(alice,bob,sid_42626075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_42626075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) that may be in a table by 7 may be read at get {124}.
The event SendMsg(alice,bob,stagepack_c(sid_42626075),msg_c(alice,bob,sid_42626075)) may be executed at {121}.
So the entry statestore(alice,bob,sid_42626075,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) may be inserted in a table at insert {122}.
table(statestore(alice,bob,sid_42626075,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_42626076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {399}.
The event SendMsg(bob,alice,stagepack_b(sid_42626076),msg_b(bob,alice,sid_42626076)) may be executed at {396}.
So the entry statestore(bob,alice,sid_42626076,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_e(bob,alice,sid_42626076)),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) may be inserted in a table at insert {397}.
table(statestore(bob,alice,sid_42626076,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_e(bob,alice,sid_42626076)),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_42626075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) that may be in a table by 7 may be read at get {124}.
The event SendMsg(alice,bob,stagepack_c(sid_42626075),msg_c(alice,bob,sid_42626075)) may be executed at {121}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075))) may be sent on channel pub at output {123}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))).

11. The entry statestore(bob,alice,sid_42626076,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_e(bob,alice,sid_42626076)),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) that may be in a table by 9 may be read at get {420}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075))) that may be sent on channel pub by 10 may be received at input {402}.
So the entry statestore(bob,alice,sid_42626076,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_e(bob,alice,sid_42626076)),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) may be inserted in a table at insert {419}.
table(statestore(bob,alice,sid_42626076,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_e(bob,alice,sid_42626076)),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_42626076,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_e(bob,alice,sid_42626076)),empty,validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) that may be in a table by 11 may be read at get {439}.
The event SendMsg(bob,alice,stagepack_d(sid_42626076),msg_d(bob,alice,sid_42626076)) may be executed at {437}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075))),msg_d(bob,alice,sid_42626076))) may be sent on channel pub at output {438}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075))),msg_d(bob,alice,sid_42626076)))).

13. The entry statestore(alice,bob,sid_42626075,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_42626075),g)),key_e(alice,bob,sid_42626075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce))) that may be in a table by 8 may be read at get {145}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(alice,bob,sid_42626075),dhexp_real(key_e(bob,alice,sid_42626076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),dhexp_real(key_e(bob,alice,sid_42626076),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_42626075),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_42626075),g))),msg_a(alice,bob,sid_42626075))),validkey(dhexp_real(key_e(bob,alice,sid_42626076),g))),msg_b(bob,alice,sid_42626076))),msg_c(alice,bob,sid_42626075))),msg_d(bob,alice,sid_42626076))) that may be sent on channel pub by 12 may be received at input {127}.
So event RecvEnd(true) may be executed at {144}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
