File "Npsk0.noise.passive.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 219, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 219, character 36:
Warning: identifier h rebound.
File "Npsk0.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 254, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 261, character 6:
Warning: identifier e rebound.
File "Npsk0.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ne rebound.
File "Npsk0.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 266, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 266, characters 26-35:
Warning: identifier ciphertext rebound.
File "Npsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 277, characters 6-7:
Warning: identifier re rebound.
File "Npsk0.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 281, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 283, characters 7-8:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 356, characters 8-9:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 261, character 6:
Warning: identifier e rebound.
File "Npsk0.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ne rebound.
File "Npsk0.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 266, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 266, characters 26-35:
Warning: identifier ciphertext rebound.
File "Npsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 219, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 219, character 36:
Warning: identifier h rebound.
File "Npsk0.noise.passive.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 382, characters 8-9:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 277, characters 6-7:
Warning: identifier re rebound.
File "Npsk0.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 281, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 283, characters 7-8:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 219, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 219, character 36:
Warning: identifier h rebound.
File "Npsk0.noise.passive.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 254, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_366: keypair = keypairpack(empty,empty) in
    (
        {5}let e_367: keypair = keypairpack(empty,empty) in
        {6}let v_368: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {7}let rs_369: key = getpublickey((if not-caught-fail(v_368) then keypairpack(validkey(v_368),key_s(bob)) else fail-any)) in
        {8}let re_370: key = empty in
        {9}let v_371: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_372: key = catch-fail(v_371) in
        {11}let v_373: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_374: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_371) then (if not-caught-fail(v_372) then (if not-caught-fail(v_373) then symmetricstatepack(v_373,v_372,v_371) else fail-any) else fail-any) else fail-any))) in
        {13}let v_375: symmetricstate = catch-fail((if success?((if not-caught-fail(v_371) then (if not-caught-fail(v_372) then (if not-caught-fail(v_373) then symmetricstatepack(v_373,v_372,v_371) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_374) && success?(is-true(success?(1-proj-3-tuple(v_374))))) then symmetricstatepack(1-proj-3-tuple(v_374),2-proj-3-tuple(v_374),hash(3-proj-3-tuple(v_374),empty)) else fail-any) else fail-any)) in
        {14}let v_376: bitstring = catch-fail(symmetricstateunpack(v_375)) in
        {15}let v_377: symmetricstate = catch-fail((if (not-caught-fail(v_376) && success?(is-true(success?(1-proj-3-tuple(v_376))))) then symmetricstatepack(1-proj-3-tuple(v_376),2-proj-3-tuple(v_376),hash(3-proj-3-tuple(v_376),rs_369)) else fail-any)) in
        {16}let hs: handshakestate = (if not-caught-fail(v_375) then (if not-caught-fail(v_377) then handshakestatepack(v_377,s_366,e_367,rs_369,re_370,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {17}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {68}get statestore(=alice,=bob,=sid,statepack_a(hs_378: handshakestate)) in
        {18}let v_379: bitstring = catch-fail(handshakestateunpack(hs_378)) in
        {19}let v_380: bitstring = catch-fail((empty,empty,empty)) in
        {20}let v_381: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_379))) in
        {21}let v_382: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_381),6-proj-7-tuple(v_379))) in
        {22}let v_383: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_381),6-proj-7-tuple(v_379))) in
        {23}let v_384: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_381),6-proj-7-tuple(v_379))) in
        {24}let v_385: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_379)) && success?(2-proj-3-tuple(v_381))) then (if not-caught-fail(v_382) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then (v_382,v_383,v_384) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {25}let v_386: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_381),1-proj-3-tuple(v_385),3-proj-3-tuple(v_381)))) in
        {26}let v_387: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_385)) && success?(symmetricstatepack(1-proj-3-tuple(v_381),1-proj-3-tuple(v_385),3-proj-3-tuple(v_381)))) then (if (not-caught-fail(v_386) && success?(is-true(success?(1-proj-3-tuple(v_386))))) then symmetricstatepack(1-proj-3-tuple(v_386),2-proj-3-tuple(v_386),hash(3-proj-3-tuple(v_386),2-proj-3-tuple(v_385))) else fail-any) else fail-any))) in
        {27}let v_388: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_379)) && success?(1-proj-7-tuple(v_379))) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-3-tuple(v_381))))) then (if (not-caught-fail(v_385) && success?(is-true(success?(1-proj-3-tuple(v_385))))) then (if (not-caught-fail(v_387) && success?(is-true(success?(1-proj-3-tuple(v_387))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_385)) then cipherstatepack(3-proj-3-tuple(v_385),minnonce) else fail-any),1-proj-3-tuple(v_385),3-proj-3-tuple(v_387)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {28}let v_389: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {29}let v_390: keypair = catch-fail((if not-caught-fail(v_389) then keypairpack(validkey(v_389),key_e(alice,bob,sid)) else fail-any)) in
        {30}let v_391: bitstring = catch-fail(getpublickey(v_390)) in
        {31}let v_392: bitstring = catch-fail(symmetricstateunpack(v_388)) in
        {32}let v_393: symmetricstate = catch-fail((if (not-caught-fail(v_392) && success?(is-true(success?(1-proj-3-tuple(v_392))))) then symmetricstatepack(1-proj-3-tuple(v_392),2-proj-3-tuple(v_392),hash(3-proj-3-tuple(v_392),v_391)) else fail-any)) in
        {33}let v_394: bitstring = catch-fail(symmetricstateunpack(v_393)) in
        {34}let v_395: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_394),getpublickey(v_390))) in
        {35}let v_396: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_394),getpublickey(v_390))) in
        {36}let v_397: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_394),getpublickey(v_390))) in
        {37}let v_398: bitstring = catch-fail((if (success?(getpublickey(v_390)) && success?(2-proj-3-tuple(v_394))) then (if not-caught-fail(v_395) then (if not-caught-fail(v_396) then (if not-caught-fail(v_397) then (v_395,v_396,v_397) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_399: symmetricstate = catch-fail((if success?(getpublickey(v_390)) then (if (not-caught-fail(v_394) && success?(is-true(success?(1-proj-3-tuple(v_394))))) then (if (not-caught-fail(v_398) && success?(is-true(success?(1-proj-3-tuple(v_398))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_398)) then cipherstatepack(2-proj-3-tuple(v_398),minnonce) else fail-any),1-proj-3-tuple(v_398),3-proj-3-tuple(v_394)) else fail-any) else fail-any) else fail-any)) in
        {39}let v_400: bitstring = catch-fail(keypairunpack(v_390)) in
        {40}let v_401: bitstring = catch-fail(symmetricstateunpack(v_399)) in
        {41}let v_402: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_401),(if success?(4-proj-7-tuple(v_379)) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then dhexp(2-proj-2-tuple(v_400),4-proj-7-tuple(v_379)) else fail-any) else fail-any))) in
        {42}let v_403: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_401),(if success?(4-proj-7-tuple(v_379)) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then dhexp(2-proj-2-tuple(v_400),4-proj-7-tuple(v_379)) else fail-any) else fail-any))) in
        {43}let v_404: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_401),(if success?(4-proj-7-tuple(v_379)) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then dhexp(2-proj-2-tuple(v_400),4-proj-7-tuple(v_379)) else fail-any) else fail-any))) in
        {44}let v_405: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_379)) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then dhexp(2-proj-2-tuple(v_400),4-proj-7-tuple(v_379)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_401))) then (if not-caught-fail(v_402) then (if not-caught-fail(v_403) then (if not-caught-fail(v_404) then (v_402,v_403,v_404) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_406: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_379)) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then dhexp(2-proj-2-tuple(v_400),4-proj-7-tuple(v_379)) else fail-any) else fail-any)) then (if (not-caught-fail(v_401) && success?(is-true(success?(1-proj-3-tuple(v_401))))) then (if (not-caught-fail(v_405) && success?(is-true(success?(1-proj-3-tuple(v_405))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_405)) then cipherstatepack(2-proj-3-tuple(v_405),minnonce) else fail-any),1-proj-3-tuple(v_405),3-proj-3-tuple(v_401)) else fail-any) else fail-any) else fail-any)) in
        {46}let v_407: bitstring = catch-fail(symmetricstateunpack(v_406)) in
        {47}let v_408: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_407))) in
        {48}let v_409: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_408),2-proj-2-tuple(v_408),3-proj-3-tuple(v_407),msg_a(alice,bob,sid))) in
        {49}let v_410: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_407))) in
        {50}let v_411: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_408))) && success?(1-proj-3-tuple(v_407))) then (if (not-caught-fail(v_410) && success?(is-true(success?(1-proj-2-tuple(v_410))))) then cipherstatepack(1-proj-2-tuple(v_410),increment_nonce(2-proj-2-tuple(v_408))) else fail-any) else fail-any)) in
        {51}let v_412: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_407)) && success?(1-proj-3-tuple(v_407))) then (if (not-caught-fail(v_408) && success?(is-true(success?(1-proj-2-tuple(v_408))))) then (if not-caught-fail(v_409) then (if not-caught-fail(v_411) then (v_411,v_409) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_413: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_412),2-proj-3-tuple(v_407),3-proj-3-tuple(v_407)))) in
        {53}let v_414: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_412)) && success?(symmetricstatepack(1-proj-2-tuple(v_412),2-proj-3-tuple(v_407),3-proj-3-tuple(v_407)))) then (if (not-caught-fail(v_413) && success?(is-true(success?(1-proj-3-tuple(v_413))))) then symmetricstatepack(1-proj-3-tuple(v_413),2-proj-3-tuple(v_413),hash(3-proj-3-tuple(v_413),2-proj-2-tuple(v_412))) else fail-any) else fail-any)) in
        {54}let v_415: bitstring = catch-fail((if (not-caught-fail(v_407) && success?(is-true(success?(1-proj-3-tuple(v_407))))) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then (if not-caught-fail(v_414) then (v_414,2-proj-2-tuple(v_412)) else fail-any) else fail-any) else fail-any)) in
        {55}let v_416: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_415),2-proj-7-tuple(v_379),v_390,4-proj-7-tuple(v_379),5-proj-7-tuple(v_379),6-proj-7-tuple(v_379),7-proj-7-tuple(v_379))) in
        {56}let v_417: bitstring = catch-fail(concat3(v_391,2-proj-3-tuple(v_380),2-proj-2-tuple(v_415))) in
        {57}let v_418: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_415))) in
        {58}let v_419: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_418),zero)) in
        {59}let v_420: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_418),zero)) in
        {60}let v_421: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_418),zero)) in
        {61}let v_422: bitstring = catch-fail((if success?(2-proj-3-tuple(v_418)) then (if not-caught-fail(v_419) then (if not-caught-fail(v_420) then (if not-caught-fail(v_421) then (v_419,v_420,v_421) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_423: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_422)) then cipherstatepack(1-proj-3-tuple(v_422),minnonce) else fail-any)) in
        {63}let v_424: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_422)) then cipherstatepack(2-proj-3-tuple(v_422),minnonce) else fail-any)) in
        {64}let v_425: bitstring = catch-fail((if success?(1-proj-2-tuple(v_415)) then (if (not-caught-fail(v_418) && success?(is-true(success?(1-proj-3-tuple(v_418))))) then (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-3-tuple(v_422))))) then (if not-caught-fail(v_423) then (if not-caught-fail(v_424) then (1-proj-2-tuple(v_415),v_423,v_424) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let (hs_426: handshakestate,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_379) && success?(is-true(success?(1-proj-7-tuple(v_379))))) then (if (not-caught-fail(v_380) && success?(is-true(success?(1-proj-3-tuple(v_380))))) then (if not-caught-fail(v_388) then (if not-caught-fail(v_390) then (if not-caught-fail(v_391) then (if not-caught-fail(v_393) then (if not-caught-fail(v_399) then (if not-caught-fail(v_406) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-2-tuple(v_415))))) then (if not-caught-fail(v_416) then (if not-caught-fail(v_417) then (if (not-caught-fail(v_425) && success?(is-true(success?(1-proj-3-tuple(v_425))))) then (v_416,v_417,2-proj-3-tuple(v_425),3-proj-3-tuple(v_425)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {66}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {67}out(pub, message_a)
    ) | (
        {69}event LeakPsk(phase0,alice,bob);
        {70}out(pub, key_psk(alice,bob))
    ) | (
        {71}phase 1;
        {72}event LeakPsk(phase1,alice,bob);
        {73}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {74}let s_427: keypair = keypairpack(empty,empty) in
    (
        {75}let e_428: keypair = keypairpack(empty,empty) in
        {76}let v_429: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {77}let rs_430: key = getpublickey((if not-caught-fail(v_429) then keypairpack(validkey(v_429),key_s(charlie)) else fail-any)) in
        {78}let re_431: key = empty in
        {79}let v_432: bitstring = catch-fail(hash(somename,empty)) in
        {80}let v_433: key = catch-fail(v_432) in
        {81}let v_434: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {82}let v_435: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_432) then (if not-caught-fail(v_433) then (if not-caught-fail(v_434) then symmetricstatepack(v_434,v_433,v_432) else fail-any) else fail-any) else fail-any))) in
        {83}let v_436: symmetricstate = catch-fail((if success?((if not-caught-fail(v_432) then (if not-caught-fail(v_433) then (if not-caught-fail(v_434) then symmetricstatepack(v_434,v_433,v_432) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_435) && success?(is-true(success?(1-proj-3-tuple(v_435))))) then symmetricstatepack(1-proj-3-tuple(v_435),2-proj-3-tuple(v_435),hash(3-proj-3-tuple(v_435),empty)) else fail-any) else fail-any)) in
        {84}let v_437: bitstring = catch-fail(symmetricstateunpack(v_436)) in
        {85}let v_438: symmetricstate = catch-fail((if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-3-tuple(v_437))))) then symmetricstatepack(1-proj-3-tuple(v_437),2-proj-3-tuple(v_437),hash(3-proj-3-tuple(v_437),rs_430)) else fail-any)) in
        {86}let hs_439: handshakestate = (if not-caught-fail(v_436) then (if not-caught-fail(v_438) then handshakestatepack(v_438,s_427,e_428,rs_430,re_431,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {87}insert statestore(alice,charlie,sid,statepack_a(hs_439))
    ) | (
        {138}get statestore(=alice,=charlie,=sid,statepack_a(hs_440: handshakestate)) in
        {88}let v_441: bitstring = catch-fail(handshakestateunpack(hs_440)) in
        {89}let v_442: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_443: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_441))) in
        {91}let v_444: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_443),6-proj-7-tuple(v_441))) in
        {92}let v_445: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_443),6-proj-7-tuple(v_441))) in
        {93}let v_446: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_443),6-proj-7-tuple(v_441))) in
        {94}let v_447: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_441)) && success?(2-proj-3-tuple(v_443))) then (if not-caught-fail(v_444) then (if not-caught-fail(v_445) then (if not-caught-fail(v_446) then (v_444,v_445,v_446) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_448: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_443),1-proj-3-tuple(v_447),3-proj-3-tuple(v_443)))) in
        {96}let v_449: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_447)) && success?(symmetricstatepack(1-proj-3-tuple(v_443),1-proj-3-tuple(v_447),3-proj-3-tuple(v_443)))) then (if (not-caught-fail(v_448) && success?(is-true(success?(1-proj-3-tuple(v_448))))) then symmetricstatepack(1-proj-3-tuple(v_448),2-proj-3-tuple(v_448),hash(3-proj-3-tuple(v_448),2-proj-3-tuple(v_447))) else fail-any) else fail-any))) in
        {97}let v_450: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_441)) && success?(1-proj-7-tuple(v_441))) then (if (not-caught-fail(v_443) && success?(is-true(success?(1-proj-3-tuple(v_443))))) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-3-tuple(v_449))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_447)) then cipherstatepack(3-proj-3-tuple(v_447),minnonce) else fail-any),1-proj-3-tuple(v_447),3-proj-3-tuple(v_449)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_451: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {99}let v_452: keypair = catch-fail((if not-caught-fail(v_451) then keypairpack(validkey(v_451),key_e(alice,charlie,sid)) else fail-any)) in
        {100}let v_453: bitstring = catch-fail(getpublickey(v_452)) in
        {101}let v_454: bitstring = catch-fail(symmetricstateunpack(v_450)) in
        {102}let v_455: symmetricstate = catch-fail((if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack(1-proj-3-tuple(v_454),2-proj-3-tuple(v_454),hash(3-proj-3-tuple(v_454),v_453)) else fail-any)) in
        {103}let v_456: bitstring = catch-fail(symmetricstateunpack(v_455)) in
        {104}let v_457: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_456),getpublickey(v_452))) in
        {105}let v_458: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_456),getpublickey(v_452))) in
        {106}let v_459: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_456),getpublickey(v_452))) in
        {107}let v_460: bitstring = catch-fail((if (success?(getpublickey(v_452)) && success?(2-proj-3-tuple(v_456))) then (if not-caught-fail(v_457) then (if not-caught-fail(v_458) then (if not-caught-fail(v_459) then (v_457,v_458,v_459) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_461: symmetricstate = catch-fail((if success?(getpublickey(v_452)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-3-tuple(v_456))))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-3-tuple(v_460))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_460)) then cipherstatepack(2-proj-3-tuple(v_460),minnonce) else fail-any),1-proj-3-tuple(v_460),3-proj-3-tuple(v_456)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_462: bitstring = catch-fail(keypairunpack(v_452)) in
        {110}let v_463: bitstring = catch-fail(symmetricstateunpack(v_461)) in
        {111}let v_464: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_463),(if success?(4-proj-7-tuple(v_441)) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-2-tuple(v_462))))) then dhexp(2-proj-2-tuple(v_462),4-proj-7-tuple(v_441)) else fail-any) else fail-any))) in
        {112}let v_465: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_463),(if success?(4-proj-7-tuple(v_441)) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-2-tuple(v_462))))) then dhexp(2-proj-2-tuple(v_462),4-proj-7-tuple(v_441)) else fail-any) else fail-any))) in
        {113}let v_466: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_463),(if success?(4-proj-7-tuple(v_441)) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-2-tuple(v_462))))) then dhexp(2-proj-2-tuple(v_462),4-proj-7-tuple(v_441)) else fail-any) else fail-any))) in
        {114}let v_467: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_441)) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-2-tuple(v_462))))) then dhexp(2-proj-2-tuple(v_462),4-proj-7-tuple(v_441)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_463))) then (if not-caught-fail(v_464) then (if not-caught-fail(v_465) then (if not-caught-fail(v_466) then (v_464,v_465,v_466) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_468: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_441)) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-2-tuple(v_462))))) then dhexp(2-proj-2-tuple(v_462),4-proj-7-tuple(v_441)) else fail-any) else fail-any)) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-3-tuple(v_467))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_467)) then cipherstatepack(2-proj-3-tuple(v_467),minnonce) else fail-any),1-proj-3-tuple(v_467),3-proj-3-tuple(v_463)) else fail-any) else fail-any) else fail-any)) in
        {116}let v_469: bitstring = catch-fail(symmetricstateunpack(v_468)) in
        {117}let v_470: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_469))) in
        {118}let v_471: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_470),2-proj-2-tuple(v_470),3-proj-3-tuple(v_469),msg_a(alice,charlie,sid))) in
        {119}let v_472: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_469))) in
        {120}let v_473: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_470))) && success?(1-proj-3-tuple(v_469))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then cipherstatepack(1-proj-2-tuple(v_472),increment_nonce(2-proj-2-tuple(v_470))) else fail-any) else fail-any)) in
        {121}let v_474: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_469)) && success?(1-proj-3-tuple(v_469))) then (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-2-tuple(v_470))))) then (if not-caught-fail(v_471) then (if not-caught-fail(v_473) then (v_473,v_471) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_475: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_474),2-proj-3-tuple(v_469),3-proj-3-tuple(v_469)))) in
        {123}let v_476: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_474)) && success?(symmetricstatepack(1-proj-2-tuple(v_474),2-proj-3-tuple(v_469),3-proj-3-tuple(v_469)))) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then symmetricstatepack(1-proj-3-tuple(v_475),2-proj-3-tuple(v_475),hash(3-proj-3-tuple(v_475),2-proj-2-tuple(v_474))) else fail-any) else fail-any)) in
        {124}let v_477: bitstring = catch-fail((if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then (if not-caught-fail(v_476) then (v_476,2-proj-2-tuple(v_474)) else fail-any) else fail-any) else fail-any)) in
        {125}let v_478: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_477),2-proj-7-tuple(v_441),v_452,4-proj-7-tuple(v_441),5-proj-7-tuple(v_441),6-proj-7-tuple(v_441),7-proj-7-tuple(v_441))) in
        {126}let v_479: bitstring = catch-fail(concat3(v_453,2-proj-3-tuple(v_442),2-proj-2-tuple(v_477))) in
        {127}let v_480: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_477))) in
        {128}let v_481: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_480),zero)) in
        {129}let v_482: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_480),zero)) in
        {130}let v_483: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_480),zero)) in
        {131}let v_484: bitstring = catch-fail((if success?(2-proj-3-tuple(v_480)) then (if not-caught-fail(v_481) then (if not-caught-fail(v_482) then (if not-caught-fail(v_483) then (v_481,v_482,v_483) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_485: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_484)) then cipherstatepack(1-proj-3-tuple(v_484),minnonce) else fail-any)) in
        {133}let v_486: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_484)) then cipherstatepack(2-proj-3-tuple(v_484),minnonce) else fail-any)) in
        {134}let v_487: bitstring = catch-fail((if success?(1-proj-2-tuple(v_477)) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-3-tuple(v_480))))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-3-tuple(v_484))))) then (if not-caught-fail(v_485) then (if not-caught-fail(v_486) then (1-proj-2-tuple(v_477),v_485,v_486) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let (hs_488: handshakestate,message_a_489: bitstring,cs1_490: cipherstate,cs2_491: cipherstate) = (if (not-caught-fail(v_441) && success?(is-true(success?(1-proj-7-tuple(v_441))))) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-3-tuple(v_442))))) then (if not-caught-fail(v_450) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then (if not-caught-fail(v_455) then (if not-caught-fail(v_461) then (if not-caught-fail(v_468) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then (if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (v_478,v_479,2-proj-3-tuple(v_487),3-proj-3-tuple(v_487)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {136}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {137}out(pub, message_a_489)
    ) | (
        {139}event LeakPsk(phase0,alice,charlie);
        {140}out(pub, key_psk(alice,charlie))
    ) | (
        {141}phase 1;
        {142}event LeakPsk(phase1,alice,charlie);
        {143}out(pub, key_psk(alice,charlie))
    ) | (
        0
    )
) | (
    {144}let v_492: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {145}let s_493: keypair = (if not-caught-fail(v_492) then keypairpack(validkey(v_492),key_s(bob)) else fail-any) in
    {146}out(pub, getpublickey(s_493));
    (
        {147}let e_494: keypair = keypairpack(empty,empty) in
        {148}let rs_495: key = empty in
        {149}let re_496: key = empty in
        {150}let v_497: bitstring = catch-fail(hash(somename,empty)) in
        {151}let v_498: key = catch-fail(v_497) in
        {152}let v_499: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {153}let v_500: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then symmetricstatepack(v_499,v_498,v_497) else fail-any) else fail-any) else fail-any))) in
        {154}let v_501: symmetricstate = catch-fail((if success?((if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then symmetricstatepack(v_499,v_498,v_497) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack(1-proj-3-tuple(v_500),2-proj-3-tuple(v_500),hash(3-proj-3-tuple(v_500),empty)) else fail-any) else fail-any)) in
        {155}let v_502: bitstring = catch-fail(symmetricstateunpack(v_501)) in
        {156}let v_503: symmetricstate = catch-fail((if success?(getpublickey(s_493)) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),getpublickey(s_493))) else fail-any) else fail-any)) in
        {157}let hs_504: handshakestate = (if not-caught-fail(v_501) then (if not-caught-fail(v_503) then handshakestatepack(v_503,s_493,e_494,rs_495,re_496,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {158}insert statestore(bob,alice,sid,statepack_a(hs_504))
    ) | (
        {209}get statestore(=bob,=alice,=sid,statepack_a(hs_505: handshakestate)) in
        {159}in(pub, message_a_506: bitstring);
        {160}let v_507: bitstring = catch-fail(handshakestateunpack(hs_505)) in
        {161}let v_508: bitstring = catch-fail(deconcat3(message_a_506)) in
        {162}let v_509: bool = catch-fail(true) in
        {163}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_507))) in
        {164}let v_511: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_510),6-proj-7-tuple(v_507))) in
        {165}let v_512: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_510),6-proj-7-tuple(v_507))) in
        {166}let v_513: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_510),6-proj-7-tuple(v_507))) in
        {167}let v_514: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_507)) && success?(2-proj-3-tuple(v_510))) then (if not-caught-fail(v_511) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (v_511,v_512,v_513) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {168}let v_515: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_510),1-proj-3-tuple(v_514),3-proj-3-tuple(v_510)))) in
        {169}let v_516: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_514)) && success?(symmetricstatepack(1-proj-3-tuple(v_510),1-proj-3-tuple(v_514),3-proj-3-tuple(v_510)))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then symmetricstatepack(1-proj-3-tuple(v_515),2-proj-3-tuple(v_515),hash(3-proj-3-tuple(v_515),2-proj-3-tuple(v_514))) else fail-any) else fail-any))) in
        {170}let v_517: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_507)) && success?(1-proj-7-tuple(v_507))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_514)) then cipherstatepack(3-proj-3-tuple(v_514),minnonce) else fail-any),1-proj-3-tuple(v_514),3-proj-3-tuple(v_516)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {171}let v_518: key = catch-fail(1-proj-3-tuple(v_508)) in
        {172}let v_519: bitstring = catch-fail(symmetricstateunpack(v_517)) in
        {173}let v_520: symmetricstate = catch-fail((if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then symmetricstatepack(1-proj-3-tuple(v_519),2-proj-3-tuple(v_519),hash(3-proj-3-tuple(v_519),v_518)) else fail-any)) in
        {174}let v_521: bitstring = catch-fail(symmetricstateunpack(v_520)) in
        {175}let v_522: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_521),v_518)) in
        {176}let v_523: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_521),v_518)) in
        {177}let v_524: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_521),v_518)) in
        {178}let v_525: bitstring = catch-fail((if success?(2-proj-3-tuple(v_521)) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (v_522,v_523,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_526: symmetricstate = catch-fail((if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_525)) then cipherstatepack(2-proj-3-tuple(v_525),minnonce) else fail-any),1-proj-3-tuple(v_525),3-proj-3-tuple(v_521)) else fail-any) else fail-any)) in
        {180}let v_527: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_507))) in
        {181}let v_528: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {182}let v_529: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_528),(if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_518) else fail-any) else fail-any))) in
        {183}let v_530: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_528),(if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_518) else fail-any) else fail-any))) in
        {184}let v_531: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_528),(if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_518) else fail-any) else fail-any))) in
        {185}let v_532: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_518) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_528))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then (v_529,v_530,v_531) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {186}let v_533: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_518) else fail-any) else fail-any)) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_532)) then cipherstatepack(2-proj-3-tuple(v_532),minnonce) else fail-any),1-proj-3-tuple(v_532),3-proj-3-tuple(v_528)) else fail-any) else fail-any) else fail-any)) in
        {187}let v_534: bitstring = catch-fail(symmetricstateunpack(v_533)) in
        {188}let v_535: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_534))) in
        {189}let v_536: aead = catch-fail(decrypt(1-proj-2-tuple(v_535),2-proj-2-tuple(v_535),3-proj-3-tuple(v_534),3-proj-3-tuple(v_508))) in
        {190}let v_537: bitstring = catch-fail(aeadunpack(v_536)) in
        {191}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_534))) in
        {192}let v_539: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_535))) && success?(1-proj-3-tuple(v_534))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then cipherstatepack(1-proj-2-tuple(v_538),increment_nonce(2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {193}let v_540: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_508)) && (success?(3-proj-3-tuple(v_534)) && success?(1-proj-3-tuple(v_534)))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if not-caught-fail(v_539) then (v_539,3-proj-3-tuple(v_537),1-proj-3-tuple(v_537)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_541: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_534),3-proj-3-tuple(v_534)))) in
        {195}let v_542: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_508)) && success?(symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_534),3-proj-3-tuple(v_534)))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),3-proj-3-tuple(v_508))) else fail-any) else fail-any)) in
        {196}let v_543: bitstring = catch-fail((if success?(3-proj-3-tuple(v_508)) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if not-caught-fail(v_542) then (v_542,2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_544: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_543),2-proj-7-tuple(v_507),3-proj-7-tuple(v_507),4-proj-7-tuple(v_507),v_518,6-proj-7-tuple(v_507),7-proj-7-tuple(v_507))) in
        {198}let v_545: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_543))) in
        {199}let v_546: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_545),zero)) in
        {200}let v_547: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_545),zero)) in
        {201}let v_548: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_545),zero)) in
        {202}let v_549: bitstring = catch-fail((if success?(2-proj-3-tuple(v_545)) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (v_546,v_547,v_548) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_550: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_549)) then cipherstatepack(1-proj-3-tuple(v_549),minnonce) else fail-any)) in
        {204}let v_551: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_549)) then cipherstatepack(2-proj-3-tuple(v_549),minnonce) else fail-any)) in
        {205}let v_552: bitstring = catch-fail((if success?(1-proj-3-tuple(v_543)) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (1-proj-3-tuple(v_543),v_550,v_551) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let (hs_553: handshakestate,plaintext_a: bitstring,valid: bool,cs1_554: cipherstate,cs2_555: cipherstate) = (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-7-tuple(v_507))))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then (if not-caught-fail(v_509) then (if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (if not-caught-fail(v_520) then (if not-caught-fail(v_526) then (if not-caught-fail(v_533) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (v_509 && 3-proj-3-tuple(v_543)) then (if not-caught-fail(v_544) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (v_544,2-proj-3-tuple(v_543),true,2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {207}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {208}event RecvEnd(valid)
    ) | (
        {210}event LeakPsk(phase0,alice,bob);
        {211}out(pub, key_psk(alice,bob))
    ) | (
        {212}phase 1;
        {213}event LeakPsk(phase1,alice,bob);
        {214}out(pub, key_psk(alice,bob))
    ) | (
        {215}event LeakS(phase0,bob);
        {216}out(pub, key_s(bob))
    ) | (
        {217}phase 1;
        {218}event LeakS(phase1,bob);
        {219}out(pub, key_s(bob))
    )
) | (
    {220}let v_556: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {221}let s_557: keypair = (if not-caught-fail(v_556) then keypairpack(validkey(v_556),key_s(bob)) else fail-any) in
    {222}out(pub, getpublickey(s_557));
    (
        {223}let e_558: keypair = keypairpack(empty,empty) in
        {224}let rs_559: key = empty in
        {225}let re_560: key = empty in
        {226}let v_561: bitstring = catch-fail(hash(somename,empty)) in
        {227}let v_562: key = catch-fail(v_561) in
        {228}let v_563: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {229}let v_564: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any))) in
        {230}let v_565: symmetricstate = catch-fail((if success?((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),empty)) else fail-any) else fail-any)) in
        {231}let v_566: bitstring = catch-fail(symmetricstateunpack(v_565)) in
        {232}let v_567: symmetricstate = catch-fail((if success?(getpublickey(s_557)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_566),hash(3-proj-3-tuple(v_566),getpublickey(s_557))) else fail-any) else fail-any)) in
        {233}let hs_568: handshakestate = (if not-caught-fail(v_565) then (if not-caught-fail(v_567) then handshakestatepack(v_567,s_557,e_558,rs_559,re_560,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {234}insert statestore(bob,charlie,sid,statepack_a(hs_568))
    ) | (
        {285}get statestore(=bob,=charlie,=sid,statepack_a(hs_569: handshakestate)) in
        {235}in(pub, message_a_570: bitstring);
        {236}let v_571: bitstring = catch-fail(handshakestateunpack(hs_569)) in
        {237}let v_572: bitstring = catch-fail(deconcat3(message_a_570)) in
        {238}let v_573: bool = catch-fail(true) in
        {239}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_571))) in
        {240}let v_575: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_574),6-proj-7-tuple(v_571))) in
        {241}let v_576: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_574),6-proj-7-tuple(v_571))) in
        {242}let v_577: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_574),6-proj-7-tuple(v_571))) in
        {243}let v_578: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_571)) && success?(2-proj-3-tuple(v_574))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_575,v_576,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_579: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_574),1-proj-3-tuple(v_578),3-proj-3-tuple(v_574)))) in
        {245}let v_580: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_578)) && success?(symmetricstatepack(1-proj-3-tuple(v_574),1-proj-3-tuple(v_578),3-proj-3-tuple(v_574)))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),hash(3-proj-3-tuple(v_579),2-proj-3-tuple(v_578))) else fail-any) else fail-any))) in
        {246}let v_581: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_571)) && success?(1-proj-7-tuple(v_571))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_578)) then cipherstatepack(3-proj-3-tuple(v_578),minnonce) else fail-any),1-proj-3-tuple(v_578),3-proj-3-tuple(v_580)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_582: key = catch-fail(1-proj-3-tuple(v_572)) in
        {248}let v_583: bitstring = catch-fail(symmetricstateunpack(v_581)) in
        {249}let v_584: symmetricstate = catch-fail((if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack(1-proj-3-tuple(v_583),2-proj-3-tuple(v_583),hash(3-proj-3-tuple(v_583),v_582)) else fail-any)) in
        {250}let v_585: bitstring = catch-fail(symmetricstateunpack(v_584)) in
        {251}let v_586: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_585),v_582)) in
        {252}let v_587: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_585),v_582)) in
        {253}let v_588: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_585),v_582)) in
        {254}let v_589: bitstring = catch-fail((if success?(2-proj-3-tuple(v_585)) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (v_586,v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_590: symmetricstate = catch-fail((if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_589)) then cipherstatepack(2-proj-3-tuple(v_589),minnonce) else fail-any),1-proj-3-tuple(v_589),3-proj-3-tuple(v_585)) else fail-any) else fail-any)) in
        {256}let v_591: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_571))) in
        {257}let v_592: bitstring = catch-fail(symmetricstateunpack(v_590)) in
        {258}let v_593: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_592),(if success?(2-proj-7-tuple(v_571)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then dhexp(2-proj-2-tuple(v_591),v_582) else fail-any) else fail-any))) in
        {259}let v_594: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_592),(if success?(2-proj-7-tuple(v_571)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then dhexp(2-proj-2-tuple(v_591),v_582) else fail-any) else fail-any))) in
        {260}let v_595: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_592),(if success?(2-proj-7-tuple(v_571)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then dhexp(2-proj-2-tuple(v_591),v_582) else fail-any) else fail-any))) in
        {261}let v_596: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_571)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then dhexp(2-proj-2-tuple(v_591),v_582) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_592))) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then (v_593,v_594,v_595) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_597: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_571)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then dhexp(2-proj-2-tuple(v_591),v_582) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_596)) then cipherstatepack(2-proj-3-tuple(v_596),minnonce) else fail-any),1-proj-3-tuple(v_596),3-proj-3-tuple(v_592)) else fail-any) else fail-any) else fail-any)) in
        {263}let v_598: bitstring = catch-fail(symmetricstateunpack(v_597)) in
        {264}let v_599: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_598))) in
        {265}let v_600: aead = catch-fail(decrypt(1-proj-2-tuple(v_599),2-proj-2-tuple(v_599),3-proj-3-tuple(v_598),3-proj-3-tuple(v_572))) in
        {266}let v_601: bitstring = catch-fail(aeadunpack(v_600)) in
        {267}let v_602: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_598))) in
        {268}let v_603: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_599))) && success?(1-proj-3-tuple(v_598))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then cipherstatepack(1-proj-2-tuple(v_602),increment_nonce(2-proj-2-tuple(v_599))) else fail-any) else fail-any)) in
        {269}let v_604: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_572)) && (success?(3-proj-3-tuple(v_598)) && success?(1-proj-3-tuple(v_598)))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if not-caught-fail(v_603) then (v_603,3-proj-3-tuple(v_601),1-proj-3-tuple(v_601)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_605: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_598),3-proj-3-tuple(v_598)))) in
        {271}let v_606: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_572)) && success?(symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_598),3-proj-3-tuple(v_598)))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_605),hash(3-proj-3-tuple(v_605),3-proj-3-tuple(v_572))) else fail-any) else fail-any)) in
        {272}let v_607: bitstring = catch-fail((if success?(3-proj-3-tuple(v_572)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_606) then (v_606,2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_608: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_607),2-proj-7-tuple(v_571),3-proj-7-tuple(v_571),4-proj-7-tuple(v_571),v_582,6-proj-7-tuple(v_571),7-proj-7-tuple(v_571))) in
        {274}let v_609: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_607))) in
        {275}let v_610: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_609),zero)) in
        {276}let v_611: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_609),zero)) in
        {277}let v_612: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_609),zero)) in
        {278}let v_613: bitstring = catch-fail((if success?(2-proj-3-tuple(v_609)) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_610,v_611,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {279}let v_614: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_613)) then cipherstatepack(1-proj-3-tuple(v_613),minnonce) else fail-any)) in
        {280}let v_615: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_613)) then cipherstatepack(2-proj-3-tuple(v_613),minnonce) else fail-any)) in
        {281}let v_616: bitstring = catch-fail((if success?(1-proj-3-tuple(v_607)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (1-proj-3-tuple(v_607),v_614,v_615) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {282}let (hs_617: handshakestate,plaintext_a_618: bitstring,valid_619: bool,cs1_620: cipherstate,cs2_621: cipherstate) = (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-7-tuple(v_571))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (if not-caught-fail(v_590) then (if not-caught-fail(v_597) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if (v_573 && 3-proj-3-tuple(v_607)) then (if not-caught-fail(v_608) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (v_608,2-proj-3-tuple(v_607),true,2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {283}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_618);
        {284}event RecvEnd(valid_619)
    ) | (
        {286}event LeakPsk(phase0,charlie,bob);
        {287}out(pub, key_psk(charlie,bob))
    ) | (
        {288}phase 1;
        {289}event LeakPsk(phase1,charlie,bob);
        {290}out(pub, key_psk(charlie,bob))
    ) | (
        {291}event LeakS(phase0,bob);
        {292}out(pub, key_s(bob))
    ) | (
        {293}phase 1;
        {294}event LeakS(phase1,bob);
        {295}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_731,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_731,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 31 rules in the queue.
400 rules inserted. The rule base contains 378 rules. 42 rules in the queue.
600 rules inserted. The rule base contains 523 rules. 72 rules in the queue.
800 rules inserted. The rule base contains 541 rules. 10 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30774894]),msg_a(alice,bob,sid[!1 = @sid_30774894]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30774895]),msg_a(alice,bob,sid[!1 = @sid_30774894])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_731,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30774903]),msg_a(alice,bob,sid[!1 = @sid_30774903]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30774904]),msg_a(alice,bob,sid[!1 = @sid_30774903])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_731,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_731,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30774913]),msg_a(alice,bob,sid[!1 = @sid_30774913]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30774914]),msg_a(alice,bob,sid[!1 = @sid_30774913])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_731,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30774923]),msg_a(alice,bob,sid[!1 = @sid_30774923]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30774924]),msg_a(alice,bob,sid[!1 = @sid_30774923])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30774932]),msg_a(alice,bob,sid[!1 = @sid_30774932]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30774933]),msg_a(alice,bob,sid[!1 = @sid_30774932])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30774940]),msg_a(alice,bob,sid[!1 = @sid_30774940]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30774940]))
Abbreviations:
sid_30775052 = sid[!1 = @sid_30775028]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30775052,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775052,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775052,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775052),msg_a(alice,bob,sid_30775052)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {72}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {73}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {146}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {215}.
So the message key_s(bob) may be sent on channel pub at output {216}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775052),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775052),g))),msg_a(alice,bob,sid_30775052)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30775052) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30775052)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775054]),msg_a(alice,bob,sid[!1 = @sid_30775054]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775054]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775056]),msg_a(alice,bob,sid[!1 = @sid_30775056]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775056]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775058]),msg_a(alice,bob,sid[!1 = @sid_30775058]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775058]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775061]),msg_a(alice,bob,sid[!1 = @sid_30775061]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775061]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775079]),msg_a(alice,bob,sid[!1 = @sid_30775079]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775079]))
Abbreviations:
sid_30775194 = sid[!1 = @sid_30775170]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30775194,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775194,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775194,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775194),msg_a(alice,bob,sid_30775194)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {72}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {73}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {146}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {215}.
So the message key_s(bob) may be sent on channel pub at output {216}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775194),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775194),g))),msg_a(alice,bob,sid_30775194)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30775194) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30775194)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775196]),msg_a(alice,bob,sid[!1 = @sid_30775196]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775196]))
Abbreviations:
sid_30775308 = sid[!1 = @sid_30775284]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30775308,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775308,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775308,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775308),msg_a(alice,bob,sid_30775308)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {72}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {73}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {146}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {215}.
So the message key_s(bob) may be sent on channel pub at output {216}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775308),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775308),g))),msg_a(alice,bob,sid_30775308)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30775308) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30775308)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775309]),msg_a(alice,bob,sid[!1 = @sid_30775309]))) -> end(RecvEnd(true))
Abbreviations:
sid_30775337 = sid[!1 = @sid_30775313]
sid_30775338 = sid[!1 = @sid_30775330]

1. The entry statestore(bob,alice,sid_30775338,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {158}.
table(statestore(bob,alice,sid_30775338,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,bob,sid_30775337,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775337,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775337,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775337),msg_a(alice,bob,sid_30775337)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775337),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775337),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775337),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775337),g))),msg_a(alice,bob,sid_30775337))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775337),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775337),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775337),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775337),g))),msg_a(alice,bob,sid_30775337)))).

4. The entry statestore(bob,alice,sid_30775338,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {209}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775337),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775337),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775337),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775337),g))),msg_a(alice,bob,sid_30775337))) that may be sent on channel pub by 3 may be received at input {159}.
So event RecvEnd(true) may be executed at {208}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
