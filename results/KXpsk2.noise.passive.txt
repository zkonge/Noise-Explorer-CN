File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KXpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KXpsk2.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "KXpsk2.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "KXpsk2.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "KXpsk2.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "KXpsk2.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 287, character 6:
Warning: identifier s rebound.
File "KXpsk2.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 288, characters 26-27:
Warning: identifier ns rebound.
File "KXpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "KXpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 322, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 330, characters 6-7:
Warning: identifier re rebound.
File "KXpsk2.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 335, characters 26-27:
Warning: identifier ne rebound.
File "KXpsk2.noise.passive.pv", line 335, characters 40-45:
Warning: identifier valid1 rebound.
File "KXpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier rs rebound.
File "KXpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 519, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 521, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 512, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 506, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 330, characters 6-7:
Warning: identifier re rebound.
File "KXpsk2.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 335, characters 26-27:
Warning: identifier ne rebound.
File "KXpsk2.noise.passive.pv", line 335, characters 40-45:
Warning: identifier valid1 rebound.
File "KXpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier rs rebound.
File "KXpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KXpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KXpsk2.noise.passive.pv", line 499, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "KXpsk2.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "KXpsk2.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 573, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 565, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "KXpsk2.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "KXpsk2.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 287, character 6:
Warning: identifier s rebound.
File "KXpsk2.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 288, characters 26-27:
Warning: identifier ns rebound.
File "KXpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "KXpsk2.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KXpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KXpsk2.noise.passive.pv", line 553, characters 8-9:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "KXpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "KXpsk2.noise.passive.pv", line 322, characters 7-8:
Warning: identifier hs rebound.
File "KXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KXpsk2.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_563: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_564: keypair = (if not-caught-fail(v_563) then keypairpack(validkey(v_563),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_564));
    (
        {7}let e_565: keypair = keypairpack(empty,empty) in
        {8}let rs_566: key = empty in
        {9}let re_567: key = empty in
        {10}let v_568: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_569: key = catch-fail(v_568) in
        {12}let v_570: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_571: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then symmetricstatepack(v_570,v_569,v_568) else fail-any) else fail-any) else fail-any))) in
        {14}let v_572: symmetricstate = catch-fail((if success?((if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then symmetricstatepack(v_570,v_569,v_568) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),empty)) else fail-any) else fail-any)) in
        {15}let v_573: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {16}let v_574: symmetricstate = catch-fail((if success?(getpublickey(s_564)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),getpublickey(s_564))) else fail-any) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_572) then (if not-caught-fail(v_574) then handshakestatepack(v_574,s_564,e_565,rs_566,re_567,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {47}get statestore(=alice,=bob,=sid,statepack_a(hs_575: handshakestate)) in
        {19}let v_576: bitstring = catch-fail(handshakestateunpack(hs_575)) in
        {20}let v_577: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_578: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_579: keypair = catch-fail((if not-caught-fail(v_578) then keypairpack(validkey(v_578),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_580: bitstring = catch-fail(getpublickey(v_579)) in
        {24}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_576))) in
        {25}let v_582: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_576)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),v_580)) else fail-any) else fail-any)) in
        {26}let v_583: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {27}let v_584: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_583),getpublickey(v_579))) in
        {28}let v_585: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_583),getpublickey(v_579))) in
        {29}let v_586: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_583),getpublickey(v_579))) in
        {30}let v_587: bitstring = catch-fail((if (success?(getpublickey(v_579)) && success?(2-proj-3-tuple(v_583))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_584,v_585,v_586) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_588: symmetricstate = catch-fail((if success?(getpublickey(v_579)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_587)) then cipherstatepack(2-proj-3-tuple(v_587),minnonce) else fail-any),1-proj-3-tuple(v_587),3-proj-3-tuple(v_583)) else fail-any) else fail-any) else fail-any)) in
        {32}let v_589: bitstring = catch-fail(symmetricstateunpack(v_588)) in
        {33}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_589))) in
        {34}let v_591: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_590),2-proj-2-tuple(v_590),3-proj-3-tuple(v_589),msg_a(alice,bob,sid))) in
        {35}let v_592: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_589))) in
        {36}let v_593: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_590))) && success?(1-proj-3-tuple(v_589))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then cipherstatepack(1-proj-2-tuple(v_592),increment_nonce(2-proj-2-tuple(v_590))) else fail-any) else fail-any)) in
        {37}let v_594: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_589)) && success?(1-proj-3-tuple(v_589))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_593) then (v_593,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_595: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_594),2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)))) in
        {39}let v_596: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_594)) && success?(symmetricstatepack(1-proj-2-tuple(v_594),2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack(1-proj-3-tuple(v_595),2-proj-3-tuple(v_595),hash(3-proj-3-tuple(v_595),2-proj-2-tuple(v_594))) else fail-any) else fail-any)) in
        {40}let v_597: bitstring = catch-fail((if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then (if not-caught-fail(v_596) then (v_596,2-proj-2-tuple(v_594)) else fail-any) else fail-any) else fail-any)) in
        {41}let v_598: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_597),2-proj-7-tuple(v_576),v_579,4-proj-7-tuple(v_576),5-proj-7-tuple(v_576),6-proj-7-tuple(v_576),7-proj-7-tuple(v_576))) in
        {42}let v_599: bitstring = catch-fail(concat3(v_580,2-proj-3-tuple(v_577),2-proj-2-tuple(v_597))) in
        {43}let (hs_600: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-7-tuple(v_576))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_582) then (if not-caught-fail(v_588) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (v_598,v_599) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {44}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {45}insert statestore(alice,bob,sid,statepack_b(hs_600));
        {46}out(pub, message_a)
    ) | (
        {124}get statestore(=alice,=bob,=sid,statepack_b(hs_601: handshakestate)) in
        {48}in(pub, message_b: bitstring);
        {49}let v_602: bitstring = catch-fail(handshakestateunpack(hs_601)) in
        {50}let v_603: bitstring = catch-fail(deconcat3(message_b)) in
        {51}let v_604: bool = catch-fail(true) in
        {52}let v_605: key = catch-fail(1-proj-3-tuple(v_603)) in
        {53}let v_606: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_602))) in
        {54}let v_607: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_602)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then symmetricstatepack(1-proj-3-tuple(v_606),2-proj-3-tuple(v_606),hash(3-proj-3-tuple(v_606),v_605)) else fail-any) else fail-any)) in
        {55}let v_608: bitstring = catch-fail(symmetricstateunpack(v_607)) in
        {56}let v_609: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_608),v_605)) in
        {57}let v_610: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_608),v_605)) in
        {58}let v_611: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_608),v_605)) in
        {59}let v_612: bitstring = catch-fail((if success?(2-proj-3-tuple(v_608)) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (v_609,v_610,v_611) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_613: symmetricstate = catch-fail((if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_612)) then cipherstatepack(2-proj-3-tuple(v_612),minnonce) else fail-any),1-proj-3-tuple(v_612),3-proj-3-tuple(v_608)) else fail-any) else fail-any)) in
        {61}let v_614: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_602))) in
        {62}let v_615: bitstring = catch-fail(symmetricstateunpack(v_613)) in
        {63}let v_616: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_615),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_605) else fail-any) else fail-any))) in
        {64}let v_617: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_615),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_605) else fail-any) else fail-any))) in
        {65}let v_618: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_615),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_605) else fail-any) else fail-any))) in
        {66}let v_619: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_605) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_615))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (v_616,v_617,v_618) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {67}let v_620: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_605) else fail-any) else fail-any)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_619)) then cipherstatepack(2-proj-3-tuple(v_619),minnonce) else fail-any),1-proj-3-tuple(v_619),3-proj-3-tuple(v_615)) else fail-any) else fail-any) else fail-any)) in
        {68}let v_621: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_602))) in
        {69}let v_622: bitstring = catch-fail(symmetricstateunpack(v_620)) in
        {70}let v_623: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_622),(if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_605) else fail-any) else fail-any))) in
        {71}let v_624: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_622),(if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_605) else fail-any) else fail-any))) in
        {72}let v_625: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_622),(if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_605) else fail-any) else fail-any))) in
        {73}let v_626: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_605) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_622))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (v_623,v_624,v_625) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_627: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_605) else fail-any) else fail-any)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_626)) then cipherstatepack(2-proj-3-tuple(v_626),minnonce) else fail-any),1-proj-3-tuple(v_626),3-proj-3-tuple(v_622)) else fail-any) else fail-any) else fail-any)) in
        {75}let v_628: bitstring = catch-fail(symmetricstateunpack(v_627)) in
        {76}let v_629: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_628))) in
        {77}let v_630: aead = catch-fail(decrypt(1-proj-2-tuple(v_629),2-proj-2-tuple(v_629),3-proj-3-tuple(v_628),2-proj-3-tuple(v_603))) in
        {78}let v_631: bitstring = catch-fail(aeadunpack(v_630)) in
        {79}let v_632: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_628))) in
        {80}let v_633: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_629))) && success?(1-proj-3-tuple(v_628))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then cipherstatepack(1-proj-2-tuple(v_632),increment_nonce(2-proj-2-tuple(v_629))) else fail-any) else fail-any)) in
        {81}let v_634: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_603)) && (success?(3-proj-3-tuple(v_628)) && success?(1-proj-3-tuple(v_628)))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then (if not-caught-fail(v_630) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if not-caught-fail(v_633) then (v_633,3-proj-3-tuple(v_631),1-proj-3-tuple(v_631)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let v_635: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_628),3-proj-3-tuple(v_628)))) in
        {83}let v_636: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_603)) && success?(symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_628),3-proj-3-tuple(v_628)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_635),hash(3-proj-3-tuple(v_635),2-proj-3-tuple(v_603))) else fail-any) else fail-any)) in
        {84}let v_637: bitstring = catch-fail((if success?(2-proj-3-tuple(v_603)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_636) then (v_636,2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_638: key = catch-fail(2-proj-3-tuple(v_637)) in
        {86}let v_639: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_602))) in
        {87}let v_640: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_637))) in
        {88}let v_641: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_638) else fail-any) else fail-any))) in
        {89}let v_642: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_638) else fail-any) else fail-any))) in
        {90}let v_643: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_638) else fail-any) else fail-any))) in
        {91}let v_644: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_638) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_640))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (v_641,v_642,v_643) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_645: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_638) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_637))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_644)) then cipherstatepack(2-proj-3-tuple(v_644),minnonce) else fail-any),1-proj-3-tuple(v_644),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any)) in
        {93}let v_646: bitstring = catch-fail(symmetricstateunpack(v_645)) in
        {94}let v_647: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_646),6-proj-7-tuple(v_602))) in
        {95}let v_648: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_646),6-proj-7-tuple(v_602))) in
        {96}let v_649: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_646),6-proj-7-tuple(v_602))) in
        {97}let v_650: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_602)) && success?(2-proj-3-tuple(v_646))) then (if not-caught-fail(v_647) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (v_647,v_648,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_651: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_646),1-proj-3-tuple(v_650),3-proj-3-tuple(v_646)))) in
        {99}let v_652: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_650)) && success?(symmetricstatepack(1-proj-3-tuple(v_646),1-proj-3-tuple(v_650),3-proj-3-tuple(v_646)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),hash(3-proj-3-tuple(v_651),2-proj-3-tuple(v_650))) else fail-any) else fail-any))) in
        {100}let v_653: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_602)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_650)) then cipherstatepack(3-proj-3-tuple(v_650),minnonce) else fail-any),1-proj-3-tuple(v_650),3-proj-3-tuple(v_652)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let v_654: bitstring = catch-fail(symmetricstateunpack(v_653)) in
        {102}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_654))) in
        {103}let v_656: aead = catch-fail(decrypt(1-proj-2-tuple(v_655),2-proj-2-tuple(v_655),3-proj-3-tuple(v_654),3-proj-3-tuple(v_603))) in
        {104}let v_657: bitstring = catch-fail(aeadunpack(v_656)) in
        {105}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_654))) in
        {106}let v_659: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_655))) && success?(1-proj-3-tuple(v_654))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then cipherstatepack(1-proj-2-tuple(v_658),increment_nonce(2-proj-2-tuple(v_655))) else fail-any) else fail-any)) in
        {107}let v_660: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_603)) && (success?(3-proj-3-tuple(v_654)) && success?(1-proj-3-tuple(v_654)))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,3-proj-3-tuple(v_657),1-proj-3-tuple(v_657)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_661: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_654),3-proj-3-tuple(v_654)))) in
        {109}let v_662: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_603)) && success?(symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_654),3-proj-3-tuple(v_654)))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then symmetricstatepack(1-proj-3-tuple(v_661),2-proj-3-tuple(v_661),hash(3-proj-3-tuple(v_661),3-proj-3-tuple(v_603))) else fail-any) else fail-any)) in
        {110}let v_663: bitstring = catch-fail((if success?(3-proj-3-tuple(v_603)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_662) then (v_662,2-proj-3-tuple(v_660),3-proj-3-tuple(v_660)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_664: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {112}let v_665: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_663),2-proj-7-tuple(v_602),3-proj-7-tuple(v_602),v_638,v_605,6-proj-7-tuple(v_602),7-proj-7-tuple(v_602))) in
        {113}let v_666: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_663))) in
        {114}let v_667: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_666),zero)) in
        {115}let v_668: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_666),zero)) in
        {116}let v_669: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_666),zero)) in
        {117}let v_670: bitstring = catch-fail((if success?(2-proj-3-tuple(v_666)) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (v_667,v_668,v_669) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_671: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_670)) then cipherstatepack(1-proj-3-tuple(v_670),minnonce) else fail-any)) in
        {119}let v_672: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_670)) then cipherstatepack(2-proj-3-tuple(v_670),minnonce) else fail-any)) in
        {120}let v_673: bitstring = catch-fail((if success?(1-proj-3-tuple(v_663)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (1-proj-3-tuple(v_663),v_671,v_672) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {121}let (hs_674: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-7-tuple(v_602))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (if not-caught-fail(v_613) then (if not-caught-fail(v_620) then (if not-caught-fail(v_627) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_638) then (if not-caught-fail(v_645) then (if not-caught-fail(v_653) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if ((3-proj-3-tuple(v_637) && 3-proj-3-tuple(v_663)) && (v_638 = getpublickey((if not-caught-fail(v_664) then keypairpack(validkey(v_664),key_s(bob)) else fail-any)))) then (if not-caught-fail(v_665) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (v_665,2-proj-3-tuple(v_663),true,2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {122}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {123}insert statestore(alice,bob,sid,statepack_c(hs_674,cs1,cs2))
    ) | (
        {125}!
        {144}get statestore(=alice,=bob,=sid,statepack_c(hs_675: handshakestate,cs1_676: cipherstate,cs2_677: cipherstate)) in
        {126}let hs_678: handshakestate = handshakestatesetcs(hs_675,cs1_676) in
        {127}let v_679: bitstring = catch-fail(handshakestateunpack(hs_678)) in
        {128}let v_680: bitstring = catch-fail((empty,empty,empty)) in
        {129}let v_681: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_679))) in
        {130}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_681))) in
        {131}let v_683: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_682),2-proj-2-tuple(v_682),3-proj-3-tuple(v_681),msg_c(alice,bob,sid))) in
        {132}let v_684: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_681))) in
        {133}let v_685: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_682))) && success?(1-proj-3-tuple(v_681))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then cipherstatepack(1-proj-2-tuple(v_684),increment_nonce(2-proj-2-tuple(v_682))) else fail-any) else fail-any)) in
        {134}let v_686: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_681)) && success?(1-proj-3-tuple(v_681))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then (if not-caught-fail(v_683) then (if not-caught-fail(v_685) then (v_685,v_683) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_687: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_686),2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)))) in
        {136}let v_688: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_686)) && success?(symmetricstatepack(1-proj-2-tuple(v_686),2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),hash(3-proj-3-tuple(v_687),2-proj-2-tuple(v_686))) else fail-any) else fail-any)) in
        {137}let v_689: bitstring = catch-fail((if success?(1-proj-7-tuple(v_679)) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then (if not-caught-fail(v_688) then (v_688,2-proj-2-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_690: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_689),2-proj-7-tuple(v_679),3-proj-7-tuple(v_679),4-proj-7-tuple(v_679),5-proj-7-tuple(v_679),6-proj-7-tuple(v_679),7-proj-7-tuple(v_679))) in
        {139}let v_691: bitstring = catch-fail(concat3(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),2-proj-2-tuple(v_689))) in
        {140}let (hs_692: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-7-tuple(v_679))))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_690,v_691) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {141}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {142}insert statestore(alice,bob,sid,statepack_d(hs_692,handshakestategetcs(hs_692),cs2_677));
        {143}out(pub, message_c)
    ) | (
        {145}!
        {165}get statestore(=alice,=bob,=sid,statepack_d(hs_693: handshakestate,cs1_694: cipherstate,cs2_695: cipherstate)) in
        {146}let hs_696: handshakestate = handshakestatesetcs(hs_693,cs2_695) in
        {147}in(pub, message_d: bitstring);
        {148}let v_697: bitstring = catch-fail(handshakestateunpack(hs_696)) in
        {149}let v_698: bitstring = catch-fail(deconcat3(message_d)) in
        {150}let v_699: bool = catch-fail(true) in
        {151}let v_700: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_697))) in
        {152}let v_701: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {153}let v_702: aead = catch-fail(decrypt(1-proj-2-tuple(v_701),2-proj-2-tuple(v_701),3-proj-3-tuple(v_700),3-proj-3-tuple(v_698))) in
        {154}let v_703: bitstring = catch-fail(aeadunpack(v_702)) in
        {155}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {156}let v_705: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_701))) && success?(1-proj-3-tuple(v_700))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then cipherstatepack(1-proj-2-tuple(v_704),increment_nonce(2-proj-2-tuple(v_701))) else fail-any) else fail-any)) in
        {157}let v_706: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_698)) && (success?(3-proj-3-tuple(v_700)) && success?(1-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_705) then (v_705,3-proj-3-tuple(v_703),1-proj-3-tuple(v_703)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {158}let v_707: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) in
        {159}let v_708: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_698)) && success?(symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),3-proj-3-tuple(v_698))) else fail-any) else fail-any)) in
        {160}let v_709: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_698)) && success?(1-proj-7-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {161}let v_710: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_709),2-proj-7-tuple(v_697),3-proj-7-tuple(v_697),4-proj-7-tuple(v_697),5-proj-7-tuple(v_697),6-proj-7-tuple(v_697),7-proj-7-tuple(v_697))) in
        {162}let (hs_711: handshakestate,plaintext_d: bitstring,valid_712: bool) = (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-7-tuple(v_697))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_699) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (v_699 && 3-proj-3-tuple(v_709)) then (if not-caught-fail(v_710) then (v_710,2-proj-3-tuple(v_709),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {163}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {164}event RecvEnd(valid_712)
    ) | (
        {166}event LeakPsk(phase0,alice,bob);
        {167}out(pub, key_psk(alice,bob))
    ) | (
        {168}phase 1;
        {169}event LeakPsk(phase1,alice,bob);
        {170}out(pub, key_psk(alice,bob))
    ) | (
        {171}event LeakS(phase0,alice);
        {172}out(pub, key_s(alice))
    ) | (
        {173}phase 1;
        {174}event LeakS(phase1,alice);
        {175}out(pub, key_s(alice))
    )
) | (
    {176}let v_713: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {177}let s_714: keypair = (if not-caught-fail(v_713) then keypairpack(validkey(v_713),key_s(alice)) else fail-any) in
    {178}out(pub, getpublickey(s_714));
    (
        {179}let e_715: keypair = keypairpack(empty,empty) in
        {180}let rs_716: key = empty in
        {181}let re_717: key = empty in
        {182}let v_718: bitstring = catch-fail(hash(somename,empty)) in
        {183}let v_719: key = catch-fail(v_718) in
        {184}let v_720: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {185}let v_721: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then symmetricstatepack(v_720,v_719,v_718) else fail-any) else fail-any) else fail-any))) in
        {186}let v_722: symmetricstate = catch-fail((if success?((if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then symmetricstatepack(v_720,v_719,v_718) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_721),hash(3-proj-3-tuple(v_721),empty)) else fail-any) else fail-any)) in
        {187}let v_723: bitstring = catch-fail(symmetricstateunpack(v_722)) in
        {188}let v_724: symmetricstate = catch-fail((if success?(getpublickey(s_714)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then symmetricstatepack(1-proj-3-tuple(v_723),2-proj-3-tuple(v_723),hash(3-proj-3-tuple(v_723),getpublickey(s_714))) else fail-any) else fail-any)) in
        {189}let hs_725: handshakestate = (if not-caught-fail(v_722) then (if not-caught-fail(v_724) then handshakestatepack(v_724,s_714,e_715,rs_716,re_717,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {190}insert statestore(alice,charlie,sid,statepack_a(hs_725))
    ) | (
        {219}get statestore(=alice,=charlie,=sid,statepack_a(hs_726: handshakestate)) in
        {191}let v_727: bitstring = catch-fail(handshakestateunpack(hs_726)) in
        {192}let v_728: bitstring = catch-fail((empty,empty,empty)) in
        {193}let v_729: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {194}let v_730: keypair = catch-fail((if not-caught-fail(v_729) then keypairpack(validkey(v_729),key_e(alice,charlie,sid)) else fail-any)) in
        {195}let v_731: bitstring = catch-fail(getpublickey(v_730)) in
        {196}let v_732: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_727))) in
        {197}let v_733: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_727)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),v_731)) else fail-any) else fail-any)) in
        {198}let v_734: bitstring = catch-fail(symmetricstateunpack(v_733)) in
        {199}let v_735: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_734),getpublickey(v_730))) in
        {200}let v_736: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_734),getpublickey(v_730))) in
        {201}let v_737: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_734),getpublickey(v_730))) in
        {202}let v_738: bitstring = catch-fail((if (success?(getpublickey(v_730)) && success?(2-proj-3-tuple(v_734))) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (v_735,v_736,v_737) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_739: symmetricstate = catch-fail((if success?(getpublickey(v_730)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_738)) then cipherstatepack(2-proj-3-tuple(v_738),minnonce) else fail-any),1-proj-3-tuple(v_738),3-proj-3-tuple(v_734)) else fail-any) else fail-any) else fail-any)) in
        {204}let v_740: bitstring = catch-fail(symmetricstateunpack(v_739)) in
        {205}let v_741: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_740))) in
        {206}let v_742: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_741),2-proj-2-tuple(v_741),3-proj-3-tuple(v_740),msg_a(alice,charlie,sid))) in
        {207}let v_743: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_740))) in
        {208}let v_744: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_741))) && success?(1-proj-3-tuple(v_740))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then cipherstatepack(1-proj-2-tuple(v_743),increment_nonce(2-proj-2-tuple(v_741))) else fail-any) else fail-any)) in
        {209}let v_745: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_740)) && success?(1-proj-3-tuple(v_740))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then (if not-caught-fail(v_742) then (if not-caught-fail(v_744) then (v_744,v_742) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let v_746: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_745),2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)))) in
        {211}let v_747: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_745)) && success?(symmetricstatepack(1-proj-2-tuple(v_745),2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then symmetricstatepack(1-proj-3-tuple(v_746),2-proj-3-tuple(v_746),hash(3-proj-3-tuple(v_746),2-proj-2-tuple(v_745))) else fail-any) else fail-any)) in
        {212}let v_748: bitstring = catch-fail((if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then (if not-caught-fail(v_747) then (v_747,2-proj-2-tuple(v_745)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_749: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_748),2-proj-7-tuple(v_727),v_730,4-proj-7-tuple(v_727),5-proj-7-tuple(v_727),6-proj-7-tuple(v_727),7-proj-7-tuple(v_727))) in
        {214}let v_750: bitstring = catch-fail(concat3(v_731,2-proj-3-tuple(v_728),2-proj-2-tuple(v_748))) in
        {215}let (hs_751: handshakestate,message_a_752: bitstring) = (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-7-tuple(v_727))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if not-caught-fail(v_730) then (if not-caught-fail(v_731) then (if not-caught-fail(v_733) then (if not-caught-fail(v_739) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (v_749,v_750) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {216}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {217}insert statestore(alice,charlie,sid,statepack_b(hs_751));
        {218}out(pub, message_a_752)
    ) | (
        {296}get statestore(=alice,=charlie,=sid,statepack_b(hs_753: handshakestate)) in
        {220}in(pub, message_b_754: bitstring);
        {221}let v_755: bitstring = catch-fail(handshakestateunpack(hs_753)) in
        {222}let v_756: bitstring = catch-fail(deconcat3(message_b_754)) in
        {223}let v_757: bool = catch-fail(true) in
        {224}let v_758: key = catch-fail(1-proj-3-tuple(v_756)) in
        {225}let v_759: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_755))) in
        {226}let v_760: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_755)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack(1-proj-3-tuple(v_759),2-proj-3-tuple(v_759),hash(3-proj-3-tuple(v_759),v_758)) else fail-any) else fail-any)) in
        {227}let v_761: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {228}let v_762: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_761),v_758)) in
        {229}let v_763: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_761),v_758)) in
        {230}let v_764: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_761),v_758)) in
        {231}let v_765: bitstring = catch-fail((if success?(2-proj-3-tuple(v_761)) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (v_762,v_763,v_764) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_766: symmetricstate = catch-fail((if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_765)) then cipherstatepack(2-proj-3-tuple(v_765),minnonce) else fail-any),1-proj-3-tuple(v_765),3-proj-3-tuple(v_761)) else fail-any) else fail-any)) in
        {233}let v_767: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_755))) in
        {234}let v_768: bitstring = catch-fail(symmetricstateunpack(v_766)) in
        {235}let v_769: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_768),(if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then dhexp(2-proj-2-tuple(v_767),v_758) else fail-any) else fail-any))) in
        {236}let v_770: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_768),(if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then dhexp(2-proj-2-tuple(v_767),v_758) else fail-any) else fail-any))) in
        {237}let v_771: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_768),(if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then dhexp(2-proj-2-tuple(v_767),v_758) else fail-any) else fail-any))) in
        {238}let v_772: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then dhexp(2-proj-2-tuple(v_767),v_758) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_768))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (v_769,v_770,v_771) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_773: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then dhexp(2-proj-2-tuple(v_767),v_758) else fail-any) else fail-any)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_772)) then cipherstatepack(2-proj-3-tuple(v_772),minnonce) else fail-any),1-proj-3-tuple(v_772),3-proj-3-tuple(v_768)) else fail-any) else fail-any) else fail-any)) in
        {240}let v_774: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_755))) in
        {241}let v_775: bitstring = catch-fail(symmetricstateunpack(v_773)) in
        {242}let v_776: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_775),(if success?(2-proj-7-tuple(v_755)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then dhexp(2-proj-2-tuple(v_774),v_758) else fail-any) else fail-any))) in
        {243}let v_777: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_775),(if success?(2-proj-7-tuple(v_755)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then dhexp(2-proj-2-tuple(v_774),v_758) else fail-any) else fail-any))) in
        {244}let v_778: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_775),(if success?(2-proj-7-tuple(v_755)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then dhexp(2-proj-2-tuple(v_774),v_758) else fail-any) else fail-any))) in
        {245}let v_779: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_755)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then dhexp(2-proj-2-tuple(v_774),v_758) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_775))) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (v_776,v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_780: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_755)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then dhexp(2-proj-2-tuple(v_774),v_758) else fail-any) else fail-any)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_779)) then cipherstatepack(2-proj-3-tuple(v_779),minnonce) else fail-any),1-proj-3-tuple(v_779),3-proj-3-tuple(v_775)) else fail-any) else fail-any) else fail-any)) in
        {247}let v_781: bitstring = catch-fail(symmetricstateunpack(v_780)) in
        {248}let v_782: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_781))) in
        {249}let v_783: aead = catch-fail(decrypt(1-proj-2-tuple(v_782),2-proj-2-tuple(v_782),3-proj-3-tuple(v_781),2-proj-3-tuple(v_756))) in
        {250}let v_784: bitstring = catch-fail(aeadunpack(v_783)) in
        {251}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_781))) in
        {252}let v_786: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_782))) && success?(1-proj-3-tuple(v_781))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then cipherstatepack(1-proj-2-tuple(v_785),increment_nonce(2-proj-2-tuple(v_782))) else fail-any) else fail-any)) in
        {253}let v_787: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_756)) && (success?(3-proj-3-tuple(v_781)) && success?(1-proj-3-tuple(v_781)))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if not-caught-fail(v_786) then (v_786,3-proj-3-tuple(v_784),1-proj-3-tuple(v_784)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_788: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_787),2-proj-3-tuple(v_781),3-proj-3-tuple(v_781)))) in
        {255}let v_789: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_756)) && success?(symmetricstatepack(1-proj-3-tuple(v_787),2-proj-3-tuple(v_781),3-proj-3-tuple(v_781)))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack(1-proj-3-tuple(v_788),2-proj-3-tuple(v_788),hash(3-proj-3-tuple(v_788),2-proj-3-tuple(v_756))) else fail-any) else fail-any)) in
        {256}let v_790: bitstring = catch-fail((if success?(2-proj-3-tuple(v_756)) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {257}let v_791: key = catch-fail(2-proj-3-tuple(v_790)) in
        {258}let v_792: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_755))) in
        {259}let v_793: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_790))) in
        {260}let v_794: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_793),(if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),v_791) else fail-any) else fail-any))) in
        {261}let v_795: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_793),(if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),v_791) else fail-any) else fail-any))) in
        {262}let v_796: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_793),(if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),v_791) else fail-any) else fail-any))) in
        {263}let v_797: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),v_791) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_793))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then (v_794,v_795,v_796) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let v_798: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_755)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then dhexp(2-proj-2-tuple(v_792),v_791) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_790))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_797)) then cipherstatepack(2-proj-3-tuple(v_797),minnonce) else fail-any),1-proj-3-tuple(v_797),3-proj-3-tuple(v_793)) else fail-any) else fail-any) else fail-any)) in
        {265}let v_799: bitstring = catch-fail(symmetricstateunpack(v_798)) in
        {266}let v_800: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_799),6-proj-7-tuple(v_755))) in
        {267}let v_801: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_799),6-proj-7-tuple(v_755))) in
        {268}let v_802: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_799),6-proj-7-tuple(v_755))) in
        {269}let v_803: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_755)) && success?(2-proj-3-tuple(v_799))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (v_800,v_801,v_802) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_804: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_799),1-proj-3-tuple(v_803),3-proj-3-tuple(v_799)))) in
        {271}let v_805: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_803)) && success?(symmetricstatepack(1-proj-3-tuple(v_799),1-proj-3-tuple(v_803),3-proj-3-tuple(v_799)))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then symmetricstatepack(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),hash(3-proj-3-tuple(v_804),2-proj-3-tuple(v_803))) else fail-any) else fail-any))) in
        {272}let v_806: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_755)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_803)) then cipherstatepack(3-proj-3-tuple(v_803),minnonce) else fail-any),1-proj-3-tuple(v_803),3-proj-3-tuple(v_805)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_807: bitstring = catch-fail(symmetricstateunpack(v_806)) in
        {274}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {275}let v_809: aead = catch-fail(decrypt(1-proj-2-tuple(v_808),2-proj-2-tuple(v_808),3-proj-3-tuple(v_807),3-proj-3-tuple(v_756))) in
        {276}let v_810: bitstring = catch-fail(aeadunpack(v_809)) in
        {277}let v_811: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {278}let v_812: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_808))) && success?(1-proj-3-tuple(v_807))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then cipherstatepack(1-proj-2-tuple(v_811),increment_nonce(2-proj-2-tuple(v_808))) else fail-any) else fail-any)) in
        {279}let v_813: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_756)) && (success?(3-proj-3-tuple(v_807)) && success?(1-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then (if not-caught-fail(v_809) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,3-proj-3-tuple(v_810),1-proj-3-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_814: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) in
        {281}let v_815: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_756)) && success?(symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_814),hash(3-proj-3-tuple(v_814),3-proj-3-tuple(v_756))) else fail-any) else fail-any)) in
        {282}let v_816: bitstring = catch-fail((if success?(3-proj-3-tuple(v_756)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if not-caught-fail(v_815) then (v_815,2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_817: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {284}let v_818: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_816),2-proj-7-tuple(v_755),3-proj-7-tuple(v_755),v_791,v_758,6-proj-7-tuple(v_755),7-proj-7-tuple(v_755))) in
        {285}let v_819: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_816))) in
        {286}let v_820: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_819),zero)) in
        {287}let v_821: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_819),zero)) in
        {288}let v_822: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_819),zero)) in
        {289}let v_823: bitstring = catch-fail((if success?(2-proj-3-tuple(v_819)) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (if not-caught-fail(v_822) then (v_820,v_821,v_822) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {290}let v_824: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_823)) then cipherstatepack(1-proj-3-tuple(v_823),minnonce) else fail-any)) in
        {291}let v_825: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_823)) then cipherstatepack(2-proj-3-tuple(v_823),minnonce) else fail-any)) in
        {292}let v_826: bitstring = catch-fail((if success?(1-proj-3-tuple(v_816)) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (1-proj-3-tuple(v_816),v_824,v_825) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let (hs_827: handshakestate,plaintext_b_828: bitstring,valid_829: bool,cs1_830: cipherstate,cs2_831: cipherstate) = (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-7-tuple(v_755))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (if not-caught-fail(v_760) then (if not-caught-fail(v_766) then (if not-caught-fail(v_773) then (if not-caught-fail(v_780) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_798) then (if not-caught-fail(v_806) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if ((3-proj-3-tuple(v_790) && 3-proj-3-tuple(v_816)) && (v_791 = getpublickey((if not-caught-fail(v_817) then keypairpack(validkey(v_817),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_818) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (v_818,2-proj-3-tuple(v_816),true,2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {294}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_828);
        {295}insert statestore(alice,charlie,sid,statepack_c(hs_827,cs1_830,cs2_831))
    ) | (
        {297}!
        {316}get statestore(=alice,=charlie,=sid,statepack_c(hs_832: handshakestate,cs1_833: cipherstate,cs2_834: cipherstate)) in
        {298}let hs_835: handshakestate = handshakestatesetcs(hs_832,cs1_833) in
        {299}let v_836: bitstring = catch-fail(handshakestateunpack(hs_835)) in
        {300}let v_837: bitstring = catch-fail((empty,empty,empty)) in
        {301}let v_838: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_836))) in
        {302}let v_839: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_838))) in
        {303}let v_840: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_839),2-proj-2-tuple(v_839),3-proj-3-tuple(v_838),msg_c(alice,charlie,sid))) in
        {304}let v_841: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_838))) in
        {305}let v_842: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_839))) && success?(1-proj-3-tuple(v_838))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then cipherstatepack(1-proj-2-tuple(v_841),increment_nonce(2-proj-2-tuple(v_839))) else fail-any) else fail-any)) in
        {306}let v_843: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_838)) && success?(1-proj-3-tuple(v_838))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then (if not-caught-fail(v_840) then (if not-caught-fail(v_842) then (v_842,v_840) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {307}let v_844: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_843),2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)))) in
        {308}let v_845: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_843)) && success?(symmetricstatepack(1-proj-2-tuple(v_843),2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then symmetricstatepack(1-proj-3-tuple(v_844),2-proj-3-tuple(v_844),hash(3-proj-3-tuple(v_844),2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {309}let v_846: bitstring = catch-fail((if success?(1-proj-7-tuple(v_836)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_845) then (v_845,2-proj-2-tuple(v_843)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {310}let v_847: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_846),2-proj-7-tuple(v_836),3-proj-7-tuple(v_836),4-proj-7-tuple(v_836),5-proj-7-tuple(v_836),6-proj-7-tuple(v_836),7-proj-7-tuple(v_836))) in
        {311}let v_848: bitstring = catch-fail(concat3(1-proj-3-tuple(v_837),2-proj-3-tuple(v_837),2-proj-2-tuple(v_846))) in
        {312}let (hs_849: handshakestate,message_c_850: bitstring) = (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-7-tuple(v_836))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_847) then (if not-caught-fail(v_848) then (v_847,v_848) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {313}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {314}insert statestore(alice,charlie,sid,statepack_d(hs_849,handshakestategetcs(hs_849),cs2_834));
        {315}out(pub, message_c_850)
    ) | (
        {317}!
        {337}get statestore(=alice,=charlie,=sid,statepack_d(hs_851: handshakestate,cs1_852: cipherstate,cs2_853: cipherstate)) in
        {318}let hs_854: handshakestate = handshakestatesetcs(hs_851,cs2_853) in
        {319}in(pub, message_d_855: bitstring);
        {320}let v_856: bitstring = catch-fail(handshakestateunpack(hs_854)) in
        {321}let v_857: bitstring = catch-fail(deconcat3(message_d_855)) in
        {322}let v_858: bool = catch-fail(true) in
        {323}let v_859: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_856))) in
        {324}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_859))) in
        {325}let v_861: aead = catch-fail(decrypt(1-proj-2-tuple(v_860),2-proj-2-tuple(v_860),3-proj-3-tuple(v_859),3-proj-3-tuple(v_857))) in
        {326}let v_862: bitstring = catch-fail(aeadunpack(v_861)) in
        {327}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_859))) in
        {328}let v_864: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_860))) && success?(1-proj-3-tuple(v_859))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then cipherstatepack(1-proj-2-tuple(v_863),increment_nonce(2-proj-2-tuple(v_860))) else fail-any) else fail-any)) in
        {329}let v_865: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_857)) && (success?(3-proj-3-tuple(v_859)) && success?(1-proj-3-tuple(v_859)))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then (if not-caught-fail(v_861) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,3-proj-3-tuple(v_862),1-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {330}let v_866: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)))) in
        {331}let v_867: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_857)) && success?(symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack(1-proj-3-tuple(v_866),2-proj-3-tuple(v_866),hash(3-proj-3-tuple(v_866),3-proj-3-tuple(v_857))) else fail-any) else fail-any)) in
        {332}let v_868: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_857)) && success?(1-proj-7-tuple(v_856))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,2-proj-3-tuple(v_865),3-proj-3-tuple(v_865)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_869: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_868),2-proj-7-tuple(v_856),3-proj-7-tuple(v_856),4-proj-7-tuple(v_856),5-proj-7-tuple(v_856),6-proj-7-tuple(v_856),7-proj-7-tuple(v_856))) in
        {334}let (hs_870: handshakestate,plaintext_d_871: bitstring,valid_872: bool) = (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-7-tuple(v_856))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_858) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (v_858 && 3-proj-3-tuple(v_868)) then (if not-caught-fail(v_869) then (v_869,2-proj-3-tuple(v_868),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {335}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_871);
        {336}event RecvEnd(valid_872)
    ) | (
        {338}event LeakPsk(phase0,alice,charlie);
        {339}out(pub, key_psk(alice,charlie))
    ) | (
        {340}phase 1;
        {341}event LeakPsk(phase1,alice,charlie);
        {342}out(pub, key_psk(alice,charlie))
    ) | (
        {343}event LeakS(phase0,alice);
        {344}out(pub, key_s(alice))
    ) | (
        {345}phase 1;
        {346}event LeakS(phase1,alice);
        {347}out(pub, key_s(alice))
    )
) | (
    {348}let s_873: keypair = keypairpack(empty,empty) in
    {349}out(pub, getpublickey(s_873));
    (
        {350}let e_874: keypair = keypairpack(empty,empty) in
        {351}let v_875: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {352}let rs_876: key = getpublickey((if not-caught-fail(v_875) then keypairpack(validkey(v_875),key_s(alice)) else fail-any)) in
        {353}let re_877: key = empty in
        {354}let v_878: bitstring = catch-fail(hash(somename,empty)) in
        {355}let v_879: key = catch-fail(v_878) in
        {356}let v_880: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {357}let v_881: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_878) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then symmetricstatepack(v_880,v_879,v_878) else fail-any) else fail-any) else fail-any))) in
        {358}let v_882: symmetricstate = catch-fail((if success?((if not-caught-fail(v_878) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then symmetricstatepack(v_880,v_879,v_878) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),empty)) else fail-any) else fail-any)) in
        {359}let v_883: bitstring = catch-fail(symmetricstateunpack(v_882)) in
        {360}let v_884: symmetricstate = catch-fail((if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),rs_876)) else fail-any)) in
        {361}let hs_885: handshakestate = (if not-caught-fail(v_882) then (if not-caught-fail(v_884) then handshakestatepack(v_884,s_873,e_874,rs_876,re_877,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {362}insert statestore(bob,alice,sid,statepack_a(hs_885))
    ) | (
        {390}get statestore(=bob,=alice,=sid,statepack_a(hs_886: handshakestate)) in
        {363}in(pub, message_a_887: bitstring);
        {364}let v_888: bitstring = catch-fail(handshakestateunpack(hs_886)) in
        {365}let v_889: bitstring = catch-fail(deconcat3(message_a_887)) in
        {366}let v_890: bool = catch-fail(true) in
        {367}let v_891: key = catch-fail(1-proj-3-tuple(v_889)) in
        {368}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_888))) in
        {369}let v_893: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_888)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),v_891)) else fail-any) else fail-any)) in
        {370}let v_894: bitstring = catch-fail(symmetricstateunpack(v_893)) in
        {371}let v_895: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_894),v_891)) in
        {372}let v_896: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_894),v_891)) in
        {373}let v_897: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_894),v_891)) in
        {374}let v_898: bitstring = catch-fail((if success?(2-proj-3-tuple(v_894)) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (v_895,v_896,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_899: symmetricstate = catch-fail((if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_898)) then cipherstatepack(2-proj-3-tuple(v_898),minnonce) else fail-any),1-proj-3-tuple(v_898),3-proj-3-tuple(v_894)) else fail-any) else fail-any)) in
        {376}let v_900: bitstring = catch-fail(symmetricstateunpack(v_899)) in
        {377}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {378}let v_902: aead = catch-fail(decrypt(1-proj-2-tuple(v_901),2-proj-2-tuple(v_901),3-proj-3-tuple(v_900),3-proj-3-tuple(v_889))) in
        {379}let v_903: bitstring = catch-fail(aeadunpack(v_902)) in
        {380}let v_904: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {381}let v_905: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_901))) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then cipherstatepack(1-proj-2-tuple(v_904),increment_nonce(2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {382}let v_906: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_889)) && (success?(3-proj-3-tuple(v_900)) && success?(1-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_902) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if not-caught-fail(v_905) then (v_905,3-proj-3-tuple(v_903),1-proj-3-tuple(v_903)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {383}let v_907: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) in
        {384}let v_908: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_889)) && success?(symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_907),hash(3-proj-3-tuple(v_907),3-proj-3-tuple(v_889))) else fail-any) else fail-any)) in
        {385}let v_909: bitstring = catch-fail((if success?(3-proj-3-tuple(v_889)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then (if not-caught-fail(v_908) then (v_908,2-proj-3-tuple(v_906),3-proj-3-tuple(v_906)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {386}let v_910: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_909),2-proj-7-tuple(v_888),3-proj-7-tuple(v_888),4-proj-7-tuple(v_888),v_891,6-proj-7-tuple(v_888),7-proj-7-tuple(v_888))) in
        {387}let (hs_911: handshakestate,plaintext_a: bitstring,valid_912: bool) = (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-7-tuple(v_888))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if not-caught-fail(v_893) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if (v_890 && 3-proj-3-tuple(v_909)) then (if not-caught-fail(v_910) then (v_910,2-proj-3-tuple(v_909),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {388}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {389}insert statestore(bob,alice,sid,statepack_b(hs_911))
    ) | (
        {467}get statestore(=bob,=alice,=sid,statepack_b(hs_913: handshakestate)) in
        {391}let v_914: bitstring = catch-fail(handshakestateunpack(hs_913)) in
        {392}let v_915: bitstring = catch-fail((empty,empty,empty)) in
        {393}let v_916: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {394}let v_917: keypair = catch-fail((if not-caught-fail(v_916) then keypairpack(validkey(v_916),key_e(bob,alice,sid)) else fail-any)) in
        {395}let v_918: bitstring = catch-fail(getpublickey(v_917)) in
        {396}let v_919: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_914))) in
        {397}let v_920: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_914)) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),v_918)) else fail-any) else fail-any)) in
        {398}let v_921: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {399}let v_922: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_921),getpublickey(v_917))) in
        {400}let v_923: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_921),getpublickey(v_917))) in
        {401}let v_924: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_921),getpublickey(v_917))) in
        {402}let v_925: bitstring = catch-fail((if (success?(getpublickey(v_917)) && success?(2-proj-3-tuple(v_921))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_922,v_923,v_924) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_926: symmetricstate = catch-fail((if success?(getpublickey(v_917)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_925)) then cipherstatepack(2-proj-3-tuple(v_925),minnonce) else fail-any),1-proj-3-tuple(v_925),3-proj-3-tuple(v_921)) else fail-any) else fail-any) else fail-any)) in
        {404}let v_927: bitstring = catch-fail(keypairunpack(v_917)) in
        {405}let v_928: bitstring = catch-fail(symmetricstateunpack(v_926)) in
        {406}let v_929: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_928),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {407}let v_930: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_928),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {408}let v_931: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_928),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {409}let v_932: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),5-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_928))) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (v_929,v_930,v_931) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_933: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),5-proj-7-tuple(v_914)) else fail-any) else fail-any)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_932)) then cipherstatepack(2-proj-3-tuple(v_932),minnonce) else fail-any),1-proj-3-tuple(v_932),3-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any)) in
        {411}let v_934: bitstring = catch-fail(keypairunpack(v_917)) in
        {412}let v_935: bitstring = catch-fail(symmetricstateunpack(v_933)) in
        {413}let v_936: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_935),(if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then dhexp(2-proj-2-tuple(v_934),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {414}let v_937: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_935),(if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then dhexp(2-proj-2-tuple(v_934),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {415}let v_938: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_935),(if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then dhexp(2-proj-2-tuple(v_934),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {416}let v_939: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then dhexp(2-proj-2-tuple(v_934),4-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_935))) then (if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then (v_936,v_937,v_938) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_940: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_914)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then dhexp(2-proj-2-tuple(v_934),4-proj-7-tuple(v_914)) else fail-any) else fail-any)) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_939)) then cipherstatepack(2-proj-3-tuple(v_939),minnonce) else fail-any),1-proj-3-tuple(v_939),3-proj-3-tuple(v_935)) else fail-any) else fail-any) else fail-any)) in
        {418}let v_941: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {419}let v_942: keypair = catch-fail((if not-caught-fail(v_941) then keypairpack(validkey(v_941),key_s(bob)) else fail-any)) in
        {420}let v_943: bitstring = catch-fail(symmetricstateunpack(v_940)) in
        {421}let v_944: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_943))) in
        {422}let v_945: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_944),2-proj-2-tuple(v_944),3-proj-3-tuple(v_943),getpublickey(v_942))) in
        {423}let v_946: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_943))) in
        {424}let v_947: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_944))) && success?(1-proj-3-tuple(v_943))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then cipherstatepack(1-proj-2-tuple(v_946),increment_nonce(2-proj-2-tuple(v_944))) else fail-any) else fail-any)) in
        {425}let v_948: bitstring = catch-fail((if (success?(getpublickey(v_942)) && (success?(3-proj-3-tuple(v_943)) && success?(1-proj-3-tuple(v_943)))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then (if not-caught-fail(v_945) then (if not-caught-fail(v_947) then (v_947,v_945) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_949: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_948),2-proj-3-tuple(v_943),3-proj-3-tuple(v_943)))) in
        {427}let v_950: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_948)) && success?(symmetricstatepack(1-proj-2-tuple(v_948),2-proj-3-tuple(v_943),3-proj-3-tuple(v_943)))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then symmetricstatepack(1-proj-3-tuple(v_949),2-proj-3-tuple(v_949),hash(3-proj-3-tuple(v_949),2-proj-2-tuple(v_948))) else fail-any) else fail-any)) in
        {428}let v_951: bitstring = catch-fail((if success?(getpublickey(v_942)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then (if not-caught-fail(v_950) then (v_950,2-proj-2-tuple(v_948)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_952: bitstring = catch-fail(keypairunpack(v_942)) in
        {430}let v_953: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_951))) in
        {431}let v_954: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_953),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {432}let v_955: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_953),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {433}let v_956: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_953),(if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {434}let v_957: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_953))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_954,v_955,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {435}let v_958: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_914)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_951))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_957)) then cipherstatepack(2-proj-3-tuple(v_957),minnonce) else fail-any),1-proj-3-tuple(v_957),3-proj-3-tuple(v_953)) else fail-any) else fail-any) else fail-any)) in
        {436}let v_959: bitstring = catch-fail(symmetricstateunpack(v_958)) in
        {437}let v_960: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_959),6-proj-7-tuple(v_914))) in
        {438}let v_961: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_959),6-proj-7-tuple(v_914))) in
        {439}let v_962: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_959),6-proj-7-tuple(v_914))) in
        {440}let v_963: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_914)) && success?(2-proj-3-tuple(v_959))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (v_960,v_961,v_962) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {441}let v_964: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_959),1-proj-3-tuple(v_963),3-proj-3-tuple(v_959)))) in
        {442}let v_965: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_963)) && success?(symmetricstatepack(1-proj-3-tuple(v_959),1-proj-3-tuple(v_963),3-proj-3-tuple(v_959)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),2-proj-3-tuple(v_963))) else fail-any) else fail-any))) in
        {443}let v_966: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_914)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_963)) then cipherstatepack(3-proj-3-tuple(v_963),minnonce) else fail-any),1-proj-3-tuple(v_963),3-proj-3-tuple(v_965)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {444}let v_967: bitstring = catch-fail(symmetricstateunpack(v_966)) in
        {445}let v_968: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_967))) in
        {446}let v_969: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_968),2-proj-2-tuple(v_968),3-proj-3-tuple(v_967),msg_b(bob,alice,sid))) in
        {447}let v_970: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_967))) in
        {448}let v_971: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_968))) && success?(1-proj-3-tuple(v_967))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-2-tuple(v_970))))) then cipherstatepack(1-proj-2-tuple(v_970),increment_nonce(2-proj-2-tuple(v_968))) else fail-any) else fail-any)) in
        {449}let v_972: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_967)) && success?(1-proj-3-tuple(v_967))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-2-tuple(v_968))))) then (if not-caught-fail(v_969) then (if not-caught-fail(v_971) then (v_971,v_969) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_973: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_972),2-proj-3-tuple(v_967),3-proj-3-tuple(v_967)))) in
        {451}let v_974: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_972)) && success?(symmetricstatepack(1-proj-2-tuple(v_972),2-proj-3-tuple(v_967),3-proj-3-tuple(v_967)))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),2-proj-2-tuple(v_972))) else fail-any) else fail-any)) in
        {452}let v_975: bitstring = catch-fail((if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-2-tuple(v_972))))) then (if not-caught-fail(v_974) then (v_974,2-proj-2-tuple(v_972)) else fail-any) else fail-any) else fail-any)) in
        {453}let v_976: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_975),v_942,v_917,4-proj-7-tuple(v_914),5-proj-7-tuple(v_914),6-proj-7-tuple(v_914),7-proj-7-tuple(v_914))) in
        {454}let v_977: bitstring = catch-fail(concat3(v_918,2-proj-2-tuple(v_951),2-proj-2-tuple(v_975))) in
        {455}let v_978: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_975))) in
        {456}let v_979: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_978),zero)) in
        {457}let v_980: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_978),zero)) in
        {458}let v_981: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_978),zero)) in
        {459}let v_982: bitstring = catch-fail((if success?(2-proj-3-tuple(v_978)) then (if not-caught-fail(v_979) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (v_979,v_980,v_981) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_983: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_982)) then cipherstatepack(1-proj-3-tuple(v_982),minnonce) else fail-any)) in
        {461}let v_984: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_982)) then cipherstatepack(2-proj-3-tuple(v_982),minnonce) else fail-any)) in
        {462}let v_985: bitstring = catch-fail((if success?(1-proj-2-tuple(v_975)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (if not-caught-fail(v_983) then (if not-caught-fail(v_984) then (1-proj-2-tuple(v_975),v_983,v_984) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let (hs_986: handshakestate,message_b_987: bitstring,cs1_988: cipherstate,cs2_989: cipherstate) = (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-7-tuple(v_914))))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_920) then (if not-caught-fail(v_926) then (if not-caught-fail(v_933) then (if not-caught-fail(v_940) then (if not-caught-fail(v_942) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then (if not-caught-fail(v_958) then (if not-caught-fail(v_966) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (v_976,v_977,2-proj-3-tuple(v_985),3-proj-3-tuple(v_985)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {464}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {465}insert statestore(bob,alice,sid,statepack_c(hs_986,cs1_988,cs2_989));
        {466}out(pub, message_b_987)
    ) | (
        {468}!
        {488}get statestore(=bob,=alice,=sid,statepack_c(hs_990: handshakestate,cs1_991: cipherstate,cs2_992: cipherstate)) in
        {469}let hs_993: handshakestate = handshakestatesetcs(hs_990,cs1_991) in
        {470}in(pub, message_c_994: bitstring);
        {471}let v_995: bitstring = catch-fail(handshakestateunpack(hs_993)) in
        {472}let v_996: bitstring = catch-fail(deconcat3(message_c_994)) in
        {473}let v_997: bool = catch-fail(true) in
        {474}let v_998: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_995))) in
        {475}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {476}let v_1000: aead = catch-fail(decrypt(1-proj-2-tuple(v_999),2-proj-2-tuple(v_999),3-proj-3-tuple(v_998),3-proj-3-tuple(v_996))) in
        {477}let v_1001: bitstring = catch-fail(aeadunpack(v_1000)) in
        {478}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {479}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_999))) && success?(1-proj-3-tuple(v_998))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_999))) else fail-any) else fail-any)) in
        {480}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && (success?(3-proj-3-tuple(v_998)) && success?(1-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,3-proj-3-tuple(v_1001),1-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {481}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) in
        {482}let v_1006: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),3-proj-3-tuple(v_996))) else fail-any) else fail-any)) in
        {483}let v_1007: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(1-proj-7-tuple(v_995))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1007),2-proj-7-tuple(v_995),3-proj-7-tuple(v_995),4-proj-7-tuple(v_995),5-proj-7-tuple(v_995),6-proj-7-tuple(v_995),7-proj-7-tuple(v_995))) in
        {485}let (hs_1009: handshakestate,plaintext_c: bitstring,valid_1010: bool) = (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-7-tuple(v_995))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_997) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (v_997 && 3-proj-3-tuple(v_1007)) then (if not-caught-fail(v_1008) then (v_1008,2-proj-3-tuple(v_1007),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {486}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {487}insert statestore(bob,alice,sid,statepack_d(hs_1009,handshakestategetcs(hs_1009),cs2_992))
    ) | (
        {489}!
        {507}get statestore(=bob,=alice,=sid,statepack_d(hs_1011: handshakestate,cs1_1012: cipherstate,cs2_1013: cipherstate)) in
        {490}let hs_1014: handshakestate = handshakestatesetcs(hs_1011,cs2_1013) in
        {491}let v_1015: bitstring = catch-fail(handshakestateunpack(hs_1014)) in
        {492}let v_1016: bitstring = catch-fail((empty,empty,empty)) in
        {493}let v_1017: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1015))) in
        {494}let v_1018: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1017))) in
        {495}let v_1019: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1018),2-proj-2-tuple(v_1018),3-proj-3-tuple(v_1017),msg_d(bob,alice,sid))) in
        {496}let v_1020: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1017))) in
        {497}let v_1021: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1018))) && success?(1-proj-3-tuple(v_1017))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then cipherstatepack(1-proj-2-tuple(v_1020),increment_nonce(2-proj-2-tuple(v_1018))) else fail-any) else fail-any)) in
        {498}let v_1022: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1017)) && success?(1-proj-3-tuple(v_1017))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1021) then (v_1021,v_1019) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {499}let v_1023: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1022),2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)))) in
        {500}let v_1024: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1022)) && success?(symmetricstatepack(1-proj-2-tuple(v_1022),2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then symmetricstatepack(1-proj-3-tuple(v_1023),2-proj-3-tuple(v_1023),hash(3-proj-3-tuple(v_1023),2-proj-2-tuple(v_1022))) else fail-any) else fail-any)) in
        {501}let v_1025: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-2-tuple(v_1022))))) then (if not-caught-fail(v_1024) then (v_1024,2-proj-2-tuple(v_1022)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_1026: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1025),2-proj-7-tuple(v_1015),3-proj-7-tuple(v_1015),4-proj-7-tuple(v_1015),5-proj-7-tuple(v_1015),6-proj-7-tuple(v_1015),7-proj-7-tuple(v_1015))) in
        {503}let v_1027: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1016),2-proj-3-tuple(v_1016),2-proj-2-tuple(v_1025))) in
        {504}let (hs_1028: handshakestate,message_d_1029: bitstring) = (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-7-tuple(v_1015))))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1027) then (v_1026,v_1027) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {505}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {506}out(pub, message_d_1029)
    ) | (
        {508}event LeakPsk(phase0,alice,bob);
        {509}out(pub, key_psk(alice,bob))
    ) | (
        {510}phase 1;
        {511}event LeakPsk(phase1,alice,bob);
        {512}out(pub, key_psk(alice,bob))
    ) | (
        {513}event LeakS(phase0,bob);
        {514}out(pub, key_s(bob))
    ) | (
        {515}phase 1;
        {516}event LeakS(phase1,bob);
        {517}out(pub, key_s(bob))
    )
) | (
    {518}let s_1030: keypair = keypairpack(empty,empty) in
    {519}out(pub, getpublickey(s_1030));
    (
        {520}let e_1031: keypair = keypairpack(empty,empty) in
        {521}let v_1032: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {522}let rs_1033: key = getpublickey((if not-caught-fail(v_1032) then keypairpack(validkey(v_1032),key_s(charlie)) else fail-any)) in
        {523}let re_1034: key = empty in
        {524}let v_1035: bitstring = catch-fail(hash(somename,empty)) in
        {525}let v_1036: key = catch-fail(v_1035) in
        {526}let v_1037: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {527}let v_1038: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (if not-caught-fail(v_1037) then symmetricstatepack(v_1037,v_1036,v_1035) else fail-any) else fail-any) else fail-any))) in
        {528}let v_1039: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (if not-caught-fail(v_1037) then symmetricstatepack(v_1037,v_1036,v_1035) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1038),hash(3-proj-3-tuple(v_1038),empty)) else fail-any) else fail-any)) in
        {529}let v_1040: bitstring = catch-fail(symmetricstateunpack(v_1039)) in
        {530}let v_1041: symmetricstate = catch-fail((if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1040),hash(3-proj-3-tuple(v_1040),rs_1033)) else fail-any)) in
        {531}let hs_1042: handshakestate = (if not-caught-fail(v_1039) then (if not-caught-fail(v_1041) then handshakestatepack(v_1041,s_1030,e_1031,rs_1033,re_1034,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {532}insert statestore(bob,charlie,sid,statepack_a(hs_1042))
    ) | (
        {560}get statestore(=bob,=charlie,=sid,statepack_a(hs_1043: handshakestate)) in
        {533}in(pub, message_a_1044: bitstring);
        {534}let v_1045: bitstring = catch-fail(handshakestateunpack(hs_1043)) in
        {535}let v_1046: bitstring = catch-fail(deconcat3(message_a_1044)) in
        {536}let v_1047: bool = catch-fail(true) in
        {537}let v_1048: key = catch-fail(1-proj-3-tuple(v_1046)) in
        {538}let v_1049: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1045))) in
        {539}let v_1050: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then symmetricstatepack(1-proj-3-tuple(v_1049),2-proj-3-tuple(v_1049),hash(3-proj-3-tuple(v_1049),v_1048)) else fail-any) else fail-any)) in
        {540}let v_1051: bitstring = catch-fail(symmetricstateunpack(v_1050)) in
        {541}let v_1052: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1051),v_1048)) in
        {542}let v_1053: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1051),v_1048)) in
        {543}let v_1054: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1051),v_1048)) in
        {544}let v_1055: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1051)) then (if not-caught-fail(v_1052) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1054) then (v_1052,v_1053,v_1054) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {545}let v_1056: symmetricstate = catch-fail((if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1055)) then cipherstatepack(2-proj-3-tuple(v_1055),minnonce) else fail-any),1-proj-3-tuple(v_1055),3-proj-3-tuple(v_1051)) else fail-any) else fail-any)) in
        {546}let v_1057: bitstring = catch-fail(symmetricstateunpack(v_1056)) in
        {547}let v_1058: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1057))) in
        {548}let v_1059: aead = catch-fail(decrypt(1-proj-2-tuple(v_1058),2-proj-2-tuple(v_1058),3-proj-3-tuple(v_1057),3-proj-3-tuple(v_1046))) in
        {549}let v_1060: bitstring = catch-fail(aeadunpack(v_1059)) in
        {550}let v_1061: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1057))) in
        {551}let v_1062: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1058))) && success?(1-proj-3-tuple(v_1057))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then cipherstatepack(1-proj-2-tuple(v_1061),increment_nonce(2-proj-2-tuple(v_1058))) else fail-any) else fail-any)) in
        {552}let v_1063: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1046)) && (success?(3-proj-3-tuple(v_1057)) && success?(1-proj-3-tuple(v_1057)))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then (if not-caught-fail(v_1059) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if not-caught-fail(v_1062) then (v_1062,3-proj-3-tuple(v_1060),1-proj-3-tuple(v_1060)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1064: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1063),2-proj-3-tuple(v_1057),3-proj-3-tuple(v_1057)))) in
        {554}let v_1065: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1046)) && success?(symmetricstatepack(1-proj-3-tuple(v_1063),2-proj-3-tuple(v_1057),3-proj-3-tuple(v_1057)))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then symmetricstatepack(1-proj-3-tuple(v_1064),2-proj-3-tuple(v_1064),hash(3-proj-3-tuple(v_1064),3-proj-3-tuple(v_1046))) else fail-any) else fail-any)) in
        {555}let v_1066: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1046)) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then (if not-caught-fail(v_1065) then (v_1065,2-proj-3-tuple(v_1063),3-proj-3-tuple(v_1063)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {556}let v_1067: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1066),2-proj-7-tuple(v_1045),3-proj-7-tuple(v_1045),4-proj-7-tuple(v_1045),v_1048,6-proj-7-tuple(v_1045),7-proj-7-tuple(v_1045))) in
        {557}let (hs_1068: handshakestate,plaintext_a_1069: bitstring,valid_1070: bool) = (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-7-tuple(v_1045))))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if not-caught-fail(v_1047) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1056) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then (if (v_1047 && 3-proj-3-tuple(v_1066)) then (if not-caught-fail(v_1067) then (v_1067,2-proj-3-tuple(v_1066),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {558}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1069);
        {559}insert statestore(bob,charlie,sid,statepack_b(hs_1068))
    ) | (
        {637}get statestore(=bob,=charlie,=sid,statepack_b(hs_1071: handshakestate)) in
        {561}let v_1072: bitstring = catch-fail(handshakestateunpack(hs_1071)) in
        {562}let v_1073: bitstring = catch-fail((empty,empty,empty)) in
        {563}let v_1074: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {564}let v_1075: keypair = catch-fail((if not-caught-fail(v_1074) then keypairpack(validkey(v_1074),key_e(bob,charlie,sid)) else fail-any)) in
        {565}let v_1076: bitstring = catch-fail(getpublickey(v_1075)) in
        {566}let v_1077: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1072))) in
        {567}let v_1078: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then symmetricstatepack(1-proj-3-tuple(v_1077),2-proj-3-tuple(v_1077),hash(3-proj-3-tuple(v_1077),v_1076)) else fail-any) else fail-any)) in
        {568}let v_1079: bitstring = catch-fail(symmetricstateunpack(v_1078)) in
        {569}let v_1080: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1079),getpublickey(v_1075))) in
        {570}let v_1081: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1079),getpublickey(v_1075))) in
        {571}let v_1082: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1079),getpublickey(v_1075))) in
        {572}let v_1083: bitstring = catch-fail((if (success?(getpublickey(v_1075)) && success?(2-proj-3-tuple(v_1079))) then (if not-caught-fail(v_1080) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (v_1080,v_1081,v_1082) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1084: symmetricstate = catch-fail((if success?(getpublickey(v_1075)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1083)) then cipherstatepack(2-proj-3-tuple(v_1083),minnonce) else fail-any),1-proj-3-tuple(v_1083),3-proj-3-tuple(v_1079)) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1085: bitstring = catch-fail(keypairunpack(v_1075)) in
        {575}let v_1086: bitstring = catch-fail(symmetricstateunpack(v_1084)) in
        {576}let v_1087: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1086),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then dhexp(2-proj-2-tuple(v_1085),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {577}let v_1088: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1086),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then dhexp(2-proj-2-tuple(v_1085),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {578}let v_1089: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1086),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then dhexp(2-proj-2-tuple(v_1085),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {579}let v_1090: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then dhexp(2-proj-2-tuple(v_1085),5-proj-7-tuple(v_1072)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1086))) then (if not-caught-fail(v_1087) then (if not-caught-fail(v_1088) then (if not-caught-fail(v_1089) then (v_1087,v_1088,v_1089) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {580}let v_1091: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then dhexp(2-proj-2-tuple(v_1085),5-proj-7-tuple(v_1072)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1090)) then cipherstatepack(2-proj-3-tuple(v_1090),minnonce) else fail-any),1-proj-3-tuple(v_1090),3-proj-3-tuple(v_1086)) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1092: bitstring = catch-fail(keypairunpack(v_1075)) in
        {582}let v_1093: bitstring = catch-fail(symmetricstateunpack(v_1091)) in
        {583}let v_1094: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1093),(if success?(4-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then dhexp(2-proj-2-tuple(v_1092),4-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {584}let v_1095: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1093),(if success?(4-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then dhexp(2-proj-2-tuple(v_1092),4-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {585}let v_1096: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1093),(if success?(4-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then dhexp(2-proj-2-tuple(v_1092),4-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {586}let v_1097: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then dhexp(2-proj-2-tuple(v_1092),4-proj-7-tuple(v_1072)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1093))) then (if not-caught-fail(v_1094) then (if not-caught-fail(v_1095) then (if not-caught-fail(v_1096) then (v_1094,v_1095,v_1096) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {587}let v_1098: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then dhexp(2-proj-2-tuple(v_1092),4-proj-7-tuple(v_1072)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-3-tuple(v_1097))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1097)) then cipherstatepack(2-proj-3-tuple(v_1097),minnonce) else fail-any),1-proj-3-tuple(v_1097),3-proj-3-tuple(v_1093)) else fail-any) else fail-any) else fail-any)) in
        {588}let v_1099: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {589}let v_1100: keypair = catch-fail((if not-caught-fail(v_1099) then keypairpack(validkey(v_1099),key_s(bob)) else fail-any)) in
        {590}let v_1101: bitstring = catch-fail(symmetricstateunpack(v_1098)) in
        {591}let v_1102: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1101))) in
        {592}let v_1103: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1102),2-proj-2-tuple(v_1102),3-proj-3-tuple(v_1101),getpublickey(v_1100))) in
        {593}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1101))) in
        {594}let v_1105: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1102))) && success?(1-proj-3-tuple(v_1101))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then cipherstatepack(1-proj-2-tuple(v_1104),increment_nonce(2-proj-2-tuple(v_1102))) else fail-any) else fail-any)) in
        {595}let v_1106: bitstring = catch-fail((if (success?(getpublickey(v_1100)) && (success?(3-proj-3-tuple(v_1101)) && success?(1-proj-3-tuple(v_1101)))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then (if not-caught-fail(v_1103) then (if not-caught-fail(v_1105) then (v_1105,v_1103) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {596}let v_1107: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1106),2-proj-3-tuple(v_1101),3-proj-3-tuple(v_1101)))) in
        {597}let v_1108: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1106)) && success?(symmetricstatepack(1-proj-2-tuple(v_1106),2-proj-3-tuple(v_1101),3-proj-3-tuple(v_1101)))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1107),hash(3-proj-3-tuple(v_1107),2-proj-2-tuple(v_1106))) else fail-any) else fail-any)) in
        {598}let v_1109: bitstring = catch-fail((if success?(getpublickey(v_1100)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then (if not-caught-fail(v_1108) then (v_1108,2-proj-2-tuple(v_1106)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1110: bitstring = catch-fail(keypairunpack(v_1100)) in
        {600}let v_1111: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1109))) in
        {601}let v_1112: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1111),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then dhexp(2-proj-2-tuple(v_1110),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {602}let v_1113: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1111),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then dhexp(2-proj-2-tuple(v_1110),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {603}let v_1114: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1111),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then dhexp(2-proj-2-tuple(v_1110),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {604}let v_1115: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then dhexp(2-proj-2-tuple(v_1110),5-proj-7-tuple(v_1072)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1111))) then (if not-caught-fail(v_1112) then (if not-caught-fail(v_1113) then (if not-caught-fail(v_1114) then (v_1112,v_1113,v_1114) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1116: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then dhexp(2-proj-2-tuple(v_1110),5-proj-7-tuple(v_1072)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1109))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-3-tuple(v_1115))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1115)) then cipherstatepack(2-proj-3-tuple(v_1115),minnonce) else fail-any),1-proj-3-tuple(v_1115),3-proj-3-tuple(v_1111)) else fail-any) else fail-any) else fail-any)) in
        {606}let v_1117: bitstring = catch-fail(symmetricstateunpack(v_1116)) in
        {607}let v_1118: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1117),6-proj-7-tuple(v_1072))) in
        {608}let v_1119: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1117),6-proj-7-tuple(v_1072))) in
        {609}let v_1120: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1117),6-proj-7-tuple(v_1072))) in
        {610}let v_1121: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1072)) && success?(2-proj-3-tuple(v_1117))) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1119) then (if not-caught-fail(v_1120) then (v_1118,v_1119,v_1120) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {611}let v_1122: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1117),1-proj-3-tuple(v_1121),3-proj-3-tuple(v_1117)))) in
        {612}let v_1123: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1121)) && success?(symmetricstatepack(1-proj-3-tuple(v_1117),1-proj-3-tuple(v_1121),3-proj-3-tuple(v_1117)))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then symmetricstatepack(1-proj-3-tuple(v_1122),2-proj-3-tuple(v_1122),hash(3-proj-3-tuple(v_1122),2-proj-3-tuple(v_1121))) else fail-any) else fail-any))) in
        {613}let v_1124: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1121)) then cipherstatepack(3-proj-3-tuple(v_1121),minnonce) else fail-any),1-proj-3-tuple(v_1121),3-proj-3-tuple(v_1123)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1125: bitstring = catch-fail(symmetricstateunpack(v_1124)) in
        {615}let v_1126: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1125))) in
        {616}let v_1127: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1126),2-proj-2-tuple(v_1126),3-proj-3-tuple(v_1125),msg_b(bob,charlie,sid))) in
        {617}let v_1128: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1125))) in
        {618}let v_1129: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1126))) && success?(1-proj-3-tuple(v_1125))) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-2-tuple(v_1128))))) then cipherstatepack(1-proj-2-tuple(v_1128),increment_nonce(2-proj-2-tuple(v_1126))) else fail-any) else fail-any)) in
        {619}let v_1130: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1125)) && success?(1-proj-3-tuple(v_1125))) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then (if not-caught-fail(v_1127) then (if not-caught-fail(v_1129) then (v_1129,v_1127) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {620}let v_1131: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1130),2-proj-3-tuple(v_1125),3-proj-3-tuple(v_1125)))) in
        {621}let v_1132: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1130)) && success?(symmetricstatepack(1-proj-2-tuple(v_1130),2-proj-3-tuple(v_1125),3-proj-3-tuple(v_1125)))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then symmetricstatepack(1-proj-3-tuple(v_1131),2-proj-3-tuple(v_1131),hash(3-proj-3-tuple(v_1131),2-proj-2-tuple(v_1130))) else fail-any) else fail-any)) in
        {622}let v_1133: bitstring = catch-fail((if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-2-tuple(v_1130))))) then (if not-caught-fail(v_1132) then (v_1132,2-proj-2-tuple(v_1130)) else fail-any) else fail-any) else fail-any)) in
        {623}let v_1134: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1133),v_1100,v_1075,4-proj-7-tuple(v_1072),5-proj-7-tuple(v_1072),6-proj-7-tuple(v_1072),7-proj-7-tuple(v_1072))) in
        {624}let v_1135: bitstring = catch-fail(concat3(v_1076,2-proj-2-tuple(v_1109),2-proj-2-tuple(v_1133))) in
        {625}let v_1136: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1133))) in
        {626}let v_1137: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1136),zero)) in
        {627}let v_1138: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1136),zero)) in
        {628}let v_1139: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1136),zero)) in
        {629}let v_1140: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1136)) then (if not-caught-fail(v_1137) then (if not-caught-fail(v_1138) then (if not-caught-fail(v_1139) then (v_1137,v_1138,v_1139) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {630}let v_1141: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1140)) then cipherstatepack(1-proj-3-tuple(v_1140),minnonce) else fail-any)) in
        {631}let v_1142: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1140)) then cipherstatepack(2-proj-3-tuple(v_1140),minnonce) else fail-any)) in
        {632}let v_1143: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1133)) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-3-tuple(v_1136))))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-3-tuple(v_1140))))) then (if not-caught-fail(v_1141) then (if not-caught-fail(v_1142) then (1-proj-2-tuple(v_1133),v_1141,v_1142) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {633}let (hs_1144: handshakestate,message_b_1145: bitstring,cs1_1146: cipherstate,cs2_1147: cipherstate) = (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-7-tuple(v_1072))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (if not-caught-fail(v_1078) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1091) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1100) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then (if not-caught-fail(v_1116) then (if not-caught-fail(v_1124) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-2-tuple(v_1133))))) then (if not-caught-fail(v_1134) then (if not-caught-fail(v_1135) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-3-tuple(v_1143))))) then (v_1134,v_1135,2-proj-3-tuple(v_1143),3-proj-3-tuple(v_1143)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {634}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {635}insert statestore(bob,charlie,sid,statepack_c(hs_1144,cs1_1146,cs2_1147));
        {636}out(pub, message_b_1145)
    ) | (
        {638}!
        {658}get statestore(=bob,=charlie,=sid,statepack_c(hs_1148: handshakestate,cs1_1149: cipherstate,cs2_1150: cipherstate)) in
        {639}let hs_1151: handshakestate = handshakestatesetcs(hs_1148,cs1_1149) in
        {640}in(pub, message_c_1152: bitstring);
        {641}let v_1153: bitstring = catch-fail(handshakestateunpack(hs_1151)) in
        {642}let v_1154: bitstring = catch-fail(deconcat3(message_c_1152)) in
        {643}let v_1155: bool = catch-fail(true) in
        {644}let v_1156: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1153))) in
        {645}let v_1157: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {646}let v_1158: aead = catch-fail(decrypt(1-proj-2-tuple(v_1157),2-proj-2-tuple(v_1157),3-proj-3-tuple(v_1156),3-proj-3-tuple(v_1154))) in
        {647}let v_1159: bitstring = catch-fail(aeadunpack(v_1158)) in
        {648}let v_1160: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {649}let v_1161: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1157))) && success?(1-proj-3-tuple(v_1156))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-2-tuple(v_1160))))) then cipherstatepack(1-proj-2-tuple(v_1160),increment_nonce(2-proj-2-tuple(v_1157))) else fail-any) else fail-any)) in
        {650}let v_1162: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && (success?(3-proj-3-tuple(v_1156)) && success?(1-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-2-tuple(v_1157))))) then (if not-caught-fail(v_1158) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then (if not-caught-fail(v_1161) then (v_1161,3-proj-3-tuple(v_1159),1-proj-3-tuple(v_1159)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {651}let v_1163: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) in
        {652}let v_1164: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then symmetricstatepack(1-proj-3-tuple(v_1163),2-proj-3-tuple(v_1163),hash(3-proj-3-tuple(v_1163),3-proj-3-tuple(v_1154))) else fail-any) else fail-any)) in
        {653}let v_1165: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(1-proj-7-tuple(v_1153))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-3-tuple(v_1162))))) then (if not-caught-fail(v_1164) then (v_1164,2-proj-3-tuple(v_1162),3-proj-3-tuple(v_1162)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {654}let v_1166: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1165),2-proj-7-tuple(v_1153),3-proj-7-tuple(v_1153),4-proj-7-tuple(v_1153),5-proj-7-tuple(v_1153),6-proj-7-tuple(v_1153),7-proj-7-tuple(v_1153))) in
        {655}let (hs_1167: handshakestate,plaintext_c_1168: bitstring,valid_1169: bool) = (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-7-tuple(v_1153))))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then (if not-caught-fail(v_1155) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if (v_1155 && 3-proj-3-tuple(v_1165)) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1165),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {656}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1168);
        {657}insert statestore(bob,charlie,sid,statepack_d(hs_1167,handshakestategetcs(hs_1167),cs2_1150))
    ) | (
        {659}!
        {677}get statestore(=bob,=charlie,=sid,statepack_d(hs_1170: handshakestate,cs1_1171: cipherstate,cs2_1172: cipherstate)) in
        {660}let hs_1173: handshakestate = handshakestatesetcs(hs_1170,cs2_1172) in
        {661}let v_1174: bitstring = catch-fail(handshakestateunpack(hs_1173)) in
        {662}let v_1175: bitstring = catch-fail((empty,empty,empty)) in
        {663}let v_1176: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1174))) in
        {664}let v_1177: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1176))) in
        {665}let v_1178: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1177),2-proj-2-tuple(v_1177),3-proj-3-tuple(v_1176),msg_d(bob,charlie,sid))) in
        {666}let v_1179: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1176))) in
        {667}let v_1180: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1177))) && success?(1-proj-3-tuple(v_1176))) then (if (not-caught-fail(v_1179) && success?(is-true(success?(1-proj-2-tuple(v_1179))))) then cipherstatepack(1-proj-2-tuple(v_1179),increment_nonce(2-proj-2-tuple(v_1177))) else fail-any) else fail-any)) in
        {668}let v_1181: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1176)) && success?(1-proj-3-tuple(v_1176))) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-2-tuple(v_1177))))) then (if not-caught-fail(v_1178) then (if not-caught-fail(v_1180) then (v_1180,v_1178) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {669}let v_1182: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1181),2-proj-3-tuple(v_1176),3-proj-3-tuple(v_1176)))) in
        {670}let v_1183: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1181)) && success?(symmetricstatepack(1-proj-2-tuple(v_1181),2-proj-3-tuple(v_1176),3-proj-3-tuple(v_1176)))) then (if (not-caught-fail(v_1182) && success?(is-true(success?(1-proj-3-tuple(v_1182))))) then symmetricstatepack(1-proj-3-tuple(v_1182),2-proj-3-tuple(v_1182),hash(3-proj-3-tuple(v_1182),2-proj-2-tuple(v_1181))) else fail-any) else fail-any)) in
        {671}let v_1184: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1174)) then (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-3-tuple(v_1176))))) then (if (not-caught-fail(v_1181) && success?(is-true(success?(1-proj-2-tuple(v_1181))))) then (if not-caught-fail(v_1183) then (v_1183,2-proj-2-tuple(v_1181)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {672}let v_1185: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1184),2-proj-7-tuple(v_1174),3-proj-7-tuple(v_1174),4-proj-7-tuple(v_1174),5-proj-7-tuple(v_1174),6-proj-7-tuple(v_1174),7-proj-7-tuple(v_1174))) in
        {673}let v_1186: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1175),2-proj-3-tuple(v_1175),2-proj-2-tuple(v_1184))) in
        {674}let (hs_1187: handshakestate,message_d_1188: bitstring) = (if (not-caught-fail(v_1174) && success?(is-true(success?(1-proj-7-tuple(v_1174))))) then (if (not-caught-fail(v_1175) && success?(is-true(success?(1-proj-3-tuple(v_1175))))) then (if (not-caught-fail(v_1184) && success?(is-true(success?(1-proj-2-tuple(v_1184))))) then (if not-caught-fail(v_1185) then (if not-caught-fail(v_1186) then (v_1185,v_1186) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {675}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {676}out(pub, message_d_1188)
    ) | (
        {678}event LeakPsk(phase0,charlie,bob);
        {679}out(pub, key_psk(charlie,bob))
    ) | (
        {680}phase 1;
        {681}event LeakPsk(phase1,charlie,bob);
        {682}out(pub, key_psk(charlie,bob))
    ) | (
        {683}event LeakS(phase0,bob);
        {684}out(pub, key_s(bob))
    ) | (
        {685}phase 1;
        {686}event LeakS(phase1,bob);
        {687}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 221 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 48 rules in the queue.
600 rules inserted. The rule base contains 571 rules. 149 rules in the queue.
800 rules inserted. The rule base contains 739 rules. 145 rules in the queue.
1000 rules inserted. The rule base contains 937 rules. 229 rules in the queue.
1200 rules inserted. The rule base contains 1109 rules. 226 rules in the queue.
1400 rules inserted. The rule base contains 1257 rules. 230 rules in the queue.
1600 rules inserted. The rule base contains 1346 rules. 204 rules in the queue.
1800 rules inserted. The rule base contains 1479 rules. 247 rules in the queue.
2000 rules inserted. The rule base contains 1604 rules. 290 rules in the queue.
2200 rules inserted. The rule base contains 1774 rules. 333 rules in the queue.
2400 rules inserted. The rule base contains 1909 rules. 313 rules in the queue.
2600 rules inserted. The rule base contains 2054 rules. 317 rules in the queue.
2800 rules inserted. The rule base contains 2214 rules. 347 rules in the queue.
3000 rules inserted. The rule base contains 2352 rules. 378 rules in the queue.
3200 rules inserted. The rule base contains 2491 rules. 406 rules in the queue.
3400 rules inserted. The rule base contains 2635 rules. 425 rules in the queue.
3600 rules inserted. The rule base contains 2761 rules. 448 rules in the queue.
3800 rules inserted. The rule base contains 2904 rules. 469 rules in the queue.
4000 rules inserted. The rule base contains 3029 rules. 480 rules in the queue.
4200 rules inserted. The rule base contains 3163 rules. 492 rules in the queue.
4400 rules inserted. The rule base contains 3291 rules. 501 rules in the queue.
4600 rules inserted. The rule base contains 3441 rules. 514 rules in the queue.
4800 rules inserted. The rule base contains 3591 rules. 512 rules in the queue.
5000 rules inserted. The rule base contains 3733 rules. 501 rules in the queue.
5200 rules inserted. The rule base contains 3855 rules. 484 rules in the queue.
5400 rules inserted. The rule base contains 4013 rules. 458 rules in the queue.
5600 rules inserted. The rule base contains 4194 rules. 450 rules in the queue.
5800 rules inserted. The rule base contains 4320 rules. 467 rules in the queue.
6000 rules inserted. The rule base contains 4470 rules. 517 rules in the queue.
6200 rules inserted. The rule base contains 4629 rules. 547 rules in the queue.
6400 rules inserted. The rule base contains 4780 rules. 584 rules in the queue.
6600 rules inserted. The rule base contains 4928 rules. 587 rules in the queue.
6800 rules inserted. The rule base contains 5059 rules. 568 rules in the queue.
7000 rules inserted. The rule base contains 5195 rules. 587 rules in the queue.
7200 rules inserted. The rule base contains 5314 rules. 590 rules in the queue.
7400 rules inserted. The rule base contains 5434 rules. 586 rules in the queue.
7600 rules inserted. The rule base contains 5545 rules. 574 rules in the queue.
7800 rules inserted. The rule base contains 5645 rules. 605 rules in the queue.
8000 rules inserted. The rule base contains 5753 rules. 649 rules in the queue.
8200 rules inserted. The rule base contains 5875 rules. 646 rules in the queue.
8400 rules inserted. The rule base contains 5941 rules. 624 rules in the queue.
8600 rules inserted. The rule base contains 6029 rules. 631 rules in the queue.
8800 rules inserted. The rule base contains 6139 rules. 633 rules in the queue.
9000 rules inserted. The rule base contains 6199 rules. 602 rules in the queue.
9200 rules inserted. The rule base contains 6319 rules. 578 rules in the queue.
9400 rules inserted. The rule base contains 6413 rules. 532 rules in the queue.
9600 rules inserted. The rule base contains 6501 rules. 517 rules in the queue.
9800 rules inserted. The rule base contains 6625 rules. 514 rules in the queue.
10000 rules inserted. The rule base contains 6714 rules. 503 rules in the queue.
10200 rules inserted. The rule base contains 6835 rules. 483 rules in the queue.
10400 rules inserted. The rule base contains 6918 rules. 482 rules in the queue.
10600 rules inserted. The rule base contains 7051 rules. 456 rules in the queue.
10800 rules inserted. The rule base contains 7133 rules. 444 rules in the queue.
11000 rules inserted. The rule base contains 7274 rules. 447 rules in the queue.
11200 rules inserted. The rule base contains 7361 rules. 415 rules in the queue.
11400 rules inserted. The rule base contains 7492 rules. 396 rules in the queue.
11600 rules inserted. The rule base contains 7580 rules. 364 rules in the queue.
11800 rules inserted. The rule base contains 7699 rules. 367 rules in the queue.
12000 rules inserted. The rule base contains 7778 rules. 364 rules in the queue.
12200 rules inserted. The rule base contains 7892 rules. 336 rules in the queue.
12400 rules inserted. The rule base contains 8000 rules. 314 rules in the queue.
12600 rules inserted. The rule base contains 8084 rules. 276 rules in the queue.
12800 rules inserted. The rule base contains 8161 rules. 298 rules in the queue.
13000 rules inserted. The rule base contains 8209 rules. 262 rules in the queue.
13200 rules inserted. The rule base contains 8234 rules. 211 rules in the queue.
13400 rules inserted. The rule base contains 8278 rules. 118 rules in the queue.
13600 rules inserted. The rule base contains 8294 rules. 52 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_30816369581]),msg_a(alice,charlie,sid[!1 = @sid_30816369581]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369582]),msg_a(alice,charlie,sid[!1 = @sid_30816369581])))
Abbreviations:
sid_30816369615 = sid[!1 = @sid_30816369605]
sid_30816369616 = sid[!1 = @sid_30816369589]

1. The entry statestore(bob,alice,sid_30816369615,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {362}.
table(statestore(bob,alice,sid_30816369615,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_30816369616,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {190}.
table(statestore(alice,charlie,sid_30816369616,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_30816369616,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {219}.
The event SendMsg(alice,charlie,stagepack_a(sid_30816369616),msg_a(alice,charlie,sid_30816369616)) may be executed at {216}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g))),msg_a(alice,charlie,sid_30816369616))) may be sent on channel pub at output {218}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g))),msg_a(alice,charlie,sid_30816369616)))).

4. The entry statestore(bob,alice,sid_30816369615,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {390}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g))),msg_a(alice,charlie,sid_30816369616))) that may be sent on channel pub by 3 may be received at input {363}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_30816369616),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_30816369615),msg_a(alice,charlie,sid_30816369616)) may be executed at {388}.
end(RecvMsg(bob,alice,stagepack_a(sid_30816369615),msg_a(alice,charlie,sid_30816369616))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369619]),msg_a(alice,bob,sid[!1 = @sid_30816369619]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369620]),msg_a(alice,bob,sid[!1 = @sid_30816369619])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_30816369623]),msg_a(alice,charlie,sid[!1 = @sid_30816369623]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369624]),msg_a(alice,charlie,sid[!1 = @sid_30816369623])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369633]),msg_a(alice,bob,sid[!1 = @sid_30816369633]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369634]),msg_a(alice,bob,sid[!1 = @sid_30816369633])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_30816369637]),msg_a(alice,charlie,sid[!1 = @sid_30816369637]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369638]),msg_a(alice,charlie,sid[!1 = @sid_30816369637])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_30816369651]),msg_a(alice,charlie,sid[!1 = @sid_30816369651]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369652]),msg_a(alice,charlie,sid[!1 = @sid_30816369651])))
Abbreviations:
sid_30816369685 = sid[!1 = @sid_30816369675]
sid_30816369686 = sid[!1 = @sid_30816369659]

1. The entry statestore(bob,alice,sid_30816369685,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {362}.
table(statestore(bob,alice,sid_30816369685,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_30816369686,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {190}.
table(statestore(alice,charlie,sid_30816369686,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_30816369686,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {219}.
The event SendMsg(alice,charlie,stagepack_a(sid_30816369686),msg_a(alice,charlie,sid_30816369686)) may be executed at {216}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g))),msg_a(alice,charlie,sid_30816369686))) may be sent on channel pub at output {218}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g))),msg_a(alice,charlie,sid_30816369686)))).

4. The entry statestore(bob,alice,sid_30816369685,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {390}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g))),msg_a(alice,charlie,sid_30816369686))) that may be sent on channel pub by 3 may be received at input {363}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_30816369686),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_30816369685),msg_a(alice,charlie,sid_30816369686)) may be executed at {388}.
end(RecvMsg(bob,alice,stagepack_a(sid_30816369685),msg_a(alice,charlie,sid_30816369686))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_30816369693]),msg_a(alice,charlie,sid[!1 = @sid_30816369693]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30816369694]),msg_a(alice,charlie,sid[!1 = @sid_30816369693])))
Abbreviations:
sid_30816369727 = sid[!1 = @sid_30816369717]
sid_30816369728 = sid[!1 = @sid_30816369701]

1. The entry statestore(bob,alice,sid_30816369727,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {362}.
table(statestore(bob,alice,sid_30816369727,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_30816369728,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {190}.
table(statestore(alice,charlie,sid_30816369728,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_30816369728,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {219}.
The event SendMsg(alice,charlie,stagepack_a(sid_30816369728),msg_a(alice,charlie,sid_30816369728)) may be executed at {216}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g))),msg_a(alice,charlie,sid_30816369728))) may be sent on channel pub at output {218}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g))),msg_a(alice,charlie,sid_30816369728)))).

4. The entry statestore(bob,alice,sid_30816369727,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {390}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g))),msg_a(alice,charlie,sid_30816369728))) that may be sent on channel pub by 3 may be received at input {363}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_30816369728),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_30816369727),msg_a(alice,charlie,sid_30816369728)) may be executed at {388}.
end(RecvMsg(bob,alice,stagepack_a(sid_30816369727),msg_a(alice,charlie,sid_30816369728))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369731]),msg_a(alice,bob,sid[!1 = @sid_30816369731]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30816369731]))
Abbreviations:
sid_30816369788 = sid[!1 = @sid_30816369764]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30816369788,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_30816369788,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30816369788,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stagepack_a(sid_30816369788),msg_a(alice,bob,sid_30816369788)) may be executed at {44}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))) may be sent on channel pub at output {46}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g)))).

17. By 16, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))).
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788))).

18. By 17, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369788),g))),msg_a(alice,bob,sid_30816369788)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30816369788).
attacker(msg_a(alice,bob,sid_30816369788)).

19. By 18, the attacker may know msg_a(alice,bob,sid_30816369788).
So the attacker may know msg_a(alice,bob,sid_30816369788) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30816369788)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369791]),msg_a(alice,bob,sid[!1 = @sid_30816369791]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30816369791]))
Abbreviations:
sid_30816369849 = sid[!1 = @sid_30816369825]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30816369849,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_30816369849,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30816369849,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stagepack_a(sid_30816369849),msg_a(alice,bob,sid_30816369849)) may be executed at {44}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))) may be sent on channel pub at output {46}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g)))).

17. By 16, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))).
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849))).

18. By 17, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369849),g))),msg_a(alice,bob,sid_30816369849)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30816369849).
attacker(msg_a(alice,bob,sid_30816369849)).

19. By 18, the attacker may know msg_a(alice,bob,sid_30816369849).
So the attacker may know msg_a(alice,bob,sid_30816369849) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30816369849)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369852]),msg_a(alice,bob,sid[!1 = @sid_30816369852]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30816369852]))
Abbreviations:
sid_30816369911 = sid[!1 = @sid_30816369887]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30816369911,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_30816369911,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30816369911,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stagepack_a(sid_30816369911),msg_a(alice,bob,sid_30816369911)) may be executed at {44}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))) may be sent on channel pub at output {46}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g)))).

17. By 16, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))).
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911))).

18. By 17, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369911),g))),msg_a(alice,bob,sid_30816369911)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30816369911).
attacker(msg_a(alice,bob,sid_30816369911)).

19. By 18, the attacker may know msg_a(alice,bob,sid_30816369911).
So the attacker may know msg_a(alice,bob,sid_30816369911) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30816369911)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369914]),msg_a(alice,bob,sid[!1 = @sid_30816369914]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30816369914]))
Abbreviations:
sid_30816369971 = sid[!1 = @sid_30816369947]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30816369971,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_30816369971,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30816369971,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stagepack_a(sid_30816369971),msg_a(alice,bob,sid_30816369971)) may be executed at {44}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))) may be sent on channel pub at output {46}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g)))).

17. By 16, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))).
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971))).

18. By 17, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816369971),g))),msg_a(alice,bob,sid_30816369971)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30816369971).
attacker(msg_a(alice,bob,sid_30816369971)).

19. By 18, the attacker may know msg_a(alice,bob,sid_30816369971).
So the attacker may know msg_a(alice,bob,sid_30816369971) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30816369971)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816369974]),msg_b(bob,alice,sid[!1 = @sid_30816369974]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369975]),msg_a(alice,bob,sid[!1 = @sid_30816369975]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_30816369975]),msg_b(bob,alice,sid[!1 = @sid_30816369974])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816369983]),msg_b(bob,alice,sid[!1 = @sid_30816369983]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369984]),msg_a(alice,bob,sid[!1 = @sid_30816369984]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_30816369984]),msg_b(bob,alice,sid[!1 = @sid_30816369983])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816369993]),msg_b(bob,alice,sid[!1 = @sid_30816369993]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816369994]),msg_a(alice,bob,sid[!1 = @sid_30816369994]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_30816369994]),msg_b(bob,alice,sid[!1 = @sid_30816369993])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370003]),msg_b(bob,alice,sid[!1 = @sid_30816370003]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370004]),msg_a(alice,bob,sid[!1 = @sid_30816370004]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_30816370004]),msg_b(bob,alice,sid[!1 = @sid_30816370003])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370012]),msg_b(bob,alice,sid[!1 = @sid_30816370012]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370013]),msg_a(alice,bob,sid[!1 = @sid_30816370013]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_30816370013]),msg_b(bob,alice,sid[!1 = @sid_30816370012])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370038]),msg_c(alice,bob,sid[!1 = @sid_30816370038]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370039]),msg_b(bob,alice,sid[!1 = @sid_30816370039]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370038]),msg_a(alice,bob,sid[!1 = @sid_30816370038]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_30816370039]),msg_c(alice,bob,sid[!1 = @sid_30816370038])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370047]),msg_c(alice,bob,sid[!1 = @sid_30816370047]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370048]),msg_b(bob,alice,sid[!1 = @sid_30816370048]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370047]),msg_a(alice,bob,sid[!1 = @sid_30816370047]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_30816370048]),msg_c(alice,bob,sid[!1 = @sid_30816370047])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370057]),msg_c(alice,bob,sid[!1 = @sid_30816370057]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370058]),msg_b(bob,alice,sid[!1 = @sid_30816370058]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370057]),msg_a(alice,bob,sid[!1 = @sid_30816370057]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_30816370058]),msg_c(alice,bob,sid[!1 = @sid_30816370057])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1298,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370067]),msg_c(alice,bob,sid[!1 = @sid_30816370067]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370068]),msg_b(bob,alice,sid[!1 = @sid_30816370068]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370067]),msg_a(alice,bob,sid[!1 = @sid_30816370067]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_30816370068]),msg_c(alice,bob,sid[!1 = @sid_30816370067])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370076]),msg_c(alice,bob,sid[!1 = @sid_30816370076]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370077]),msg_b(bob,alice,sid[!1 = @sid_30816370077]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370076]),msg_a(alice,bob,sid[!1 = @sid_30816370076]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_30816370077]),msg_c(alice,bob,sid[!1 = @sid_30816370076])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_30816370102]),msg_d(bob,alice,sid[!1 = @sid_30816370102]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370103]),msg_c(alice,bob,sid[!1 = @sid_30816370103]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370102]),msg_b(bob,alice,sid[!1 = @sid_30816370102]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370103]),msg_a(alice,bob,sid[!1 = @sid_30816370103]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_30816370103]),msg_d(bob,alice,sid[!1 = @sid_30816370102])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_30816370111]),msg_d(bob,alice,sid[!1 = @sid_30816370111]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370112]),msg_c(alice,bob,sid[!1 = @sid_30816370112]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370111]),msg_b(bob,alice,sid[!1 = @sid_30816370111]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370112]),msg_a(alice,bob,sid[!1 = @sid_30816370112]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_30816370112]),msg_d(bob,alice,sid[!1 = @sid_30816370111])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_30816370121]),msg_d(bob,alice,sid[!1 = @sid_30816370121]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370122]),msg_c(alice,bob,sid[!1 = @sid_30816370122]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370121]),msg_b(bob,alice,sid[!1 = @sid_30816370121]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370122]),msg_a(alice,bob,sid[!1 = @sid_30816370122]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_30816370122]),msg_d(bob,alice,sid[!1 = @sid_30816370121])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1298,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_30816370131]),msg_d(bob,alice,sid[!1 = @sid_30816370131]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370132]),msg_c(alice,bob,sid[!1 = @sid_30816370132]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370131]),msg_b(bob,alice,sid[!1 = @sid_30816370131]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370132]),msg_a(alice,bob,sid[!1 = @sid_30816370132]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_30816370132]),msg_d(bob,alice,sid[!1 = @sid_30816370131])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_30816370140]),msg_d(bob,alice,sid[!1 = @sid_30816370140]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370141]),msg_c(alice,bob,sid[!1 = @sid_30816370141]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370140]),msg_b(bob,alice,sid[!1 = @sid_30816370140]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370141]),msg_a(alice,bob,sid[!1 = @sid_30816370141]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_30816370141]),msg_d(bob,alice,sid[!1 = @sid_30816370140])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_30816370164]),msg_d(bob,alice,sid[!1 = @sid_30816370164]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_30816370165]),msg_c(alice,bob,sid[!1 = @sid_30816370165]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_30816370164]),msg_b(bob,alice,sid[!1 = @sid_30816370164]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30816370165]),msg_a(alice,bob,sid[!1 = @sid_30816370165]))) -> end(RecvEnd(true))
Abbreviations:
sid_30816370399 = sid[!1 = @sid_30816370388]
sid_30816370400 = sid[!1 = @sid_30816370344]

1. The entry statestore(alice,bob,sid_30816370399,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_30816370399,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_30816370399,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {47}.
The event SendMsg(alice,bob,stagepack_a(sid_30816370399),msg_a(alice,bob,sid_30816370399)) may be executed at {44}.
So the entry statestore(alice,bob,sid_30816370399,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {45}.
table(statestore(alice,bob,sid_30816370399,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_30816370400,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {362}.
table(statestore(bob,alice,sid_30816370400,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_30816370399,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {47}.
The event SendMsg(alice,bob,stagepack_a(sid_30816370399),msg_a(alice,bob,sid_30816370399)) may be executed at {44}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))) may be sent on channel pub at output {46}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))).

5. The entry statestore(bob,alice,sid_30816370400,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {390}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))) that may be sent on channel pub by 4 may be received at input {363}.
We have validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_30816370400,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {389}.
table(statestore(bob,alice,sid_30816370400,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_30816370400,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {467}.
The event SendMsg(bob,alice,stagepack_b(sid_30816370400),msg_b(bob,alice,sid_30816370400)) may be executed at {464}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))) may be sent on channel pub at output {466}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))).

7. The entry statestore(alice,bob,sid_30816370399,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {124}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))) that may be sent on channel pub by 6 may be received at input {48}.
So the entry statestore(alice,bob,sid_30816370399,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {123}.
table(statestore(alice,bob,sid_30816370399,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_30816370399,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {144}.
The event SendMsg(alice,bob,stagepack_c(sid_30816370399),msg_c(alice,bob,sid_30816370399)) may be executed at {141}.
So the entry statestore(alice,bob,sid_30816370399,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {142}.
table(statestore(alice,bob,sid_30816370399,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_30816370400,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {467}.
The event SendMsg(bob,alice,stagepack_b(sid_30816370400),msg_b(bob,alice,sid_30816370400)) may be executed at {464}.
So the entry statestore(bob,alice,sid_30816370400,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_e(bob,alice,sid_30816370400)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {465}.
table(statestore(bob,alice,sid_30816370400,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_e(bob,alice,sid_30816370400)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_30816370399,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {144}.
The event SendMsg(alice,bob,stagepack_c(sid_30816370399),msg_c(alice,bob,sid_30816370399)) may be executed at {141}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399))) may be sent on channel pub at output {143}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))).

11. The entry statestore(bob,alice,sid_30816370400,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_e(bob,alice,sid_30816370400)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 9 may be read at get {488}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399))) that may be sent on channel pub by 10 may be received at input {470}.
So the entry statestore(bob,alice,sid_30816370400,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_e(bob,alice,sid_30816370400)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {487}.
table(statestore(bob,alice,sid_30816370400,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_e(bob,alice,sid_30816370400)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_30816370400,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_e(bob,alice,sid_30816370400)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 11 may be read at get {507}.
The event SendMsg(bob,alice,stagepack_d(sid_30816370400),msg_d(bob,alice,sid_30816370400)) may be executed at {505}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399))),msg_d(bob,alice,sid_30816370400))) may be sent on channel pub at output {506}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399))),msg_d(bob,alice,sid_30816370400)))).

13. The entry statestore(alice,bob,sid_30816370399,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g)),key_e(alice,bob,sid_30816370399)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 8 may be read at get {165}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),msg_a(alice,bob,sid_30816370399))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_30816370399),g))),validkey(dhexp_real(key_e(bob,alice,sid_30816370400),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_e(alice,bob,sid_30816370399),g))),dhexp_real(key_e(bob,alice,sid_30816370400),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30816370399),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_30816370400))),msg_c(alice,bob,sid_30816370399))),msg_d(bob,alice,sid_30816370400))) that may be sent on channel pub by 12 may be received at input {147}.
So event RecvEnd(true) may be executed at {164}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
