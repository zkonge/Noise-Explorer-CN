File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 230, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 231, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 231, character 36:
Warning: identifier h rebound.
File "I1K.noise.passive.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 272, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 277, character 6:
Warning: identifier s rebound.
File "I1K.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 278, characters 26-27:
Warning: identifier ns rebound.
File "I1K.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 279, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 310, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 318, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 331, characters 26-27:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 331, characters 40-45:
Warning: identifier valid1 rebound.
File "I1K.noise.passive.pv", line 332, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.passive.pv", line 333, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 335, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 343, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 567, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 318, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 553, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 343, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 272, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 277, character 6:
Warning: identifier s rebound.
File "I1K.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 278, characters 26-27:
Warning: identifier ns rebound.
File "I1K.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 279, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 619, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 621, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 612, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 613, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 310, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 606, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 599, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "I1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 593, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 331, characters 26-27:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 331, characters 40-45:
Warning: identifier valid1 rebound.
File "I1K.noise.passive.pv", line 332, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.passive.pv", line 333, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 335, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_554: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_554));
    (
        {6}let e_555: keypair = keypairpack(empty,empty) in
        {7}let v_556: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {8}let rs_557: key = getpublickey((if not-caught-fail(v_556) then keypairpack(validkey(v_556),key_s(bob)) else fail-any)) in
        {9}let re_558: key = empty in
        {10}let v_559: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_560: key = catch-fail(v_559) in
        {12}let v_561: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_562: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then symmetricstatepack(v_561,v_560,v_559) else fail-any) else fail-any) else fail-any))) in
        {14}let v_563: symmetricstate = catch-fail((if success?((if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then symmetricstatepack(v_561,v_560,v_559) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_562),hash(3-proj-3-tuple(v_562),empty)) else fail-any) else fail-any)) in
        {15}let v_564: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {16}let v_565: symmetricstate = catch-fail((if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),rs_557)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_563) then (if not-caught-fail(v_565) then handshakestatepack(v_565,s_554,e_555,rs_557,re_558,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {59}get statestore(=alice,=bob,=sid,statepack_a(hs_566: handshakestate)) in
        {19}let v_567: bitstring = catch-fail(handshakestateunpack(hs_566)) in
        {20}let v_568: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_569: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_570: keypair = catch-fail((if not-caught-fail(v_569) then keypairpack(validkey(v_569),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_571: bitstring = catch-fail(getpublickey(v_570)) in
        {24}let v_572: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_567))) in
        {25}let v_573: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_567)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_572),hash(3-proj-3-tuple(v_572),v_571)) else fail-any) else fail-any)) in
        {26}let v_574: bitstring = catch-fail(keypairunpack(v_570)) in
        {27}let v_575: bitstring = catch-fail(symmetricstateunpack(v_573)) in
        {28}let v_576: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_575),(if success?(4-proj-7-tuple(v_567)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),4-proj-7-tuple(v_567)) else fail-any) else fail-any))) in
        {29}let v_577: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_575),(if success?(4-proj-7-tuple(v_567)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),4-proj-7-tuple(v_567)) else fail-any) else fail-any))) in
        {30}let v_578: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_575),(if success?(4-proj-7-tuple(v_567)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),4-proj-7-tuple(v_567)) else fail-any) else fail-any))) in
        {31}let v_579: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_567)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),4-proj-7-tuple(v_567)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_575))) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (v_576,v_577,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_580: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_567)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),4-proj-7-tuple(v_567)) else fail-any) else fail-any)) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_579)) then cipherstatepack(2-proj-3-tuple(v_579),minnonce) else fail-any),1-proj-3-tuple(v_579),3-proj-3-tuple(v_575)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_581: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {34}let v_582: keypair = catch-fail((if not-caught-fail(v_581) then keypairpack(validkey(v_581),key_s(alice)) else fail-any)) in
        {35}let v_583: bitstring = catch-fail(symmetricstateunpack(v_580)) in
        {36}let v_584: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_583))) in
        {37}let v_585: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_584),2-proj-2-tuple(v_584),3-proj-3-tuple(v_583),getpublickey(v_582))) in
        {38}let v_586: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_583))) in
        {39}let v_587: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_584))) && success?(1-proj-3-tuple(v_583))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then cipherstatepack(1-proj-2-tuple(v_586),increment_nonce(2-proj-2-tuple(v_584))) else fail-any) else fail-any)) in
        {40}let v_588: bitstring = catch-fail((if (success?(getpublickey(v_582)) && (success?(3-proj-3-tuple(v_583)) && success?(1-proj-3-tuple(v_583)))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_587) then (v_587,v_585) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_589: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_588),2-proj-3-tuple(v_583),3-proj-3-tuple(v_583)))) in
        {42}let v_590: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_588)) && success?(symmetricstatepack(1-proj-2-tuple(v_588),2-proj-3-tuple(v_583),3-proj-3-tuple(v_583)))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_589),hash(3-proj-3-tuple(v_589),2-proj-2-tuple(v_588))) else fail-any) else fail-any)) in
        {43}let v_591: bitstring = catch-fail((if success?(getpublickey(v_582)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_590) then (v_590,2-proj-2-tuple(v_588)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_592: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_591))) in
        {45}let v_593: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {46}let v_594: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_593),2-proj-2-tuple(v_593),3-proj-3-tuple(v_592),msg_a(alice,bob,sid))) in
        {47}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {48}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_593))) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_593))) else fail-any) else fail-any)) in
        {49}let v_597: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_592)) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_596) then (v_596,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) in
        {51}let v_599: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_597)) && success?(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
        {52}let v_600: bitstring = catch-fail((if success?(1-proj-2-tuple(v_591)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-2-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_601: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_600),v_582,v_570,4-proj-7-tuple(v_567),5-proj-7-tuple(v_567),6-proj-7-tuple(v_567),7-proj-7-tuple(v_567))) in
        {54}let v_602: bitstring = catch-fail(concat3(v_571,2-proj-2-tuple(v_591),2-proj-2-tuple(v_600))) in
        {55}let (hs_603: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-7-tuple(v_567))))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (if not-caught-fail(v_573) then (if not-caught-fail(v_580) then (if not-caught-fail(v_582) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {56}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {57}insert statestore(alice,bob,sid,statepack_b(hs_603));
        {58}out(pub, message_a)
    ) | (
        {88}get statestore(=alice,=bob,=sid,statepack_b(hs_604: handshakestate)) in
        {60}in(pub, message_b: bitstring);
        {61}let v_605: bitstring = catch-fail(handshakestateunpack(hs_604)) in
        {62}let v_606: bitstring = catch-fail(deconcat3(message_b)) in
        {63}let v_607: bool = catch-fail(true) in
        {64}let v_608: key = catch-fail(1-proj-3-tuple(v_606)) in
        {65}let v_609: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_605))) in
        {66}let v_610: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_605)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),v_608)) else fail-any) else fail-any)) in
        {67}let v_611: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_605))) in
        {68}let v_612: bitstring = catch-fail(symmetricstateunpack(v_610)) in
        {69}let v_613: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_612),(if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),v_608) else fail-any) else fail-any))) in
        {70}let v_614: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_612),(if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),v_608) else fail-any) else fail-any))) in
        {71}let v_615: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_612),(if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),v_608) else fail-any) else fail-any))) in
        {72}let v_616: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),v_608) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_612))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (v_613,v_614,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_617: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),v_608) else fail-any) else fail-any)) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_616)) then cipherstatepack(2-proj-3-tuple(v_616),minnonce) else fail-any),1-proj-3-tuple(v_616),3-proj-3-tuple(v_612)) else fail-any) else fail-any) else fail-any)) in
        {74}let v_618: bitstring = catch-fail(symmetricstateunpack(v_617)) in
        {75}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {76}let v_620: aead = catch-fail(decrypt(1-proj-2-tuple(v_619),2-proj-2-tuple(v_619),3-proj-3-tuple(v_618),3-proj-3-tuple(v_606))) in
        {77}let v_621: bitstring = catch-fail(aeadunpack(v_620)) in
        {78}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {79}let v_623: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_619))) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then cipherstatepack(1-proj-2-tuple(v_622),increment_nonce(2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {80}let v_624: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_606)) && (success?(3-proj-3-tuple(v_618)) && success?(1-proj-3-tuple(v_618)))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_620) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if not-caught-fail(v_623) then (v_623,3-proj-3-tuple(v_621),1-proj-3-tuple(v_621)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_625: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) in
        {82}let v_626: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_606)) && success?(symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then symmetricstatepack(1-proj-3-tuple(v_625),2-proj-3-tuple(v_625),hash(3-proj-3-tuple(v_625),3-proj-3-tuple(v_606))) else fail-any) else fail-any)) in
        {83}let v_627: bitstring = catch-fail((if success?(3-proj-3-tuple(v_606)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if not-caught-fail(v_626) then (v_626,2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_628: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_627),2-proj-7-tuple(v_605),3-proj-7-tuple(v_605),4-proj-7-tuple(v_605),v_608,6-proj-7-tuple(v_605),7-proj-7-tuple(v_605))) in
        {85}let (hs_629: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-7-tuple(v_605))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (if not-caught-fail(v_610) then (if not-caught-fail(v_617) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if (v_607 && 3-proj-3-tuple(v_627)) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_627),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {86}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {87}insert statestore(alice,bob,sid,statepack_c(hs_629))
    ) | (
        {121}get statestore(=alice,=bob,=sid,statepack_c(hs_630: handshakestate)) in
        {89}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {90}let v_632: bitstring = catch-fail((empty,empty,empty)) in
        {91}let v_633: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_631))) in
        {92}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {93}let v_635: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_634),(if (success?(5-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {94}let v_636: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_634),(if (success?(5-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {95}let v_637: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_634),(if (success?(5-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {96}let v_638: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_631)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_634))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (v_635,v_636,v_637) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_639: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_631)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_631))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_638)) then cipherstatepack(2-proj-3-tuple(v_638),minnonce) else fail-any),1-proj-3-tuple(v_638),3-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any)) in
        {98}let v_640: bitstring = catch-fail(symmetricstateunpack(v_639)) in
        {99}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {100}let v_642: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_641),2-proj-2-tuple(v_641),3-proj-3-tuple(v_640),msg_c(alice,bob,sid))) in
        {101}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {102}let v_644: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_641))) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then cipherstatepack(1-proj-2-tuple(v_643),increment_nonce(2-proj-2-tuple(v_641))) else fail-any) else fail-any)) in
        {103}let v_645: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_640)) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if not-caught-fail(v_644) then (v_644,v_642) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_646: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_645),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) in
        {105}let v_647: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_645)) && success?(symmetricstatepack(1-proj-2-tuple(v_645),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),hash(3-proj-3-tuple(v_646),2-proj-2-tuple(v_645))) else fail-any) else fail-any)) in
        {106}let v_648: bitstring = catch-fail((if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then (if not-caught-fail(v_647) then (v_647,2-proj-2-tuple(v_645)) else fail-any) else fail-any) else fail-any)) in
        {107}let v_649: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_648),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {108}let v_650: bitstring = catch-fail(concat3(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),2-proj-2-tuple(v_648))) in
        {109}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_648))) in
        {110}let v_652: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_651),zero)) in
        {111}let v_653: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_651),zero)) in
        {112}let v_654: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_651),zero)) in
        {113}let v_655: bitstring = catch-fail((if success?(2-proj-3-tuple(v_651)) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (v_652,v_653,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_656: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_655)) then cipherstatepack(1-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {115}let v_657: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_655)) then cipherstatepack(2-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {116}let v_658: bitstring = catch-fail((if success?(1-proj-2-tuple(v_648)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (1-proj-2-tuple(v_648),v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let (hs_659: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_639) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (v_649,v_650,2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {118}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {119}insert statestore(alice,bob,sid,statepack_d(hs_659,cs1,cs2));
        {120}out(pub, message_c)
    ) | (
        {122}!
        {142}get statestore(=alice,=bob,=sid,statepack_d(hs_660: handshakestate,cs1_661: cipherstate,cs2_662: cipherstate)) in
        {123}let hs_663: handshakestate = handshakestatesetcs(hs_660,cs2_662) in
        {124}in(pub, message_d: bitstring);
        {125}let v_664: bitstring = catch-fail(handshakestateunpack(hs_663)) in
        {126}let v_665: bitstring = catch-fail(deconcat3(message_d)) in
        {127}let v_666: bool = catch-fail(true) in
        {128}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_664))) in
        {129}let v_668: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_667))) in
        {130}let v_669: aead = catch-fail(decrypt(1-proj-2-tuple(v_668),2-proj-2-tuple(v_668),3-proj-3-tuple(v_667),3-proj-3-tuple(v_665))) in
        {131}let v_670: bitstring = catch-fail(aeadunpack(v_669)) in
        {132}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_667))) in
        {133}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_668))) && success?(1-proj-3-tuple(v_667))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_668))) else fail-any) else fail-any)) in
        {134}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && (success?(3-proj-3-tuple(v_667)) && success?(1-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then (if not-caught-fail(v_669) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if not-caught-fail(v_672) then (v_672,3-proj-3-tuple(v_670),1-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)))) in
        {136}let v_675: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),3-proj-3-tuple(v_665))) else fail-any) else fail-any)) in
        {137}let v_676: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(1-proj-7-tuple(v_664))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_676),2-proj-7-tuple(v_664),3-proj-7-tuple(v_664),4-proj-7-tuple(v_664),5-proj-7-tuple(v_664),6-proj-7-tuple(v_664),7-proj-7-tuple(v_664))) in
        {139}let (hs_678: handshakestate,plaintext_d: bitstring,valid_679: bool) = (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-7-tuple(v_664))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (v_666 && 3-proj-3-tuple(v_676)) then (if not-caught-fail(v_677) then (v_677,2-proj-3-tuple(v_676),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {140}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {141}insert statestore(alice,bob,sid,statepack_e(hs_678,cs1_661,handshakestategetcs(hs_678)))
    ) | (
        {143}!
        {161}get statestore(=alice,=bob,=sid,statepack_e(hs_680: handshakestate,cs1_681: cipherstate,cs2_682: cipherstate)) in
        {144}let hs_683: handshakestate = handshakestatesetcs(hs_680,cs1_681) in
        {145}let v_684: bitstring = catch-fail(handshakestateunpack(hs_683)) in
        {146}let v_685: bitstring = catch-fail((empty,empty,empty)) in
        {147}let v_686: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_684))) in
        {148}let v_687: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_686))) in
        {149}let v_688: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_687),2-proj-2-tuple(v_687),3-proj-3-tuple(v_686),msg_e(alice,bob,sid))) in
        {150}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_686))) in
        {151}let v_690: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_687))) && success?(1-proj-3-tuple(v_686))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then cipherstatepack(1-proj-2-tuple(v_689),increment_nonce(2-proj-2-tuple(v_687))) else fail-any) else fail-any)) in
        {152}let v_691: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_686)) && success?(1-proj-3-tuple(v_686))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_690) then (v_690,v_688) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_692: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_691),2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)))) in
        {154}let v_693: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_691)) && success?(symmetricstatepack(1-proj-2-tuple(v_691),2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack(1-proj-3-tuple(v_692),2-proj-3-tuple(v_692),hash(3-proj-3-tuple(v_692),2-proj-2-tuple(v_691))) else fail-any) else fail-any)) in
        {155}let v_694: bitstring = catch-fail((if success?(1-proj-7-tuple(v_684)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then (if not-caught-fail(v_693) then (v_693,2-proj-2-tuple(v_691)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_695: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_694),2-proj-7-tuple(v_684),3-proj-7-tuple(v_684),4-proj-7-tuple(v_684),5-proj-7-tuple(v_684),6-proj-7-tuple(v_684),7-proj-7-tuple(v_684))) in
        {157}let v_696: bitstring = catch-fail(concat3(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),2-proj-2-tuple(v_694))) in
        {158}let (hs_697: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-7-tuple(v_684))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {159}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {160}out(pub, message_e)
    ) | (
        {162}event LeakS(phase0,alice);
        {163}out(pub, key_s(alice))
    ) | (
        {164}phase 1;
        {165}event LeakS(phase1,alice);
        {166}out(pub, key_s(alice))
    )
) | (
    {167}let s_698: keypair = keypairpack(empty,empty) in
    {168}out(pub, getpublickey(s_698));
    (
        {169}let e_699: keypair = keypairpack(empty,empty) in
        {170}let v_700: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {171}let rs_701: key = getpublickey((if not-caught-fail(v_700) then keypairpack(validkey(v_700),key_s(charlie)) else fail-any)) in
        {172}let re_702: key = empty in
        {173}let v_703: bitstring = catch-fail(hash(somename,empty)) in
        {174}let v_704: key = catch-fail(v_703) in
        {175}let v_705: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {176}let v_706: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then symmetricstatepack(v_705,v_704,v_703) else fail-any) else fail-any) else fail-any))) in
        {177}let v_707: symmetricstate = catch-fail((if success?((if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then symmetricstatepack(v_705,v_704,v_703) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),empty)) else fail-any) else fail-any)) in
        {178}let v_708: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {179}let v_709: symmetricstate = catch-fail((if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_708),hash(3-proj-3-tuple(v_708),rs_701)) else fail-any)) in
        {180}let hs_710: handshakestate = (if not-caught-fail(v_707) then (if not-caught-fail(v_709) then handshakestatepack(v_709,s_698,e_699,rs_701,re_702,empty,true) else fail-any) else fail-any) in
        {181}insert statestore(alice,charlie,sid,statepack_a(hs_710))
    ) | (
        {222}get statestore(=alice,=charlie,=sid,statepack_a(hs_711: handshakestate)) in
        {182}let v_712: bitstring = catch-fail(handshakestateunpack(hs_711)) in
        {183}let v_713: bitstring = catch-fail((empty,empty,empty)) in
        {184}let v_714: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {185}let v_715: keypair = catch-fail((if not-caught-fail(v_714) then keypairpack(validkey(v_714),key_e(alice,charlie,sid)) else fail-any)) in
        {186}let v_716: bitstring = catch-fail(getpublickey(v_715)) in
        {187}let v_717: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_712))) in
        {188}let v_718: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_712)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),v_716)) else fail-any) else fail-any)) in
        {189}let v_719: bitstring = catch-fail(keypairunpack(v_715)) in
        {190}let v_720: bitstring = catch-fail(symmetricstateunpack(v_718)) in
        {191}let v_721: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_720),(if success?(4-proj-7-tuple(v_712)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_712)) else fail-any) else fail-any))) in
        {192}let v_722: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_720),(if success?(4-proj-7-tuple(v_712)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_712)) else fail-any) else fail-any))) in
        {193}let v_723: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_720),(if success?(4-proj-7-tuple(v_712)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_712)) else fail-any) else fail-any))) in
        {194}let v_724: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_712)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_712)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_720))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (v_721,v_722,v_723) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {195}let v_725: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_712)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_712)) else fail-any) else fail-any)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_724)) then cipherstatepack(2-proj-3-tuple(v_724),minnonce) else fail-any),1-proj-3-tuple(v_724),3-proj-3-tuple(v_720)) else fail-any) else fail-any) else fail-any)) in
        {196}let v_726: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {197}let v_727: keypair = catch-fail((if not-caught-fail(v_726) then keypairpack(validkey(v_726),key_s(alice)) else fail-any)) in
        {198}let v_728: bitstring = catch-fail(symmetricstateunpack(v_725)) in
        {199}let v_729: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_728))) in
        {200}let v_730: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_729),2-proj-2-tuple(v_729),3-proj-3-tuple(v_728),getpublickey(v_727))) in
        {201}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_728))) in
        {202}let v_732: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_729))) && success?(1-proj-3-tuple(v_728))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then cipherstatepack(1-proj-2-tuple(v_731),increment_nonce(2-proj-2-tuple(v_729))) else fail-any) else fail-any)) in
        {203}let v_733: bitstring = catch-fail((if (success?(getpublickey(v_727)) && (success?(3-proj-3-tuple(v_728)) && success?(1-proj-3-tuple(v_728)))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then (if not-caught-fail(v_730) then (if not-caught-fail(v_732) then (v_732,v_730) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {204}let v_734: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_733),2-proj-3-tuple(v_728),3-proj-3-tuple(v_728)))) in
        {205}let v_735: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_733)) && success?(symmetricstatepack(1-proj-2-tuple(v_733),2-proj-3-tuple(v_728),3-proj-3-tuple(v_728)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),2-proj-2-tuple(v_733))) else fail-any) else fail-any)) in
        {206}let v_736: bitstring = catch-fail((if success?(getpublickey(v_727)) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,2-proj-2-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {207}let v_737: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_736))) in
        {208}let v_738: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_737))) in
        {209}let v_739: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_738),2-proj-2-tuple(v_738),3-proj-3-tuple(v_737),msg_a(alice,charlie,sid))) in
        {210}let v_740: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_737))) in
        {211}let v_741: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_738))) && success?(1-proj-3-tuple(v_737))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then cipherstatepack(1-proj-2-tuple(v_740),increment_nonce(2-proj-2-tuple(v_738))) else fail-any) else fail-any)) in
        {212}let v_742: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_737)) && success?(1-proj-3-tuple(v_737))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_741) then (v_741,v_739) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_743: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_742),2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)))) in
        {214}let v_744: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_742)) && success?(symmetricstatepack(1-proj-2-tuple(v_742),2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_743),hash(3-proj-3-tuple(v_743),2-proj-2-tuple(v_742))) else fail-any) else fail-any)) in
        {215}let v_745: bitstring = catch-fail((if success?(1-proj-2-tuple(v_736)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then (if not-caught-fail(v_744) then (v_744,2-proj-2-tuple(v_742)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_746: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_745),v_727,v_715,4-proj-7-tuple(v_712),5-proj-7-tuple(v_712),6-proj-7-tuple(v_712),7-proj-7-tuple(v_712))) in
        {217}let v_747: bitstring = catch-fail(concat3(v_716,2-proj-2-tuple(v_736),2-proj-2-tuple(v_745))) in
        {218}let (hs_748: handshakestate,message_a_749: bitstring) = (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-7-tuple(v_712))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (if not-caught-fail(v_718) then (if not-caught-fail(v_725) then (if not-caught-fail(v_727) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {219}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {220}insert statestore(alice,charlie,sid,statepack_b(hs_748));
        {221}out(pub, message_a_749)
    ) | (
        {251}get statestore(=alice,=charlie,=sid,statepack_b(hs_750: handshakestate)) in
        {223}in(pub, message_b_751: bitstring);
        {224}let v_752: bitstring = catch-fail(handshakestateunpack(hs_750)) in
        {225}let v_753: bitstring = catch-fail(deconcat3(message_b_751)) in
        {226}let v_754: bool = catch-fail(true) in
        {227}let v_755: key = catch-fail(1-proj-3-tuple(v_753)) in
        {228}let v_756: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_752))) in
        {229}let v_757: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_752)) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),v_755)) else fail-any) else fail-any)) in
        {230}let v_758: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_752))) in
        {231}let v_759: bitstring = catch-fail(symmetricstateunpack(v_757)) in
        {232}let v_760: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_759),(if success?(3-proj-7-tuple(v_752)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),v_755) else fail-any) else fail-any))) in
        {233}let v_761: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_759),(if success?(3-proj-7-tuple(v_752)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),v_755) else fail-any) else fail-any))) in
        {234}let v_762: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_759),(if success?(3-proj-7-tuple(v_752)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),v_755) else fail-any) else fail-any))) in
        {235}let v_763: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_752)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),v_755) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_759))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_760,v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_764: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_752)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),v_755) else fail-any) else fail-any)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_763)) then cipherstatepack(2-proj-3-tuple(v_763),minnonce) else fail-any),1-proj-3-tuple(v_763),3-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any)) in
        {237}let v_765: bitstring = catch-fail(symmetricstateunpack(v_764)) in
        {238}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {239}let v_767: aead = catch-fail(decrypt(1-proj-2-tuple(v_766),2-proj-2-tuple(v_766),3-proj-3-tuple(v_765),3-proj-3-tuple(v_753))) in
        {240}let v_768: bitstring = catch-fail(aeadunpack(v_767)) in
        {241}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {242}let v_770: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_766))) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then cipherstatepack(1-proj-2-tuple(v_769),increment_nonce(2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {243}let v_771: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_753)) && (success?(3-proj-3-tuple(v_765)) && success?(1-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_770) then (v_770,3-proj-3-tuple(v_768),1-proj-3-tuple(v_768)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_772: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) in
        {245}let v_773: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_753)) && success?(symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_772),hash(3-proj-3-tuple(v_772),3-proj-3-tuple(v_753))) else fail-any) else fail-any)) in
        {246}let v_774: bitstring = catch-fail((if success?(3-proj-3-tuple(v_753)) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_773) then (v_773,2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_775: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_774),2-proj-7-tuple(v_752),3-proj-7-tuple(v_752),4-proj-7-tuple(v_752),v_755,6-proj-7-tuple(v_752),7-proj-7-tuple(v_752))) in
        {248}let (hs_776: handshakestate,plaintext_b_777: bitstring,valid_778: bool) = (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-7-tuple(v_752))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (if not-caught-fail(v_757) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (v_754 && 3-proj-3-tuple(v_774)) then (if not-caught-fail(v_775) then (v_775,2-proj-3-tuple(v_774),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {249}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_777);
        {250}insert statestore(alice,charlie,sid,statepack_c(hs_776))
    ) | (
        {284}get statestore(=alice,=charlie,=sid,statepack_c(hs_779: handshakestate)) in
        {252}let v_780: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {253}let v_781: bitstring = catch-fail((empty,empty,empty)) in
        {254}let v_782: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_780))) in
        {255}let v_783: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_780))) in
        {256}let v_784: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_783),(if (success?(5-proj-7-tuple(v_780)) && success?(2-proj-7-tuple(v_780))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_780)) else fail-any) else fail-any))) in
        {257}let v_785: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_783),(if (success?(5-proj-7-tuple(v_780)) && success?(2-proj-7-tuple(v_780))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_780)) else fail-any) else fail-any))) in
        {258}let v_786: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_783),(if (success?(5-proj-7-tuple(v_780)) && success?(2-proj-7-tuple(v_780))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_780)) else fail-any) else fail-any))) in
        {259}let v_787: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_780)) && success?(2-proj-7-tuple(v_780))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_780)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_783))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (v_784,v_785,v_786) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_788: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_780)) && success?(2-proj-7-tuple(v_780))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_780)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_780))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_787)) then cipherstatepack(2-proj-3-tuple(v_787),minnonce) else fail-any),1-proj-3-tuple(v_787),3-proj-3-tuple(v_783)) else fail-any) else fail-any) else fail-any)) in
        {261}let v_789: bitstring = catch-fail(symmetricstateunpack(v_788)) in
        {262}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {263}let v_791: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_790),2-proj-2-tuple(v_790),3-proj-3-tuple(v_789),msg_c(alice,charlie,sid))) in
        {264}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {265}let v_793: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_790))) && success?(1-proj-3-tuple(v_789))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then cipherstatepack(1-proj-2-tuple(v_792),increment_nonce(2-proj-2-tuple(v_790))) else fail-any) else fail-any)) in
        {266}let v_794: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_789)) && success?(1-proj-3-tuple(v_789))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_793) then (v_793,v_791) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_795: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_794),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) in
        {268}let v_796: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_794)) && success?(symmetricstatepack(1-proj-2-tuple(v_794),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_795),hash(3-proj-3-tuple(v_795),2-proj-2-tuple(v_794))) else fail-any) else fail-any)) in
        {269}let v_797: bitstring = catch-fail((if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then (if not-caught-fail(v_796) then (v_796,2-proj-2-tuple(v_794)) else fail-any) else fail-any) else fail-any)) in
        {270}let v_798: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_797),2-proj-7-tuple(v_780),3-proj-7-tuple(v_780),4-proj-7-tuple(v_780),5-proj-7-tuple(v_780),6-proj-7-tuple(v_780),7-proj-7-tuple(v_780))) in
        {271}let v_799: bitstring = catch-fail(concat3(1-proj-3-tuple(v_781),2-proj-3-tuple(v_781),2-proj-2-tuple(v_797))) in
        {272}let v_800: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_797))) in
        {273}let v_801: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_800),zero)) in
        {274}let v_802: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_800),zero)) in
        {275}let v_803: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_800),zero)) in
        {276}let v_804: bitstring = catch-fail((if success?(2-proj-3-tuple(v_800)) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (v_801,v_802,v_803) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_805: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_804)) then cipherstatepack(1-proj-3-tuple(v_804),minnonce) else fail-any)) in
        {278}let v_806: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_804)) then cipherstatepack(2-proj-3-tuple(v_804),minnonce) else fail-any)) in
        {279}let v_807: bitstring = catch-fail((if success?(1-proj-2-tuple(v_797)) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (1-proj-2-tuple(v_797),v_805,v_806) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let (hs_808: handshakestate,message_c_809: bitstring,cs1_810: cipherstate,cs2_811: cipherstate) = (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-7-tuple(v_780))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if not-caught-fail(v_788) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (v_798,v_799,2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {281}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {282}insert statestore(alice,charlie,sid,statepack_d(hs_808,cs1_810,cs2_811));
        {283}out(pub, message_c_809)
    ) | (
        {285}!
        {305}get statestore(=alice,=charlie,=sid,statepack_d(hs_812: handshakestate,cs1_813: cipherstate,cs2_814: cipherstate)) in
        {286}let hs_815: handshakestate = handshakestatesetcs(hs_812,cs2_814) in
        {287}in(pub, message_d_816: bitstring);
        {288}let v_817: bitstring = catch-fail(handshakestateunpack(hs_815)) in
        {289}let v_818: bitstring = catch-fail(deconcat3(message_d_816)) in
        {290}let v_819: bool = catch-fail(true) in
        {291}let v_820: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_817))) in
        {292}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {293}let v_822: aead = catch-fail(decrypt(1-proj-2-tuple(v_821),2-proj-2-tuple(v_821),3-proj-3-tuple(v_820),3-proj-3-tuple(v_818))) in
        {294}let v_823: bitstring = catch-fail(aeadunpack(v_822)) in
        {295}let v_824: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {296}let v_825: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_821))) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then cipherstatepack(1-proj-2-tuple(v_824),increment_nonce(2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {297}let v_826: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_818)) && (success?(3-proj-3-tuple(v_820)) && success?(1-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (v_825,3-proj-3-tuple(v_823),1-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_827: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) in
        {299}let v_828: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_818)) && success?(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),3-proj-3-tuple(v_818))) else fail-any) else fail-any)) in
        {300}let v_829: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_818)) && success?(1-proj-7-tuple(v_817))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if not-caught-fail(v_828) then (v_828,2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_830: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_829),2-proj-7-tuple(v_817),3-proj-7-tuple(v_817),4-proj-7-tuple(v_817),5-proj-7-tuple(v_817),6-proj-7-tuple(v_817),7-proj-7-tuple(v_817))) in
        {302}let (hs_831: handshakestate,plaintext_d_832: bitstring,valid_833: bool) = (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-7-tuple(v_817))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if (v_819 && 3-proj-3-tuple(v_829)) then (if not-caught-fail(v_830) then (v_830,2-proj-3-tuple(v_829),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {303}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_832);
        {304}insert statestore(alice,charlie,sid,statepack_e(hs_831,cs1_813,handshakestategetcs(hs_831)))
    ) | (
        {306}!
        {324}get statestore(=alice,=charlie,=sid,statepack_e(hs_834: handshakestate,cs1_835: cipherstate,cs2_836: cipherstate)) in
        {307}let hs_837: handshakestate = handshakestatesetcs(hs_834,cs1_835) in
        {308}let v_838: bitstring = catch-fail(handshakestateunpack(hs_837)) in
        {309}let v_839: bitstring = catch-fail((empty,empty,empty)) in
        {310}let v_840: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_838))) in
        {311}let v_841: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_840))) in
        {312}let v_842: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_841),2-proj-2-tuple(v_841),3-proj-3-tuple(v_840),msg_e(alice,charlie,sid))) in
        {313}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_840))) in
        {314}let v_844: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_841))) && success?(1-proj-3-tuple(v_840))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then cipherstatepack(1-proj-2-tuple(v_843),increment_nonce(2-proj-2-tuple(v_841))) else fail-any) else fail-any)) in
        {315}let v_845: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_840)) && success?(1-proj-3-tuple(v_840))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then (if not-caught-fail(v_842) then (if not-caught-fail(v_844) then (v_844,v_842) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_846: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_845),2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)))) in
        {317}let v_847: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_845)) && success?(symmetricstatepack(1-proj-2-tuple(v_845),2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack(1-proj-3-tuple(v_846),2-proj-3-tuple(v_846),hash(3-proj-3-tuple(v_846),2-proj-2-tuple(v_845))) else fail-any) else fail-any)) in
        {318}let v_848: bitstring = catch-fail((if success?(1-proj-7-tuple(v_838)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then (if not-caught-fail(v_847) then (v_847,2-proj-2-tuple(v_845)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let v_849: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_848),2-proj-7-tuple(v_838),3-proj-7-tuple(v_838),4-proj-7-tuple(v_838),5-proj-7-tuple(v_838),6-proj-7-tuple(v_838),7-proj-7-tuple(v_838))) in
        {320}let v_850: bitstring = catch-fail(concat3(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),2-proj-2-tuple(v_848))) in
        {321}let (hs_851: handshakestate,message_e_852: bitstring) = (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-7-tuple(v_838))))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (v_849,v_850) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {322}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {323}out(pub, message_e_852)
    ) | (
        {325}event LeakS(phase0,alice);
        {326}out(pub, key_s(alice))
    ) | (
        {327}phase 1;
        {328}event LeakS(phase1,alice);
        {329}out(pub, key_s(alice))
    )
) | (
    {330}let v_853: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {331}let s_854: keypair = (if not-caught-fail(v_853) then keypairpack(validkey(v_853),key_s(bob)) else fail-any) in
    {332}out(pub, getpublickey(s_854));
    (
        {333}let e_855: keypair = keypairpack(empty,empty) in
        {334}let rs_856: key = empty in
        {335}let re_857: key = empty in
        {336}let v_858: bitstring = catch-fail(hash(somename,empty)) in
        {337}let v_859: key = catch-fail(v_858) in
        {338}let v_860: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {339}let v_861: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then symmetricstatepack(v_860,v_859,v_858) else fail-any) else fail-any) else fail-any))) in
        {340}let v_862: symmetricstate = catch-fail((if success?((if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then symmetricstatepack(v_860,v_859,v_858) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),empty)) else fail-any) else fail-any)) in
        {341}let v_863: bitstring = catch-fail(symmetricstateunpack(v_862)) in
        {342}let v_864: symmetricstate = catch-fail((if success?(getpublickey(s_854)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),getpublickey(s_854))) else fail-any) else fail-any)) in
        {343}let hs_865: handshakestate = (if not-caught-fail(v_862) then (if not-caught-fail(v_864) then handshakestatepack(v_864,s_854,e_855,rs_856,re_857,empty,false) else fail-any) else fail-any) in
        {344}insert statestore(bob,alice,sid,statepack_a(hs_865))
    ) | (
        {385}get statestore(=bob,=alice,=sid,statepack_a(hs_866: handshakestate)) in
        {345}in(pub, message_a_867: bitstring);
        {346}let v_868: bitstring = catch-fail(handshakestateunpack(hs_866)) in
        {347}let v_869: bitstring = catch-fail(deconcat3(message_a_867)) in
        {348}let v_870: bool = catch-fail(true) in
        {349}let v_871: key = catch-fail(1-proj-3-tuple(v_869)) in
        {350}let v_872: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_868))) in
        {351}let v_873: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_868)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),v_871)) else fail-any) else fail-any)) in
        {352}let v_874: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_868))) in
        {353}let v_875: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {354}let v_876: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_875),(if success?(2-proj-7-tuple(v_868)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),v_871) else fail-any) else fail-any))) in
        {355}let v_877: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_875),(if success?(2-proj-7-tuple(v_868)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),v_871) else fail-any) else fail-any))) in
        {356}let v_878: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_875),(if success?(2-proj-7-tuple(v_868)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),v_871) else fail-any) else fail-any))) in
        {357}let v_879: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_868)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),v_871) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_875))) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (v_876,v_877,v_878) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_880: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_868)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),v_871) else fail-any) else fail-any)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_879)) then cipherstatepack(2-proj-3-tuple(v_879),minnonce) else fail-any),1-proj-3-tuple(v_879),3-proj-3-tuple(v_875)) else fail-any) else fail-any) else fail-any)) in
        {359}let v_881: bitstring = catch-fail(symmetricstateunpack(v_880)) in
        {360}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {361}let v_883: aead = catch-fail(decrypt(1-proj-2-tuple(v_882),2-proj-2-tuple(v_882),3-proj-3-tuple(v_881),2-proj-3-tuple(v_869))) in
        {362}let v_884: bitstring = catch-fail(aeadunpack(v_883)) in
        {363}let v_885: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {364}let v_886: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_882))) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then cipherstatepack(1-proj-2-tuple(v_885),increment_nonce(2-proj-2-tuple(v_882))) else fail-any) else fail-any)) in
        {365}let v_887: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_869)) && (success?(3-proj-3-tuple(v_881)) && success?(1-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then (if not-caught-fail(v_883) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if not-caught-fail(v_886) then (v_886,3-proj-3-tuple(v_884),1-proj-3-tuple(v_884)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_888: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) in
        {367}let v_889: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_869)) && success?(symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),2-proj-3-tuple(v_869))) else fail-any) else fail-any)) in
        {368}let v_890: bitstring = catch-fail((if success?(2-proj-3-tuple(v_869)) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_889) then (v_889,2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_891: key = catch-fail(2-proj-3-tuple(v_890)) in
        {370}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_890))) in
        {371}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {372}let v_894: aead = catch-fail(decrypt(1-proj-2-tuple(v_893),2-proj-2-tuple(v_893),3-proj-3-tuple(v_892),3-proj-3-tuple(v_869))) in
        {373}let v_895: bitstring = catch-fail(aeadunpack(v_894)) in
        {374}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {375}let v_897: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_893))) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then cipherstatepack(1-proj-2-tuple(v_896),increment_nonce(2-proj-2-tuple(v_893))) else fail-any) else fail-any)) in
        {376}let v_898: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_869)) && (success?(3-proj-3-tuple(v_892)) && success?(1-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,3-proj-3-tuple(v_895),1-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_899: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) in
        {378}let v_900: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_869)) && success?(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),3-proj-3-tuple(v_869))) else fail-any) else fail-any)) in
        {379}let v_901: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_869)) && success?(1-proj-3-tuple(v_890))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_900) then (v_900,2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_902: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {381}let v_903: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_901),2-proj-7-tuple(v_868),3-proj-7-tuple(v_868),v_891,v_871,6-proj-7-tuple(v_868),7-proj-7-tuple(v_868))) in
        {382}let (hs_904: handshakestate,plaintext_a: bitstring,valid_905: bool) = (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-7-tuple(v_868))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (if not-caught-fail(v_873) then (if not-caught-fail(v_880) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if ((3-proj-3-tuple(v_890) && 3-proj-3-tuple(v_901)) && (v_891 = getpublickey((if not-caught-fail(v_902) then keypairpack(validkey(v_902),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_903) then (v_903,2-proj-3-tuple(v_901),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {383}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {384}insert statestore(bob,alice,sid,statepack_b(hs_904))
    ) | (
        {415}get statestore(=bob,=alice,=sid,statepack_b(hs_906: handshakestate)) in
        {386}let v_907: bitstring = catch-fail(handshakestateunpack(hs_906)) in
        {387}let v_908: bitstring = catch-fail((empty,empty,empty)) in
        {388}let v_909: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {389}let v_910: keypair = catch-fail((if not-caught-fail(v_909) then keypairpack(validkey(v_909),key_e(bob,alice,sid)) else fail-any)) in
        {390}let v_911: bitstring = catch-fail(getpublickey(v_910)) in
        {391}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {392}let v_913: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_907)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack(1-proj-3-tuple(v_912),2-proj-3-tuple(v_912),hash(3-proj-3-tuple(v_912),v_911)) else fail-any) else fail-any)) in
        {393}let v_914: bitstring = catch-fail(keypairunpack(v_910)) in
        {394}let v_915: bitstring = catch-fail(symmetricstateunpack(v_913)) in
        {395}let v_916: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {396}let v_917: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {397}let v_918: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {398}let v_919: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_915))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (v_916,v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_920: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_919)) then cipherstatepack(2-proj-3-tuple(v_919),minnonce) else fail-any),1-proj-3-tuple(v_919),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any)) in
        {400}let v_921: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {401}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {402}let v_923: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_922),2-proj-2-tuple(v_922),3-proj-3-tuple(v_921),msg_b(bob,alice,sid))) in
        {403}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {404}let v_925: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_922))) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then cipherstatepack(1-proj-2-tuple(v_924),increment_nonce(2-proj-2-tuple(v_922))) else fail-any) else fail-any)) in
        {405}let v_926: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_921)) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_925) then (v_925,v_923) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_927: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_926),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) in
        {407}let v_928: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_926)) && success?(symmetricstatepack(1-proj-2-tuple(v_926),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_927),hash(3-proj-3-tuple(v_927),2-proj-2-tuple(v_926))) else fail-any) else fail-any)) in
        {408}let v_929: bitstring = catch-fail((if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then (if not-caught-fail(v_928) then (v_928,2-proj-2-tuple(v_926)) else fail-any) else fail-any) else fail-any)) in
        {409}let v_930: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_929),2-proj-7-tuple(v_907),v_910,4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {410}let v_931: bitstring = catch-fail(concat3(v_911,2-proj-3-tuple(v_908),2-proj-2-tuple(v_929))) in
        {411}let (hs_932: handshakestate,message_b_933: bitstring) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (if not-caught-fail(v_913) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (v_930,v_931) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {412}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {413}insert statestore(bob,alice,sid,statepack_c(hs_932));
        {414}out(pub, message_b_933)
    ) | (
        {449}get statestore(=bob,=alice,=sid,statepack_c(hs_934: handshakestate)) in
        {416}in(pub, message_c_935: bitstring);
        {417}let v_936: bitstring = catch-fail(handshakestateunpack(hs_934)) in
        {418}let v_937: bitstring = catch-fail(deconcat3(message_c_935)) in
        {419}let v_938: bool = catch-fail(true) in
        {420}let v_939: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_936))) in
        {421}let v_940: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_936))) in
        {422}let v_941: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_940),(if (success?(4-proj-7-tuple(v_936)) && success?(3-proj-7-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),4-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {423}let v_942: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_940),(if (success?(4-proj-7-tuple(v_936)) && success?(3-proj-7-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),4-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {424}let v_943: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_940),(if (success?(4-proj-7-tuple(v_936)) && success?(3-proj-7-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),4-proj-7-tuple(v_936)) else fail-any) else fail-any))) in
        {425}let v_944: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_936)) && success?(3-proj-7-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),4-proj-7-tuple(v_936)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_940))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (v_941,v_942,v_943) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_945: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_936)) && success?(3-proj-7-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),4-proj-7-tuple(v_936)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_936))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_944)) then cipherstatepack(2-proj-3-tuple(v_944),minnonce) else fail-any),1-proj-3-tuple(v_944),3-proj-3-tuple(v_940)) else fail-any) else fail-any) else fail-any)) in
        {427}let v_946: bitstring = catch-fail(symmetricstateunpack(v_945)) in
        {428}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {429}let v_948: aead = catch-fail(decrypt(1-proj-2-tuple(v_947),2-proj-2-tuple(v_947),3-proj-3-tuple(v_946),3-proj-3-tuple(v_937))) in
        {430}let v_949: bitstring = catch-fail(aeadunpack(v_948)) in
        {431}let v_950: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {432}let v_951: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_947))) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then cipherstatepack(1-proj-2-tuple(v_950),increment_nonce(2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {433}let v_952: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_937)) && (success?(3-proj-3-tuple(v_946)) && success?(1-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if not-caught-fail(v_951) then (v_951,3-proj-3-tuple(v_949),1-proj-3-tuple(v_949)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_953: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) in
        {435}let v_954: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_937)) && success?(symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_953),hash(3-proj-3-tuple(v_953),3-proj-3-tuple(v_937))) else fail-any) else fail-any)) in
        {436}let v_955: bitstring = catch-fail((if success?(3-proj-3-tuple(v_937)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_954) then (v_954,2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_956: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_955),2-proj-7-tuple(v_936),3-proj-7-tuple(v_936),4-proj-7-tuple(v_936),5-proj-7-tuple(v_936),6-proj-7-tuple(v_936),7-proj-7-tuple(v_936))) in
        {438}let v_957: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_955))) in
        {439}let v_958: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_957),zero)) in
        {440}let v_959: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_957),zero)) in
        {441}let v_960: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_957),zero)) in
        {442}let v_961: bitstring = catch-fail((if success?(2-proj-3-tuple(v_957)) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (v_958,v_959,v_960) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_962: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_961)) then cipherstatepack(1-proj-3-tuple(v_961),minnonce) else fail-any)) in
        {444}let v_963: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_961)) then cipherstatepack(2-proj-3-tuple(v_961),minnonce) else fail-any)) in
        {445}let v_964: bitstring = catch-fail((if success?(1-proj-3-tuple(v_955)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (1-proj-3-tuple(v_955),v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let (hs_965: handshakestate,plaintext_c: bitstring,valid_966: bool,cs1_967: cipherstate,cs2_968: cipherstate) = (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-7-tuple(v_936))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if not-caught-fail(v_938) then (if not-caught-fail(v_945) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (v_938 && 3-proj-3-tuple(v_955)) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (v_956,2-proj-3-tuple(v_955),true,2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {447}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {448}insert statestore(bob,alice,sid,statepack_d(hs_965,cs1_967,cs2_968))
    ) | (
        {450}!
        {469}get statestore(=bob,=alice,=sid,statepack_d(hs_969: handshakestate,cs1_970: cipherstate,cs2_971: cipherstate)) in
        {451}let hs_972: handshakestate = handshakestatesetcs(hs_969,cs2_971) in
        {452}let v_973: bitstring = catch-fail(handshakestateunpack(hs_972)) in
        {453}let v_974: bitstring = catch-fail((empty,empty,empty)) in
        {454}let v_975: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_973))) in
        {455}let v_976: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_975))) in
        {456}let v_977: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_976),2-proj-2-tuple(v_976),3-proj-3-tuple(v_975),msg_d(bob,alice,sid))) in
        {457}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_975))) in
        {458}let v_979: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_976))) && success?(1-proj-3-tuple(v_975))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then cipherstatepack(1-proj-2-tuple(v_978),increment_nonce(2-proj-2-tuple(v_976))) else fail-any) else fail-any)) in
        {459}let v_980: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_975)) && success?(1-proj-3-tuple(v_975))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then (if not-caught-fail(v_977) then (if not-caught-fail(v_979) then (v_979,v_977) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_981: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_980),2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)))) in
        {461}let v_982: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_980)) && success?(symmetricstatepack(1-proj-2-tuple(v_980),2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_981),hash(3-proj-3-tuple(v_981),2-proj-2-tuple(v_980))) else fail-any) else fail-any)) in
        {462}let v_983: bitstring = catch-fail((if success?(1-proj-7-tuple(v_973)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then (if not-caught-fail(v_982) then (v_982,2-proj-2-tuple(v_980)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_984: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_983),2-proj-7-tuple(v_973),3-proj-7-tuple(v_973),4-proj-7-tuple(v_973),5-proj-7-tuple(v_973),6-proj-7-tuple(v_973),7-proj-7-tuple(v_973))) in
        {464}let v_985: bitstring = catch-fail(concat3(1-proj-3-tuple(v_974),2-proj-3-tuple(v_974),2-proj-2-tuple(v_983))) in
        {465}let (hs_986: handshakestate,message_d_987: bitstring) = (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-7-tuple(v_973))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then (if not-caught-fail(v_984) then (if not-caught-fail(v_985) then (v_984,v_985) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {466}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {467}insert statestore(bob,alice,sid,statepack_e(hs_986,cs1_970,handshakestategetcs(hs_986)));
        {468}out(pub, message_d_987)
    ) | (
        {470}!
        {490}get statestore(=bob,=alice,=sid,statepack_e(hs_988: handshakestate,cs1_989: cipherstate,cs2_990: cipherstate)) in
        {471}let hs_991: handshakestate = handshakestatesetcs(hs_988,cs1_989) in
        {472}in(pub, message_e_992: bitstring);
        {473}let v_993: bitstring = catch-fail(handshakestateunpack(hs_991)) in
        {474}let v_994: bitstring = catch-fail(deconcat3(message_e_992)) in
        {475}let v_995: bool = catch-fail(true) in
        {476}let v_996: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_993))) in
        {477}let v_997: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {478}let v_998: aead = catch-fail(decrypt(1-proj-2-tuple(v_997),2-proj-2-tuple(v_997),3-proj-3-tuple(v_996),3-proj-3-tuple(v_994))) in
        {479}let v_999: bitstring = catch-fail(aeadunpack(v_998)) in
        {480}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {481}let v_1001: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_997))) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then cipherstatepack(1-proj-2-tuple(v_1000),increment_nonce(2-proj-2-tuple(v_997))) else fail-any) else fail-any)) in
        {482}let v_1002: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_994)) && (success?(3-proj-3-tuple(v_996)) && success?(1-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1001) then (v_1001,3-proj-3-tuple(v_999),1-proj-3-tuple(v_999)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_1003: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) in
        {484}let v_1004: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_994)) && success?(symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then symmetricstatepack(1-proj-3-tuple(v_1003),2-proj-3-tuple(v_1003),hash(3-proj-3-tuple(v_1003),3-proj-3-tuple(v_994))) else fail-any) else fail-any)) in
        {485}let v_1005: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_994)) && success?(1-proj-7-tuple(v_993))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if not-caught-fail(v_1004) then (v_1004,2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1006: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1005),2-proj-7-tuple(v_993),3-proj-7-tuple(v_993),4-proj-7-tuple(v_993),5-proj-7-tuple(v_993),6-proj-7-tuple(v_993),7-proj-7-tuple(v_993))) in
        {487}let (hs_1007: handshakestate,plaintext_e: bitstring,valid_1008: bool) = (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-7-tuple(v_993))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if not-caught-fail(v_995) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if (v_995 && 3-proj-3-tuple(v_1005)) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1005),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {489}event RecvEnd(valid_1008)
    ) | (
        {491}event LeakS(phase0,bob);
        {492}out(pub, key_s(bob))
    ) | (
        {493}phase 1;
        {494}event LeakS(phase1,bob);
        {495}out(pub, key_s(bob))
    )
) | (
    {496}let v_1009: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {497}let s_1010: keypair = (if not-caught-fail(v_1009) then keypairpack(validkey(v_1009),key_s(bob)) else fail-any) in
    {498}out(pub, getpublickey(s_1010));
    (
        {499}let e_1011: keypair = keypairpack(empty,empty) in
        {500}let rs_1012: key = empty in
        {501}let re_1013: key = empty in
        {502}let v_1014: bitstring = catch-fail(hash(somename,empty)) in
        {503}let v_1015: key = catch-fail(v_1014) in
        {504}let v_1016: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {505}let v_1017: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then symmetricstatepack(v_1016,v_1015,v_1014) else fail-any) else fail-any) else fail-any))) in
        {506}let v_1018: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then symmetricstatepack(v_1016,v_1015,v_1014) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1017),hash(3-proj-3-tuple(v_1017),empty)) else fail-any) else fail-any)) in
        {507}let v_1019: bitstring = catch-fail(symmetricstateunpack(v_1018)) in
        {508}let v_1020: symmetricstate = catch-fail((if success?(getpublickey(s_1010)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),getpublickey(s_1010))) else fail-any) else fail-any)) in
        {509}let hs_1021: handshakestate = (if not-caught-fail(v_1018) then (if not-caught-fail(v_1020) then handshakestatepack(v_1020,s_1010,e_1011,rs_1012,re_1013,empty,false) else fail-any) else fail-any) in
        {510}insert statestore(bob,charlie,sid,statepack_a(hs_1021))
    ) | (
        {551}get statestore(=bob,=charlie,=sid,statepack_a(hs_1022: handshakestate)) in
        {511}in(pub, message_a_1023: bitstring);
        {512}let v_1024: bitstring = catch-fail(handshakestateunpack(hs_1022)) in
        {513}let v_1025: bitstring = catch-fail(deconcat3(message_a_1023)) in
        {514}let v_1026: bool = catch-fail(true) in
        {515}let v_1027: key = catch-fail(1-proj-3-tuple(v_1025)) in
        {516}let v_1028: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1024))) in
        {517}let v_1029: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1028),hash(3-proj-3-tuple(v_1028),v_1027)) else fail-any) else fail-any)) in
        {518}let v_1030: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1024))) in
        {519}let v_1031: bitstring = catch-fail(symmetricstateunpack(v_1029)) in
        {520}let v_1032: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1031),(if success?(2-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),v_1027) else fail-any) else fail-any))) in
        {521}let v_1033: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1031),(if success?(2-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),v_1027) else fail-any) else fail-any))) in
        {522}let v_1034: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1031),(if success?(2-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),v_1027) else fail-any) else fail-any))) in
        {523}let v_1035: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),v_1027) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1031))) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1034) then (v_1032,v_1033,v_1034) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let v_1036: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),v_1027) else fail-any) else fail-any)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1035)) then cipherstatepack(2-proj-3-tuple(v_1035),minnonce) else fail-any),1-proj-3-tuple(v_1035),3-proj-3-tuple(v_1031)) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1037: bitstring = catch-fail(symmetricstateunpack(v_1036)) in
        {526}let v_1038: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1037))) in
        {527}let v_1039: aead = catch-fail(decrypt(1-proj-2-tuple(v_1038),2-proj-2-tuple(v_1038),3-proj-3-tuple(v_1037),2-proj-3-tuple(v_1025))) in
        {528}let v_1040: bitstring = catch-fail(aeadunpack(v_1039)) in
        {529}let v_1041: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1037))) in
        {530}let v_1042: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1038))) && success?(1-proj-3-tuple(v_1037))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-2-tuple(v_1041))))) then cipherstatepack(1-proj-2-tuple(v_1041),increment_nonce(2-proj-2-tuple(v_1038))) else fail-any) else fail-any)) in
        {531}let v_1043: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1025)) && (success?(3-proj-3-tuple(v_1037)) && success?(1-proj-3-tuple(v_1037)))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then (if not-caught-fail(v_1039) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then (if not-caught-fail(v_1042) then (v_1042,3-proj-3-tuple(v_1040),1-proj-3-tuple(v_1040)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1044: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1043),2-proj-3-tuple(v_1037),3-proj-3-tuple(v_1037)))) in
        {533}let v_1045: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1025)) && success?(symmetricstatepack(1-proj-3-tuple(v_1043),2-proj-3-tuple(v_1037),3-proj-3-tuple(v_1037)))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then symmetricstatepack(1-proj-3-tuple(v_1044),2-proj-3-tuple(v_1044),hash(3-proj-3-tuple(v_1044),2-proj-3-tuple(v_1025))) else fail-any) else fail-any)) in
        {534}let v_1046: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1025)) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then (if not-caught-fail(v_1045) then (v_1045,2-proj-3-tuple(v_1043),3-proj-3-tuple(v_1043)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1047: key = catch-fail(2-proj-3-tuple(v_1046)) in
        {536}let v_1048: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1046))) in
        {537}let v_1049: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {538}let v_1050: aead = catch-fail(decrypt(1-proj-2-tuple(v_1049),2-proj-2-tuple(v_1049),3-proj-3-tuple(v_1048),3-proj-3-tuple(v_1025))) in
        {539}let v_1051: bitstring = catch-fail(aeadunpack(v_1050)) in
        {540}let v_1052: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {541}let v_1053: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1049))) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then cipherstatepack(1-proj-2-tuple(v_1052),increment_nonce(2-proj-2-tuple(v_1049))) else fail-any) else fail-any)) in
        {542}let v_1054: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1025)) && (success?(3-proj-3-tuple(v_1048)) && success?(1-proj-3-tuple(v_1048)))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-2-tuple(v_1049))))) then (if not-caught-fail(v_1050) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then (if not-caught-fail(v_1053) then (v_1053,3-proj-3-tuple(v_1051),1-proj-3-tuple(v_1051)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1055: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) in
        {544}let v_1056: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1025)) && success?(symmetricstatepack(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then symmetricstatepack(1-proj-3-tuple(v_1055),2-proj-3-tuple(v_1055),hash(3-proj-3-tuple(v_1055),3-proj-3-tuple(v_1025))) else fail-any) else fail-any)) in
        {545}let v_1057: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1025)) && success?(1-proj-3-tuple(v_1046))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if not-caught-fail(v_1056) then (v_1056,2-proj-3-tuple(v_1054),3-proj-3-tuple(v_1054)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1058: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {547}let v_1059: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1057),2-proj-7-tuple(v_1024),3-proj-7-tuple(v_1024),v_1047,v_1027,6-proj-7-tuple(v_1024),7-proj-7-tuple(v_1024))) in
        {548}let (hs_1060: handshakestate,plaintext_a_1061: bitstring,valid_1062: bool) = (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-7-tuple(v_1024))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1036) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if not-caught-fail(v_1047) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then (if ((3-proj-3-tuple(v_1046) && 3-proj-3-tuple(v_1057)) && (v_1047 = getpublickey((if not-caught-fail(v_1058) then keypairpack(validkey(v_1058),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1059) then (v_1059,2-proj-3-tuple(v_1057),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {549}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1061);
        {550}insert statestore(bob,charlie,sid,statepack_b(hs_1060))
    ) | (
        {581}get statestore(=bob,=charlie,=sid,statepack_b(hs_1063: handshakestate)) in
        {552}let v_1064: bitstring = catch-fail(handshakestateunpack(hs_1063)) in
        {553}let v_1065: bitstring = catch-fail((empty,empty,empty)) in
        {554}let v_1066: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {555}let v_1067: keypair = catch-fail((if not-caught-fail(v_1066) then keypairpack(validkey(v_1066),key_e(bob,charlie,sid)) else fail-any)) in
        {556}let v_1068: bitstring = catch-fail(getpublickey(v_1067)) in
        {557}let v_1069: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1064))) in
        {558}let v_1070: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1064)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then symmetricstatepack(1-proj-3-tuple(v_1069),2-proj-3-tuple(v_1069),hash(3-proj-3-tuple(v_1069),v_1068)) else fail-any) else fail-any)) in
        {559}let v_1071: bitstring = catch-fail(keypairunpack(v_1067)) in
        {560}let v_1072: bitstring = catch-fail(symmetricstateunpack(v_1070)) in
        {561}let v_1073: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1072),(if success?(5-proj-7-tuple(v_1064)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),5-proj-7-tuple(v_1064)) else fail-any) else fail-any))) in
        {562}let v_1074: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1072),(if success?(5-proj-7-tuple(v_1064)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),5-proj-7-tuple(v_1064)) else fail-any) else fail-any))) in
        {563}let v_1075: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1072),(if success?(5-proj-7-tuple(v_1064)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),5-proj-7-tuple(v_1064)) else fail-any) else fail-any))) in
        {564}let v_1076: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1064)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),5-proj-7-tuple(v_1064)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1072))) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1075) then (v_1073,v_1074,v_1075) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1077: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1064)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),5-proj-7-tuple(v_1064)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1076)) then cipherstatepack(2-proj-3-tuple(v_1076),minnonce) else fail-any),1-proj-3-tuple(v_1076),3-proj-3-tuple(v_1072)) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1078: bitstring = catch-fail(symmetricstateunpack(v_1077)) in
        {567}let v_1079: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1078))) in
        {568}let v_1080: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1079),2-proj-2-tuple(v_1079),3-proj-3-tuple(v_1078),msg_b(bob,charlie,sid))) in
        {569}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1078))) in
        {570}let v_1082: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1079))) && success?(1-proj-3-tuple(v_1078))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then cipherstatepack(1-proj-2-tuple(v_1081),increment_nonce(2-proj-2-tuple(v_1079))) else fail-any) else fail-any)) in
        {571}let v_1083: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1078)) && success?(1-proj-3-tuple(v_1078))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then (if not-caught-fail(v_1080) then (if not-caught-fail(v_1082) then (v_1082,v_1080) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {572}let v_1084: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1083),2-proj-3-tuple(v_1078),3-proj-3-tuple(v_1078)))) in
        {573}let v_1085: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1083)) && success?(symmetricstatepack(1-proj-2-tuple(v_1083),2-proj-3-tuple(v_1078),3-proj-3-tuple(v_1078)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack(1-proj-3-tuple(v_1084),2-proj-3-tuple(v_1084),hash(3-proj-3-tuple(v_1084),2-proj-2-tuple(v_1083))) else fail-any) else fail-any)) in
        {574}let v_1086: bitstring = catch-fail((if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-2-tuple(v_1083))))) then (if not-caught-fail(v_1085) then (v_1085,2-proj-2-tuple(v_1083)) else fail-any) else fail-any) else fail-any)) in
        {575}let v_1087: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1086),2-proj-7-tuple(v_1064),v_1067,4-proj-7-tuple(v_1064),5-proj-7-tuple(v_1064),6-proj-7-tuple(v_1064),7-proj-7-tuple(v_1064))) in
        {576}let v_1088: bitstring = catch-fail(concat3(v_1068,2-proj-3-tuple(v_1065),2-proj-2-tuple(v_1086))) in
        {577}let (hs_1089: handshakestate,message_b_1090: bitstring) = (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-7-tuple(v_1064))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1077) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-2-tuple(v_1086))))) then (if not-caught-fail(v_1087) then (if not-caught-fail(v_1088) then (v_1087,v_1088) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {578}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {579}insert statestore(bob,charlie,sid,statepack_c(hs_1089));
        {580}out(pub, message_b_1090)
    ) | (
        {615}get statestore(=bob,=charlie,=sid,statepack_c(hs_1091: handshakestate)) in
        {582}in(pub, message_c_1092: bitstring);
        {583}let v_1093: bitstring = catch-fail(handshakestateunpack(hs_1091)) in
        {584}let v_1094: bitstring = catch-fail(deconcat3(message_c_1092)) in
        {585}let v_1095: bool = catch-fail(true) in
        {586}let v_1096: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1093))) in
        {587}let v_1097: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1093))) in
        {588}let v_1098: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1097),(if (success?(4-proj-7-tuple(v_1093)) && success?(3-proj-7-tuple(v_1093))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then dhexp(2-proj-2-tuple(v_1096),4-proj-7-tuple(v_1093)) else fail-any) else fail-any))) in
        {589}let v_1099: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1097),(if (success?(4-proj-7-tuple(v_1093)) && success?(3-proj-7-tuple(v_1093))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then dhexp(2-proj-2-tuple(v_1096),4-proj-7-tuple(v_1093)) else fail-any) else fail-any))) in
        {590}let v_1100: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1097),(if (success?(4-proj-7-tuple(v_1093)) && success?(3-proj-7-tuple(v_1093))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then dhexp(2-proj-2-tuple(v_1096),4-proj-7-tuple(v_1093)) else fail-any) else fail-any))) in
        {591}let v_1101: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1093)) && success?(3-proj-7-tuple(v_1093))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then dhexp(2-proj-2-tuple(v_1096),4-proj-7-tuple(v_1093)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1097))) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1099) then (if not-caught-fail(v_1100) then (v_1098,v_1099,v_1100) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1102: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1093)) && success?(3-proj-7-tuple(v_1093))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then dhexp(2-proj-2-tuple(v_1096),4-proj-7-tuple(v_1093)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1093))) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-3-tuple(v_1097))))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1101)) then cipherstatepack(2-proj-3-tuple(v_1101),minnonce) else fail-any),1-proj-3-tuple(v_1101),3-proj-3-tuple(v_1097)) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1103: bitstring = catch-fail(symmetricstateunpack(v_1102)) in
        {594}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {595}let v_1105: aead = catch-fail(decrypt(1-proj-2-tuple(v_1104),2-proj-2-tuple(v_1104),3-proj-3-tuple(v_1103),3-proj-3-tuple(v_1094))) in
        {596}let v_1106: bitstring = catch-fail(aeadunpack(v_1105)) in
        {597}let v_1107: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {598}let v_1108: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1104))) && success?(1-proj-3-tuple(v_1103))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-2-tuple(v_1107))))) then cipherstatepack(1-proj-2-tuple(v_1107),increment_nonce(2-proj-2-tuple(v_1104))) else fail-any) else fail-any)) in
        {599}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1094)) && (success?(3-proj-3-tuple(v_1103)) && success?(1-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then (if not-caught-fail(v_1105) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then (if not-caught-fail(v_1108) then (v_1108,3-proj-3-tuple(v_1106),1-proj-3-tuple(v_1106)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1110: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) in
        {601}let v_1111: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1094)) && success?(symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1110),hash(3-proj-3-tuple(v_1110),3-proj-3-tuple(v_1094))) else fail-any) else fail-any)) in
        {602}let v_1112: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1094)) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if not-caught-fail(v_1111) then (v_1111,2-proj-3-tuple(v_1109),3-proj-3-tuple(v_1109)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {603}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1112),2-proj-7-tuple(v_1093),3-proj-7-tuple(v_1093),4-proj-7-tuple(v_1093),5-proj-7-tuple(v_1093),6-proj-7-tuple(v_1093),7-proj-7-tuple(v_1093))) in
        {604}let v_1114: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1112))) in
        {605}let v_1115: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1114),zero)) in
        {606}let v_1116: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1114),zero)) in
        {607}let v_1117: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1114),zero)) in
        {608}let v_1118: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1114)) then (if not-caught-fail(v_1115) then (if not-caught-fail(v_1116) then (if not-caught-fail(v_1117) then (v_1115,v_1116,v_1117) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1119: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1118)) then cipherstatepack(1-proj-3-tuple(v_1118),minnonce) else fail-any)) in
        {610}let v_1120: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1118)) then cipherstatepack(2-proj-3-tuple(v_1118),minnonce) else fail-any)) in
        {611}let v_1121: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1112)) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then (if not-caught-fail(v_1119) then (if not-caught-fail(v_1120) then (1-proj-3-tuple(v_1112),v_1119,v_1120) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let (hs_1122: handshakestate,plaintext_c_1123: bitstring,valid_1124: bool,cs1_1125: cipherstate,cs2_1126: cipherstate) = (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-7-tuple(v_1093))))) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if not-caught-fail(v_1095) then (if not-caught-fail(v_1102) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if (v_1095 && 3-proj-3-tuple(v_1112)) then (if not-caught-fail(v_1113) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (v_1113,2-proj-3-tuple(v_1112),true,2-proj-3-tuple(v_1121),3-proj-3-tuple(v_1121)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {613}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1123);
        {614}insert statestore(bob,charlie,sid,statepack_d(hs_1122,cs1_1125,cs2_1126))
    ) | (
        {616}!
        {635}get statestore(=bob,=charlie,=sid,statepack_d(hs_1127: handshakestate,cs1_1128: cipherstate,cs2_1129: cipherstate)) in
        {617}let hs_1130: handshakestate = handshakestatesetcs(hs_1127,cs2_1129) in
        {618}let v_1131: bitstring = catch-fail(handshakestateunpack(hs_1130)) in
        {619}let v_1132: bitstring = catch-fail((empty,empty,empty)) in
        {620}let v_1133: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1131))) in
        {621}let v_1134: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1133))) in
        {622}let v_1135: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1134),2-proj-2-tuple(v_1134),3-proj-3-tuple(v_1133),msg_d(bob,charlie,sid))) in
        {623}let v_1136: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1133))) in
        {624}let v_1137: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1134))) && success?(1-proj-3-tuple(v_1133))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then cipherstatepack(1-proj-2-tuple(v_1136),increment_nonce(2-proj-2-tuple(v_1134))) else fail-any) else fail-any)) in
        {625}let v_1138: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1133)) && success?(1-proj-3-tuple(v_1133))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-2-tuple(v_1134))))) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1137) then (v_1137,v_1135) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1139: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1138),2-proj-3-tuple(v_1133),3-proj-3-tuple(v_1133)))) in
        {627}let v_1140: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1138)) && success?(symmetricstatepack(1-proj-2-tuple(v_1138),2-proj-3-tuple(v_1133),3-proj-3-tuple(v_1133)))) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then symmetricstatepack(1-proj-3-tuple(v_1139),2-proj-3-tuple(v_1139),hash(3-proj-3-tuple(v_1139),2-proj-2-tuple(v_1138))) else fail-any) else fail-any)) in
        {628}let v_1141: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1131)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then (if not-caught-fail(v_1140) then (v_1140,2-proj-2-tuple(v_1138)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1142: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1141),2-proj-7-tuple(v_1131),3-proj-7-tuple(v_1131),4-proj-7-tuple(v_1131),5-proj-7-tuple(v_1131),6-proj-7-tuple(v_1131),7-proj-7-tuple(v_1131))) in
        {630}let v_1143: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1132),2-proj-3-tuple(v_1132),2-proj-2-tuple(v_1141))) in
        {631}let (hs_1144: handshakestate,message_d_1145: bitstring) = (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-7-tuple(v_1131))))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-2-tuple(v_1141))))) then (if not-caught-fail(v_1142) then (if not-caught-fail(v_1143) then (v_1142,v_1143) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {632}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {633}insert statestore(bob,charlie,sid,statepack_e(hs_1144,cs1_1128,handshakestategetcs(hs_1144)));
        {634}out(pub, message_d_1145)
    ) | (
        {636}!
        {656}get statestore(=bob,=charlie,=sid,statepack_e(hs_1146: handshakestate,cs1_1147: cipherstate,cs2_1148: cipherstate)) in
        {637}let hs_1149: handshakestate = handshakestatesetcs(hs_1146,cs1_1147) in
        {638}in(pub, message_e_1150: bitstring);
        {639}let v_1151: bitstring = catch-fail(handshakestateunpack(hs_1149)) in
        {640}let v_1152: bitstring = catch-fail(deconcat3(message_e_1150)) in
        {641}let v_1153: bool = catch-fail(true) in
        {642}let v_1154: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1151))) in
        {643}let v_1155: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1154))) in
        {644}let v_1156: aead = catch-fail(decrypt(1-proj-2-tuple(v_1155),2-proj-2-tuple(v_1155),3-proj-3-tuple(v_1154),3-proj-3-tuple(v_1152))) in
        {645}let v_1157: bitstring = catch-fail(aeadunpack(v_1156)) in
        {646}let v_1158: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1154))) in
        {647}let v_1159: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1155))) && success?(1-proj-3-tuple(v_1154))) then (if (not-caught-fail(v_1158) && success?(is-true(success?(1-proj-2-tuple(v_1158))))) then cipherstatepack(1-proj-2-tuple(v_1158),increment_nonce(2-proj-2-tuple(v_1155))) else fail-any) else fail-any)) in
        {648}let v_1160: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1152)) && (success?(3-proj-3-tuple(v_1154)) && success?(1-proj-3-tuple(v_1154)))) then (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-2-tuple(v_1155))))) then (if not-caught-fail(v_1156) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-3-tuple(v_1157))))) then (if not-caught-fail(v_1159) then (v_1159,3-proj-3-tuple(v_1157),1-proj-3-tuple(v_1157)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {649}let v_1161: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1160),2-proj-3-tuple(v_1154),3-proj-3-tuple(v_1154)))) in
        {650}let v_1162: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1152)) && success?(symmetricstatepack(1-proj-3-tuple(v_1160),2-proj-3-tuple(v_1154),3-proj-3-tuple(v_1154)))) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then symmetricstatepack(1-proj-3-tuple(v_1161),2-proj-3-tuple(v_1161),hash(3-proj-3-tuple(v_1161),3-proj-3-tuple(v_1152))) else fail-any) else fail-any)) in
        {651}let v_1163: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1152)) && success?(1-proj-7-tuple(v_1151))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-3-tuple(v_1160))))) then (if not-caught-fail(v_1162) then (v_1162,2-proj-3-tuple(v_1160),3-proj-3-tuple(v_1160)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1164: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1163),2-proj-7-tuple(v_1151),3-proj-7-tuple(v_1151),4-proj-7-tuple(v_1151),5-proj-7-tuple(v_1151),6-proj-7-tuple(v_1151),7-proj-7-tuple(v_1151))) in
        {653}let (hs_1165: handshakestate,plaintext_e_1166: bitstring,valid_1167: bool) = (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-7-tuple(v_1151))))) then (if (not-caught-fail(v_1152) && success?(is-true(success?(1-proj-3-tuple(v_1152))))) then (if not-caught-fail(v_1153) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then (if (v_1153 && 3-proj-3-tuple(v_1163)) then (if not-caught-fail(v_1164) then (v_1164,2-proj-3-tuple(v_1163),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {654}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1166);
        {655}event RecvEnd(valid_1167)
    ) | (
        {657}event LeakS(phase0,bob);
        {658}out(pub, key_s(bob))
    ) | (
        {659}phase 1;
        {660}event LeakS(phase1,bob);
        {661}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 139 rules in the queue.
400 rules inserted. The rule base contains 381 rules. 22 rules in the queue.
600 rules inserted. The rule base contains 572 rules. 87 rules in the queue.
800 rules inserted. The rule base contains 755 rules. 278 rules in the queue.
1000 rules inserted. The rule base contains 943 rules. 339 rules in the queue.
1200 rules inserted. The rule base contains 1122 rules. 314 rules in the queue.
1400 rules inserted. The rule base contains 1306 rules. 428 rules in the queue.
1600 rules inserted. The rule base contains 1481 rules. 486 rules in the queue.
1800 rules inserted. The rule base contains 1620 rules. 439 rules in the queue.
2000 rules inserted. The rule base contains 1774 rules. 389 rules in the queue.
2200 rules inserted. The rule base contains 1932 rules. 399 rules in the queue.
2400 rules inserted. The rule base contains 2101 rules. 407 rules in the queue.
2600 rules inserted. The rule base contains 2183 rules. 391 rules in the queue.
2800 rules inserted. The rule base contains 2301 rules. 414 rules in the queue.
3000 rules inserted. The rule base contains 2456 rules. 462 rules in the queue.
3200 rules inserted. The rule base contains 2553 rules. 440 rules in the queue.
3400 rules inserted. The rule base contains 2650 rules. 410 rules in the queue.
3600 rules inserted. The rule base contains 2793 rules. 445 rules in the queue.
3800 rules inserted. The rule base contains 2861 rules. 460 rules in the queue.
4000 rules inserted. The rule base contains 2926 rules. 429 rules in the queue.
4200 rules inserted. The rule base contains 2981 rules. 384 rules in the queue.
4400 rules inserted. The rule base contains 3124 rules. 323 rules in the queue.
4600 rules inserted. The rule base contains 3276 rules. 339 rules in the queue.
4800 rules inserted. The rule base contains 3335 rules. 333 rules in the queue.
5000 rules inserted. The rule base contains 3411 rules. 261 rules in the queue.
5200 rules inserted. The rule base contains 3573 rules. 264 rules in the queue.
5400 rules inserted. The rule base contains 3696 rules. 268 rules in the queue.
5600 rules inserted. The rule base contains 3814 rules. 232 rules in the queue.
5800 rules inserted. The rule base contains 3970 rules. 243 rules in the queue.
6000 rules inserted. The rule base contains 4126 rules. 242 rules in the queue.
6200 rules inserted. The rule base contains 4296 rules. 275 rules in the queue.
6400 rules inserted. The rule base contains 4425 rules. 351 rules in the queue.
6600 rules inserted. The rule base contains 4539 rules. 377 rules in the queue.
6800 rules inserted. The rule base contains 4689 rules. 378 rules in the queue.
7000 rules inserted. The rule base contains 4813 rules. 381 rules in the queue.
7200 rules inserted. The rule base contains 4987 rules. 391 rules in the queue.
7400 rules inserted. The rule base contains 5087 rules. 372 rules in the queue.
7600 rules inserted. The rule base contains 5209 rules. 352 rules in the queue.
7800 rules inserted. The rule base contains 5347 rules. 342 rules in the queue.
8000 rules inserted. The rule base contains 5479 rules. 330 rules in the queue.
8200 rules inserted. The rule base contains 5606 rules. 349 rules in the queue.
8400 rules inserted. The rule base contains 5721 rules. 342 rules in the queue.
8600 rules inserted. The rule base contains 5810 rules. 363 rules in the queue.
8800 rules inserted. The rule base contains 5953 rules. 375 rules in the queue.
9000 rules inserted. The rule base contains 6040 rules. 375 rules in the queue.
9200 rules inserted. The rule base contains 6141 rules. 370 rules in the queue.
9400 rules inserted. The rule base contains 6219 rules. 319 rules in the queue.
9600 rules inserted. The rule base contains 6344 rules. 258 rules in the queue.
9800 rules inserted. The rule base contains 6436 rules. 259 rules in the queue.
10000 rules inserted. The rule base contains 6516 rules. 230 rules in the queue.
10200 rules inserted. The rule base contains 6612 rules. 225 rules in the queue.
10400 rules inserted. The rule base contains 6702 rules. 165 rules in the queue.
10600 rules inserted. The rule base contains 6723 rules. 93 rules in the queue.
10800 rules inserted. The rule base contains 6677 rules. 44 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601055]),msg_a(alice,bob,sid[!1 = @sid_87601055]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_87601056]),msg_a(alice,bob,sid[!1 = @sid_87601055])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601064]),msg_a(alice,bob,sid[!1 = @sid_87601064]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_87601065]),msg_a(alice,bob,sid[!1 = @sid_87601064])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601074]),msg_a(alice,bob,sid[!1 = @sid_87601074]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_87601075]),msg_a(alice,bob,sid[!1 = @sid_87601074])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601084]),msg_a(alice,bob,sid[!1 = @sid_87601084]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_87601085]),msg_a(alice,bob,sid[!1 = @sid_87601084])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601093]),msg_a(alice,bob,sid[!1 = @sid_87601093]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_87601094]),msg_a(alice,bob,sid[!1 = @sid_87601093])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601101]),msg_a(alice,bob,sid[!1 = @sid_87601101]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_87601101]))
Abbreviations:
sid_87601206 = sid[!1 = @sid_87601182]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_87601206,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_87601206,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_87601206,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {59}.
The event SendMsg(alice,bob,stagepack_a(sid_87601206),msg_a(alice,bob,sid_87601206)) may be executed at {56}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))) may be sent on channel pub at output {58}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {494}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {495}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601206),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))).

26. By 13, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))) in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601206),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601206),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601206)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_87601206) in phase 1.
attacker_p1(msg_a(alice,bob,sid_87601206)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601208]),msg_a(alice,bob,sid[!1 = @sid_87601208]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_87601208]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601211]),msg_a(alice,bob,sid[!1 = @sid_87601211]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_87601211]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601218]),msg_a(alice,bob,sid[!1 = @sid_87601218]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_87601218]))
Abbreviations:
sid_87601325 = sid[!1 = @sid_87601301]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_87601325,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_87601325,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_87601325,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {59}.
The event SendMsg(alice,bob,stagepack_a(sid_87601325),msg_a(alice,bob,sid_87601325)) may be executed at {56}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))) may be sent on channel pub at output {58}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {494}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {495}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601325),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))).

26. By 13, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))) in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601325),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601325),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601325)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_87601325) in phase 1.
attacker_p1(msg_a(alice,bob,sid_87601325)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601327]),msg_a(alice,bob,sid[!1 = @sid_87601327]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_87601327]))
Abbreviations:
sid_87601432 = sid[!1 = @sid_87601408]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_87601432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_87601432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_87601432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {59}.
The event SendMsg(alice,bob,stagepack_a(sid_87601432),msg_a(alice,bob,sid_87601432)) may be executed at {56}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))) may be sent on channel pub at output {58}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))).

9. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

10. By 1, the attacker may have the channel pub.
By 9, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g))))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {494}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {495}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_87601432),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))).

26. By 13, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))) in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87601432),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87601432),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87601432)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_87601432) in phase 1.
attacker_p1(msg_a(alice,bob,sid_87601432)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601435]),msg_b(bob,alice,sid[!1 = @sid_87601435]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601436]),msg_a(alice,bob,sid[!1 = @sid_87601436]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_87601436]),msg_b(bob,alice,sid[!1 = @sid_87601435])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601444]),msg_b(bob,alice,sid[!1 = @sid_87601444]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601445]),msg_a(alice,bob,sid[!1 = @sid_87601445]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_87601445]),msg_b(bob,alice,sid[!1 = @sid_87601444])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601454]),msg_b(bob,alice,sid[!1 = @sid_87601454]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601455]),msg_a(alice,bob,sid[!1 = @sid_87601455]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_87601455]),msg_b(bob,alice,sid[!1 = @sid_87601454])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601464]),msg_b(bob,alice,sid[!1 = @sid_87601464]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601465]),msg_a(alice,bob,sid[!1 = @sid_87601465]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_87601465]),msg_b(bob,alice,sid[!1 = @sid_87601464])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601473]),msg_b(bob,alice,sid[!1 = @sid_87601473]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601474]),msg_a(alice,bob,sid[!1 = @sid_87601474]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_87601474]),msg_b(bob,alice,sid[!1 = @sid_87601473])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601497]),msg_c(alice,bob,sid[!1 = @sid_87601497]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601498]),msg_b(bob,alice,sid[!1 = @sid_87601498]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601497]),msg_a(alice,bob,sid[!1 = @sid_87601497]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_87601498]),msg_c(alice,bob,sid[!1 = @sid_87601497])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601506]),msg_c(alice,bob,sid[!1 = @sid_87601506]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601507]),msg_b(bob,alice,sid[!1 = @sid_87601507]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601506]),msg_a(alice,bob,sid[!1 = @sid_87601506]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_87601507]),msg_c(alice,bob,sid[!1 = @sid_87601506])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601516]),msg_c(alice,bob,sid[!1 = @sid_87601516]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601517]),msg_b(bob,alice,sid[!1 = @sid_87601517]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601516]),msg_a(alice,bob,sid[!1 = @sid_87601516]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_87601517]),msg_c(alice,bob,sid[!1 = @sid_87601516])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601526]),msg_c(alice,bob,sid[!1 = @sid_87601526]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601527]),msg_b(bob,alice,sid[!1 = @sid_87601527]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601526]),msg_a(alice,bob,sid[!1 = @sid_87601526]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_87601527]),msg_c(alice,bob,sid[!1 = @sid_87601526])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601535]),msg_c(alice,bob,sid[!1 = @sid_87601535]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601536]),msg_b(bob,alice,sid[!1 = @sid_87601536]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601535]),msg_a(alice,bob,sid[!1 = @sid_87601535]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_87601536]),msg_c(alice,bob,sid[!1 = @sid_87601535])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601559]),msg_d(bob,alice,sid[!1 = @sid_87601559]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601560]),msg_c(alice,bob,sid[!1 = @sid_87601560]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601559]),msg_b(bob,alice,sid[!1 = @sid_87601559]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601560]),msg_a(alice,bob,sid[!1 = @sid_87601560]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_87601560]),msg_d(bob,alice,sid[!1 = @sid_87601559])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601568]),msg_d(bob,alice,sid[!1 = @sid_87601568]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601569]),msg_c(alice,bob,sid[!1 = @sid_87601569]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601568]),msg_b(bob,alice,sid[!1 = @sid_87601568]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601569]),msg_a(alice,bob,sid[!1 = @sid_87601569]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_87601569]),msg_d(bob,alice,sid[!1 = @sid_87601568])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601578]),msg_d(bob,alice,sid[!1 = @sid_87601578]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601579]),msg_c(alice,bob,sid[!1 = @sid_87601579]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601578]),msg_b(bob,alice,sid[!1 = @sid_87601578]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601579]),msg_a(alice,bob,sid[!1 = @sid_87601579]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_87601579]),msg_d(bob,alice,sid[!1 = @sid_87601578])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601588]),msg_d(bob,alice,sid[!1 = @sid_87601588]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601589]),msg_c(alice,bob,sid[!1 = @sid_87601589]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601588]),msg_b(bob,alice,sid[!1 = @sid_87601588]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601589]),msg_a(alice,bob,sid[!1 = @sid_87601589]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_87601589]),msg_d(bob,alice,sid[!1 = @sid_87601588])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601597]),msg_d(bob,alice,sid[!1 = @sid_87601597]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601598]),msg_c(alice,bob,sid[!1 = @sid_87601598]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601597]),msg_b(bob,alice,sid[!1 = @sid_87601597]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601598]),msg_a(alice,bob,sid[!1 = @sid_87601598]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_87601598]),msg_d(bob,alice,sid[!1 = @sid_87601597])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_87601621]),msg_e(alice,bob,sid[!1 = @sid_87601621]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601622]),msg_d(bob,alice,sid[!1 = @sid_87601622]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601621]),msg_c(alice,bob,sid[!1 = @sid_87601621]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601622]),msg_b(bob,alice,sid[!1 = @sid_87601622]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601621]),msg_a(alice,bob,sid[!1 = @sid_87601621]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_87601622]),msg_e(alice,bob,sid[!1 = @sid_87601621])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_87601630]),msg_e(alice,bob,sid[!1 = @sid_87601630]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601631]),msg_d(bob,alice,sid[!1 = @sid_87601631]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601630]),msg_c(alice,bob,sid[!1 = @sid_87601630]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601631]),msg_b(bob,alice,sid[!1 = @sid_87601631]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601630]),msg_a(alice,bob,sid[!1 = @sid_87601630]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_87601631]),msg_e(alice,bob,sid[!1 = @sid_87601630])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_87601640]),msg_e(alice,bob,sid[!1 = @sid_87601640]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601641]),msg_d(bob,alice,sid[!1 = @sid_87601641]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601640]),msg_c(alice,bob,sid[!1 = @sid_87601640]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601641]),msg_b(bob,alice,sid[!1 = @sid_87601641]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601640]),msg_a(alice,bob,sid[!1 = @sid_87601640]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_87601641]),msg_e(alice,bob,sid[!1 = @sid_87601640])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_87601650]),msg_e(alice,bob,sid[!1 = @sid_87601650]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601651]),msg_d(bob,alice,sid[!1 = @sid_87601651]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601650]),msg_c(alice,bob,sid[!1 = @sid_87601650]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601651]),msg_b(bob,alice,sid[!1 = @sid_87601651]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601650]),msg_a(alice,bob,sid[!1 = @sid_87601650]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_87601651]),msg_e(alice,bob,sid[!1 = @sid_87601650])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_87601659]),msg_e(alice,bob,sid[!1 = @sid_87601659]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601660]),msg_d(bob,alice,sid[!1 = @sid_87601660]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601659]),msg_c(alice,bob,sid[!1 = @sid_87601659]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601660]),msg_b(bob,alice,sid[!1 = @sid_87601660]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601659]),msg_a(alice,bob,sid[!1 = @sid_87601659]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_87601660]),msg_e(alice,bob,sid[!1 = @sid_87601659])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_87601681]),msg_e(alice,bob,sid[!1 = @sid_87601681]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_87601682]),msg_d(bob,alice,sid[!1 = @sid_87601682]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_87601681]),msg_c(alice,bob,sid[!1 = @sid_87601681]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_87601682]),msg_b(bob,alice,sid[!1 = @sid_87601682]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_87601681]),msg_a(alice,bob,sid[!1 = @sid_87601681]))) -> end(RecvEnd(true))
Abbreviations:
sid_87602072 = sid[!1 = @sid_87601994]
sid_87602073 = sid[!1 = @sid_87602061]

1. The entry statestore(bob,alice,sid_87602073,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {344}.
table(statestore(bob,alice,sid_87602073,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,sid_87602072,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_87602072,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_87602072,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {59}.
The event SendMsg(alice,bob,stagepack_a(sid_87602072),msg_a(alice,bob,sid_87602072)) may be executed at {56}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))) may be sent on channel pub at output {58}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))).

4. The entry statestore(bob,alice,sid_87602073,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {385}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))) that may be sent on channel pub by 3 may be received at input {345}.
So the entry statestore(bob,alice,sid_87602073,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false))) may be inserted in a table at insert {384}.
table(statestore(bob,alice,sid_87602073,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_87602073,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false))) that may be in a table by 4 may be read at get {415}.
The event SendMsg(bob,alice,stagepack_b(sid_87602073),msg_b(bob,alice,sid_87602073)) may be executed at {412}.
So the entry statestore(bob,alice,sid_87602073,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false))) may be inserted in a table at insert {413}.
table(statestore(bob,alice,sid_87602073,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false)))).

6. The entry statestore(alice,bob,sid_87602072,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {59}.
The event SendMsg(alice,bob,stagepack_a(sid_87602072),msg_a(alice,bob,sid_87602072)) may be executed at {56}.
So the entry statestore(alice,bob,sid_87602072,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {57}.
table(statestore(alice,bob,sid_87602072,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

7. The entry statestore(bob,alice,sid_87602073,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false))) that may be in a table by 4 may be read at get {415}.
The event SendMsg(bob,alice,stagepack_b(sid_87602073),msg_b(bob,alice,sid_87602073)) may be executed at {412}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))) may be sent on channel pub at output {414}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))).

8. The entry statestore(alice,bob,sid_87602072,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 6 may be read at get {88}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))) that may be sent on channel pub by 7 may be received at input {60}.
So the entry statestore(alice,bob,sid_87602072,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true))) may be inserted in a table at insert {87}.
table(statestore(alice,bob,sid_87602072,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true)))).

9. The entry statestore(alice,bob,sid_87602072,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true))) that may be in a table by 8 may be read at get {121}.
The event SendMsg(alice,bob,stagepack_c(sid_87602072),msg_c(alice,bob,sid_87602072)) may be executed at {118}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))) may be sent on channel pub at output {120}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))).

10. The entry statestore(bob,alice,sid_87602073,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false))) that may be in a table by 5 may be read at get {449}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))) that may be sent on channel pub by 9 may be received at input {416}.
So the entry statestore(bob,alice,sid_87602073,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce))) may be inserted in a table at insert {448}.
table(statestore(bob,alice,sid_87602073,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_87602073,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce))) that may be in a table by 10 may be read at get {469}.
The event SendMsg(bob,alice,stagepack_d(sid_87602073),msg_d(bob,alice,sid_87602073)) may be executed at {466}.
So the entry statestore(bob,alice,sid_87602073,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {467}.
table(statestore(bob,alice,sid_87602073,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_87602072,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true))) that may be in a table by 8 may be read at get {121}.
The event SendMsg(alice,bob,stagepack_c(sid_87602072),msg_c(alice,bob,sid_87602072)) may be executed at {118}.
So the entry statestore(alice,bob,sid_87602072,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce))) may be inserted in a table at insert {119}.
table(statestore(alice,bob,sid_87602072,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_87602073,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce))) that may be in a table by 10 may be read at get {469}.
The event SendMsg(bob,alice,stagepack_d(sid_87602073),msg_d(bob,alice,sid_87602073)) may be executed at {466}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073))) may be sent on channel pub at output {468}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))).

14. The entry statestore(alice,bob,sid_87602072,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce))) that may be in a table by 12 may be read at get {142}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073))) that may be sent on channel pub by 13 may be received at input {124}.
So the entry statestore(alice,bob,sid_87602072,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {141}.
table(statestore(alice,bob,sid_87602072,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_87602072,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),key_e(alice,bob,sid_87602072)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {161}.
The event SendMsg(alice,bob,stagepack_e(sid_87602072),msg_e(alice,bob,sid_87602072)) may be executed at {159}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073))),msg_e(alice,bob,sid_87602072))) may be sent on channel pub at output {160}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073))),msg_e(alice,bob,sid_87602072)))).

16. The entry statestore(bob,alice,sid_87602073,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_87602073),g)),key_e(bob,alice,sid_87602073)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {490}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(alice,bob,sid_87602072),dhexp_real(key_e(bob,alice,sid_87602073),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_87602073),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),dhexp_real(key_e(bob,alice,sid_87602073),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_87602072),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_87602072),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_87602072))),validkey(dhexp_real(key_e(bob,alice,sid_87602073),g))),msg_b(bob,alice,sid_87602073))),msg_c(alice,bob,sid_87602072))),msg_d(bob,alice,sid_87602073))),msg_e(alice,bob,sid_87602072))) that may be sent on channel pub by 15 may be received at input {472}.
So event RecvEnd(true) may be executed at {489}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
