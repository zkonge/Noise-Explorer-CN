File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KKpsk0.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 272, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 278, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 286, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 319, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 324, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 326, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 334, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 334, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 272, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 278, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 574, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 286, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk0.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 319, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 324, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 326, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_560: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_561: keypair = (if not-caught-fail(v_560) then keypairpack(validkey(v_560),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_561));
    (
        {7}let e_562: keypair = keypairpack(empty,empty) in
        {8}let v_563: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_564: key = getpublickey((if not-caught-fail(v_563) then keypairpack(validkey(v_563),key_s(bob)) else fail-any)) in
        {10}let re_565: key = empty in
        {11}let v_566: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_567: key = catch-fail(v_566) in
        {13}let v_568: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_569: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then symmetricstatepack(v_568,v_567,v_566) else fail-any) else fail-any) else fail-any))) in
        {15}let v_570: symmetricstate = catch-fail((if success?((if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then symmetricstatepack(v_568,v_567,v_566) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),hash(3-proj-3-tuple(v_569),empty)) else fail-any) else fail-any)) in
        {16}let v_571: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {17}let v_572: symmetricstate = catch-fail((if success?(getpublickey(s_561)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),getpublickey(s_561))) else fail-any) else fail-any)) in
        {18}let v_573: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {19}let v_574: symmetricstate = catch-fail((if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),rs_564)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_570) then (if not-caught-fail(v_572) then (if not-caught-fail(v_574) then handshakestatepack(v_574,s_561,e_562,rs_564,re_565,key_psk(alice,bob),true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {72}get statestore(=alice,=bob,=sid,statepack_a(hs_575: handshakestate)) in
        {22}let v_576: bitstring = catch-fail(handshakestateunpack(hs_575)) in
        {23}let v_577: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_578: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_576))) in
        {25}let v_579: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_578),6-proj-7-tuple(v_576))) in
        {26}let v_580: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_578),6-proj-7-tuple(v_576))) in
        {27}let v_581: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_578),6-proj-7-tuple(v_576))) in
        {28}let v_582: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_576)) && success?(2-proj-3-tuple(v_578))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (v_579,v_580,v_581) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_583: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_578),1-proj-3-tuple(v_582),3-proj-3-tuple(v_578)))) in
        {30}let v_584: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_582)) && success?(symmetricstatepack(1-proj-3-tuple(v_578),1-proj-3-tuple(v_582),3-proj-3-tuple(v_578)))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack(1-proj-3-tuple(v_583),2-proj-3-tuple(v_583),hash(3-proj-3-tuple(v_583),2-proj-3-tuple(v_582))) else fail-any) else fail-any))) in
        {31}let v_585: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_576)) && success?(1-proj-7-tuple(v_576))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_582)) then cipherstatepack(3-proj-3-tuple(v_582),minnonce) else fail-any),1-proj-3-tuple(v_582),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_586: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {33}let v_587: keypair = catch-fail((if not-caught-fail(v_586) then keypairpack(validkey(v_586),key_e(alice,bob,sid)) else fail-any)) in
        {34}let v_588: bitstring = catch-fail(getpublickey(v_587)) in
        {35}let v_589: bitstring = catch-fail(symmetricstateunpack(v_585)) in
        {36}let v_590: symmetricstate = catch-fail((if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_589),hash(3-proj-3-tuple(v_589),v_588)) else fail-any)) in
        {37}let v_591: bitstring = catch-fail(symmetricstateunpack(v_590)) in
        {38}let v_592: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_591),getpublickey(v_587))) in
        {39}let v_593: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_591),getpublickey(v_587))) in
        {40}let v_594: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_591),getpublickey(v_587))) in
        {41}let v_595: bitstring = catch-fail((if (success?(getpublickey(v_587)) && success?(2-proj-3-tuple(v_591))) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (v_592,v_593,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_596: symmetricstate = catch-fail((if success?(getpublickey(v_587)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_595)) then cipherstatepack(2-proj-3-tuple(v_595),minnonce) else fail-any),1-proj-3-tuple(v_595),3-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any)) in
        {43}let v_597: bitstring = catch-fail(keypairunpack(v_587)) in
        {44}let v_598: bitstring = catch-fail(symmetricstateunpack(v_596)) in
        {45}let v_599: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_598),(if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {46}let v_600: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_598),(if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {47}let v_601: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_598),(if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {48}let v_602: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_598))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (v_599,v_600,v_601) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_603: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_602)) then cipherstatepack(2-proj-3-tuple(v_602),minnonce) else fail-any),1-proj-3-tuple(v_602),3-proj-3-tuple(v_598)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_604: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_576))) in
        {51}let v_605: bitstring = catch-fail(symmetricstateunpack(v_603)) in
        {52}let v_606: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_605),(if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {53}let v_607: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_605),(if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {54}let v_608: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_605),(if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {55}let v_609: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_605))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (v_606,v_607,v_608) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_610: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_609)) then cipherstatepack(2-proj-3-tuple(v_609),minnonce) else fail-any),1-proj-3-tuple(v_609),3-proj-3-tuple(v_605)) else fail-any) else fail-any) else fail-any)) in
        {57}let v_611: bitstring = catch-fail(symmetricstateunpack(v_610)) in
        {58}let v_612: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
        {59}let v_613: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_612),2-proj-2-tuple(v_612),3-proj-3-tuple(v_611),msg_a(alice,bob,sid))) in
        {60}let v_614: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
        {61}let v_615: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_612))) && success?(1-proj-3-tuple(v_611))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then cipherstatepack(1-proj-2-tuple(v_614),increment_nonce(2-proj-2-tuple(v_612))) else fail-any) else fail-any)) in
        {62}let v_616: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_611)) && success?(1-proj-3-tuple(v_611))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-2-tuple(v_612))))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_615) then (v_615,v_613) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_617: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_616),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) in
        {64}let v_618: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_616)) && success?(symmetricstatepack(1-proj-2-tuple(v_616),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_617),hash(3-proj-3-tuple(v_617),2-proj-2-tuple(v_616))) else fail-any) else fail-any)) in
        {65}let v_619: bitstring = catch-fail((if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_618) then (v_618,2-proj-2-tuple(v_616)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_620: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_619),2-proj-7-tuple(v_576),v_587,4-proj-7-tuple(v_576),5-proj-7-tuple(v_576),6-proj-7-tuple(v_576),7-proj-7-tuple(v_576))) in
        {67}let v_621: bitstring = catch-fail(concat3(v_588,2-proj-3-tuple(v_577),2-proj-2-tuple(v_619))) in
        {68}let (hs_622: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-7-tuple(v_576))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (if not-caught-fail(v_590) then (if not-caught-fail(v_596) then (if not-caught-fail(v_603) then (if not-caught-fail(v_610) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (v_620,v_621) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {69}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {70}insert statestore(alice,bob,sid,statepack_b(hs_622));
        {71}out(pub, message_a)
    ) | (
        {122}get statestore(=alice,=bob,=sid,statepack_b(hs_623: handshakestate)) in
        {73}in(pub, message_b: bitstring);
        {74}let v_624: bitstring = catch-fail(handshakestateunpack(hs_623)) in
        {75}let v_625: bitstring = catch-fail(deconcat3(message_b)) in
        {76}let v_626: bool = catch-fail(true) in
        {77}let v_627: key = catch-fail(1-proj-3-tuple(v_625)) in
        {78}let v_628: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_624))) in
        {79}let v_629: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_624)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),v_627)) else fail-any) else fail-any)) in
        {80}let v_630: bitstring = catch-fail(symmetricstateunpack(v_629)) in
        {81}let v_631: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_630),v_627)) in
        {82}let v_632: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_630),v_627)) in
        {83}let v_633: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_630),v_627)) in
        {84}let v_634: bitstring = catch-fail((if success?(2-proj-3-tuple(v_630)) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (if not-caught-fail(v_633) then (v_631,v_632,v_633) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_635: symmetricstate = catch-fail((if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_634)) then cipherstatepack(2-proj-3-tuple(v_634),minnonce) else fail-any),1-proj-3-tuple(v_634),3-proj-3-tuple(v_630)) else fail-any) else fail-any)) in
        {86}let v_636: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_624))) in
        {87}let v_637: bitstring = catch-fail(symmetricstateunpack(v_635)) in
        {88}let v_638: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_637),(if success?(3-proj-7-tuple(v_624)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_627) else fail-any) else fail-any))) in
        {89}let v_639: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_637),(if success?(3-proj-7-tuple(v_624)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_627) else fail-any) else fail-any))) in
        {90}let v_640: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_637),(if success?(3-proj-7-tuple(v_624)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_627) else fail-any) else fail-any))) in
        {91}let v_641: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_624)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_627) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_637))) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (v_638,v_639,v_640) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_642: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_624)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_627) else fail-any) else fail-any)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_641)) then cipherstatepack(2-proj-3-tuple(v_641),minnonce) else fail-any),1-proj-3-tuple(v_641),3-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any)) in
        {93}let v_643: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_624))) in
        {94}let v_644: bitstring = catch-fail(symmetricstateunpack(v_642)) in
        {95}let v_645: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_644),(if success?(2-proj-7-tuple(v_624)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_627) else fail-any) else fail-any))) in
        {96}let v_646: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_644),(if success?(2-proj-7-tuple(v_624)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_627) else fail-any) else fail-any))) in
        {97}let v_647: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_644),(if success?(2-proj-7-tuple(v_624)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_627) else fail-any) else fail-any))) in
        {98}let v_648: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_624)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_627) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_644))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_647) then (v_645,v_646,v_647) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_649: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_624)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_627) else fail-any) else fail-any)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_648)) then cipherstatepack(2-proj-3-tuple(v_648),minnonce) else fail-any),1-proj-3-tuple(v_648),3-proj-3-tuple(v_644)) else fail-any) else fail-any) else fail-any)) in
        {100}let v_650: bitstring = catch-fail(symmetricstateunpack(v_649)) in
        {101}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {102}let v_652: aead = catch-fail(decrypt(1-proj-2-tuple(v_651),2-proj-2-tuple(v_651),3-proj-3-tuple(v_650),3-proj-3-tuple(v_625))) in
        {103}let v_653: bitstring = catch-fail(aeadunpack(v_652)) in
        {104}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {105}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_651))) && success?(1-proj-3-tuple(v_650))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_651))) else fail-any) else fail-any)) in
        {106}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_625)) && (success?(3-proj-3-tuple(v_650)) && success?(1-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,3-proj-3-tuple(v_653),1-proj-3-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) in
        {108}let v_658: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_625)) && success?(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),3-proj-3-tuple(v_625))) else fail-any) else fail-any)) in
        {109}let v_659: bitstring = catch-fail((if success?(3-proj-3-tuple(v_625)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_659),2-proj-7-tuple(v_624),3-proj-7-tuple(v_624),4-proj-7-tuple(v_624),v_627,6-proj-7-tuple(v_624),7-proj-7-tuple(v_624))) in
        {111}let v_661: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_659))) in
        {112}let v_662: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_661),zero)) in
        {113}let v_663: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_661),zero)) in
        {114}let v_664: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_661),zero)) in
        {115}let v_665: bitstring = catch-fail((if success?(2-proj-3-tuple(v_661)) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (v_662,v_663,v_664) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_666: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_665)) then cipherstatepack(1-proj-3-tuple(v_665),minnonce) else fail-any)) in
        {117}let v_667: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_665)) then cipherstatepack(2-proj-3-tuple(v_665),minnonce) else fail-any)) in
        {118}let v_668: bitstring = catch-fail((if success?(1-proj-3-tuple(v_659)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (1-proj-3-tuple(v_659),v_666,v_667) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let (hs_669: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-7-tuple(v_624))))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (if not-caught-fail(v_629) then (if not-caught-fail(v_635) then (if not-caught-fail(v_642) then (if not-caught-fail(v_649) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if (v_626 && 3-proj-3-tuple(v_659)) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (v_660,2-proj-3-tuple(v_659),true,2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {121}insert statestore(alice,bob,sid,statepack_c(hs_669,cs1,cs2))
    ) | (
        {123}!
        {142}get statestore(=alice,=bob,=sid,statepack_c(hs_670: handshakestate,cs1_671: cipherstate,cs2_672: cipherstate)) in
        {124}let hs_673: handshakestate = handshakestatesetcs(hs_670,cs1_671) in
        {125}let v_674: bitstring = catch-fail(handshakestateunpack(hs_673)) in
        {126}let v_675: bitstring = catch-fail((empty,empty,empty)) in
        {127}let v_676: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_674))) in
        {128}let v_677: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {129}let v_678: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_677),2-proj-2-tuple(v_677),3-proj-3-tuple(v_676),msg_c(alice,bob,sid))) in
        {130}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {131}let v_680: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_677))) && success?(1-proj-3-tuple(v_676))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then cipherstatepack(1-proj-2-tuple(v_679),increment_nonce(2-proj-2-tuple(v_677))) else fail-any) else fail-any)) in
        {132}let v_681: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_676)) && success?(1-proj-3-tuple(v_676))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then (if not-caught-fail(v_678) then (if not-caught-fail(v_680) then (v_680,v_678) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {133}let v_682: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_681),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) in
        {134}let v_683: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_681)) && success?(symmetricstatepack(1-proj-2-tuple(v_681),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),2-proj-2-tuple(v_681))) else fail-any) else fail-any)) in
        {135}let v_684: bitstring = catch-fail((if success?(1-proj-7-tuple(v_674)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,2-proj-2-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_685: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_684),2-proj-7-tuple(v_674),3-proj-7-tuple(v_674),4-proj-7-tuple(v_674),5-proj-7-tuple(v_674),6-proj-7-tuple(v_674),7-proj-7-tuple(v_674))) in
        {137}let v_686: bitstring = catch-fail(concat3(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),2-proj-2-tuple(v_684))) in
        {138}let (hs_687: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-7-tuple(v_674))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (v_685,v_686) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {139}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {140}insert statestore(alice,bob,sid,statepack_d(hs_687,handshakestategetcs(hs_687),cs2_672));
        {141}out(pub, message_c)
    ) | (
        {143}!
        {163}get statestore(=alice,=bob,=sid,statepack_d(hs_688: handshakestate,cs1_689: cipherstate,cs2_690: cipherstate)) in
        {144}let hs_691: handshakestate = handshakestatesetcs(hs_688,cs2_690) in
        {145}in(pub, message_d: bitstring);
        {146}let v_692: bitstring = catch-fail(handshakestateunpack(hs_691)) in
        {147}let v_693: bitstring = catch-fail(deconcat3(message_d)) in
        {148}let v_694: bool = catch-fail(true) in
        {149}let v_695: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_692))) in
        {150}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {151}let v_697: aead = catch-fail(decrypt(1-proj-2-tuple(v_696),2-proj-2-tuple(v_696),3-proj-3-tuple(v_695),3-proj-3-tuple(v_693))) in
        {152}let v_698: bitstring = catch-fail(aeadunpack(v_697)) in
        {153}let v_699: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {154}let v_700: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_696))) && success?(1-proj-3-tuple(v_695))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then cipherstatepack(1-proj-2-tuple(v_699),increment_nonce(2-proj-2-tuple(v_696))) else fail-any) else fail-any)) in
        {155}let v_701: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && (success?(3-proj-3-tuple(v_695)) && success?(1-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_700) then (v_700,3-proj-3-tuple(v_698),1-proj-3-tuple(v_698)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_702: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) in
        {157}let v_703: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then symmetricstatepack(1-proj-3-tuple(v_702),2-proj-3-tuple(v_702),hash(3-proj-3-tuple(v_702),3-proj-3-tuple(v_693))) else fail-any) else fail-any)) in
        {158}let v_704: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(1-proj-7-tuple(v_692))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if not-caught-fail(v_703) then (v_703,2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_705: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_704),2-proj-7-tuple(v_692),3-proj-7-tuple(v_692),4-proj-7-tuple(v_692),5-proj-7-tuple(v_692),6-proj-7-tuple(v_692),7-proj-7-tuple(v_692))) in
        {160}let (hs_706: handshakestate,plaintext_d: bitstring,valid_707: bool) = (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-7-tuple(v_692))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_694) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (v_694 && 3-proj-3-tuple(v_704)) then (if not-caught-fail(v_705) then (v_705,2-proj-3-tuple(v_704),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {161}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {162}event RecvEnd(valid_707)
    ) | (
        {164}event LeakPsk(phase0,alice,bob);
        {165}out(pub, key_psk(alice,bob))
    ) | (
        {166}phase 1;
        {167}event LeakPsk(phase1,alice,bob);
        {168}out(pub, key_psk(alice,bob))
    ) | (
        {169}event LeakS(phase0,alice);
        {170}out(pub, key_s(alice))
    ) | (
        {171}phase 1;
        {172}event LeakS(phase1,alice);
        {173}out(pub, key_s(alice))
    )
) | (
    {174}let v_708: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {175}let s_709: keypair = (if not-caught-fail(v_708) then keypairpack(validkey(v_708),key_s(alice)) else fail-any) in
    {176}out(pub, getpublickey(s_709));
    (
        {177}let e_710: keypair = keypairpack(empty,empty) in
        {178}let v_711: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {179}let rs_712: key = getpublickey((if not-caught-fail(v_711) then keypairpack(validkey(v_711),key_s(charlie)) else fail-any)) in
        {180}let re_713: key = empty in
        {181}let v_714: bitstring = catch-fail(hash(somename,empty)) in
        {182}let v_715: key = catch-fail(v_714) in
        {183}let v_716: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {184}let v_717: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then symmetricstatepack(v_716,v_715,v_714) else fail-any) else fail-any) else fail-any))) in
        {185}let v_718: symmetricstate = catch-fail((if success?((if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then symmetricstatepack(v_716,v_715,v_714) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),empty)) else fail-any) else fail-any)) in
        {186}let v_719: bitstring = catch-fail(symmetricstateunpack(v_718)) in
        {187}let v_720: symmetricstate = catch-fail((if success?(getpublickey(s_709)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),getpublickey(s_709))) else fail-any) else fail-any)) in
        {188}let v_721: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {189}let v_722: symmetricstate = catch-fail((if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_721),hash(3-proj-3-tuple(v_721),rs_712)) else fail-any)) in
        {190}let hs_723: handshakestate = (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (if not-caught-fail(v_722) then handshakestatepack(v_722,s_709,e_710,rs_712,re_713,key_psk(alice,charlie),true) else fail-any) else fail-any) else fail-any) in
        {191}insert statestore(alice,charlie,sid,statepack_a(hs_723))
    ) | (
        {242}get statestore(=alice,=charlie,=sid,statepack_a(hs_724: handshakestate)) in
        {192}let v_725: bitstring = catch-fail(handshakestateunpack(hs_724)) in
        {193}let v_726: bitstring = catch-fail((empty,empty,empty)) in
        {194}let v_727: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_725))) in
        {195}let v_728: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_727),6-proj-7-tuple(v_725))) in
        {196}let v_729: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_727),6-proj-7-tuple(v_725))) in
        {197}let v_730: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_727),6-proj-7-tuple(v_725))) in
        {198}let v_731: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_725)) && success?(2-proj-3-tuple(v_727))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_729) then (if not-caught-fail(v_730) then (v_728,v_729,v_730) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_732: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_727),1-proj-3-tuple(v_731),3-proj-3-tuple(v_727)))) in
        {200}let v_733: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_727),1-proj-3-tuple(v_731),3-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),2-proj-3-tuple(v_731))) else fail-any) else fail-any))) in
        {201}let v_734: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_725)) && success?(1-proj-7-tuple(v_725))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_731)) then cipherstatepack(3-proj-3-tuple(v_731),minnonce) else fail-any),1-proj-3-tuple(v_731),3-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_735: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {203}let v_736: keypair = catch-fail((if not-caught-fail(v_735) then keypairpack(validkey(v_735),key_e(alice,charlie,sid)) else fail-any)) in
        {204}let v_737: bitstring = catch-fail(getpublickey(v_736)) in
        {205}let v_738: bitstring = catch-fail(symmetricstateunpack(v_734)) in
        {206}let v_739: symmetricstate = catch-fail((if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),v_737)) else fail-any)) in
        {207}let v_740: bitstring = catch-fail(symmetricstateunpack(v_739)) in
        {208}let v_741: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_740),getpublickey(v_736))) in
        {209}let v_742: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_740),getpublickey(v_736))) in
        {210}let v_743: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_740),getpublickey(v_736))) in
        {211}let v_744: bitstring = catch-fail((if (success?(getpublickey(v_736)) && success?(2-proj-3-tuple(v_740))) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then (if not-caught-fail(v_743) then (v_741,v_742,v_743) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_745: symmetricstate = catch-fail((if success?(getpublickey(v_736)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_744)) then cipherstatepack(2-proj-3-tuple(v_744),minnonce) else fail-any),1-proj-3-tuple(v_744),3-proj-3-tuple(v_740)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_746: bitstring = catch-fail(keypairunpack(v_736)) in
        {214}let v_747: bitstring = catch-fail(symmetricstateunpack(v_745)) in
        {215}let v_748: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_747),(if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {216}let v_749: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_747),(if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {217}let v_750: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_747),(if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {218}let v_751: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_747))) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (v_748,v_749,v_750) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_752: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_751)) then cipherstatepack(2-proj-3-tuple(v_751),minnonce) else fail-any),1-proj-3-tuple(v_751),3-proj-3-tuple(v_747)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_753: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_725))) in
        {221}let v_754: bitstring = catch-fail(symmetricstateunpack(v_752)) in
        {222}let v_755: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_754),(if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then dhexp(2-proj-2-tuple(v_753),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {223}let v_756: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_754),(if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then dhexp(2-proj-2-tuple(v_753),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {224}let v_757: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_754),(if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then dhexp(2-proj-2-tuple(v_753),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {225}let v_758: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then dhexp(2-proj-2-tuple(v_753),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_754))) then (if not-caught-fail(v_755) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (v_755,v_756,v_757) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_759: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then dhexp(2-proj-2-tuple(v_753),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_758)) then cipherstatepack(2-proj-3-tuple(v_758),minnonce) else fail-any),1-proj-3-tuple(v_758),3-proj-3-tuple(v_754)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_760: bitstring = catch-fail(symmetricstateunpack(v_759)) in
        {228}let v_761: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_760))) in
        {229}let v_762: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_761),2-proj-2-tuple(v_761),3-proj-3-tuple(v_760),msg_a(alice,charlie,sid))) in
        {230}let v_763: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_760))) in
        {231}let v_764: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_761))) && success?(1-proj-3-tuple(v_760))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then cipherstatepack(1-proj-2-tuple(v_763),increment_nonce(2-proj-2-tuple(v_761))) else fail-any) else fail-any)) in
        {232}let v_765: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_760)) && success?(1-proj-3-tuple(v_760))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_764) then (v_764,v_762) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_766: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_765),2-proj-3-tuple(v_760),3-proj-3-tuple(v_760)))) in
        {234}let v_767: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_765)) && success?(symmetricstatepack(1-proj-2-tuple(v_765),2-proj-3-tuple(v_760),3-proj-3-tuple(v_760)))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack(1-proj-3-tuple(v_766),2-proj-3-tuple(v_766),hash(3-proj-3-tuple(v_766),2-proj-2-tuple(v_765))) else fail-any) else fail-any)) in
        {235}let v_768: bitstring = catch-fail((if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then (if not-caught-fail(v_767) then (v_767,2-proj-2-tuple(v_765)) else fail-any) else fail-any) else fail-any)) in
        {236}let v_769: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_768),2-proj-7-tuple(v_725),v_736,4-proj-7-tuple(v_725),5-proj-7-tuple(v_725),6-proj-7-tuple(v_725),7-proj-7-tuple(v_725))) in
        {237}let v_770: bitstring = catch-fail(concat3(v_737,2-proj-3-tuple(v_726),2-proj-2-tuple(v_768))) in
        {238}let (hs_771: handshakestate,message_a_772: bitstring) = (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-7-tuple(v_725))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if not-caught-fail(v_734) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (if not-caught-fail(v_739) then (if not-caught-fail(v_745) then (if not-caught-fail(v_752) then (if not-caught-fail(v_759) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (v_769,v_770) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {239}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {240}insert statestore(alice,charlie,sid,statepack_b(hs_771));
        {241}out(pub, message_a_772)
    ) | (
        {292}get statestore(=alice,=charlie,=sid,statepack_b(hs_773: handshakestate)) in
        {243}in(pub, message_b_774: bitstring);
        {244}let v_775: bitstring = catch-fail(handshakestateunpack(hs_773)) in
        {245}let v_776: bitstring = catch-fail(deconcat3(message_b_774)) in
        {246}let v_777: bool = catch-fail(true) in
        {247}let v_778: key = catch-fail(1-proj-3-tuple(v_776)) in
        {248}let v_779: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_775))) in
        {249}let v_780: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_775)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_779),hash(3-proj-3-tuple(v_779),v_778)) else fail-any) else fail-any)) in
        {250}let v_781: bitstring = catch-fail(symmetricstateunpack(v_780)) in
        {251}let v_782: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_781),v_778)) in
        {252}let v_783: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_781),v_778)) in
        {253}let v_784: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_781),v_778)) in
        {254}let v_785: bitstring = catch-fail((if success?(2-proj-3-tuple(v_781)) then (if not-caught-fail(v_782) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (v_782,v_783,v_784) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_786: symmetricstate = catch-fail((if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_785)) then cipherstatepack(2-proj-3-tuple(v_785),minnonce) else fail-any),1-proj-3-tuple(v_785),3-proj-3-tuple(v_781)) else fail-any) else fail-any)) in
        {256}let v_787: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_775))) in
        {257}let v_788: bitstring = catch-fail(symmetricstateunpack(v_786)) in
        {258}let v_789: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_788),(if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then dhexp(2-proj-2-tuple(v_787),v_778) else fail-any) else fail-any))) in
        {259}let v_790: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_788),(if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then dhexp(2-proj-2-tuple(v_787),v_778) else fail-any) else fail-any))) in
        {260}let v_791: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_788),(if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then dhexp(2-proj-2-tuple(v_787),v_778) else fail-any) else fail-any))) in
        {261}let v_792: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then dhexp(2-proj-2-tuple(v_787),v_778) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_788))) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (v_789,v_790,v_791) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_793: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then dhexp(2-proj-2-tuple(v_787),v_778) else fail-any) else fail-any)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_792)) then cipherstatepack(2-proj-3-tuple(v_792),minnonce) else fail-any),1-proj-3-tuple(v_792),3-proj-3-tuple(v_788)) else fail-any) else fail-any) else fail-any)) in
        {263}let v_794: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_775))) in
        {264}let v_795: bitstring = catch-fail(symmetricstateunpack(v_793)) in
        {265}let v_796: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_795),(if success?(2-proj-7-tuple(v_775)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),v_778) else fail-any) else fail-any))) in
        {266}let v_797: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_795),(if success?(2-proj-7-tuple(v_775)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),v_778) else fail-any) else fail-any))) in
        {267}let v_798: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_795),(if success?(2-proj-7-tuple(v_775)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),v_778) else fail-any) else fail-any))) in
        {268}let v_799: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_775)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),v_778) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_795))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (v_796,v_797,v_798) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_800: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_775)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),v_778) else fail-any) else fail-any)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_799)) then cipherstatepack(2-proj-3-tuple(v_799),minnonce) else fail-any),1-proj-3-tuple(v_799),3-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any)) in
        {270}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {271}let v_802: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {272}let v_803: aead = catch-fail(decrypt(1-proj-2-tuple(v_802),2-proj-2-tuple(v_802),3-proj-3-tuple(v_801),3-proj-3-tuple(v_776))) in
        {273}let v_804: bitstring = catch-fail(aeadunpack(v_803)) in
        {274}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {275}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_802))) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
        {276}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_776)) && (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_806) then (v_806,3-proj-3-tuple(v_804),1-proj-3-tuple(v_804)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) in
        {278}let v_809: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_776)) && success?(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),3-proj-3-tuple(v_776))) else fail-any) else fail-any)) in
        {279}let v_810: bitstring = catch-fail((if success?(3-proj-3-tuple(v_776)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_810),2-proj-7-tuple(v_775),3-proj-7-tuple(v_775),4-proj-7-tuple(v_775),v_778,6-proj-7-tuple(v_775),7-proj-7-tuple(v_775))) in
        {281}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_810))) in
        {282}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),zero)) in
        {283}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),zero)) in
        {284}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),zero)) in
        {285}let v_816: bitstring = catch-fail((if success?(2-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_817: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_816)) then cipherstatepack(1-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {287}let v_818: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {288}let v_819: bitstring = catch-fail((if success?(1-proj-3-tuple(v_810)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (1-proj-3-tuple(v_810),v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {289}let (hs_820: handshakestate,plaintext_b_821: bitstring,valid_822: bool,cs1_823: cipherstate,cs2_824: cipherstate) = (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-7-tuple(v_775))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (if not-caught-fail(v_780) then (if not-caught-fail(v_786) then (if not-caught-fail(v_793) then (if not-caught-fail(v_800) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (v_777 && 3-proj-3-tuple(v_810)) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (v_811,2-proj-3-tuple(v_810),true,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_821);
        {291}insert statestore(alice,charlie,sid,statepack_c(hs_820,cs1_823,cs2_824))
    ) | (
        {293}!
        {312}get statestore(=alice,=charlie,=sid,statepack_c(hs_825: handshakestate,cs1_826: cipherstate,cs2_827: cipherstate)) in
        {294}let hs_828: handshakestate = handshakestatesetcs(hs_825,cs1_826) in
        {295}let v_829: bitstring = catch-fail(handshakestateunpack(hs_828)) in
        {296}let v_830: bitstring = catch-fail((empty,empty,empty)) in
        {297}let v_831: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_829))) in
        {298}let v_832: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_831))) in
        {299}let v_833: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_832),2-proj-2-tuple(v_832),3-proj-3-tuple(v_831),msg_c(alice,charlie,sid))) in
        {300}let v_834: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_831))) in
        {301}let v_835: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_832))) && success?(1-proj-3-tuple(v_831))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-2-tuple(v_834))))) then cipherstatepack(1-proj-2-tuple(v_834),increment_nonce(2-proj-2-tuple(v_832))) else fail-any) else fail-any)) in
        {302}let v_836: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_831)) && success?(1-proj-3-tuple(v_831))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then (if not-caught-fail(v_833) then (if not-caught-fail(v_835) then (v_835,v_833) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_837: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_836),2-proj-3-tuple(v_831),3-proj-3-tuple(v_831)))) in
        {304}let v_838: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_836)) && success?(symmetricstatepack(1-proj-2-tuple(v_836),2-proj-3-tuple(v_831),3-proj-3-tuple(v_831)))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack(1-proj-3-tuple(v_837),2-proj-3-tuple(v_837),hash(3-proj-3-tuple(v_837),2-proj-2-tuple(v_836))) else fail-any) else fail-any)) in
        {305}let v_839: bitstring = catch-fail((if success?(1-proj-7-tuple(v_829)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then (if not-caught-fail(v_838) then (v_838,2-proj-2-tuple(v_836)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_840: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_839),2-proj-7-tuple(v_829),3-proj-7-tuple(v_829),4-proj-7-tuple(v_829),5-proj-7-tuple(v_829),6-proj-7-tuple(v_829),7-proj-7-tuple(v_829))) in
        {307}let v_841: bitstring = catch-fail(concat3(1-proj-3-tuple(v_830),2-proj-3-tuple(v_830),2-proj-2-tuple(v_839))) in
        {308}let (hs_842: handshakestate,message_c_843: bitstring) = (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-7-tuple(v_829))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then (v_840,v_841) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {310}insert statestore(alice,charlie,sid,statepack_d(hs_842,handshakestategetcs(hs_842),cs2_827));
        {311}out(pub, message_c_843)
    ) | (
        {313}!
        {333}get statestore(=alice,=charlie,=sid,statepack_d(hs_844: handshakestate,cs1_845: cipherstate,cs2_846: cipherstate)) in
        {314}let hs_847: handshakestate = handshakestatesetcs(hs_844,cs2_846) in
        {315}in(pub, message_d_848: bitstring);
        {316}let v_849: bitstring = catch-fail(handshakestateunpack(hs_847)) in
        {317}let v_850: bitstring = catch-fail(deconcat3(message_d_848)) in
        {318}let v_851: bool = catch-fail(true) in
        {319}let v_852: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_849))) in
        {320}let v_853: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_852))) in
        {321}let v_854: aead = catch-fail(decrypt(1-proj-2-tuple(v_853),2-proj-2-tuple(v_853),3-proj-3-tuple(v_852),3-proj-3-tuple(v_850))) in
        {322}let v_855: bitstring = catch-fail(aeadunpack(v_854)) in
        {323}let v_856: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_852))) in
        {324}let v_857: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_853))) && success?(1-proj-3-tuple(v_852))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then cipherstatepack(1-proj-2-tuple(v_856),increment_nonce(2-proj-2-tuple(v_853))) else fail-any) else fail-any)) in
        {325}let v_858: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_850)) && (success?(3-proj-3-tuple(v_852)) && success?(1-proj-3-tuple(v_852)))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_854) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if not-caught-fail(v_857) then (v_857,3-proj-3-tuple(v_855),1-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_859: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)))) in
        {327}let v_860: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_850)) && success?(symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_859),hash(3-proj-3-tuple(v_859),3-proj-3-tuple(v_850))) else fail-any) else fail-any)) in
        {328}let v_861: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_850)) && success?(1-proj-7-tuple(v_849))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if not-caught-fail(v_860) then (v_860,2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_862: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_861),2-proj-7-tuple(v_849),3-proj-7-tuple(v_849),4-proj-7-tuple(v_849),5-proj-7-tuple(v_849),6-proj-7-tuple(v_849),7-proj-7-tuple(v_849))) in
        {330}let (hs_863: handshakestate,plaintext_d_864: bitstring,valid_865: bool) = (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-7-tuple(v_849))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if not-caught-fail(v_851) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if (v_851 && 3-proj-3-tuple(v_861)) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_861),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {331}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_864);
        {332}event RecvEnd(valid_865)
    ) | (
        {334}event LeakPsk(phase0,alice,charlie);
        {335}out(pub, key_psk(alice,charlie))
    ) | (
        {336}phase 1;
        {337}event LeakPsk(phase1,alice,charlie);
        {338}out(pub, key_psk(alice,charlie))
    ) | (
        {339}event LeakS(phase0,alice);
        {340}out(pub, key_s(alice))
    ) | (
        {341}phase 1;
        {342}event LeakS(phase1,alice);
        {343}out(pub, key_s(alice))
    )
) | (
    {344}let v_866: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {345}let s_867: keypair = (if not-caught-fail(v_866) then keypairpack(validkey(v_866),key_s(bob)) else fail-any) in
    {346}out(pub, getpublickey(s_867));
    (
        {347}let e_868: keypair = keypairpack(empty,empty) in
        {348}let v_869: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {349}let rs_870: key = getpublickey((if not-caught-fail(v_869) then keypairpack(validkey(v_869),key_s(alice)) else fail-any)) in
        {350}let re_871: key = empty in
        {351}let v_872: bitstring = catch-fail(hash(somename,empty)) in
        {352}let v_873: key = catch-fail(v_872) in
        {353}let v_874: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {354}let v_875: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then symmetricstatepack(v_874,v_873,v_872) else fail-any) else fail-any) else fail-any))) in
        {355}let v_876: symmetricstate = catch-fail((if success?((if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then symmetricstatepack(v_874,v_873,v_872) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_875),hash(3-proj-3-tuple(v_875),empty)) else fail-any) else fail-any)) in
        {356}let v_877: bitstring = catch-fail(symmetricstateunpack(v_876)) in
        {357}let v_878: symmetricstate = catch-fail((if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_877),hash(3-proj-3-tuple(v_877),rs_870)) else fail-any)) in
        {358}let v_879: bitstring = catch-fail(symmetricstateunpack(v_878)) in
        {359}let v_880: symmetricstate = catch-fail((if success?(getpublickey(s_867)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack(1-proj-3-tuple(v_879),2-proj-3-tuple(v_879),hash(3-proj-3-tuple(v_879),getpublickey(s_867))) else fail-any) else fail-any)) in
        {360}let hs_881: handshakestate = (if not-caught-fail(v_876) then (if not-caught-fail(v_878) then (if not-caught-fail(v_880) then handshakestatepack(v_880,s_867,e_868,rs_870,re_871,key_psk(alice,bob),false) else fail-any) else fail-any) else fail-any) in
        {361}insert statestore(bob,alice,sid,statepack_a(hs_881))
    ) | (
        {411}get statestore(=bob,=alice,=sid,statepack_a(hs_882: handshakestate)) in
        {362}in(pub, message_a_883: bitstring);
        {363}let v_884: bitstring = catch-fail(handshakestateunpack(hs_882)) in
        {364}let v_885: bitstring = catch-fail(deconcat3(message_a_883)) in
        {365}let v_886: bool = catch-fail(true) in
        {366}let v_887: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_884))) in
        {367}let v_888: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_887),6-proj-7-tuple(v_884))) in
        {368}let v_889: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_887),6-proj-7-tuple(v_884))) in
        {369}let v_890: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_887),6-proj-7-tuple(v_884))) in
        {370}let v_891: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_884)) && success?(2-proj-3-tuple(v_887))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (if not-caught-fail(v_890) then (v_888,v_889,v_890) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_892: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_887),1-proj-3-tuple(v_891),3-proj-3-tuple(v_887)))) in
        {372}let v_893: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_891)) && success?(symmetricstatepack(1-proj-3-tuple(v_887),1-proj-3-tuple(v_891),3-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),2-proj-3-tuple(v_891))) else fail-any) else fail-any))) in
        {373}let v_894: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_884)) && success?(1-proj-7-tuple(v_884))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_891)) then cipherstatepack(3-proj-3-tuple(v_891),minnonce) else fail-any),1-proj-3-tuple(v_891),3-proj-3-tuple(v_893)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_895: key = catch-fail(1-proj-3-tuple(v_885)) in
        {375}let v_896: bitstring = catch-fail(symmetricstateunpack(v_894)) in
        {376}let v_897: symmetricstate = catch-fail((if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then symmetricstatepack(1-proj-3-tuple(v_896),2-proj-3-tuple(v_896),hash(3-proj-3-tuple(v_896),v_895)) else fail-any)) in
        {377}let v_898: bitstring = catch-fail(symmetricstateunpack(v_897)) in
        {378}let v_899: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_898),v_895)) in
        {379}let v_900: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_898),v_895)) in
        {380}let v_901: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_898),v_895)) in
        {381}let v_902: bitstring = catch-fail((if success?(2-proj-3-tuple(v_898)) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_899,v_900,v_901) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_903: symmetricstate = catch-fail((if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_902)) then cipherstatepack(2-proj-3-tuple(v_902),minnonce) else fail-any),1-proj-3-tuple(v_902),3-proj-3-tuple(v_898)) else fail-any) else fail-any)) in
        {383}let v_904: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_884))) in
        {384}let v_905: bitstring = catch-fail(symmetricstateunpack(v_903)) in
        {385}let v_906: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_905),(if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),v_895) else fail-any) else fail-any))) in
        {386}let v_907: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_905),(if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),v_895) else fail-any) else fail-any))) in
        {387}let v_908: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_905),(if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),v_895) else fail-any) else fail-any))) in
        {388}let v_909: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),v_895) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_905))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then (v_906,v_907,v_908) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_910: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),v_895) else fail-any) else fail-any)) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_909)) then cipherstatepack(2-proj-3-tuple(v_909),minnonce) else fail-any),1-proj-3-tuple(v_909),3-proj-3-tuple(v_905)) else fail-any) else fail-any) else fail-any)) in
        {390}let v_911: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_884))) in
        {391}let v_912: bitstring = catch-fail(symmetricstateunpack(v_910)) in
        {392}let v_913: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_912),(if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then dhexp(2-proj-2-tuple(v_911),4-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {393}let v_914: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_912),(if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then dhexp(2-proj-2-tuple(v_911),4-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {394}let v_915: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_912),(if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then dhexp(2-proj-2-tuple(v_911),4-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {395}let v_916: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then dhexp(2-proj-2-tuple(v_911),4-proj-7-tuple(v_884)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_912))) then (if not-caught-fail(v_913) then (if not-caught-fail(v_914) then (if not-caught-fail(v_915) then (v_913,v_914,v_915) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let v_917: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then dhexp(2-proj-2-tuple(v_911),4-proj-7-tuple(v_884)) else fail-any) else fail-any)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_916)) then cipherstatepack(2-proj-3-tuple(v_916),minnonce) else fail-any),1-proj-3-tuple(v_916),3-proj-3-tuple(v_912)) else fail-any) else fail-any) else fail-any)) in
        {397}let v_918: bitstring = catch-fail(symmetricstateunpack(v_917)) in
        {398}let v_919: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_918))) in
        {399}let v_920: aead = catch-fail(decrypt(1-proj-2-tuple(v_919),2-proj-2-tuple(v_919),3-proj-3-tuple(v_918),3-proj-3-tuple(v_885))) in
        {400}let v_921: bitstring = catch-fail(aeadunpack(v_920)) in
        {401}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_918))) in
        {402}let v_923: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_919))) && success?(1-proj-3-tuple(v_918))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then cipherstatepack(1-proj-2-tuple(v_922),increment_nonce(2-proj-2-tuple(v_919))) else fail-any) else fail-any)) in
        {403}let v_924: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_885)) && (success?(3-proj-3-tuple(v_918)) && success?(1-proj-3-tuple(v_918)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if not-caught-fail(v_923) then (v_923,3-proj-3-tuple(v_921),1-proj-3-tuple(v_921)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {404}let v_925: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_924),2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)))) in
        {405}let v_926: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_885)) && success?(symmetricstatepack(1-proj-3-tuple(v_924),2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_925),hash(3-proj-3-tuple(v_925),3-proj-3-tuple(v_885))) else fail-any) else fail-any)) in
        {406}let v_927: bitstring = catch-fail((if success?(3-proj-3-tuple(v_885)) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if not-caught-fail(v_926) then (v_926,2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_928: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_927),2-proj-7-tuple(v_884),3-proj-7-tuple(v_884),4-proj-7-tuple(v_884),v_895,6-proj-7-tuple(v_884),7-proj-7-tuple(v_884))) in
        {408}let (hs_929: handshakestate,plaintext_a: bitstring,valid_930: bool) = (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-7-tuple(v_884))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (if not-caught-fail(v_897) then (if not-caught-fail(v_903) then (if not-caught-fail(v_910) then (if not-caught-fail(v_917) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if (v_886 && 3-proj-3-tuple(v_927)) then (if not-caught-fail(v_928) then (v_928,2-proj-3-tuple(v_927),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {409}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {410}insert statestore(bob,alice,sid,statepack_b(hs_929))
    ) | (
        {462}get statestore(=bob,=alice,=sid,statepack_b(hs_931: handshakestate)) in
        {412}let v_932: bitstring = catch-fail(handshakestateunpack(hs_931)) in
        {413}let v_933: bitstring = catch-fail((empty,empty,empty)) in
        {414}let v_934: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {415}let v_935: keypair = catch-fail((if not-caught-fail(v_934) then keypairpack(validkey(v_934),key_e(bob,alice,sid)) else fail-any)) in
        {416}let v_936: bitstring = catch-fail(getpublickey(v_935)) in
        {417}let v_937: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_932))) in
        {418}let v_938: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_932)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then symmetricstatepack(1-proj-3-tuple(v_937),2-proj-3-tuple(v_937),hash(3-proj-3-tuple(v_937),v_936)) else fail-any) else fail-any)) in
        {419}let v_939: bitstring = catch-fail(symmetricstateunpack(v_938)) in
        {420}let v_940: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_939),getpublickey(v_935))) in
        {421}let v_941: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_939),getpublickey(v_935))) in
        {422}let v_942: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_939),getpublickey(v_935))) in
        {423}let v_943: bitstring = catch-fail((if (success?(getpublickey(v_935)) && success?(2-proj-3-tuple(v_939))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (v_940,v_941,v_942) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_944: symmetricstate = catch-fail((if success?(getpublickey(v_935)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_943)) then cipherstatepack(2-proj-3-tuple(v_943),minnonce) else fail-any),1-proj-3-tuple(v_943),3-proj-3-tuple(v_939)) else fail-any) else fail-any) else fail-any)) in
        {425}let v_945: bitstring = catch-fail(keypairunpack(v_935)) in
        {426}let v_946: bitstring = catch-fail(symmetricstateunpack(v_944)) in
        {427}let v_947: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_946),(if success?(5-proj-7-tuple(v_932)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then dhexp(2-proj-2-tuple(v_945),5-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {428}let v_948: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_946),(if success?(5-proj-7-tuple(v_932)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then dhexp(2-proj-2-tuple(v_945),5-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {429}let v_949: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_946),(if success?(5-proj-7-tuple(v_932)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then dhexp(2-proj-2-tuple(v_945),5-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {430}let v_950: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_932)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then dhexp(2-proj-2-tuple(v_945),5-proj-7-tuple(v_932)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_946))) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (v_947,v_948,v_949) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_951: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_932)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then dhexp(2-proj-2-tuple(v_945),5-proj-7-tuple(v_932)) else fail-any) else fail-any)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_950)) then cipherstatepack(2-proj-3-tuple(v_950),minnonce) else fail-any),1-proj-3-tuple(v_950),3-proj-3-tuple(v_946)) else fail-any) else fail-any) else fail-any)) in
        {432}let v_952: bitstring = catch-fail(keypairunpack(v_935)) in
        {433}let v_953: bitstring = catch-fail(symmetricstateunpack(v_951)) in
        {434}let v_954: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_953),(if success?(4-proj-7-tuple(v_932)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {435}let v_955: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_953),(if success?(4-proj-7-tuple(v_932)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {436}let v_956: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_953),(if success?(4-proj-7-tuple(v_932)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {437}let v_957: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_932)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_932)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_953))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_954,v_955,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_958: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_932)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_932)) else fail-any) else fail-any)) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_957)) then cipherstatepack(2-proj-3-tuple(v_957),minnonce) else fail-any),1-proj-3-tuple(v_957),3-proj-3-tuple(v_953)) else fail-any) else fail-any) else fail-any)) in
        {439}let v_959: bitstring = catch-fail(symmetricstateunpack(v_958)) in
        {440}let v_960: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_959))) in
        {441}let v_961: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_960),2-proj-2-tuple(v_960),3-proj-3-tuple(v_959),msg_b(bob,alice,sid))) in
        {442}let v_962: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_959))) in
        {443}let v_963: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_960))) && success?(1-proj-3-tuple(v_959))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then cipherstatepack(1-proj-2-tuple(v_962),increment_nonce(2-proj-2-tuple(v_960))) else fail-any) else fail-any)) in
        {444}let v_964: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_959)) && success?(1-proj-3-tuple(v_959))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-2-tuple(v_960))))) then (if not-caught-fail(v_961) then (if not-caught-fail(v_963) then (v_963,v_961) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_965: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_964),2-proj-3-tuple(v_959),3-proj-3-tuple(v_959)))) in
        {446}let v_966: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_964)) && success?(symmetricstatepack(1-proj-2-tuple(v_964),2-proj-3-tuple(v_959),3-proj-3-tuple(v_959)))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then symmetricstatepack(1-proj-3-tuple(v_965),2-proj-3-tuple(v_965),hash(3-proj-3-tuple(v_965),2-proj-2-tuple(v_964))) else fail-any) else fail-any)) in
        {447}let v_967: bitstring = catch-fail((if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-2-tuple(v_964))))) then (if not-caught-fail(v_966) then (v_966,2-proj-2-tuple(v_964)) else fail-any) else fail-any) else fail-any)) in
        {448}let v_968: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_967),2-proj-7-tuple(v_932),v_935,4-proj-7-tuple(v_932),5-proj-7-tuple(v_932),6-proj-7-tuple(v_932),7-proj-7-tuple(v_932))) in
        {449}let v_969: bitstring = catch-fail(concat3(v_936,2-proj-3-tuple(v_933),2-proj-2-tuple(v_967))) in
        {450}let v_970: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_967))) in
        {451}let v_971: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_970),zero)) in
        {452}let v_972: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_970),zero)) in
        {453}let v_973: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_970),zero)) in
        {454}let v_974: bitstring = catch-fail((if success?(2-proj-3-tuple(v_970)) then (if not-caught-fail(v_971) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (v_971,v_972,v_973) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {455}let v_975: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_974)) then cipherstatepack(1-proj-3-tuple(v_974),minnonce) else fail-any)) in
        {456}let v_976: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_974)) then cipherstatepack(2-proj-3-tuple(v_974),minnonce) else fail-any)) in
        {457}let v_977: bitstring = catch-fail((if success?(1-proj-2-tuple(v_967)) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if not-caught-fail(v_975) then (if not-caught-fail(v_976) then (1-proj-2-tuple(v_967),v_975,v_976) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let (hs_978: handshakestate,message_b_979: bitstring,cs1_980: cipherstate,cs2_981: cipherstate) = (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-7-tuple(v_932))))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if not-caught-fail(v_935) then (if not-caught-fail(v_936) then (if not-caught-fail(v_938) then (if not-caught-fail(v_944) then (if not-caught-fail(v_951) then (if not-caught-fail(v_958) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then (if not-caught-fail(v_968) then (if not-caught-fail(v_969) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (v_968,v_969,2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {460}insert statestore(bob,alice,sid,statepack_c(hs_978,cs1_980,cs2_981));
        {461}out(pub, message_b_979)
    ) | (
        {463}!
        {483}get statestore(=bob,=alice,=sid,statepack_c(hs_982: handshakestate,cs1_983: cipherstate,cs2_984: cipherstate)) in
        {464}let hs_985: handshakestate = handshakestatesetcs(hs_982,cs1_983) in
        {465}in(pub, message_c_986: bitstring);
        {466}let v_987: bitstring = catch-fail(handshakestateunpack(hs_985)) in
        {467}let v_988: bitstring = catch-fail(deconcat3(message_c_986)) in
        {468}let v_989: bool = catch-fail(true) in
        {469}let v_990: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_987))) in
        {470}let v_991: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {471}let v_992: aead = catch-fail(decrypt(1-proj-2-tuple(v_991),2-proj-2-tuple(v_991),3-proj-3-tuple(v_990),3-proj-3-tuple(v_988))) in
        {472}let v_993: bitstring = catch-fail(aeadunpack(v_992)) in
        {473}let v_994: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {474}let v_995: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_991))) && success?(1-proj-3-tuple(v_990))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then cipherstatepack(1-proj-2-tuple(v_994),increment_nonce(2-proj-2-tuple(v_991))) else fail-any) else fail-any)) in
        {475}let v_996: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_988)) && (success?(3-proj-3-tuple(v_990)) && success?(1-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_992) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if not-caught-fail(v_995) then (v_995,3-proj-3-tuple(v_993),1-proj-3-tuple(v_993)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_997: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) in
        {477}let v_998: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_988)) && success?(symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),3-proj-3-tuple(v_988))) else fail-any) else fail-any)) in
        {478}let v_999: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_988)) && success?(1-proj-7-tuple(v_987))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_998) then (v_998,2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {479}let v_1000: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_999),2-proj-7-tuple(v_987),3-proj-7-tuple(v_987),4-proj-7-tuple(v_987),5-proj-7-tuple(v_987),6-proj-7-tuple(v_987),7-proj-7-tuple(v_987))) in
        {480}let (hs_1001: handshakestate,plaintext_c: bitstring,valid_1002: bool) = (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-7-tuple(v_987))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if not-caught-fail(v_989) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (v_989 && 3-proj-3-tuple(v_999)) then (if not-caught-fail(v_1000) then (v_1000,2-proj-3-tuple(v_999),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {481}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {482}insert statestore(bob,alice,sid,statepack_d(hs_1001,handshakestategetcs(hs_1001),cs2_984))
    ) | (
        {484}!
        {502}get statestore(=bob,=alice,=sid,statepack_d(hs_1003: handshakestate,cs1_1004: cipherstate,cs2_1005: cipherstate)) in
        {485}let hs_1006: handshakestate = handshakestatesetcs(hs_1003,cs2_1005) in
        {486}let v_1007: bitstring = catch-fail(handshakestateunpack(hs_1006)) in
        {487}let v_1008: bitstring = catch-fail((empty,empty,empty)) in
        {488}let v_1009: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1007))) in
        {489}let v_1010: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {490}let v_1011: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1010),2-proj-2-tuple(v_1010),3-proj-3-tuple(v_1009),msg_d(bob,alice,sid))) in
        {491}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {492}let v_1013: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1010))) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then cipherstatepack(1-proj-2-tuple(v_1012),increment_nonce(2-proj-2-tuple(v_1010))) else fail-any) else fail-any)) in
        {493}let v_1014: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1009)) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then (if not-caught-fail(v_1011) then (if not-caught-fail(v_1013) then (v_1013,v_1011) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_1015: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1014),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) in
        {495}let v_1016: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1014)) && success?(symmetricstatepack(1-proj-2-tuple(v_1014),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1015),hash(3-proj-3-tuple(v_1015),2-proj-2-tuple(v_1014))) else fail-any) else fail-any)) in
        {496}let v_1017: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1007)) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,2-proj-2-tuple(v_1014)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_1018: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1017),2-proj-7-tuple(v_1007),3-proj-7-tuple(v_1007),4-proj-7-tuple(v_1007),5-proj-7-tuple(v_1007),6-proj-7-tuple(v_1007),7-proj-7-tuple(v_1007))) in
        {498}let v_1019: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1008),2-proj-2-tuple(v_1017))) in
        {499}let (hs_1020: handshakestate,message_d_1021: bitstring) = (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-7-tuple(v_1007))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (v_1018,v_1019) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {500}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {501}out(pub, message_d_1021)
    ) | (
        {503}event LeakPsk(phase0,alice,bob);
        {504}out(pub, key_psk(alice,bob))
    ) | (
        {505}phase 1;
        {506}event LeakPsk(phase1,alice,bob);
        {507}out(pub, key_psk(alice,bob))
    ) | (
        {508}event LeakS(phase0,bob);
        {509}out(pub, key_s(bob))
    ) | (
        {510}phase 1;
        {511}event LeakS(phase1,bob);
        {512}out(pub, key_s(bob))
    )
) | (
    {513}let v_1022: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {514}let s_1023: keypair = (if not-caught-fail(v_1022) then keypairpack(validkey(v_1022),key_s(bob)) else fail-any) in
    {515}out(pub, getpublickey(s_1023));
    (
        {516}let e_1024: keypair = keypairpack(empty,empty) in
        {517}let v_1025: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {518}let rs_1026: key = getpublickey((if not-caught-fail(v_1025) then keypairpack(validkey(v_1025),key_s(charlie)) else fail-any)) in
        {519}let re_1027: key = empty in
        {520}let v_1028: bitstring = catch-fail(hash(somename,empty)) in
        {521}let v_1029: key = catch-fail(v_1028) in
        {522}let v_1030: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {523}let v_1031: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then symmetricstatepack(v_1030,v_1029,v_1028) else fail-any) else fail-any) else fail-any))) in
        {524}let v_1032: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then symmetricstatepack(v_1030,v_1029,v_1028) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack(1-proj-3-tuple(v_1031),2-proj-3-tuple(v_1031),hash(3-proj-3-tuple(v_1031),empty)) else fail-any) else fail-any)) in
        {525}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1032)) in
        {526}let v_1034: symmetricstate = catch-fail((if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then symmetricstatepack(1-proj-3-tuple(v_1033),2-proj-3-tuple(v_1033),hash(3-proj-3-tuple(v_1033),rs_1026)) else fail-any)) in
        {527}let v_1035: bitstring = catch-fail(symmetricstateunpack(v_1034)) in
        {528}let v_1036: symmetricstate = catch-fail((if success?(getpublickey(s_1023)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then symmetricstatepack(1-proj-3-tuple(v_1035),2-proj-3-tuple(v_1035),hash(3-proj-3-tuple(v_1035),getpublickey(s_1023))) else fail-any) else fail-any)) in
        {529}let hs_1037: handshakestate = (if not-caught-fail(v_1032) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1036) then handshakestatepack(v_1036,s_1023,e_1024,rs_1026,re_1027,key_psk(charlie,bob),false) else fail-any) else fail-any) else fail-any) in
        {530}insert statestore(bob,charlie,sid,statepack_a(hs_1037))
    ) | (
        {580}get statestore(=bob,=charlie,=sid,statepack_a(hs_1038: handshakestate)) in
        {531}in(pub, message_a_1039: bitstring);
        {532}let v_1040: bitstring = catch-fail(handshakestateunpack(hs_1038)) in
        {533}let v_1041: bitstring = catch-fail(deconcat3(message_a_1039)) in
        {534}let v_1042: bool = catch-fail(true) in
        {535}let v_1043: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1040))) in
        {536}let v_1044: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1043),6-proj-7-tuple(v_1040))) in
        {537}let v_1045: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1043),6-proj-7-tuple(v_1040))) in
        {538}let v_1046: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1043),6-proj-7-tuple(v_1040))) in
        {539}let v_1047: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1040)) && success?(2-proj-3-tuple(v_1043))) then (if not-caught-fail(v_1044) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1046) then (v_1044,v_1045,v_1046) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {540}let v_1048: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1043),1-proj-3-tuple(v_1047),3-proj-3-tuple(v_1043)))) in
        {541}let v_1049: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1047)) && success?(symmetricstatepack(1-proj-3-tuple(v_1043),1-proj-3-tuple(v_1047),3-proj-3-tuple(v_1043)))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then symmetricstatepack(1-proj-3-tuple(v_1048),2-proj-3-tuple(v_1048),hash(3-proj-3-tuple(v_1048),2-proj-3-tuple(v_1047))) else fail-any) else fail-any))) in
        {542}let v_1050: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_1040)) && success?(1-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1047)) then cipherstatepack(3-proj-3-tuple(v_1047),minnonce) else fail-any),1-proj-3-tuple(v_1047),3-proj-3-tuple(v_1049)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1051: key = catch-fail(1-proj-3-tuple(v_1041)) in
        {544}let v_1052: bitstring = catch-fail(symmetricstateunpack(v_1050)) in
        {545}let v_1053: symmetricstate = catch-fail((if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then symmetricstatepack(1-proj-3-tuple(v_1052),2-proj-3-tuple(v_1052),hash(3-proj-3-tuple(v_1052),v_1051)) else fail-any)) in
        {546}let v_1054: bitstring = catch-fail(symmetricstateunpack(v_1053)) in
        {547}let v_1055: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1054),v_1051)) in
        {548}let v_1056: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1054),v_1051)) in
        {549}let v_1057: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1054),v_1051)) in
        {550}let v_1058: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1054)) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1057) then (v_1055,v_1056,v_1057) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1059: symmetricstate = catch-fail((if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1058)) then cipherstatepack(2-proj-3-tuple(v_1058),minnonce) else fail-any),1-proj-3-tuple(v_1058),3-proj-3-tuple(v_1054)) else fail-any) else fail-any)) in
        {552}let v_1060: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1040))) in
        {553}let v_1061: bitstring = catch-fail(symmetricstateunpack(v_1059)) in
        {554}let v_1062: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1061),(if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then dhexp(2-proj-2-tuple(v_1060),v_1051) else fail-any) else fail-any))) in
        {555}let v_1063: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1061),(if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then dhexp(2-proj-2-tuple(v_1060),v_1051) else fail-any) else fail-any))) in
        {556}let v_1064: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1061),(if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then dhexp(2-proj-2-tuple(v_1060),v_1051) else fail-any) else fail-any))) in
        {557}let v_1065: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then dhexp(2-proj-2-tuple(v_1060),v_1051) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1061))) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (if not-caught-fail(v_1064) then (v_1062,v_1063,v_1064) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1066: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then dhexp(2-proj-2-tuple(v_1060),v_1051) else fail-any) else fail-any)) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1065)) then cipherstatepack(2-proj-3-tuple(v_1065),minnonce) else fail-any),1-proj-3-tuple(v_1065),3-proj-3-tuple(v_1061)) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1067: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1040))) in
        {560}let v_1068: bitstring = catch-fail(symmetricstateunpack(v_1066)) in
        {561}let v_1069: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1068),(if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {562}let v_1070: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1068),(if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {563}let v_1071: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1068),(if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {564}let v_1072: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),4-proj-7-tuple(v_1040)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1068))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (v_1069,v_1070,v_1071) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1073: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),4-proj-7-tuple(v_1040)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1072)) then cipherstatepack(2-proj-3-tuple(v_1072),minnonce) else fail-any),1-proj-3-tuple(v_1072),3-proj-3-tuple(v_1068)) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1074: bitstring = catch-fail(symmetricstateunpack(v_1073)) in
        {567}let v_1075: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1074))) in
        {568}let v_1076: aead = catch-fail(decrypt(1-proj-2-tuple(v_1075),2-proj-2-tuple(v_1075),3-proj-3-tuple(v_1074),3-proj-3-tuple(v_1041))) in
        {569}let v_1077: bitstring = catch-fail(aeadunpack(v_1076)) in
        {570}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1074))) in
        {571}let v_1079: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1075))) && success?(1-proj-3-tuple(v_1074))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then cipherstatepack(1-proj-2-tuple(v_1078),increment_nonce(2-proj-2-tuple(v_1075))) else fail-any) else fail-any)) in
        {572}let v_1080: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && (success?(3-proj-3-tuple(v_1074)) && success?(1-proj-3-tuple(v_1074)))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if not-caught-fail(v_1079) then (v_1079,3-proj-3-tuple(v_1077),1-proj-3-tuple(v_1077)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1081: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1080),2-proj-3-tuple(v_1074),3-proj-3-tuple(v_1074)))) in
        {574}let v_1082: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && success?(symmetricstatepack(1-proj-3-tuple(v_1080),2-proj-3-tuple(v_1074),3-proj-3-tuple(v_1074)))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then symmetricstatepack(1-proj-3-tuple(v_1081),2-proj-3-tuple(v_1081),hash(3-proj-3-tuple(v_1081),3-proj-3-tuple(v_1041))) else fail-any) else fail-any)) in
        {575}let v_1083: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1041)) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {576}let v_1084: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1083),2-proj-7-tuple(v_1040),3-proj-7-tuple(v_1040),4-proj-7-tuple(v_1040),v_1051,6-proj-7-tuple(v_1040),7-proj-7-tuple(v_1040))) in
        {577}let (hs_1085: handshakestate,plaintext_a_1086: bitstring,valid_1087: bool) = (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-7-tuple(v_1040))))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if not-caught-fail(v_1042) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1059) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1073) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (v_1042 && 3-proj-3-tuple(v_1083)) then (if not-caught-fail(v_1084) then (v_1084,2-proj-3-tuple(v_1083),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {578}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1086);
        {579}insert statestore(bob,charlie,sid,statepack_b(hs_1085))
    ) | (
        {631}get statestore(=bob,=charlie,=sid,statepack_b(hs_1088: handshakestate)) in
        {581}let v_1089: bitstring = catch-fail(handshakestateunpack(hs_1088)) in
        {582}let v_1090: bitstring = catch-fail((empty,empty,empty)) in
        {583}let v_1091: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {584}let v_1092: keypair = catch-fail((if not-caught-fail(v_1091) then keypairpack(validkey(v_1091),key_e(bob,charlie,sid)) else fail-any)) in
        {585}let v_1093: bitstring = catch-fail(getpublickey(v_1092)) in
        {586}let v_1094: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1089))) in
        {587}let v_1095: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then symmetricstatepack(1-proj-3-tuple(v_1094),2-proj-3-tuple(v_1094),hash(3-proj-3-tuple(v_1094),v_1093)) else fail-any) else fail-any)) in
        {588}let v_1096: bitstring = catch-fail(symmetricstateunpack(v_1095)) in
        {589}let v_1097: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1096),getpublickey(v_1092))) in
        {590}let v_1098: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1096),getpublickey(v_1092))) in
        {591}let v_1099: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1096),getpublickey(v_1092))) in
        {592}let v_1100: bitstring = catch-fail((if (success?(getpublickey(v_1092)) && success?(2-proj-3-tuple(v_1096))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1099) then (v_1097,v_1098,v_1099) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1101: symmetricstate = catch-fail((if success?(getpublickey(v_1092)) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-3-tuple(v_1096))))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1100)) then cipherstatepack(2-proj-3-tuple(v_1100),minnonce) else fail-any),1-proj-3-tuple(v_1100),3-proj-3-tuple(v_1096)) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1102: bitstring = catch-fail(keypairunpack(v_1092)) in
        {595}let v_1103: bitstring = catch-fail(symmetricstateunpack(v_1101)) in
        {596}let v_1104: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1103),(if success?(5-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),5-proj-7-tuple(v_1089)) else fail-any) else fail-any))) in
        {597}let v_1105: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1103),(if success?(5-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),5-proj-7-tuple(v_1089)) else fail-any) else fail-any))) in
        {598}let v_1106: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1103),(if success?(5-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),5-proj-7-tuple(v_1089)) else fail-any) else fail-any))) in
        {599}let v_1107: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),5-proj-7-tuple(v_1089)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1103))) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (if not-caught-fail(v_1106) then (v_1104,v_1105,v_1106) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1108: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),5-proj-7-tuple(v_1089)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1107)) then cipherstatepack(2-proj-3-tuple(v_1107),minnonce) else fail-any),1-proj-3-tuple(v_1107),3-proj-3-tuple(v_1103)) else fail-any) else fail-any) else fail-any)) in
        {601}let v_1109: bitstring = catch-fail(keypairunpack(v_1092)) in
        {602}let v_1110: bitstring = catch-fail(symmetricstateunpack(v_1108)) in
        {603}let v_1111: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1110),(if success?(4-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then dhexp(2-proj-2-tuple(v_1109),4-proj-7-tuple(v_1089)) else fail-any) else fail-any))) in
        {604}let v_1112: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1110),(if success?(4-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then dhexp(2-proj-2-tuple(v_1109),4-proj-7-tuple(v_1089)) else fail-any) else fail-any))) in
        {605}let v_1113: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1110),(if success?(4-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then dhexp(2-proj-2-tuple(v_1109),4-proj-7-tuple(v_1089)) else fail-any) else fail-any))) in
        {606}let v_1114: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then dhexp(2-proj-2-tuple(v_1109),4-proj-7-tuple(v_1089)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1110))) then (if not-caught-fail(v_1111) then (if not-caught-fail(v_1112) then (if not-caught-fail(v_1113) then (v_1111,v_1112,v_1113) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {607}let v_1115: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1089)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then dhexp(2-proj-2-tuple(v_1109),4-proj-7-tuple(v_1089)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1114)) then cipherstatepack(2-proj-3-tuple(v_1114),minnonce) else fail-any),1-proj-3-tuple(v_1114),3-proj-3-tuple(v_1110)) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1116: bitstring = catch-fail(symmetricstateunpack(v_1115)) in
        {609}let v_1117: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1116))) in
        {610}let v_1118: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1117),2-proj-2-tuple(v_1117),3-proj-3-tuple(v_1116),msg_b(bob,charlie,sid))) in
        {611}let v_1119: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1116))) in
        {612}let v_1120: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1117))) && success?(1-proj-3-tuple(v_1116))) then (if (not-caught-fail(v_1119) && success?(is-true(success?(1-proj-2-tuple(v_1119))))) then cipherstatepack(1-proj-2-tuple(v_1119),increment_nonce(2-proj-2-tuple(v_1117))) else fail-any) else fail-any)) in
        {613}let v_1121: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1116)) && success?(1-proj-3-tuple(v_1116))) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-2-tuple(v_1117))))) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1120) then (v_1120,v_1118) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1122: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1121),2-proj-3-tuple(v_1116),3-proj-3-tuple(v_1116)))) in
        {615}let v_1123: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1121)) && success?(symmetricstatepack(1-proj-2-tuple(v_1121),2-proj-3-tuple(v_1116),3-proj-3-tuple(v_1116)))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then symmetricstatepack(1-proj-3-tuple(v_1122),2-proj-3-tuple(v_1122),hash(3-proj-3-tuple(v_1122),2-proj-2-tuple(v_1121))) else fail-any) else fail-any)) in
        {616}let v_1124: bitstring = catch-fail((if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-2-tuple(v_1121))))) then (if not-caught-fail(v_1123) then (v_1123,2-proj-2-tuple(v_1121)) else fail-any) else fail-any) else fail-any)) in
        {617}let v_1125: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1124),2-proj-7-tuple(v_1089),v_1092,4-proj-7-tuple(v_1089),5-proj-7-tuple(v_1089),6-proj-7-tuple(v_1089),7-proj-7-tuple(v_1089))) in
        {618}let v_1126: bitstring = catch-fail(concat3(v_1093,2-proj-3-tuple(v_1090),2-proj-2-tuple(v_1124))) in
        {619}let v_1127: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1124))) in
        {620}let v_1128: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1127),zero)) in
        {621}let v_1129: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1127),zero)) in
        {622}let v_1130: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1127),zero)) in
        {623}let v_1131: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1127)) then (if not-caught-fail(v_1128) then (if not-caught-fail(v_1129) then (if not-caught-fail(v_1130) then (v_1128,v_1129,v_1130) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {624}let v_1132: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1131)) then cipherstatepack(1-proj-3-tuple(v_1131),minnonce) else fail-any)) in
        {625}let v_1133: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1131)) then cipherstatepack(2-proj-3-tuple(v_1131),minnonce) else fail-any)) in
        {626}let v_1134: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1124)) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-3-tuple(v_1127))))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then (if not-caught-fail(v_1132) then (if not-caught-fail(v_1133) then (1-proj-2-tuple(v_1124),v_1132,v_1133) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {627}let (hs_1135: handshakestate,message_b_1136: bitstring,cs1_1137: cipherstate,cs2_1138: cipherstate) = (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-7-tuple(v_1089))))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then (if not-caught-fail(v_1092) then (if not-caught-fail(v_1093) then (if not-caught-fail(v_1095) then (if not-caught-fail(v_1101) then (if not-caught-fail(v_1108) then (if not-caught-fail(v_1115) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if not-caught-fail(v_1126) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (v_1125,v_1126,2-proj-3-tuple(v_1134),3-proj-3-tuple(v_1134)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {628}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {629}insert statestore(bob,charlie,sid,statepack_c(hs_1135,cs1_1137,cs2_1138));
        {630}out(pub, message_b_1136)
    ) | (
        {632}!
        {652}get statestore(=bob,=charlie,=sid,statepack_c(hs_1139: handshakestate,cs1_1140: cipherstate,cs2_1141: cipherstate)) in
        {633}let hs_1142: handshakestate = handshakestatesetcs(hs_1139,cs1_1140) in
        {634}in(pub, message_c_1143: bitstring);
        {635}let v_1144: bitstring = catch-fail(handshakestateunpack(hs_1142)) in
        {636}let v_1145: bitstring = catch-fail(deconcat3(message_c_1143)) in
        {637}let v_1146: bool = catch-fail(true) in
        {638}let v_1147: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1144))) in
        {639}let v_1148: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1147))) in
        {640}let v_1149: aead = catch-fail(decrypt(1-proj-2-tuple(v_1148),2-proj-2-tuple(v_1148),3-proj-3-tuple(v_1147),3-proj-3-tuple(v_1145))) in
        {641}let v_1150: bitstring = catch-fail(aeadunpack(v_1149)) in
        {642}let v_1151: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1147))) in
        {643}let v_1152: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1148))) && success?(1-proj-3-tuple(v_1147))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then cipherstatepack(1-proj-2-tuple(v_1151),increment_nonce(2-proj-2-tuple(v_1148))) else fail-any) else fail-any)) in
        {644}let v_1153: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1145)) && (success?(3-proj-3-tuple(v_1147)) && success?(1-proj-3-tuple(v_1147)))) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-2-tuple(v_1148))))) then (if not-caught-fail(v_1149) then (if (not-caught-fail(v_1150) && success?(is-true(success?(1-proj-3-tuple(v_1150))))) then (if not-caught-fail(v_1152) then (v_1152,3-proj-3-tuple(v_1150),1-proj-3-tuple(v_1150)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {645}let v_1154: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1153),2-proj-3-tuple(v_1147),3-proj-3-tuple(v_1147)))) in
        {646}let v_1155: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1145)) && success?(symmetricstatepack(1-proj-3-tuple(v_1153),2-proj-3-tuple(v_1147),3-proj-3-tuple(v_1147)))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then symmetricstatepack(1-proj-3-tuple(v_1154),2-proj-3-tuple(v_1154),hash(3-proj-3-tuple(v_1154),3-proj-3-tuple(v_1145))) else fail-any) else fail-any)) in
        {647}let v_1156: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1145)) && success?(1-proj-7-tuple(v_1144))) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-3-tuple(v_1147))))) then (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-3-tuple(v_1153))))) then (if not-caught-fail(v_1155) then (v_1155,2-proj-3-tuple(v_1153),3-proj-3-tuple(v_1153)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {648}let v_1157: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1156),2-proj-7-tuple(v_1144),3-proj-7-tuple(v_1144),4-proj-7-tuple(v_1144),5-proj-7-tuple(v_1144),6-proj-7-tuple(v_1144),7-proj-7-tuple(v_1144))) in
        {649}let (hs_1158: handshakestate,plaintext_c_1159: bitstring,valid_1160: bool) = (if (not-caught-fail(v_1144) && success?(is-true(success?(1-proj-7-tuple(v_1144))))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then (if not-caught-fail(v_1146) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (v_1146 && 3-proj-3-tuple(v_1156)) then (if not-caught-fail(v_1157) then (v_1157,2-proj-3-tuple(v_1156),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {650}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1159);
        {651}insert statestore(bob,charlie,sid,statepack_d(hs_1158,handshakestategetcs(hs_1158),cs2_1141))
    ) | (
        {653}!
        {671}get statestore(=bob,=charlie,=sid,statepack_d(hs_1161: handshakestate,cs1_1162: cipherstate,cs2_1163: cipherstate)) in
        {654}let hs_1164: handshakestate = handshakestatesetcs(hs_1161,cs2_1163) in
        {655}let v_1165: bitstring = catch-fail(handshakestateunpack(hs_1164)) in
        {656}let v_1166: bitstring = catch-fail((empty,empty,empty)) in
        {657}let v_1167: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1165))) in
        {658}let v_1168: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1167))) in
        {659}let v_1169: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1168),2-proj-2-tuple(v_1168),3-proj-3-tuple(v_1167),msg_d(bob,charlie,sid))) in
        {660}let v_1170: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1167))) in
        {661}let v_1171: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1168))) && success?(1-proj-3-tuple(v_1167))) then (if (not-caught-fail(v_1170) && success?(is-true(success?(1-proj-2-tuple(v_1170))))) then cipherstatepack(1-proj-2-tuple(v_1170),increment_nonce(2-proj-2-tuple(v_1168))) else fail-any) else fail-any)) in
        {662}let v_1172: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1167)) && success?(1-proj-3-tuple(v_1167))) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then (if not-caught-fail(v_1169) then (if not-caught-fail(v_1171) then (v_1171,v_1169) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {663}let v_1173: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1172),2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)))) in
        {664}let v_1174: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1172)) && success?(symmetricstatepack(1-proj-2-tuple(v_1172),2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)))) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-3-tuple(v_1173))))) then symmetricstatepack(1-proj-3-tuple(v_1173),2-proj-3-tuple(v_1173),hash(3-proj-3-tuple(v_1173),2-proj-2-tuple(v_1172))) else fail-any) else fail-any)) in
        {665}let v_1175: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1165)) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if (not-caught-fail(v_1172) && success?(is-true(success?(1-proj-2-tuple(v_1172))))) then (if not-caught-fail(v_1174) then (v_1174,2-proj-2-tuple(v_1172)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {666}let v_1176: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1175),2-proj-7-tuple(v_1165),3-proj-7-tuple(v_1165),4-proj-7-tuple(v_1165),5-proj-7-tuple(v_1165),6-proj-7-tuple(v_1165),7-proj-7-tuple(v_1165))) in
        {667}let v_1177: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1166),2-proj-3-tuple(v_1166),2-proj-2-tuple(v_1175))) in
        {668}let (hs_1178: handshakestate,message_d_1179: bitstring) = (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-7-tuple(v_1165))))) then (if (not-caught-fail(v_1166) && success?(is-true(success?(1-proj-3-tuple(v_1166))))) then (if (not-caught-fail(v_1175) && success?(is-true(success?(1-proj-2-tuple(v_1175))))) then (if not-caught-fail(v_1176) then (if not-caught-fail(v_1177) then (v_1176,v_1177) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {669}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {670}out(pub, message_d_1179)
    ) | (
        {672}event LeakPsk(phase0,charlie,bob);
        {673}out(pub, key_psk(charlie,bob))
    ) | (
        {674}phase 1;
        {675}event LeakPsk(phase1,charlie,bob);
        {676}out(pub, key_psk(charlie,bob))
    ) | (
        {677}event LeakS(phase0,bob);
        {678}out(pub, key_s(bob))
    ) | (
        {679}phase 1;
        {680}event LeakS(phase1,bob);
        {681}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 193 rules in the queue.
400 rules inserted. The rule base contains 396 rules. 43 rules in the queue.
600 rules inserted. The rule base contains 573 rules. 257 rules in the queue.
800 rules inserted. The rule base contains 761 rules. 304 rules in the queue.
1000 rules inserted. The rule base contains 945 rules. 162 rules in the queue.
1200 rules inserted. The rule base contains 1140 rules. 314 rules in the queue.
1400 rules inserted. The rule base contains 1340 rules. 429 rules in the queue.
1600 rules inserted. The rule base contains 1525 rules. 457 rules in the queue.
1800 rules inserted. The rule base contains 1696 rules. 422 rules in the queue.
2000 rules inserted. The rule base contains 1875 rules. 410 rules in the queue.
2200 rules inserted. The rule base contains 2064 rules. 423 rules in the queue.
2400 rules inserted. The rule base contains 2245 rules. 443 rules in the queue.
2600 rules inserted. The rule base contains 2344 rules. 430 rules in the queue.
2800 rules inserted. The rule base contains 2510 rules. 484 rules in the queue.
3000 rules inserted. The rule base contains 2692 rules. 574 rules in the queue.
3200 rules inserted. The rule base contains 2876 rules. 615 rules in the queue.
3400 rules inserted. The rule base contains 3012 rules. 623 rules in the queue.
3600 rules inserted. The rule base contains 3155 rules. 615 rules in the queue.
3800 rules inserted. The rule base contains 3338 rules. 667 rules in the queue.
4000 rules inserted. The rule base contains 3509 rules. 727 rules in the queue.
4200 rules inserted. The rule base contains 3682 rules. 741 rules in the queue.
4400 rules inserted. The rule base contains 3826 rules. 738 rules in the queue.
4600 rules inserted. The rule base contains 3940 rules. 732 rules in the queue.
4800 rules inserted. The rule base contains 4063 rules. 695 rules in the queue.
5000 rules inserted. The rule base contains 4191 rules. 698 rules in the queue.
5200 rules inserted. The rule base contains 4346 rules. 690 rules in the queue.
5400 rules inserted. The rule base contains 4520 rules. 670 rules in the queue.
5600 rules inserted. The rule base contains 4653 rules. 637 rules in the queue.
5800 rules inserted. The rule base contains 4774 rules. 640 rules in the queue.
6000 rules inserted. The rule base contains 4923 rules. 639 rules in the queue.
6200 rules inserted. The rule base contains 5050 rules. 613 rules in the queue.
6400 rules inserted. The rule base contains 5159 rules. 579 rules in the queue.
6600 rules inserted. The rule base contains 5261 rules. 544 rules in the queue.
6800 rules inserted. The rule base contains 5413 rules. 577 rules in the queue.
7000 rules inserted. The rule base contains 5605 rules. 617 rules in the queue.
7200 rules inserted. The rule base contains 5751 rules. 654 rules in the queue.
7400 rules inserted. The rule base contains 5904 rules. 703 rules in the queue.
7600 rules inserted. The rule base contains 6086 rules. 765 rules in the queue.
7800 rules inserted. The rule base contains 6238 rules. 792 rules in the queue.
8000 rules inserted. The rule base contains 6401 rules. 815 rules in the queue.
8200 rules inserted. The rule base contains 6590 rules. 857 rules in the queue.
8400 rules inserted. The rule base contains 6736 rules. 863 rules in the queue.
8600 rules inserted. The rule base contains 6901 rules. 858 rules in the queue.
8800 rules inserted. The rule base contains 7046 rules. 837 rules in the queue.
9000 rules inserted. The rule base contains 7210 rules. 842 rules in the queue.
9200 rules inserted. The rule base contains 7358 rules. 827 rules in the queue.
9400 rules inserted. The rule base contains 7532 rules. 886 rules in the queue.
9600 rules inserted. The rule base contains 7701 rules. 925 rules in the queue.
9800 rules inserted. The rule base contains 7880 rules. 986 rules in the queue.
10000 rules inserted. The rule base contains 8040 rules. 1001 rules in the queue.
10200 rules inserted. The rule base contains 8199 rules. 1029 rules in the queue.
10400 rules inserted. The rule base contains 8353 rules. 1059 rules in the queue.
10600 rules inserted. The rule base contains 8526 rules. 1041 rules in the queue.
10800 rules inserted. The rule base contains 8702 rules. 1032 rules in the queue.
11000 rules inserted. The rule base contains 8842 rules. 1023 rules in the queue.
11200 rules inserted. The rule base contains 8990 rules. 1017 rules in the queue.
11400 rules inserted. The rule base contains 9121 rules. 1011 rules in the queue.
11600 rules inserted. The rule base contains 9302 rules. 977 rules in the queue.
11800 rules inserted. The rule base contains 9480 rules. 948 rules in the queue.
12000 rules inserted. The rule base contains 9587 rules. 939 rules in the queue.
12200 rules inserted. The rule base contains 9733 rules. 969 rules in the queue.
12400 rules inserted. The rule base contains 9868 rules. 974 rules in the queue.
12600 rules inserted. The rule base contains 10048 rules. 991 rules in the queue.
12800 rules inserted. The rule base contains 10156 rules. 1004 rules in the queue.
13000 rules inserted. The rule base contains 10297 rules. 1008 rules in the queue.
13200 rules inserted. The rule base contains 10398 rules. 1028 rules in the queue.
13400 rules inserted. The rule base contains 10572 rules. 1053 rules in the queue.
13600 rules inserted. The rule base contains 10747 rules. 1093 rules in the queue.
13800 rules inserted. The rule base contains 10821 rules. 1082 rules in the queue.
14000 rules inserted. The rule base contains 10961 rules. 1086 rules in the queue.
14200 rules inserted. The rule base contains 11063 rules. 1068 rules in the queue.
14400 rules inserted. The rule base contains 11234 rules. 1088 rules in the queue.
14600 rules inserted. The rule base contains 11397 rules. 1121 rules in the queue.
14800 rules inserted. The rule base contains 11470 rules. 1065 rules in the queue.
15000 rules inserted. The rule base contains 11573 rules. 1053 rules in the queue.
15200 rules inserted. The rule base contains 11718 rules. 1042 rules in the queue.
15400 rules inserted. The rule base contains 11874 rules. 1059 rules in the queue.
15600 rules inserted. The rule base contains 12026 rules. 1082 rules in the queue.
15800 rules inserted. The rule base contains 12134 rules. 1071 rules in the queue.
16000 rules inserted. The rule base contains 12233 rules. 1077 rules in the queue.
16200 rules inserted. The rule base contains 12394 rules. 1076 rules in the queue.
16400 rules inserted. The rule base contains 12550 rules. 1108 rules in the queue.
16600 rules inserted. The rule base contains 12704 rules. 1146 rules in the queue.
16800 rules inserted. The rule base contains 12808 rules. 1160 rules in the queue.
17000 rules inserted. The rule base contains 12884 rules. 1169 rules in the queue.
17200 rules inserted. The rule base contains 13039 rules. 1190 rules in the queue.
17400 rules inserted. The rule base contains 13209 rules. 1193 rules in the queue.
17600 rules inserted. The rule base contains 13377 rules. 1210 rules in the queue.
17800 rules inserted. The rule base contains 13480 rules. 1213 rules in the queue.
18000 rules inserted. The rule base contains 13547 rules. 1221 rules in the queue.
18200 rules inserted. The rule base contains 13652 rules. 1225 rules in the queue.
18400 rules inserted. The rule base contains 13822 rules. 1206 rules in the queue.
18600 rules inserted. The rule base contains 13998 rules. 1189 rules in the queue.
18800 rules inserted. The rule base contains 14098 rules. 1192 rules in the queue.
19000 rules inserted. The rule base contains 14169 rules. 1159 rules in the queue.
19200 rules inserted. The rule base contains 14282 rules. 1163 rules in the queue.
19400 rules inserted. The rule base contains 14412 rules. 1152 rules in the queue.
19600 rules inserted. The rule base contains 14583 rules. 1142 rules in the queue.
19800 rules inserted. The rule base contains 14668 rules. 1155 rules in the queue.
20000 rules inserted. The rule base contains 14755 rules. 1151 rules in the queue.
20200 rules inserted. The rule base contains 14812 rules. 1127 rules in the queue.
20400 rules inserted. The rule base contains 14919 rules. 1153 rules in the queue.
20600 rules inserted. The rule base contains 15066 rules. 1147 rules in the queue.
20800 rules inserted. The rule base contains 15169 rules. 1137 rules in the queue.
21000 rules inserted. The rule base contains 15225 rules. 1118 rules in the queue.
21200 rules inserted. The rule base contains 15331 rules. 1111 rules in the queue.
21400 rules inserted. The rule base contains 15411 rules. 1109 rules in the queue.
21600 rules inserted. The rule base contains 15564 rules. 1143 rules in the queue.
21800 rules inserted. The rule base contains 15690 rules. 1141 rules in the queue.
22000 rules inserted. The rule base contains 15724 rules. 1054 rules in the queue.
22200 rules inserted. The rule base contains 15805 rules. 1043 rules in the queue.
22400 rules inserted. The rule base contains 15936 rules. 1030 rules in the queue.
22600 rules inserted. The rule base contains 16102 rules. 1012 rules in the queue.
22800 rules inserted. The rule base contains 16202 rules. 985 rules in the queue.
23000 rules inserted. The rule base contains 16259 rules. 904 rules in the queue.
23200 rules inserted. The rule base contains 16344 rules. 879 rules in the queue.
23400 rules inserted. The rule base contains 16502 rules. 795 rules in the queue.
23600 rules inserted. The rule base contains 16617 rules. 766 rules in the queue.
23800 rules inserted. The rule base contains 16645 rules. 727 rules in the queue.
24000 rules inserted. The rule base contains 16731 rules. 691 rules in the queue.
24200 rules inserted. The rule base contains 16797 rules. 627 rules in the queue.
24400 rules inserted. The rule base contains 16828 rules. 610 rules in the queue.
24600 rules inserted. The rule base contains 16905 rules. 606 rules in the queue.
24800 rules inserted. The rule base contains 16961 rules. 557 rules in the queue.
25000 rules inserted. The rule base contains 17007 rules. 508 rules in the queue.
25200 rules inserted. The rule base contains 17070 rules. 414 rules in the queue.
25400 rules inserted. The rule base contains 17075 rules. 338 rules in the queue.
25600 rules inserted. The rule base contains 17145 rules. 258 rules in the queue.
25800 rules inserted. The rule base contains 17196 rules. 206 rules in the queue.
26000 rules inserted. The rule base contains 17184 rules. 146 rules in the queue.
26200 rules inserted. The rule base contains 17180 rules. 60 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306526]),msg_a(alice,bob,sid[!1 = @sid_1484306526]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306527]),msg_a(alice,bob,sid[!1 = @sid_1484306526])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306535]),msg_a(alice,bob,sid[!1 = @sid_1484306535]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306536]),msg_a(alice,bob,sid[!1 = @sid_1484306535])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306545]),msg_a(alice,bob,sid[!1 = @sid_1484306545]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306546]),msg_a(alice,bob,sid[!1 = @sid_1484306545])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306555]),msg_a(alice,bob,sid[!1 = @sid_1484306555]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306556]),msg_a(alice,bob,sid[!1 = @sid_1484306555])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306564]),msg_a(alice,bob,sid[!1 = @sid_1484306564]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306565]),msg_a(alice,bob,sid[!1 = @sid_1484306564])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306572]),msg_a(alice,bob,sid[!1 = @sid_1484306572]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306572]))
Abbreviations:
sid_1484306702 = sid[!1 = @sid_1484306677]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1484306702,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484306702,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1484306702,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484306702),msg_a(alice,bob,sid_1484306702)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {167}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {168}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {508}.
So the message key_s(bob) may be sent on channel pub at output {509}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306702),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306702),g))),msg_a(alice,bob,sid_1484306702)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1484306702) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1484306702)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306704]),msg_a(alice,bob,sid[!1 = @sid_1484306704]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306704]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306706]),msg_a(alice,bob,sid[!1 = @sid_1484306706]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306706]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306708]),msg_a(alice,bob,sid[!1 = @sid_1484306708]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306708]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306711]),msg_a(alice,bob,sid[!1 = @sid_1484306711]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306711]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306729]),msg_a(alice,bob,sid[!1 = @sid_1484306729]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306729]))
Abbreviations:
sid_1484306862 = sid[!1 = @sid_1484306837]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1484306862,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484306862,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1484306862,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484306862),msg_a(alice,bob,sid_1484306862)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {167}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {168}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {508}.
So the message key_s(bob) may be sent on channel pub at output {509}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306862),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306862),g))),msg_a(alice,bob,sid_1484306862)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1484306862) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1484306862)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306864]),msg_a(alice,bob,sid[!1 = @sid_1484306864]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306864]))
Abbreviations:
sid_1484306994 = sid[!1 = @sid_1484306969]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1484306994,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484306994,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1484306994,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484306994),msg_a(alice,bob,sid_1484306994)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {167}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {168}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {508}.
So the message key_s(bob) may be sent on channel pub at output {509}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306994),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306994),g))),msg_a(alice,bob,sid_1484306994)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1484306994) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1484306994)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484306997]),msg_b(bob,alice,sid[!1 = @sid_1484306997]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306998]),msg_a(alice,bob,sid[!1 = @sid_1484306998]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484306998]),msg_b(bob,alice,sid[!1 = @sid_1484306997])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307006]),msg_b(bob,alice,sid[!1 = @sid_1484307006]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307007]),msg_a(alice,bob,sid[!1 = @sid_1484307007]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307007]),msg_b(bob,alice,sid[!1 = @sid_1484307006])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307016]),msg_b(bob,alice,sid[!1 = @sid_1484307016]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307017]),msg_a(alice,bob,sid[!1 = @sid_1484307017]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307017]),msg_b(bob,alice,sid[!1 = @sid_1484307016])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307026]),msg_b(bob,alice,sid[!1 = @sid_1484307026]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307027]),msg_a(alice,bob,sid[!1 = @sid_1484307027]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307027]),msg_b(bob,alice,sid[!1 = @sid_1484307026])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307035]),msg_b(bob,alice,sid[!1 = @sid_1484307035]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307036]),msg_a(alice,bob,sid[!1 = @sid_1484307036]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307036]),msg_b(bob,alice,sid[!1 = @sid_1484307035])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307061]),msg_c(alice,bob,sid[!1 = @sid_1484307061]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307062]),msg_b(bob,alice,sid[!1 = @sid_1484307062]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307061]),msg_a(alice,bob,sid[!1 = @sid_1484307061]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307062]),msg_c(alice,bob,sid[!1 = @sid_1484307061])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307070]),msg_c(alice,bob,sid[!1 = @sid_1484307070]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307071]),msg_b(bob,alice,sid[!1 = @sid_1484307071]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307070]),msg_a(alice,bob,sid[!1 = @sid_1484307070]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307071]),msg_c(alice,bob,sid[!1 = @sid_1484307070])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307080]),msg_c(alice,bob,sid[!1 = @sid_1484307080]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307081]),msg_b(bob,alice,sid[!1 = @sid_1484307081]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307080]),msg_a(alice,bob,sid[!1 = @sid_1484307080]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307081]),msg_c(alice,bob,sid[!1 = @sid_1484307080])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307090]),msg_c(alice,bob,sid[!1 = @sid_1484307090]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307091]),msg_b(bob,alice,sid[!1 = @sid_1484307091]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307090]),msg_a(alice,bob,sid[!1 = @sid_1484307090]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307091]),msg_c(alice,bob,sid[!1 = @sid_1484307090])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307099]),msg_c(alice,bob,sid[!1 = @sid_1484307099]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307100]),msg_b(bob,alice,sid[!1 = @sid_1484307100]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307099]),msg_a(alice,bob,sid[!1 = @sid_1484307099]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307100]),msg_c(alice,bob,sid[!1 = @sid_1484307099])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307125]),msg_d(bob,alice,sid[!1 = @sid_1484307125]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307126]),msg_c(alice,bob,sid[!1 = @sid_1484307126]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307125]),msg_b(bob,alice,sid[!1 = @sid_1484307125]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307126]),msg_a(alice,bob,sid[!1 = @sid_1484307126]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307126]),msg_d(bob,alice,sid[!1 = @sid_1484307125])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307134]),msg_d(bob,alice,sid[!1 = @sid_1484307134]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307135]),msg_c(alice,bob,sid[!1 = @sid_1484307135]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307134]),msg_b(bob,alice,sid[!1 = @sid_1484307134]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307135]),msg_a(alice,bob,sid[!1 = @sid_1484307135]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307135]),msg_d(bob,alice,sid[!1 = @sid_1484307134])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307144]),msg_d(bob,alice,sid[!1 = @sid_1484307144]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307145]),msg_c(alice,bob,sid[!1 = @sid_1484307145]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307144]),msg_b(bob,alice,sid[!1 = @sid_1484307144]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307145]),msg_a(alice,bob,sid[!1 = @sid_1484307145]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307145]),msg_d(bob,alice,sid[!1 = @sid_1484307144])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307154]),msg_d(bob,alice,sid[!1 = @sid_1484307154]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307155]),msg_c(alice,bob,sid[!1 = @sid_1484307155]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307154]),msg_b(bob,alice,sid[!1 = @sid_1484307154]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307155]),msg_a(alice,bob,sid[!1 = @sid_1484307155]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307155]),msg_d(bob,alice,sid[!1 = @sid_1484307154])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307163]),msg_d(bob,alice,sid[!1 = @sid_1484307163]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307164]),msg_c(alice,bob,sid[!1 = @sid_1484307164]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307163]),msg_b(bob,alice,sid[!1 = @sid_1484307163]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307164]),msg_a(alice,bob,sid[!1 = @sid_1484307164]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307164]),msg_d(bob,alice,sid[!1 = @sid_1484307163])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307187]),msg_d(bob,alice,sid[!1 = @sid_1484307187]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307188]),msg_c(alice,bob,sid[!1 = @sid_1484307188]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307187]),msg_b(bob,alice,sid[!1 = @sid_1484307187]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307188]),msg_a(alice,bob,sid[!1 = @sid_1484307188]))) -> end(RecvEnd(true))
Abbreviations:
sid_1484307432 = sid[!1 = @sid_1484307421]
sid_1484307433 = sid[!1 = @sid_1484307376]

1. The entry statestore(alice,bob,sid_1484307432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484307432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_1484307432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484307432),msg_a(alice,bob,sid_1484307432)) may be executed at {69}.
So the entry statestore(alice,bob,sid_1484307432,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {70}.
table(statestore(alice,bob,sid_1484307432,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_1484307433,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {361}.
table(statestore(bob,alice,sid_1484307433,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_1484307432,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484307432),msg_a(alice,bob,sid_1484307432)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))).

5. The entry statestore(bob,alice,sid_1484307433,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {411}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))) that may be sent on channel pub by 4 may be received at input {362}.
So the entry statestore(bob,alice,sid_1484307433,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {410}.
table(statestore(bob,alice,sid_1484307433,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_1484307433,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1484307433),msg_b(bob,alice,sid_1484307433)) may be executed at {459}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))) may be sent on channel pub at output {461}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))).

7. The entry statestore(alice,bob,sid_1484307432,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {122}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))) that may be sent on channel pub by 6 may be received at input {73}.
So the entry statestore(alice,bob,sid_1484307432,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) may be inserted in a table at insert {121}.
table(statestore(alice,bob,sid_1484307432,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_1484307432,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1484307432),msg_c(alice,bob,sid_1484307432)) may be executed at {139}.
So the entry statestore(alice,bob,sid_1484307432,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) may be inserted in a table at insert {140}.
table(statestore(alice,bob,sid_1484307432,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_1484307433,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1484307433),msg_b(bob,alice,sid_1484307433)) may be executed at {459}.
So the entry statestore(bob,alice,sid_1484307433,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_e(bob,alice,sid_1484307433)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) may be inserted in a table at insert {460}.
table(statestore(bob,alice,sid_1484307433,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_e(bob,alice,sid_1484307433)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_1484307432,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1484307432),msg_c(alice,bob,sid_1484307432)) may be executed at {139}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432))) may be sent on channel pub at output {141}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))).

11. The entry statestore(bob,alice,sid_1484307433,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_e(bob,alice,sid_1484307433)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) that may be in a table by 9 may be read at get {483}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432))) that may be sent on channel pub by 10 may be received at input {465}.
So the entry statestore(bob,alice,sid_1484307433,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_e(bob,alice,sid_1484307433)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) may be inserted in a table at insert {482}.
table(statestore(bob,alice,sid_1484307433,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_e(bob,alice,sid_1484307433)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_1484307433,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_e(bob,alice,sid_1484307433)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) that may be in a table by 11 may be read at get {502}.
The event SendMsg(bob,alice,stagepack_d(sid_1484307433),msg_d(bob,alice,sid_1484307433)) may be executed at {500}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432))),msg_d(bob,alice,sid_1484307433))) may be sent on channel pub at output {501}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432))),msg_d(bob,alice,sid_1484307433)))).

13. The entry statestore(alice,bob,sid_1484307432,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g)),key_e(alice,bob,sid_1484307432)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce))) that may be in a table by 8 may be read at get {163}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307433),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_e(bob,alice,sid_1484307433),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307432),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307432),g))),msg_a(alice,bob,sid_1484307432))),validkey(dhexp_real(key_e(bob,alice,sid_1484307433),g))),msg_b(bob,alice,sid_1484307433))),msg_c(alice,bob,sid_1484307432))),msg_d(bob,alice,sid_1484307433))) that may be sent on channel pub by 12 may be received at input {145}.
So event RecvEnd(true) may be executed at {162}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
