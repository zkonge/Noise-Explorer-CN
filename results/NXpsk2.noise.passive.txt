File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NXpsk2.noise.passive.pv", line 267, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 271, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 271, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 279, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 284, character 6:
Warning: identifier s rebound.
File "NXpsk2.noise.passive.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 285, characters 26-27:
Warning: identifier ns rebound.
File "NXpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 288, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 297, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 314, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 319, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 331, characters 26-27:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 331, characters 40-45:
Warning: identifier valid1 rebound.
File "NXpsk2.noise.passive.pv", line 332, characters 6-7:
Warning: identifier rs rebound.
File "NXpsk2.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 337, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 515, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 506, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 297, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 331, characters 26-27:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 331, characters 40-45:
Warning: identifier valid1 rebound.
File "NXpsk2.noise.passive.pv", line 332, characters 6-7:
Warning: identifier rs rebound.
File "NXpsk2.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 337, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NXpsk2.noise.passive.pv", line 493, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 267, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 271, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 271, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 561, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 553, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 555, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 279, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 284, character 6:
Warning: identifier s rebound.
File "NXpsk2.noise.passive.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 285, characters 26-27:
Warning: identifier ns rebound.
File "NXpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 288, characters 26-35:
Warning: identifier ciphertext rebound.
File "NXpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NXpsk2.noise.passive.pv", line 541, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 314, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 319, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_539: keypair = keypairpack(empty,empty) in
    (
        {5}let e_540: keypair = keypairpack(empty,empty) in
        {6}let rs_541: key = empty in
        {7}let re_542: key = empty in
        {8}let v_543: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_544: key = catch-fail(v_543) in
        {10}let v_545: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_546: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_543) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then symmetricstatepack(v_545,v_544,v_543) else fail-any) else fail-any) else fail-any))) in
        {12}let v_547: symmetricstate = catch-fail((if success?((if not-caught-fail(v_543) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then symmetricstatepack(v_545,v_544,v_543) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_546),hash(3-proj-3-tuple(v_546),empty)) else fail-any) else fail-any)) in
        {13}let hs: handshakestate = (if not-caught-fail(v_547) then handshakestatepack(v_547,s_539,e_540,rs_541,re_542,key_psk(alice,bob),true) else fail-any) in
        {14}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {43}get statestore(=alice,=bob,=sid,statepack_a(hs_548: handshakestate)) in
        {15}let v_549: bitstring = catch-fail(handshakestateunpack(hs_548)) in
        {16}let v_550: bitstring = catch-fail((empty,empty,empty)) in
        {17}let v_551: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {18}let v_552: keypair = catch-fail((if not-caught-fail(v_551) then keypairpack(validkey(v_551),key_e(alice,bob,sid)) else fail-any)) in
        {19}let v_553: bitstring = catch-fail(getpublickey(v_552)) in
        {20}let v_554: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_549))) in
        {21}let v_555: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_549)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack(1-proj-3-tuple(v_554),2-proj-3-tuple(v_554),hash(3-proj-3-tuple(v_554),v_553)) else fail-any) else fail-any)) in
        {22}let v_556: bitstring = catch-fail(symmetricstateunpack(v_555)) in
        {23}let v_557: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_556),getpublickey(v_552))) in
        {24}let v_558: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_556),getpublickey(v_552))) in
        {25}let v_559: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_556),getpublickey(v_552))) in
        {26}let v_560: bitstring = catch-fail((if (success?(getpublickey(v_552)) && success?(2-proj-3-tuple(v_556))) then (if not-caught-fail(v_557) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_557,v_558,v_559) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_561: symmetricstate = catch-fail((if success?(getpublickey(v_552)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_560)) then cipherstatepack(2-proj-3-tuple(v_560),minnonce) else fail-any),1-proj-3-tuple(v_560),3-proj-3-tuple(v_556)) else fail-any) else fail-any) else fail-any)) in
        {28}let v_562: bitstring = catch-fail(symmetricstateunpack(v_561)) in
        {29}let v_563: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_562))) in
        {30}let v_564: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_563),2-proj-2-tuple(v_563),3-proj-3-tuple(v_562),msg_a(alice,bob,sid))) in
        {31}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_562))) in
        {32}let v_566: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_563))) && success?(1-proj-3-tuple(v_562))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then cipherstatepack(1-proj-2-tuple(v_565),increment_nonce(2-proj-2-tuple(v_563))) else fail-any) else fail-any)) in
        {33}let v_567: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_562)) && success?(1-proj-3-tuple(v_562))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then (v_566,v_564) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_568: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_567),2-proj-3-tuple(v_562),3-proj-3-tuple(v_562)))) in
        {35}let v_569: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_567)) && success?(symmetricstatepack(1-proj-2-tuple(v_567),2-proj-3-tuple(v_562),3-proj-3-tuple(v_562)))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then symmetricstatepack(1-proj-3-tuple(v_568),2-proj-3-tuple(v_568),hash(3-proj-3-tuple(v_568),2-proj-2-tuple(v_567))) else fail-any) else fail-any)) in
        {36}let v_570: bitstring = catch-fail((if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then (if not-caught-fail(v_569) then (v_569,2-proj-2-tuple(v_567)) else fail-any) else fail-any) else fail-any)) in
        {37}let v_571: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_570),2-proj-7-tuple(v_549),v_552,4-proj-7-tuple(v_549),5-proj-7-tuple(v_549),6-proj-7-tuple(v_549),7-proj-7-tuple(v_549))) in
        {38}let v_572: bitstring = catch-fail(concat3(v_553,2-proj-3-tuple(v_550),2-proj-2-tuple(v_570))) in
        {39}let (hs_573: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-7-tuple(v_549))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_555) then (if not-caught-fail(v_561) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (v_571,v_572) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {40}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {41}insert statestore(alice,bob,sid,statepack_b(hs_573));
        {42}out(pub, message_a)
    ) | (
        {113}get statestore(=alice,=bob,=sid,statepack_b(hs_574: handshakestate)) in
        {44}in(pub, message_b: bitstring);
        {45}let v_575: bitstring = catch-fail(handshakestateunpack(hs_574)) in
        {46}let v_576: bitstring = catch-fail(deconcat3(message_b)) in
        {47}let v_577: bool = catch-fail(true) in
        {48}let v_578: key = catch-fail(1-proj-3-tuple(v_576)) in
        {49}let v_579: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_575))) in
        {50}let v_580: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_575)) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),hash(3-proj-3-tuple(v_579),v_578)) else fail-any) else fail-any)) in
        {51}let v_581: bitstring = catch-fail(symmetricstateunpack(v_580)) in
        {52}let v_582: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_581),v_578)) in
        {53}let v_583: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_581),v_578)) in
        {54}let v_584: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_581),v_578)) in
        {55}let v_585: bitstring = catch-fail((if success?(2-proj-3-tuple(v_581)) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (v_582,v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_586: symmetricstate = catch-fail((if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_585)) then cipherstatepack(2-proj-3-tuple(v_585),minnonce) else fail-any),1-proj-3-tuple(v_585),3-proj-3-tuple(v_581)) else fail-any) else fail-any)) in
        {57}let v_587: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_575))) in
        {58}let v_588: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {59}let v_589: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_578) else fail-any) else fail-any))) in
        {60}let v_590: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_578) else fail-any) else fail-any))) in
        {61}let v_591: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_578) else fail-any) else fail-any))) in
        {62}let v_592: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_578) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_588))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (v_589,v_590,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_593: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_578) else fail-any) else fail-any)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_592)) then cipherstatepack(2-proj-3-tuple(v_592),minnonce) else fail-any),1-proj-3-tuple(v_592),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {65}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {66}let v_596: aead = catch-fail(decrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),2-proj-3-tuple(v_576))) in
        {67}let v_597: bitstring = catch-fail(aeadunpack(v_596)) in
        {68}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {69}let v_599: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then cipherstatepack(1-proj-2-tuple(v_598),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {70}let v_600: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_576)) && (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,3-proj-3-tuple(v_597),1-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_601: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {72}let v_602: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_576)) && success?(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),2-proj-3-tuple(v_576))) else fail-any) else fail-any)) in
        {73}let v_603: bitstring = catch-fail((if success?(2-proj-3-tuple(v_576)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,2-proj-3-tuple(v_600),3-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_604: key = catch-fail(2-proj-3-tuple(v_603)) in
        {75}let v_605: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_575))) in
        {76}let v_606: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_603))) in
        {77}let v_607: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_606),(if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),v_604) else fail-any) else fail-any))) in
        {78}let v_608: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_606),(if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),v_604) else fail-any) else fail-any))) in
        {79}let v_609: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_606),(if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),v_604) else fail-any) else fail-any))) in
        {80}let v_610: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),v_604) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_606))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (if not-caught-fail(v_609) then (v_607,v_608,v_609) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_611: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_575)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),v_604) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_610)) then cipherstatepack(2-proj-3-tuple(v_610),minnonce) else fail-any),1-proj-3-tuple(v_610),3-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any)) in
        {82}let v_612: bitstring = catch-fail(symmetricstateunpack(v_611)) in
        {83}let v_613: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_612),6-proj-7-tuple(v_575))) in
        {84}let v_614: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_612),6-proj-7-tuple(v_575))) in
        {85}let v_615: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_612),6-proj-7-tuple(v_575))) in
        {86}let v_616: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_575)) && success?(2-proj-3-tuple(v_612))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (v_613,v_614,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_617: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_612),1-proj-3-tuple(v_616),3-proj-3-tuple(v_612)))) in
        {88}let v_618: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_616)) && success?(symmetricstatepack(1-proj-3-tuple(v_612),1-proj-3-tuple(v_616),3-proj-3-tuple(v_612)))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_617),hash(3-proj-3-tuple(v_617),2-proj-3-tuple(v_616))) else fail-any) else fail-any))) in
        {89}let v_619: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_575)) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_616)) then cipherstatepack(3-proj-3-tuple(v_616),minnonce) else fail-any),1-proj-3-tuple(v_616),3-proj-3-tuple(v_618)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {91}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {92}let v_622: aead = catch-fail(decrypt(1-proj-2-tuple(v_621),2-proj-2-tuple(v_621),3-proj-3-tuple(v_620),3-proj-3-tuple(v_576))) in
        {93}let v_623: bitstring = catch-fail(aeadunpack(v_622)) in
        {94}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {95}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_621))) && success?(1-proj-3-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {96}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_576)) && (success?(3-proj-3-tuple(v_620)) && success?(1-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,3-proj-3-tuple(v_623),1-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) in
        {98}let v_628: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_576)) && success?(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),3-proj-3-tuple(v_576))) else fail-any) else fail-any)) in
        {99}let v_629: bitstring = catch-fail((if success?(3-proj-3-tuple(v_576)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let v_630: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {101}let v_631: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_629),2-proj-7-tuple(v_575),3-proj-7-tuple(v_575),v_604,v_578,6-proj-7-tuple(v_575),7-proj-7-tuple(v_575))) in
        {102}let v_632: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_629))) in
        {103}let v_633: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_632),zero)) in
        {104}let v_634: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_632),zero)) in
        {105}let v_635: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_632),zero)) in
        {106}let v_636: bitstring = catch-fail((if success?(2-proj-3-tuple(v_632)) then (if not-caught-fail(v_633) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (v_633,v_634,v_635) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_637: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_636)) then cipherstatepack(1-proj-3-tuple(v_636),minnonce) else fail-any)) in
        {108}let v_638: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_636)) then cipherstatepack(2-proj-3-tuple(v_636),minnonce) else fail-any)) in
        {109}let v_639: bitstring = catch-fail((if success?(1-proj-3-tuple(v_629)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (1-proj-3-tuple(v_629),v_637,v_638) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let (hs_640: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-7-tuple(v_575))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (if not-caught-fail(v_580) then (if not-caught-fail(v_586) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_611) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if ((3-proj-3-tuple(v_603) && 3-proj-3-tuple(v_629)) && (v_604 = getpublickey((if not-caught-fail(v_630) then keypairpack(validkey(v_630),key_s(bob)) else fail-any)))) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (v_631,2-proj-3-tuple(v_629),true,2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {111}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {112}insert statestore(alice,bob,sid,statepack_c(hs_640,cs1,cs2))
    ) | (
        {114}!
        {133}get statestore(=alice,=bob,=sid,statepack_c(hs_641: handshakestate,cs1_642: cipherstate,cs2_643: cipherstate)) in
        {115}let hs_644: handshakestate = handshakestatesetcs(hs_641,cs1_642) in
        {116}let v_645: bitstring = catch-fail(handshakestateunpack(hs_644)) in
        {117}let v_646: bitstring = catch-fail((empty,empty,empty)) in
        {118}let v_647: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_645))) in
        {119}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {120}let v_649: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_648),2-proj-2-tuple(v_648),3-proj-3-tuple(v_647),msg_c(alice,bob,sid))) in
        {121}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {122}let v_651: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_648))) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then cipherstatepack(1-proj-2-tuple(v_650),increment_nonce(2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {123}let v_652: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_651) then (v_651,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_653: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) in
        {125}let v_654: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_652)) && success?(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {126}let v_655: bitstring = catch-fail((if success?(1-proj-7-tuple(v_645)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_654) then (v_654,2-proj-2-tuple(v_652)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_656: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_655),2-proj-7-tuple(v_645),3-proj-7-tuple(v_645),4-proj-7-tuple(v_645),5-proj-7-tuple(v_645),6-proj-7-tuple(v_645),7-proj-7-tuple(v_645))) in
        {128}let v_657: bitstring = catch-fail(concat3(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),2-proj-2-tuple(v_655))) in
        {129}let (hs_658: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-7-tuple(v_645))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {131}insert statestore(alice,bob,sid,statepack_d(hs_658,handshakestategetcs(hs_658),cs2_643));
        {132}out(pub, message_c)
    ) | (
        {134}!
        {154}get statestore(=alice,=bob,=sid,statepack_d(hs_659: handshakestate,cs1_660: cipherstate,cs2_661: cipherstate)) in
        {135}let hs_662: handshakestate = handshakestatesetcs(hs_659,cs2_661) in
        {136}in(pub, message_d: bitstring);
        {137}let v_663: bitstring = catch-fail(handshakestateunpack(hs_662)) in
        {138}let v_664: bitstring = catch-fail(deconcat3(message_d)) in
        {139}let v_665: bool = catch-fail(true) in
        {140}let v_666: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_663))) in
        {141}let v_667: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_666))) in
        {142}let v_668: aead = catch-fail(decrypt(1-proj-2-tuple(v_667),2-proj-2-tuple(v_667),3-proj-3-tuple(v_666),3-proj-3-tuple(v_664))) in
        {143}let v_669: bitstring = catch-fail(aeadunpack(v_668)) in
        {144}let v_670: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_666))) in
        {145}let v_671: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_667))) && success?(1-proj-3-tuple(v_666))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then cipherstatepack(1-proj-2-tuple(v_670),increment_nonce(2-proj-2-tuple(v_667))) else fail-any) else fail-any)) in
        {146}let v_672: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_664)) && (success?(3-proj-3-tuple(v_666)) && success?(1-proj-3-tuple(v_666)))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then (if not-caught-fail(v_668) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if not-caught-fail(v_671) then (v_671,3-proj-3-tuple(v_669),1-proj-3-tuple(v_669)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {147}let v_673: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_672),2-proj-3-tuple(v_666),3-proj-3-tuple(v_666)))) in
        {148}let v_674: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_664)) && success?(symmetricstatepack(1-proj-3-tuple(v_672),2-proj-3-tuple(v_666),3-proj-3-tuple(v_666)))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_673),hash(3-proj-3-tuple(v_673),3-proj-3-tuple(v_664))) else fail-any) else fail-any)) in
        {149}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_664)) && success?(1-proj-7-tuple(v_663))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if not-caught-fail(v_674) then (v_674,2-proj-3-tuple(v_672),3-proj-3-tuple(v_672)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {150}let v_676: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_675),2-proj-7-tuple(v_663),3-proj-7-tuple(v_663),4-proj-7-tuple(v_663),5-proj-7-tuple(v_663),6-proj-7-tuple(v_663),7-proj-7-tuple(v_663))) in
        {151}let (hs_677: handshakestate,plaintext_d: bitstring,valid_678: bool) = (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-7-tuple(v_663))))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_665) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (v_665 && 3-proj-3-tuple(v_675)) then (if not-caught-fail(v_676) then (v_676,2-proj-3-tuple(v_675),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {152}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {153}event RecvEnd(valid_678)
    ) | (
        {155}event LeakPsk(phase0,alice,bob);
        {156}out(pub, key_psk(alice,bob))
    ) | (
        {157}phase 1;
        {158}event LeakPsk(phase1,alice,bob);
        {159}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {160}let s_679: keypair = keypairpack(empty,empty) in
    (
        {161}let e_680: keypair = keypairpack(empty,empty) in
        {162}let rs_681: key = empty in
        {163}let re_682: key = empty in
        {164}let v_683: bitstring = catch-fail(hash(somename,empty)) in
        {165}let v_684: key = catch-fail(v_683) in
        {166}let v_685: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {167}let v_686: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then symmetricstatepack(v_685,v_684,v_683) else fail-any) else fail-any) else fail-any))) in
        {168}let v_687: symmetricstate = catch-fail((if success?((if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then symmetricstatepack(v_685,v_684,v_683) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_686),hash(3-proj-3-tuple(v_686),empty)) else fail-any) else fail-any)) in
        {169}let hs_688: handshakestate = (if not-caught-fail(v_687) then handshakestatepack(v_687,s_679,e_680,rs_681,re_682,key_psk(alice,charlie),true) else fail-any) in
        {170}insert statestore(alice,charlie,sid,statepack_a(hs_688))
    ) | (
        {199}get statestore(=alice,=charlie,=sid,statepack_a(hs_689: handshakestate)) in
        {171}let v_690: bitstring = catch-fail(handshakestateunpack(hs_689)) in
        {172}let v_691: bitstring = catch-fail((empty,empty,empty)) in
        {173}let v_692: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {174}let v_693: keypair = catch-fail((if not-caught-fail(v_692) then keypairpack(validkey(v_692),key_e(alice,charlie,sid)) else fail-any)) in
        {175}let v_694: bitstring = catch-fail(getpublickey(v_693)) in
        {176}let v_695: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_690))) in
        {177}let v_696: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_690)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_695),hash(3-proj-3-tuple(v_695),v_694)) else fail-any) else fail-any)) in
        {178}let v_697: bitstring = catch-fail(symmetricstateunpack(v_696)) in
        {179}let v_698: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_697),getpublickey(v_693))) in
        {180}let v_699: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_697),getpublickey(v_693))) in
        {181}let v_700: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_697),getpublickey(v_693))) in
        {182}let v_701: bitstring = catch-fail((if (success?(getpublickey(v_693)) && success?(2-proj-3-tuple(v_697))) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (v_698,v_699,v_700) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_702: symmetricstate = catch-fail((if success?(getpublickey(v_693)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_701)) then cipherstatepack(2-proj-3-tuple(v_701),minnonce) else fail-any),1-proj-3-tuple(v_701),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_703: bitstring = catch-fail(symmetricstateunpack(v_702)) in
        {185}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {186}let v_705: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_704),2-proj-2-tuple(v_704),3-proj-3-tuple(v_703),msg_a(alice,charlie,sid))) in
        {187}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {188}let v_707: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_704))) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then cipherstatepack(1-proj-2-tuple(v_706),increment_nonce(2-proj-2-tuple(v_704))) else fail-any) else fail-any)) in
        {189}let v_708: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then (if not-caught-fail(v_705) then (if not-caught-fail(v_707) then (v_707,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_709: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_708),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) in
        {191}let v_710: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_708)) && success?(symmetricstatepack(1-proj-2-tuple(v_708),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),2-proj-2-tuple(v_708))) else fail-any) else fail-any)) in
        {192}let v_711: bitstring = catch-fail((if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,2-proj-2-tuple(v_708)) else fail-any) else fail-any) else fail-any)) in
        {193}let v_712: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_711),2-proj-7-tuple(v_690),v_693,4-proj-7-tuple(v_690),5-proj-7-tuple(v_690),6-proj-7-tuple(v_690),7-proj-7-tuple(v_690))) in
        {194}let v_713: bitstring = catch-fail(concat3(v_694,2-proj-3-tuple(v_691),2-proj-2-tuple(v_711))) in
        {195}let (hs_714: handshakestate,message_a_715: bitstring) = (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-7-tuple(v_690))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (if not-caught-fail(v_696) then (if not-caught-fail(v_702) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (v_712,v_713) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {197}insert statestore(alice,charlie,sid,statepack_b(hs_714));
        {198}out(pub, message_a_715)
    ) | (
        {269}get statestore(=alice,=charlie,=sid,statepack_b(hs_716: handshakestate)) in
        {200}in(pub, message_b_717: bitstring);
        {201}let v_718: bitstring = catch-fail(handshakestateunpack(hs_716)) in
        {202}let v_719: bitstring = catch-fail(deconcat3(message_b_717)) in
        {203}let v_720: bool = catch-fail(true) in
        {204}let v_721: key = catch-fail(1-proj-3-tuple(v_719)) in
        {205}let v_722: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_718))) in
        {206}let v_723: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_718)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),v_721)) else fail-any) else fail-any)) in
        {207}let v_724: bitstring = catch-fail(symmetricstateunpack(v_723)) in
        {208}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),v_721)) in
        {209}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),v_721)) in
        {210}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),v_721)) in
        {211}let v_728: bitstring = catch-fail((if success?(2-proj-3-tuple(v_724)) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_729: symmetricstate = catch-fail((if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_728)) then cipherstatepack(2-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)) else fail-any) else fail-any)) in
        {213}let v_730: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_718))) in
        {214}let v_731: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {215}let v_732: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_731),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),v_721) else fail-any) else fail-any))) in
        {216}let v_733: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_731),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),v_721) else fail-any) else fail-any))) in
        {217}let v_734: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_731),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),v_721) else fail-any) else fail-any))) in
        {218}let v_735: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),v_721) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_731))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (v_732,v_733,v_734) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_736: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),v_721) else fail-any) else fail-any)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_735)) then cipherstatepack(2-proj-3-tuple(v_735),minnonce) else fail-any),1-proj-3-tuple(v_735),3-proj-3-tuple(v_731)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_737: bitstring = catch-fail(symmetricstateunpack(v_736)) in
        {221}let v_738: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_737))) in
        {222}let v_739: aead = catch-fail(decrypt(1-proj-2-tuple(v_738),2-proj-2-tuple(v_738),3-proj-3-tuple(v_737),2-proj-3-tuple(v_719))) in
        {223}let v_740: bitstring = catch-fail(aeadunpack(v_739)) in
        {224}let v_741: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_737))) in
        {225}let v_742: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_738))) && success?(1-proj-3-tuple(v_737))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then cipherstatepack(1-proj-2-tuple(v_741),increment_nonce(2-proj-2-tuple(v_738))) else fail-any) else fail-any)) in
        {226}let v_743: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_719)) && (success?(3-proj-3-tuple(v_737)) && success?(1-proj-3-tuple(v_737)))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if not-caught-fail(v_739) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if not-caught-fail(v_742) then (v_742,3-proj-3-tuple(v_740),1-proj-3-tuple(v_740)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_744: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)))) in
        {228}let v_745: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_719)) && success?(symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_744),hash(3-proj-3-tuple(v_744),2-proj-3-tuple(v_719))) else fail-any) else fail-any)) in
        {229}let v_746: bitstring = catch-fail((if success?(2-proj-3-tuple(v_719)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if not-caught-fail(v_745) then (v_745,2-proj-3-tuple(v_743),3-proj-3-tuple(v_743)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_747: key = catch-fail(2-proj-3-tuple(v_746)) in
        {231}let v_748: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_718))) in
        {232}let v_749: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_746))) in
        {233}let v_750: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_749),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),v_747) else fail-any) else fail-any))) in
        {234}let v_751: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_749),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),v_747) else fail-any) else fail-any))) in
        {235}let v_752: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_749),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),v_747) else fail-any) else fail-any))) in
        {236}let v_753: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),v_747) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_749))) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (v_750,v_751,v_752) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_754: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),v_747) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_746))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_753)) then cipherstatepack(2-proj-3-tuple(v_753),minnonce) else fail-any),1-proj-3-tuple(v_753),3-proj-3-tuple(v_749)) else fail-any) else fail-any) else fail-any)) in
        {238}let v_755: bitstring = catch-fail(symmetricstateunpack(v_754)) in
        {239}let v_756: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_755),6-proj-7-tuple(v_718))) in
        {240}let v_757: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_755),6-proj-7-tuple(v_718))) in
        {241}let v_758: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_755),6-proj-7-tuple(v_718))) in
        {242}let v_759: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_718)) && success?(2-proj-3-tuple(v_755))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_756,v_757,v_758) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_760: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_755),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)))) in
        {244}let v_761: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_759)) && success?(symmetricstatepack(1-proj-3-tuple(v_755),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_760),hash(3-proj-3-tuple(v_760),2-proj-3-tuple(v_759))) else fail-any) else fail-any))) in
        {245}let v_762: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_718)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_759)) then cipherstatepack(3-proj-3-tuple(v_759),minnonce) else fail-any),1-proj-3-tuple(v_759),3-proj-3-tuple(v_761)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_763: bitstring = catch-fail(symmetricstateunpack(v_762)) in
        {247}let v_764: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {248}let v_765: aead = catch-fail(decrypt(1-proj-2-tuple(v_764),2-proj-2-tuple(v_764),3-proj-3-tuple(v_763),3-proj-3-tuple(v_719))) in
        {249}let v_766: bitstring = catch-fail(aeadunpack(v_765)) in
        {250}let v_767: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {251}let v_768: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_764))) && success?(1-proj-3-tuple(v_763))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then cipherstatepack(1-proj-2-tuple(v_767),increment_nonce(2-proj-2-tuple(v_764))) else fail-any) else fail-any)) in
        {252}let v_769: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_719)) && (success?(3-proj-3-tuple(v_763)) && success?(1-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then (if not-caught-fail(v_765) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if not-caught-fail(v_768) then (v_768,3-proj-3-tuple(v_766),1-proj-3-tuple(v_766)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_770: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_769),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) in
        {254}let v_771: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_719)) && success?(symmetricstatepack(1-proj-3-tuple(v_769),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then symmetricstatepack(1-proj-3-tuple(v_770),2-proj-3-tuple(v_770),hash(3-proj-3-tuple(v_770),3-proj-3-tuple(v_719))) else fail-any) else fail-any)) in
        {255}let v_772: bitstring = catch-fail((if success?(3-proj-3-tuple(v_719)) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if not-caught-fail(v_771) then (v_771,2-proj-3-tuple(v_769),3-proj-3-tuple(v_769)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_773: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {257}let v_774: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_772),2-proj-7-tuple(v_718),3-proj-7-tuple(v_718),v_747,v_721,6-proj-7-tuple(v_718),7-proj-7-tuple(v_718))) in
        {258}let v_775: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_772))) in
        {259}let v_776: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_775),zero)) in
        {260}let v_777: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_775),zero)) in
        {261}let v_778: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_775),zero)) in
        {262}let v_779: bitstring = catch-fail((if success?(2-proj-3-tuple(v_775)) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (v_776,v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_780: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_779)) then cipherstatepack(1-proj-3-tuple(v_779),minnonce) else fail-any)) in
        {264}let v_781: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_779)) then cipherstatepack(2-proj-3-tuple(v_779),minnonce) else fail-any)) in
        {265}let v_782: bitstring = catch-fail((if success?(1-proj-3-tuple(v_772)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (1-proj-3-tuple(v_772),v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let (hs_783: handshakestate,plaintext_b_784: bitstring,valid_785: bool,cs1_786: cipherstate,cs2_787: cipherstate) = (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-7-tuple(v_718))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (if not-caught-fail(v_723) then (if not-caught-fail(v_729) then (if not-caught-fail(v_736) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_754) then (if not-caught-fail(v_762) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if ((3-proj-3-tuple(v_746) && 3-proj-3-tuple(v_772)) && (v_747 = getpublickey((if not-caught-fail(v_773) then keypairpack(validkey(v_773),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_774) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (v_774,2-proj-3-tuple(v_772),true,2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {267}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_784);
        {268}insert statestore(alice,charlie,sid,statepack_c(hs_783,cs1_786,cs2_787))
    ) | (
        {270}!
        {289}get statestore(=alice,=charlie,=sid,statepack_c(hs_788: handshakestate,cs1_789: cipherstate,cs2_790: cipherstate)) in
        {271}let hs_791: handshakestate = handshakestatesetcs(hs_788,cs1_789) in
        {272}let v_792: bitstring = catch-fail(handshakestateunpack(hs_791)) in
        {273}let v_793: bitstring = catch-fail((empty,empty,empty)) in
        {274}let v_794: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_792))) in
        {275}let v_795: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_794))) in
        {276}let v_796: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_795),2-proj-2-tuple(v_795),3-proj-3-tuple(v_794),msg_c(alice,charlie,sid))) in
        {277}let v_797: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_794))) in
        {278}let v_798: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_795))) && success?(1-proj-3-tuple(v_794))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then cipherstatepack(1-proj-2-tuple(v_797),increment_nonce(2-proj-2-tuple(v_795))) else fail-any) else fail-any)) in
        {279}let v_799: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_794)) && success?(1-proj-3-tuple(v_794))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_798) then (v_798,v_796) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_800: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_799),2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)))) in
        {281}let v_801: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_799)) && success?(symmetricstatepack(1-proj-2-tuple(v_799),2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack(1-proj-3-tuple(v_800),2-proj-3-tuple(v_800),hash(3-proj-3-tuple(v_800),2-proj-2-tuple(v_799))) else fail-any) else fail-any)) in
        {282}let v_802: bitstring = catch-fail((if success?(1-proj-7-tuple(v_792)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then (if not-caught-fail(v_801) then (v_801,2-proj-2-tuple(v_799)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_803: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_802),2-proj-7-tuple(v_792),3-proj-7-tuple(v_792),4-proj-7-tuple(v_792),5-proj-7-tuple(v_792),6-proj-7-tuple(v_792),7-proj-7-tuple(v_792))) in
        {284}let v_804: bitstring = catch-fail(concat3(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),2-proj-2-tuple(v_802))) in
        {285}let (hs_805: handshakestate,message_c_806: bitstring) = (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-7-tuple(v_792))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (v_803,v_804) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {286}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {287}insert statestore(alice,charlie,sid,statepack_d(hs_805,handshakestategetcs(hs_805),cs2_790));
        {288}out(pub, message_c_806)
    ) | (
        {290}!
        {310}get statestore(=alice,=charlie,=sid,statepack_d(hs_807: handshakestate,cs1_808: cipherstate,cs2_809: cipherstate)) in
        {291}let hs_810: handshakestate = handshakestatesetcs(hs_807,cs2_809) in
        {292}in(pub, message_d_811: bitstring);
        {293}let v_812: bitstring = catch-fail(handshakestateunpack(hs_810)) in
        {294}let v_813: bitstring = catch-fail(deconcat3(message_d_811)) in
        {295}let v_814: bool = catch-fail(true) in
        {296}let v_815: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_812))) in
        {297}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_815))) in
        {298}let v_817: aead = catch-fail(decrypt(1-proj-2-tuple(v_816),2-proj-2-tuple(v_816),3-proj-3-tuple(v_815),3-proj-3-tuple(v_813))) in
        {299}let v_818: bitstring = catch-fail(aeadunpack(v_817)) in
        {300}let v_819: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_815))) in
        {301}let v_820: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_816))) && success?(1-proj-3-tuple(v_815))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then cipherstatepack(1-proj-2-tuple(v_819),increment_nonce(2-proj-2-tuple(v_816))) else fail-any) else fail-any)) in
        {302}let v_821: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_813)) && (success?(3-proj-3-tuple(v_815)) && success?(1-proj-3-tuple(v_815)))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then (if not-caught-fail(v_817) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,3-proj-3-tuple(v_818),1-proj-3-tuple(v_818)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_822: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_821),2-proj-3-tuple(v_815),3-proj-3-tuple(v_815)))) in
        {304}let v_823: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_813)) && success?(symmetricstatepack(1-proj-3-tuple(v_821),2-proj-3-tuple(v_815),3-proj-3-tuple(v_815)))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then symmetricstatepack(1-proj-3-tuple(v_822),2-proj-3-tuple(v_822),hash(3-proj-3-tuple(v_822),3-proj-3-tuple(v_813))) else fail-any) else fail-any)) in
        {305}let v_824: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_813)) && success?(1-proj-7-tuple(v_812))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if not-caught-fail(v_823) then (v_823,2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_825: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_824),2-proj-7-tuple(v_812),3-proj-7-tuple(v_812),4-proj-7-tuple(v_812),5-proj-7-tuple(v_812),6-proj-7-tuple(v_812),7-proj-7-tuple(v_812))) in
        {307}let (hs_826: handshakestate,plaintext_d_827: bitstring,valid_828: bool) = (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-7-tuple(v_812))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if not-caught-fail(v_814) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if (v_814 && 3-proj-3-tuple(v_824)) then (if not-caught-fail(v_825) then (v_825,2-proj-3-tuple(v_824),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {308}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_827);
        {309}event RecvEnd(valid_828)
    ) | (
        {311}event LeakPsk(phase0,alice,charlie);
        {312}out(pub, key_psk(alice,charlie))
    ) | (
        {313}phase 1;
        {314}event LeakPsk(phase1,alice,charlie);
        {315}out(pub, key_psk(alice,charlie))
    ) | (
        0
    )
) | (
    {316}let s_829: keypair = keypairpack(empty,empty) in
    {317}out(pub, getpublickey(s_829));
    (
        {318}let e_830: keypair = keypairpack(empty,empty) in
        {319}let rs_831: key = empty in
        {320}let re_832: key = empty in
        {321}let v_833: bitstring = catch-fail(hash(somename,empty)) in
        {322}let v_834: key = catch-fail(v_833) in
        {323}let v_835: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {324}let v_836: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then symmetricstatepack(v_835,v_834,v_833) else fail-any) else fail-any) else fail-any))) in
        {325}let v_837: symmetricstate = catch-fail((if success?((if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then symmetricstatepack(v_835,v_834,v_833) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),empty)) else fail-any) else fail-any)) in
        {326}let hs_838: handshakestate = (if not-caught-fail(v_837) then handshakestatepack(v_837,s_829,e_830,rs_831,re_832,key_psk(alice,bob),false) else fail-any) in
        {327}insert statestore(bob,alice,sid,statepack_a(hs_838))
    ) | (
        {355}get statestore(=bob,=alice,=sid,statepack_a(hs_839: handshakestate)) in
        {328}in(pub, message_a_840: bitstring);
        {329}let v_841: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {330}let v_842: bitstring = catch-fail(deconcat3(message_a_840)) in
        {331}let v_843: bool = catch-fail(true) in
        {332}let v_844: key = catch-fail(1-proj-3-tuple(v_842)) in
        {333}let v_845: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_841))) in
        {334}let v_846: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_841)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),v_844)) else fail-any) else fail-any)) in
        {335}let v_847: bitstring = catch-fail(symmetricstateunpack(v_846)) in
        {336}let v_848: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_847),v_844)) in
        {337}let v_849: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_847),v_844)) in
        {338}let v_850: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_847),v_844)) in
        {339}let v_851: bitstring = catch-fail((if success?(2-proj-3-tuple(v_847)) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (v_848,v_849,v_850) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_852: symmetricstate = catch-fail((if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_851)) then cipherstatepack(2-proj-3-tuple(v_851),minnonce) else fail-any),1-proj-3-tuple(v_851),3-proj-3-tuple(v_847)) else fail-any) else fail-any)) in
        {341}let v_853: bitstring = catch-fail(symmetricstateunpack(v_852)) in
        {342}let v_854: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_853))) in
        {343}let v_855: aead = catch-fail(decrypt(1-proj-2-tuple(v_854),2-proj-2-tuple(v_854),3-proj-3-tuple(v_853),3-proj-3-tuple(v_842))) in
        {344}let v_856: bitstring = catch-fail(aeadunpack(v_855)) in
        {345}let v_857: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_853))) in
        {346}let v_858: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_854))) && success?(1-proj-3-tuple(v_853))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then cipherstatepack(1-proj-2-tuple(v_857),increment_nonce(2-proj-2-tuple(v_854))) else fail-any) else fail-any)) in
        {347}let v_859: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && (success?(3-proj-3-tuple(v_853)) && success?(1-proj-3-tuple(v_853)))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then (if not-caught-fail(v_855) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if not-caught-fail(v_858) then (v_858,3-proj-3-tuple(v_856),1-proj-3-tuple(v_856)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_860: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)))) in
        {349}let v_861: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_860),hash(3-proj-3-tuple(v_860),3-proj-3-tuple(v_842))) else fail-any) else fail-any)) in
        {350}let v_862: bitstring = catch-fail((if success?(3-proj-3-tuple(v_842)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_861) then (v_861,2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_863: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_862),2-proj-7-tuple(v_841),3-proj-7-tuple(v_841),4-proj-7-tuple(v_841),v_844,6-proj-7-tuple(v_841),7-proj-7-tuple(v_841))) in
        {352}let (hs_864: handshakestate,plaintext_a: bitstring,valid_865: bool) = (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-7-tuple(v_841))))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (if not-caught-fail(v_852) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if (v_843 && 3-proj-3-tuple(v_862)) then (if not-caught-fail(v_863) then (v_863,2-proj-3-tuple(v_862),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {353}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {354}insert statestore(bob,alice,sid,statepack_b(hs_864))
    ) | (
        {425}get statestore(=bob,=alice,=sid,statepack_b(hs_866: handshakestate)) in
        {356}let v_867: bitstring = catch-fail(handshakestateunpack(hs_866)) in
        {357}let v_868: bitstring = catch-fail((empty,empty,empty)) in
        {358}let v_869: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {359}let v_870: keypair = catch-fail((if not-caught-fail(v_869) then keypairpack(validkey(v_869),key_e(bob,alice,sid)) else fail-any)) in
        {360}let v_871: bitstring = catch-fail(getpublickey(v_870)) in
        {361}let v_872: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_867))) in
        {362}let v_873: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_867)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),v_871)) else fail-any) else fail-any)) in
        {363}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {364}let v_875: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_874),getpublickey(v_870))) in
        {365}let v_876: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_874),getpublickey(v_870))) in
        {366}let v_877: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_874),getpublickey(v_870))) in
        {367}let v_878: bitstring = catch-fail((if (success?(getpublickey(v_870)) && success?(2-proj-3-tuple(v_874))) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (v_875,v_876,v_877) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {368}let v_879: symmetricstate = catch-fail((if success?(getpublickey(v_870)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_878)) then cipherstatepack(2-proj-3-tuple(v_878),minnonce) else fail-any),1-proj-3-tuple(v_878),3-proj-3-tuple(v_874)) else fail-any) else fail-any) else fail-any)) in
        {369}let v_880: bitstring = catch-fail(keypairunpack(v_870)) in
        {370}let v_881: bitstring = catch-fail(symmetricstateunpack(v_879)) in
        {371}let v_882: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_881),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {372}let v_883: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_881),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {373}let v_884: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_881),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {374}let v_885: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),5-proj-7-tuple(v_867)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_881))) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (v_882,v_883,v_884) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_886: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),5-proj-7-tuple(v_867)) else fail-any) else fail-any)) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_885)) then cipherstatepack(2-proj-3-tuple(v_885),minnonce) else fail-any),1-proj-3-tuple(v_885),3-proj-3-tuple(v_881)) else fail-any) else fail-any) else fail-any)) in
        {376}let v_887: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {377}let v_888: keypair = catch-fail((if not-caught-fail(v_887) then keypairpack(validkey(v_887),key_s(bob)) else fail-any)) in
        {378}let v_889: bitstring = catch-fail(symmetricstateunpack(v_886)) in
        {379}let v_890: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {380}let v_891: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_890),2-proj-2-tuple(v_890),3-proj-3-tuple(v_889),getpublickey(v_888))) in
        {381}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {382}let v_893: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_890))) && success?(1-proj-3-tuple(v_889))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then cipherstatepack(1-proj-2-tuple(v_892),increment_nonce(2-proj-2-tuple(v_890))) else fail-any) else fail-any)) in
        {383}let v_894: bitstring = catch-fail((if (success?(getpublickey(v_888)) && (success?(3-proj-3-tuple(v_889)) && success?(1-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then (if not-caught-fail(v_891) then (if not-caught-fail(v_893) then (v_893,v_891) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {384}let v_895: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_894),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) in
        {385}let v_896: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_894)) && success?(symmetricstatepack(1-proj-2-tuple(v_894),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_895),hash(3-proj-3-tuple(v_895),2-proj-2-tuple(v_894))) else fail-any) else fail-any)) in
        {386}let v_897: bitstring = catch-fail((if success?(getpublickey(v_888)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then (if not-caught-fail(v_896) then (v_896,2-proj-2-tuple(v_894)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_898: bitstring = catch-fail(keypairunpack(v_888)) in
        {388}let v_899: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_897))) in
        {389}let v_900: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {390}let v_901: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {391}let v_902: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {392}let v_903: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_867)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_899))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (if not-caught-fail(v_902) then (v_900,v_901,v_902) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_904: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_867)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_897))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_903)) then cipherstatepack(2-proj-3-tuple(v_903),minnonce) else fail-any),1-proj-3-tuple(v_903),3-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any)) in
        {394}let v_905: bitstring = catch-fail(symmetricstateunpack(v_904)) in
        {395}let v_906: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_905),6-proj-7-tuple(v_867))) in
        {396}let v_907: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_905),6-proj-7-tuple(v_867))) in
        {397}let v_908: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_905),6-proj-7-tuple(v_867))) in
        {398}let v_909: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_867)) && success?(2-proj-3-tuple(v_905))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then (v_906,v_907,v_908) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_910: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_905),1-proj-3-tuple(v_909),3-proj-3-tuple(v_905)))) in
        {400}let v_911: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_909)) && success?(symmetricstatepack(1-proj-3-tuple(v_905),1-proj-3-tuple(v_909),3-proj-3-tuple(v_905)))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then symmetricstatepack(1-proj-3-tuple(v_910),2-proj-3-tuple(v_910),hash(3-proj-3-tuple(v_910),2-proj-3-tuple(v_909))) else fail-any) else fail-any))) in
        {401}let v_912: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_867)) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_909)) then cipherstatepack(3-proj-3-tuple(v_909),minnonce) else fail-any),1-proj-3-tuple(v_909),3-proj-3-tuple(v_911)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_913: bitstring = catch-fail(symmetricstateunpack(v_912)) in
        {403}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {404}let v_915: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_914),2-proj-2-tuple(v_914),3-proj-3-tuple(v_913),msg_b(bob,alice,sid))) in
        {405}let v_916: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {406}let v_917: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_914))) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then cipherstatepack(1-proj-2-tuple(v_916),increment_nonce(2-proj-2-tuple(v_914))) else fail-any) else fail-any)) in
        {407}let v_918: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_913)) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_917) then (v_917,v_915) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_919: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_918),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) in
        {409}let v_920: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_918)) && success?(symmetricstatepack(1-proj-2-tuple(v_918),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),2-proj-2-tuple(v_918))) else fail-any) else fail-any)) in
        {410}let v_921: bitstring = catch-fail((if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-2-tuple(v_918))))) then (if not-caught-fail(v_920) then (v_920,2-proj-2-tuple(v_918)) else fail-any) else fail-any) else fail-any)) in
        {411}let v_922: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_921),v_888,v_870,4-proj-7-tuple(v_867),5-proj-7-tuple(v_867),6-proj-7-tuple(v_867),7-proj-7-tuple(v_867))) in
        {412}let v_923: bitstring = catch-fail(concat3(v_871,2-proj-2-tuple(v_897),2-proj-2-tuple(v_921))) in
        {413}let v_924: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_921))) in
        {414}let v_925: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_924),zero)) in
        {415}let v_926: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_924),zero)) in
        {416}let v_927: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_924),zero)) in
        {417}let v_928: bitstring = catch-fail((if success?(2-proj-3-tuple(v_924)) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (v_925,v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_929: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_928)) then cipherstatepack(1-proj-3-tuple(v_928),minnonce) else fail-any)) in
        {419}let v_930: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_928)) then cipherstatepack(2-proj-3-tuple(v_928),minnonce) else fail-any)) in
        {420}let v_931: bitstring = catch-fail((if success?(1-proj-2-tuple(v_921)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (1-proj-2-tuple(v_921),v_929,v_930) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let (hs_932: handshakestate,message_b_933: bitstring,cs1_934: cipherstate,cs2_935: cipherstate) = (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-7-tuple(v_867))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (if not-caught-fail(v_873) then (if not-caught-fail(v_879) then (if not-caught-fail(v_886) then (if not-caught-fail(v_888) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (v_922,v_923,2-proj-3-tuple(v_931),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {422}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {423}insert statestore(bob,alice,sid,statepack_c(hs_932,cs1_934,cs2_935));
        {424}out(pub, message_b_933)
    ) | (
        {426}!
        {446}get statestore(=bob,=alice,=sid,statepack_c(hs_936: handshakestate,cs1_937: cipherstate,cs2_938: cipherstate)) in
        {427}let hs_939: handshakestate = handshakestatesetcs(hs_936,cs1_937) in
        {428}in(pub, message_c_940: bitstring);
        {429}let v_941: bitstring = catch-fail(handshakestateunpack(hs_939)) in
        {430}let v_942: bitstring = catch-fail(deconcat3(message_c_940)) in
        {431}let v_943: bool = catch-fail(true) in
        {432}let v_944: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_941))) in
        {433}let v_945: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {434}let v_946: aead = catch-fail(decrypt(1-proj-2-tuple(v_945),2-proj-2-tuple(v_945),3-proj-3-tuple(v_944),3-proj-3-tuple(v_942))) in
        {435}let v_947: bitstring = catch-fail(aeadunpack(v_946)) in
        {436}let v_948: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {437}let v_949: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_945))) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then cipherstatepack(1-proj-2-tuple(v_948),increment_nonce(2-proj-2-tuple(v_945))) else fail-any) else fail-any)) in
        {438}let v_950: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_942)) && (success?(3-proj-3-tuple(v_944)) && success?(1-proj-3-tuple(v_944)))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then (if not-caught-fail(v_946) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then (if not-caught-fail(v_949) then (v_949,3-proj-3-tuple(v_947),1-proj-3-tuple(v_947)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_951: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) in
        {440}let v_952: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_942)) && success?(symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_951),hash(3-proj-3-tuple(v_951),3-proj-3-tuple(v_942))) else fail-any) else fail-any)) in
        {441}let v_953: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_942)) && success?(1-proj-7-tuple(v_941))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_952) then (v_952,2-proj-3-tuple(v_950),3-proj-3-tuple(v_950)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_954: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_953),2-proj-7-tuple(v_941),3-proj-7-tuple(v_941),4-proj-7-tuple(v_941),5-proj-7-tuple(v_941),6-proj-7-tuple(v_941),7-proj-7-tuple(v_941))) in
        {443}let (hs_955: handshakestate,plaintext_c: bitstring,valid_956: bool) = (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-7-tuple(v_941))))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if not-caught-fail(v_943) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (v_943 && 3-proj-3-tuple(v_953)) then (if not-caught-fail(v_954) then (v_954,2-proj-3-tuple(v_953),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {444}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {445}insert statestore(bob,alice,sid,statepack_d(hs_955,handshakestategetcs(hs_955),cs2_938))
    ) | (
        {447}!
        {465}get statestore(=bob,=alice,=sid,statepack_d(hs_957: handshakestate,cs1_958: cipherstate,cs2_959: cipherstate)) in
        {448}let hs_960: handshakestate = handshakestatesetcs(hs_957,cs2_959) in
        {449}let v_961: bitstring = catch-fail(handshakestateunpack(hs_960)) in
        {450}let v_962: bitstring = catch-fail((empty,empty,empty)) in
        {451}let v_963: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_961))) in
        {452}let v_964: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_963))) in
        {453}let v_965: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_964),2-proj-2-tuple(v_964),3-proj-3-tuple(v_963),msg_d(bob,alice,sid))) in
        {454}let v_966: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_963))) in
        {455}let v_967: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_964))) && success?(1-proj-3-tuple(v_963))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then cipherstatepack(1-proj-2-tuple(v_966),increment_nonce(2-proj-2-tuple(v_964))) else fail-any) else fail-any)) in
        {456}let v_968: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_963)) && success?(1-proj-3-tuple(v_963))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-2-tuple(v_964))))) then (if not-caught-fail(v_965) then (if not-caught-fail(v_967) then (v_967,v_965) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_969: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_968),2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)))) in
        {458}let v_970: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_968)) && success?(symmetricstatepack(1-proj-2-tuple(v_968),2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_969),hash(3-proj-3-tuple(v_969),2-proj-2-tuple(v_968))) else fail-any) else fail-any)) in
        {459}let v_971: bitstring = catch-fail((if success?(1-proj-7-tuple(v_961)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-2-tuple(v_968))))) then (if not-caught-fail(v_970) then (v_970,2-proj-2-tuple(v_968)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_972: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_971),2-proj-7-tuple(v_961),3-proj-7-tuple(v_961),4-proj-7-tuple(v_961),5-proj-7-tuple(v_961),6-proj-7-tuple(v_961),7-proj-7-tuple(v_961))) in
        {461}let v_973: bitstring = catch-fail(concat3(1-proj-3-tuple(v_962),2-proj-3-tuple(v_962),2-proj-2-tuple(v_971))) in
        {462}let (hs_974: handshakestate,message_d_975: bitstring) = (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-7-tuple(v_961))))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-2-tuple(v_971))))) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (v_972,v_973) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {464}out(pub, message_d_975)
    ) | (
        {466}event LeakPsk(phase0,alice,bob);
        {467}out(pub, key_psk(alice,bob))
    ) | (
        {468}phase 1;
        {469}event LeakPsk(phase1,alice,bob);
        {470}out(pub, key_psk(alice,bob))
    ) | (
        {471}event LeakS(phase0,bob);
        {472}out(pub, key_s(bob))
    ) | (
        {473}phase 1;
        {474}event LeakS(phase1,bob);
        {475}out(pub, key_s(bob))
    )
) | (
    {476}let s_976: keypair = keypairpack(empty,empty) in
    {477}out(pub, getpublickey(s_976));
    (
        {478}let e_977: keypair = keypairpack(empty,empty) in
        {479}let rs_978: key = empty in
        {480}let re_979: key = empty in
        {481}let v_980: bitstring = catch-fail(hash(somename,empty)) in
        {482}let v_981: key = catch-fail(v_980) in
        {483}let v_982: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {484}let v_983: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then symmetricstatepack(v_982,v_981,v_980) else fail-any) else fail-any) else fail-any))) in
        {485}let v_984: symmetricstate = catch-fail((if success?((if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then symmetricstatepack(v_982,v_981,v_980) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_983),hash(3-proj-3-tuple(v_983),empty)) else fail-any) else fail-any)) in
        {486}let hs_985: handshakestate = (if not-caught-fail(v_984) then handshakestatepack(v_984,s_976,e_977,rs_978,re_979,key_psk(charlie,bob),false) else fail-any) in
        {487}insert statestore(bob,charlie,sid,statepack_a(hs_985))
    ) | (
        {515}get statestore(=bob,=charlie,=sid,statepack_a(hs_986: handshakestate)) in
        {488}in(pub, message_a_987: bitstring);
        {489}let v_988: bitstring = catch-fail(handshakestateunpack(hs_986)) in
        {490}let v_989: bitstring = catch-fail(deconcat3(message_a_987)) in
        {491}let v_990: bool = catch-fail(true) in
        {492}let v_991: key = catch-fail(1-proj-3-tuple(v_989)) in
        {493}let v_992: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_988))) in
        {494}let v_993: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_988)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then symmetricstatepack(1-proj-3-tuple(v_992),2-proj-3-tuple(v_992),hash(3-proj-3-tuple(v_992),v_991)) else fail-any) else fail-any)) in
        {495}let v_994: bitstring = catch-fail(symmetricstateunpack(v_993)) in
        {496}let v_995: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_994),v_991)) in
        {497}let v_996: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_994),v_991)) in
        {498}let v_997: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_994),v_991)) in
        {499}let v_998: bitstring = catch-fail((if success?(2-proj-3-tuple(v_994)) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then (v_995,v_996,v_997) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {500}let v_999: symmetricstate = catch-fail((if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_998)) then cipherstatepack(2-proj-3-tuple(v_998),minnonce) else fail-any),1-proj-3-tuple(v_998),3-proj-3-tuple(v_994)) else fail-any) else fail-any)) in
        {501}let v_1000: bitstring = catch-fail(symmetricstateunpack(v_999)) in
        {502}let v_1001: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1000))) in
        {503}let v_1002: aead = catch-fail(decrypt(1-proj-2-tuple(v_1001),2-proj-2-tuple(v_1001),3-proj-3-tuple(v_1000),3-proj-3-tuple(v_989))) in
        {504}let v_1003: bitstring = catch-fail(aeadunpack(v_1002)) in
        {505}let v_1004: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1000))) in
        {506}let v_1005: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1001))) && success?(1-proj-3-tuple(v_1000))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then cipherstatepack(1-proj-2-tuple(v_1004),increment_nonce(2-proj-2-tuple(v_1001))) else fail-any) else fail-any)) in
        {507}let v_1006: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_989)) && (success?(3-proj-3-tuple(v_1000)) && success?(1-proj-3-tuple(v_1000)))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then (if not-caught-fail(v_1002) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if not-caught-fail(v_1005) then (v_1005,3-proj-3-tuple(v_1003),1-proj-3-tuple(v_1003)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1007: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1006),2-proj-3-tuple(v_1000),3-proj-3-tuple(v_1000)))) in
        {509}let v_1008: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_989)) && success?(symmetricstatepack(1-proj-3-tuple(v_1006),2-proj-3-tuple(v_1000),3-proj-3-tuple(v_1000)))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1007),hash(3-proj-3-tuple(v_1007),3-proj-3-tuple(v_989))) else fail-any) else fail-any)) in
        {510}let v_1009: bitstring = catch-fail((if success?(3-proj-3-tuple(v_989)) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if not-caught-fail(v_1008) then (v_1008,2-proj-3-tuple(v_1006),3-proj-3-tuple(v_1006)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {511}let v_1010: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1009),2-proj-7-tuple(v_988),3-proj-7-tuple(v_988),4-proj-7-tuple(v_988),v_991,6-proj-7-tuple(v_988),7-proj-7-tuple(v_988))) in
        {512}let (hs_1011: handshakestate,plaintext_a_1012: bitstring,valid_1013: bool) = (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-7-tuple(v_988))))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (if not-caught-fail(v_993) then (if not-caught-fail(v_999) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (if (v_990 && 3-proj-3-tuple(v_1009)) then (if not-caught-fail(v_1010) then (v_1010,2-proj-3-tuple(v_1009),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {513}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1012);
        {514}insert statestore(bob,charlie,sid,statepack_b(hs_1011))
    ) | (
        {585}get statestore(=bob,=charlie,=sid,statepack_b(hs_1014: handshakestate)) in
        {516}let v_1015: bitstring = catch-fail(handshakestateunpack(hs_1014)) in
        {517}let v_1016: bitstring = catch-fail((empty,empty,empty)) in
        {518}let v_1017: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {519}let v_1018: keypair = catch-fail((if not-caught-fail(v_1017) then keypairpack(validkey(v_1017),key_e(bob,charlie,sid)) else fail-any)) in
        {520}let v_1019: bitstring = catch-fail(getpublickey(v_1018)) in
        {521}let v_1020: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1015))) in
        {522}let v_1021: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then symmetricstatepack(1-proj-3-tuple(v_1020),2-proj-3-tuple(v_1020),hash(3-proj-3-tuple(v_1020),v_1019)) else fail-any) else fail-any)) in
        {523}let v_1022: bitstring = catch-fail(symmetricstateunpack(v_1021)) in
        {524}let v_1023: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1022),getpublickey(v_1018))) in
        {525}let v_1024: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1022),getpublickey(v_1018))) in
        {526}let v_1025: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1022),getpublickey(v_1018))) in
        {527}let v_1026: bitstring = catch-fail((if (success?(getpublickey(v_1018)) && success?(2-proj-3-tuple(v_1022))) then (if not-caught-fail(v_1023) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1025) then (v_1023,v_1024,v_1025) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1027: symmetricstate = catch-fail((if success?(getpublickey(v_1018)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1026)) then cipherstatepack(2-proj-3-tuple(v_1026),minnonce) else fail-any),1-proj-3-tuple(v_1026),3-proj-3-tuple(v_1022)) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1028: bitstring = catch-fail(keypairunpack(v_1018)) in
        {530}let v_1029: bitstring = catch-fail(symmetricstateunpack(v_1027)) in
        {531}let v_1030: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1029),(if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),5-proj-7-tuple(v_1015)) else fail-any) else fail-any))) in
        {532}let v_1031: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1029),(if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),5-proj-7-tuple(v_1015)) else fail-any) else fail-any))) in
        {533}let v_1032: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1029),(if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),5-proj-7-tuple(v_1015)) else fail-any) else fail-any))) in
        {534}let v_1033: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),5-proj-7-tuple(v_1015)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1029))) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then (v_1030,v_1031,v_1032) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1034: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),5-proj-7-tuple(v_1015)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1033)) then cipherstatepack(2-proj-3-tuple(v_1033),minnonce) else fail-any),1-proj-3-tuple(v_1033),3-proj-3-tuple(v_1029)) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1035: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {537}let v_1036: keypair = catch-fail((if not-caught-fail(v_1035) then keypairpack(validkey(v_1035),key_s(bob)) else fail-any)) in
        {538}let v_1037: bitstring = catch-fail(symmetricstateunpack(v_1034)) in
        {539}let v_1038: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1037))) in
        {540}let v_1039: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1038),2-proj-2-tuple(v_1038),3-proj-3-tuple(v_1037),getpublickey(v_1036))) in
        {541}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1037))) in
        {542}let v_1041: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1038))) && success?(1-proj-3-tuple(v_1037))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then cipherstatepack(1-proj-2-tuple(v_1040),increment_nonce(2-proj-2-tuple(v_1038))) else fail-any) else fail-any)) in
        {543}let v_1042: bitstring = catch-fail((if (success?(getpublickey(v_1036)) && (success?(3-proj-3-tuple(v_1037)) && success?(1-proj-3-tuple(v_1037)))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then (if not-caught-fail(v_1039) then (if not-caught-fail(v_1041) then (v_1041,v_1039) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {544}let v_1043: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1042),2-proj-3-tuple(v_1037),3-proj-3-tuple(v_1037)))) in
        {545}let v_1044: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1042)) && success?(symmetricstatepack(1-proj-2-tuple(v_1042),2-proj-3-tuple(v_1037),3-proj-3-tuple(v_1037)))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then symmetricstatepack(1-proj-3-tuple(v_1043),2-proj-3-tuple(v_1043),hash(3-proj-3-tuple(v_1043),2-proj-2-tuple(v_1042))) else fail-any) else fail-any)) in
        {546}let v_1045: bitstring = catch-fail((if success?(getpublickey(v_1036)) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then (if not-caught-fail(v_1044) then (v_1044,2-proj-2-tuple(v_1042)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1046: bitstring = catch-fail(keypairunpack(v_1036)) in
        {548}let v_1047: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1045))) in
        {549}let v_1048: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1047),(if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then dhexp(2-proj-2-tuple(v_1046),5-proj-7-tuple(v_1015)) else fail-any) else fail-any))) in
        {550}let v_1049: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1047),(if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then dhexp(2-proj-2-tuple(v_1046),5-proj-7-tuple(v_1015)) else fail-any) else fail-any))) in
        {551}let v_1050: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1047),(if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then dhexp(2-proj-2-tuple(v_1046),5-proj-7-tuple(v_1015)) else fail-any) else fail-any))) in
        {552}let v_1051: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then dhexp(2-proj-2-tuple(v_1046),5-proj-7-tuple(v_1015)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1047))) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1050) then (v_1048,v_1049,v_1050) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1052: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then dhexp(2-proj-2-tuple(v_1046),5-proj-7-tuple(v_1015)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1045))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1051)) then cipherstatepack(2-proj-3-tuple(v_1051),minnonce) else fail-any),1-proj-3-tuple(v_1051),3-proj-3-tuple(v_1047)) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1053: bitstring = catch-fail(symmetricstateunpack(v_1052)) in
        {555}let v_1054: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1053),6-proj-7-tuple(v_1015))) in
        {556}let v_1055: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1053),6-proj-7-tuple(v_1015))) in
        {557}let v_1056: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1053),6-proj-7-tuple(v_1015))) in
        {558}let v_1057: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1015)) && success?(2-proj-3-tuple(v_1053))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (v_1054,v_1055,v_1056) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1058: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1053),1-proj-3-tuple(v_1057),3-proj-3-tuple(v_1053)))) in
        {560}let v_1059: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1057)) && success?(symmetricstatepack(1-proj-3-tuple(v_1053),1-proj-3-tuple(v_1057),3-proj-3-tuple(v_1053)))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then symmetricstatepack(1-proj-3-tuple(v_1058),2-proj-3-tuple(v_1058),hash(3-proj-3-tuple(v_1058),2-proj-3-tuple(v_1057))) else fail-any) else fail-any))) in
        {561}let v_1060: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_1015)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1057)) then cipherstatepack(3-proj-3-tuple(v_1057),minnonce) else fail-any),1-proj-3-tuple(v_1057),3-proj-3-tuple(v_1059)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {562}let v_1061: bitstring = catch-fail(symmetricstateunpack(v_1060)) in
        {563}let v_1062: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1061))) in
        {564}let v_1063: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1062),2-proj-2-tuple(v_1062),3-proj-3-tuple(v_1061),msg_b(bob,charlie,sid))) in
        {565}let v_1064: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1061))) in
        {566}let v_1065: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1062))) && success?(1-proj-3-tuple(v_1061))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-2-tuple(v_1064))))) then cipherstatepack(1-proj-2-tuple(v_1064),increment_nonce(2-proj-2-tuple(v_1062))) else fail-any) else fail-any)) in
        {567}let v_1066: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1061)) && success?(1-proj-3-tuple(v_1061))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-2-tuple(v_1062))))) then (if not-caught-fail(v_1063) then (if not-caught-fail(v_1065) then (v_1065,v_1063) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1067: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1066),2-proj-3-tuple(v_1061),3-proj-3-tuple(v_1061)))) in
        {569}let v_1068: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1066)) && success?(symmetricstatepack(1-proj-2-tuple(v_1066),2-proj-3-tuple(v_1061),3-proj-3-tuple(v_1061)))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then symmetricstatepack(1-proj-3-tuple(v_1067),2-proj-3-tuple(v_1067),hash(3-proj-3-tuple(v_1067),2-proj-2-tuple(v_1066))) else fail-any) else fail-any)) in
        {570}let v_1069: bitstring = catch-fail((if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-2-tuple(v_1066))))) then (if not-caught-fail(v_1068) then (v_1068,2-proj-2-tuple(v_1066)) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1070: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1069),v_1036,v_1018,4-proj-7-tuple(v_1015),5-proj-7-tuple(v_1015),6-proj-7-tuple(v_1015),7-proj-7-tuple(v_1015))) in
        {572}let v_1071: bitstring = catch-fail(concat3(v_1019,2-proj-2-tuple(v_1045),2-proj-2-tuple(v_1069))) in
        {573}let v_1072: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1069))) in
        {574}let v_1073: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1072),zero)) in
        {575}let v_1074: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1072),zero)) in
        {576}let v_1075: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1072),zero)) in
        {577}let v_1076: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1072)) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1075) then (v_1073,v_1074,v_1075) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {578}let v_1077: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1076)) then cipherstatepack(1-proj-3-tuple(v_1076),minnonce) else fail-any)) in
        {579}let v_1078: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1076)) then cipherstatepack(2-proj-3-tuple(v_1076),minnonce) else fail-any)) in
        {580}let v_1079: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1069)) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then (if not-caught-fail(v_1077) then (if not-caught-fail(v_1078) then (1-proj-2-tuple(v_1069),v_1077,v_1078) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let (hs_1080: handshakestate,message_b_1081: bitstring,cs1_1082: cipherstate,cs2_1083: cipherstate) = (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-7-tuple(v_1015))))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1036) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then (if not-caught-fail(v_1052) then (if not-caught-fail(v_1060) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (v_1070,v_1071,2-proj-3-tuple(v_1079),3-proj-3-tuple(v_1079)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {582}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {583}insert statestore(bob,charlie,sid,statepack_c(hs_1080,cs1_1082,cs2_1083));
        {584}out(pub, message_b_1081)
    ) | (
        {586}!
        {606}get statestore(=bob,=charlie,=sid,statepack_c(hs_1084: handshakestate,cs1_1085: cipherstate,cs2_1086: cipherstate)) in
        {587}let hs_1087: handshakestate = handshakestatesetcs(hs_1084,cs1_1085) in
        {588}in(pub, message_c_1088: bitstring);
        {589}let v_1089: bitstring = catch-fail(handshakestateunpack(hs_1087)) in
        {590}let v_1090: bitstring = catch-fail(deconcat3(message_c_1088)) in
        {591}let v_1091: bool = catch-fail(true) in
        {592}let v_1092: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1089))) in
        {593}let v_1093: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1092))) in
        {594}let v_1094: aead = catch-fail(decrypt(1-proj-2-tuple(v_1093),2-proj-2-tuple(v_1093),3-proj-3-tuple(v_1092),3-proj-3-tuple(v_1090))) in
        {595}let v_1095: bitstring = catch-fail(aeadunpack(v_1094)) in
        {596}let v_1096: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1092))) in
        {597}let v_1097: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1093))) && success?(1-proj-3-tuple(v_1092))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then cipherstatepack(1-proj-2-tuple(v_1096),increment_nonce(2-proj-2-tuple(v_1093))) else fail-any) else fail-any)) in
        {598}let v_1098: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1090)) && (success?(3-proj-3-tuple(v_1092)) && success?(1-proj-3-tuple(v_1092)))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then (if not-caught-fail(v_1094) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if not-caught-fail(v_1097) then (v_1097,3-proj-3-tuple(v_1095),1-proj-3-tuple(v_1095)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1099: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1098),2-proj-3-tuple(v_1092),3-proj-3-tuple(v_1092)))) in
        {600}let v_1100: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1090)) && success?(symmetricstatepack(1-proj-3-tuple(v_1098),2-proj-3-tuple(v_1092),3-proj-3-tuple(v_1092)))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then symmetricstatepack(1-proj-3-tuple(v_1099),2-proj-3-tuple(v_1099),hash(3-proj-3-tuple(v_1099),3-proj-3-tuple(v_1090))) else fail-any) else fail-any)) in
        {601}let v_1101: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1090)) && success?(1-proj-7-tuple(v_1089))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-3-tuple(v_1098))))) then (if not-caught-fail(v_1100) then (v_1100,2-proj-3-tuple(v_1098),3-proj-3-tuple(v_1098)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1102: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1101),2-proj-7-tuple(v_1089),3-proj-7-tuple(v_1089),4-proj-7-tuple(v_1089),5-proj-7-tuple(v_1089),6-proj-7-tuple(v_1089),7-proj-7-tuple(v_1089))) in
        {603}let (hs_1103: handshakestate,plaintext_c_1104: bitstring,valid_1105: bool) = (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-7-tuple(v_1089))))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then (if not-caught-fail(v_1091) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if (v_1091 && 3-proj-3-tuple(v_1101)) then (if not-caught-fail(v_1102) then (v_1102,2-proj-3-tuple(v_1101),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {604}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1104);
        {605}insert statestore(bob,charlie,sid,statepack_d(hs_1103,handshakestategetcs(hs_1103),cs2_1086))
    ) | (
        {607}!
        {625}get statestore(=bob,=charlie,=sid,statepack_d(hs_1106: handshakestate,cs1_1107: cipherstate,cs2_1108: cipherstate)) in
        {608}let hs_1109: handshakestate = handshakestatesetcs(hs_1106,cs2_1108) in
        {609}let v_1110: bitstring = catch-fail(handshakestateunpack(hs_1109)) in
        {610}let v_1111: bitstring = catch-fail((empty,empty,empty)) in
        {611}let v_1112: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1110))) in
        {612}let v_1113: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1112))) in
        {613}let v_1114: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1113),2-proj-2-tuple(v_1113),3-proj-3-tuple(v_1112),msg_d(bob,charlie,sid))) in
        {614}let v_1115: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1112))) in
        {615}let v_1116: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1113))) && success?(1-proj-3-tuple(v_1112))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-2-tuple(v_1115))))) then cipherstatepack(1-proj-2-tuple(v_1115),increment_nonce(2-proj-2-tuple(v_1113))) else fail-any) else fail-any)) in
        {616}let v_1117: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(1-proj-3-tuple(v_1112))) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then (if not-caught-fail(v_1114) then (if not-caught-fail(v_1116) then (v_1116,v_1114) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {617}let v_1118: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1117),2-proj-3-tuple(v_1112),3-proj-3-tuple(v_1112)))) in
        {618}let v_1119: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1117)) && success?(symmetricstatepack(1-proj-2-tuple(v_1117),2-proj-3-tuple(v_1112),3-proj-3-tuple(v_1112)))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then symmetricstatepack(1-proj-3-tuple(v_1118),2-proj-3-tuple(v_1118),hash(3-proj-3-tuple(v_1118),2-proj-2-tuple(v_1117))) else fail-any) else fail-any)) in
        {619}let v_1120: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1110)) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-2-tuple(v_1117))))) then (if not-caught-fail(v_1119) then (v_1119,2-proj-2-tuple(v_1117)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {620}let v_1121: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1120),2-proj-7-tuple(v_1110),3-proj-7-tuple(v_1110),4-proj-7-tuple(v_1110),5-proj-7-tuple(v_1110),6-proj-7-tuple(v_1110),7-proj-7-tuple(v_1110))) in
        {621}let v_1122: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1111),2-proj-2-tuple(v_1120))) in
        {622}let (hs_1123: handshakestate,message_d_1124: bitstring) = (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-7-tuple(v_1110))))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then (if not-caught-fail(v_1121) then (if not-caught-fail(v_1122) then (v_1121,v_1122) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {623}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {624}out(pub, message_d_1124)
    ) | (
        {626}event LeakPsk(phase0,charlie,bob);
        {627}out(pub, key_psk(charlie,bob))
    ) | (
        {628}phase 1;
        {629}event LeakPsk(phase1,charlie,bob);
        {630}out(pub, key_psk(charlie,bob))
    ) | (
        {631}event LeakS(phase0,bob);
        {632}out(pub, key_s(bob))
    ) | (
        {633}phase 1;
        {634}event LeakS(phase1,bob);
        {635}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_a(sid_a),m)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 122 rules in the queue.
400 rules inserted. The rule base contains 384 rules. 118 rules in the queue.
600 rules inserted. The rule base contains 547 rules. 86 rules in the queue.
800 rules inserted. The rule base contains 738 rules. 164 rules in the queue.
1000 rules inserted. The rule base contains 912 rules. 195 rules in the queue.
1200 rules inserted. The rule base contains 1055 rules. 201 rules in the queue.
1400 rules inserted. The rule base contains 1152 rules. 176 rules in the queue.
1600 rules inserted. The rule base contains 1272 rules. 222 rules in the queue.
1800 rules inserted. The rule base contains 1423 rules. 217 rules in the queue.
2000 rules inserted. The rule base contains 1568 rules. 210 rules in the queue.
2200 rules inserted. The rule base contains 1722 rules. 252 rules in the queue.
2400 rules inserted. The rule base contains 1863 rules. 312 rules in the queue.
2600 rules inserted. The rule base contains 2001 rules. 356 rules in the queue.
2800 rules inserted. The rule base contains 2137 rules. 369 rules in the queue.
3000 rules inserted. The rule base contains 2252 rules. 380 rules in the queue.
3200 rules inserted. The rule base contains 2346 rules. 391 rules in the queue.
3400 rules inserted. The rule base contains 2440 rules. 384 rules in the queue.
3600 rules inserted. The rule base contains 2556 rules. 347 rules in the queue.
3800 rules inserted. The rule base contains 2684 rules. 285 rules in the queue.
4000 rules inserted. The rule base contains 2851 rules. 273 rules in the queue.
4200 rules inserted. The rule base contains 3011 rules. 305 rules in the queue.
4400 rules inserted. The rule base contains 3165 rules. 346 rules in the queue.
4600 rules inserted. The rule base contains 3324 rules. 408 rules in the queue.
4800 rules inserted. The rule base contains 3449 rules. 437 rules in the queue.
5000 rules inserted. The rule base contains 3578 rules. 437 rules in the queue.
5200 rules inserted. The rule base contains 3676 rules. 424 rules in the queue.
5400 rules inserted. The rule base contains 3767 rules. 398 rules in the queue.
5600 rules inserted. The rule base contains 3847 rules. 346 rules in the queue.
5800 rules inserted. The rule base contains 3918 rules. 273 rules in the queue.
6000 rules inserted. The rule base contains 4003 rules. 228 rules in the queue.
6200 rules inserted. The rule base contains 4085 rules. 195 rules in the queue.
6400 rules inserted. The rule base contains 4206 rules. 176 rules in the queue.
6600 rules inserted. The rule base contains 4327 rules. 151 rules in the queue.
6800 rules inserted. The rule base contains 4433 rules. 102 rules in the queue.
7000 rules inserted. The rule base contains 4539 rules. 110 rules in the queue.
7200 rules inserted. The rule base contains 4630 rules. 53 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778532]),msg_a(alice,charlie,sid[!1 = @sid_828778532]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778533]),msg_a(alice,charlie,sid[!1 = @sid_828778532])))
Abbreviations:
sid_828778566 = sid[!1 = @sid_828778556]
sid_828778567 = sid[!1 = @sid_828778540]

1. The entry statestore(bob,alice,sid_828778566,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828778566,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_828778567,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_828778567,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_828778567,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stagepack_a(sid_828778567),msg_a(alice,charlie,sid_828778567)) may be executed at {196}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g))),msg_a(alice,charlie,sid_828778567))) may be sent on channel pub at output {198}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g))),msg_a(alice,charlie,sid_828778567)))).

4. The entry statestore(bob,alice,sid_828778566,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g))),msg_a(alice,charlie,sid_828778567))) that may be sent on channel pub by 3 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_828778567),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_828778566),msg_a(alice,charlie,sid_828778567)) may be executed at {353}.
end(RecvMsg(bob,alice,stagepack_a(sid_828778566),msg_a(alice,charlie,sid_828778567))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_a(sid_a),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778570]),msg_a(alice,bob,sid[!1 = @sid_828778570]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778571]),msg_a(alice,bob,sid[!1 = @sid_828778570])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778574]),msg_a(alice,charlie,sid[!1 = @sid_828778574]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778575]),msg_a(alice,charlie,sid[!1 = @sid_828778574])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_a(sid_a),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778584]),msg_a(alice,bob,sid[!1 = @sid_828778584]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778585]),msg_a(alice,bob,sid[!1 = @sid_828778584])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778588]),msg_a(alice,charlie,sid[!1 = @sid_828778588]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778589]),msg_a(alice,charlie,sid[!1 = @sid_828778588])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778602]),msg_a(alice,charlie,sid[!1 = @sid_828778602]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778603]),msg_a(alice,charlie,sid[!1 = @sid_828778602])))
Abbreviations:
sid_828778636 = sid[!1 = @sid_828778626]
sid_828778637 = sid[!1 = @sid_828778610]

1. The entry statestore(bob,alice,sid_828778636,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828778636,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_828778637,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_828778637,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_828778637,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stagepack_a(sid_828778637),msg_a(alice,charlie,sid_828778637)) may be executed at {196}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g))),msg_a(alice,charlie,sid_828778637))) may be sent on channel pub at output {198}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g))),msg_a(alice,charlie,sid_828778637)))).

4. The entry statestore(bob,alice,sid_828778636,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g))),msg_a(alice,charlie,sid_828778637))) that may be sent on channel pub by 3 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_828778637),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_828778636),msg_a(alice,charlie,sid_828778637)) may be executed at {353}.
end(RecvMsg(bob,alice,stagepack_a(sid_828778636),msg_a(alice,charlie,sid_828778637))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778644]),msg_a(alice,charlie,sid[!1 = @sid_828778644]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778645]),msg_a(alice,charlie,sid[!1 = @sid_828778644])))
Abbreviations:
sid_828778678 = sid[!1 = @sid_828778668]
sid_828778679 = sid[!1 = @sid_828778652]

1. The entry statestore(bob,alice,sid_828778678,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828778678,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_828778679,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_828778679,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_828778679,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stagepack_a(sid_828778679),msg_a(alice,charlie,sid_828778679)) may be executed at {196}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g))),msg_a(alice,charlie,sid_828778679))) may be sent on channel pub at output {198}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g))),msg_a(alice,charlie,sid_828778679)))).

4. The entry statestore(bob,alice,sid_828778678,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g))),msg_a(alice,charlie,sid_828778679))) that may be sent on channel pub by 3 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_828778679),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_828778678),msg_a(alice,charlie,sid_828778679)) may be executed at {353}.
end(RecvMsg(bob,alice,stagepack_a(sid_828778678),msg_a(alice,charlie,sid_828778679))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778682]),msg_a(alice,bob,sid[!1 = @sid_828778682]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828778682]))
Abbreviations:
sid_828778734 = sid[!1 = @sid_828778710]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828778734,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828778734,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828778734,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828778734),msg_a(alice,bob,sid_828778734)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778734),g))),msg_a(alice,bob,sid_828778734)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828778734).
attacker(msg_a(alice,bob,sid_828778734)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828778734).
So the attacker may know msg_a(alice,bob,sid_828778734) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828778734)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778737]),msg_a(alice,bob,sid[!1 = @sid_828778737]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828778737]))
Abbreviations:
sid_828778790 = sid[!1 = @sid_828778766]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828778790,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828778790,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828778790,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828778790),msg_a(alice,bob,sid_828778790)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778790),g))),msg_a(alice,bob,sid_828778790)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828778790).
attacker(msg_a(alice,bob,sid_828778790)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828778790).
So the attacker may know msg_a(alice,bob,sid_828778790) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828778790)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778793]),msg_a(alice,bob,sid[!1 = @sid_828778793]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828778793]))
Abbreviations:
sid_828778847 = sid[!1 = @sid_828778823]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828778847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828778847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828778847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828778847),msg_a(alice,bob,sid_828778847)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778847),g))),msg_a(alice,bob,sid_828778847)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828778847).
attacker(msg_a(alice,bob,sid_828778847)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828778847).
So the attacker may know msg_a(alice,bob,sid_828778847) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828778847)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778850]),msg_a(alice,bob,sid[!1 = @sid_828778850]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828778850]))
Abbreviations:
sid_828778902 = sid[!1 = @sid_828778878]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828778902,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828778902,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828778902,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828778902),msg_a(alice,bob,sid_828778902)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828778902),g))),msg_a(alice,bob,sid_828778902)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828778902).
attacker(msg_a(alice,bob,sid_828778902)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828778902).
So the attacker may know msg_a(alice,bob,sid_828778902) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828778902)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778905]),msg_b(bob,alice,sid[!1 = @sid_828778905]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778906]),msg_a(alice,bob,sid[!1 = @sid_828778906]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828778906]),msg_b(bob,alice,sid[!1 = @sid_828778905])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778914]),msg_b(bob,alice,sid[!1 = @sid_828778914]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778915]),msg_a(alice,bob,sid[!1 = @sid_828778915]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828778915]),msg_b(bob,alice,sid[!1 = @sid_828778914])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778924]),msg_b(bob,alice,sid[!1 = @sid_828778924]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778925]),msg_a(alice,bob,sid[!1 = @sid_828778925]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828778925]),msg_b(bob,alice,sid[!1 = @sid_828778924])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778934]),msg_b(bob,alice,sid[!1 = @sid_828778934]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778935]),msg_a(alice,bob,sid[!1 = @sid_828778935]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828778935]),msg_b(bob,alice,sid[!1 = @sid_828778934])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778943]),msg_b(bob,alice,sid[!1 = @sid_828778943]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778944]),msg_a(alice,bob,sid[!1 = @sid_828778944]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828778944]),msg_b(bob,alice,sid[!1 = @sid_828778943])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828778968]),msg_c(alice,bob,sid[!1 = @sid_828778968]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778969]),msg_b(bob,alice,sid[!1 = @sid_828778969]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778968]),msg_a(alice,bob,sid[!1 = @sid_828778968]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828778969]),msg_c(alice,bob,sid[!1 = @sid_828778968])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828778977]),msg_c(alice,bob,sid[!1 = @sid_828778977]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778978]),msg_b(bob,alice,sid[!1 = @sid_828778978]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778977]),msg_a(alice,bob,sid[!1 = @sid_828778977]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828778978]),msg_c(alice,bob,sid[!1 = @sid_828778977])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828778987]),msg_c(alice,bob,sid[!1 = @sid_828778987]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778988]),msg_b(bob,alice,sid[!1 = @sid_828778988]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778987]),msg_a(alice,bob,sid[!1 = @sid_828778987]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828778988]),msg_c(alice,bob,sid[!1 = @sid_828778987])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1234,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828778997]),msg_c(alice,bob,sid[!1 = @sid_828778997]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828778998]),msg_b(bob,alice,sid[!1 = @sid_828778998]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778997]),msg_a(alice,bob,sid[!1 = @sid_828778997]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828778998]),msg_c(alice,bob,sid[!1 = @sid_828778997])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779006]),msg_c(alice,bob,sid[!1 = @sid_828779006]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779007]),msg_b(bob,alice,sid[!1 = @sid_828779007]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779006]),msg_a(alice,bob,sid[!1 = @sid_828779006]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828779007]),msg_c(alice,bob,sid[!1 = @sid_828779006])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779032]),msg_d(bob,alice,sid[!1 = @sid_828779032]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779033]),msg_c(alice,bob,sid[!1 = @sid_828779033]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779032]),msg_b(bob,alice,sid[!1 = @sid_828779032]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779033]),msg_a(alice,bob,sid[!1 = @sid_828779033]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779033]),msg_d(bob,alice,sid[!1 = @sid_828779032])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779041]),msg_d(bob,alice,sid[!1 = @sid_828779041]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779042]),msg_c(alice,bob,sid[!1 = @sid_828779042]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779041]),msg_b(bob,alice,sid[!1 = @sid_828779041]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779042]),msg_a(alice,bob,sid[!1 = @sid_828779042]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779042]),msg_d(bob,alice,sid[!1 = @sid_828779041])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779051]),msg_d(bob,alice,sid[!1 = @sid_828779051]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779052]),msg_c(alice,bob,sid[!1 = @sid_828779052]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779051]),msg_b(bob,alice,sid[!1 = @sid_828779051]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779052]),msg_a(alice,bob,sid[!1 = @sid_828779052]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779052]),msg_d(bob,alice,sid[!1 = @sid_828779051])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1234,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779061]),msg_d(bob,alice,sid[!1 = @sid_828779061]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779062]),msg_c(alice,bob,sid[!1 = @sid_828779062]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779061]),msg_b(bob,alice,sid[!1 = @sid_828779061]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779062]),msg_a(alice,bob,sid[!1 = @sid_828779062]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779062]),msg_d(bob,alice,sid[!1 = @sid_828779061])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779070]),msg_d(bob,alice,sid[!1 = @sid_828779070]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779071]),msg_c(alice,bob,sid[!1 = @sid_828779071]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779070]),msg_b(bob,alice,sid[!1 = @sid_828779070]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779071]),msg_a(alice,bob,sid[!1 = @sid_828779071]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779071]),msg_d(bob,alice,sid[!1 = @sid_828779070])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779093]),msg_d(bob,alice,sid[!1 = @sid_828779093]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779094]),msg_c(alice,bob,sid[!1 = @sid_828779094]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779093]),msg_b(bob,alice,sid[!1 = @sid_828779093]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779094]),msg_a(alice,bob,sid[!1 = @sid_828779094]))) -> end(RecvEnd(true))
Abbreviations:
sid_828779326 = sid[!1 = @sid_828779315]
sid_828779327 = sid[!1 = @sid_828779272]

1. The entry statestore(alice,bob,sid_828779326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828779326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_828779326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779326),msg_a(alice,bob,sid_828779326)) may be executed at {40}.
So the entry statestore(alice,bob,sid_828779326,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {41}.
table(statestore(alice,bob,sid_828779326,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_828779327,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828779327,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_828779326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779326),msg_a(alice,bob,sid_828779326)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))).

5. The entry statestore(bob,alice,sid_828779327,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))) that may be sent on channel pub by 4 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_828779327,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {354}.
table(statestore(bob,alice,sid_828779327,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_828779327,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {425}.
The event SendMsg(bob,alice,stagepack_b(sid_828779327),msg_b(bob,alice,sid_828779327)) may be executed at {422}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))) may be sent on channel pub at output {424}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))).

7. The entry statestore(alice,bob,sid_828779326,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {113}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))) that may be sent on channel pub by 6 may be received at input {44}.
So the entry statestore(alice,bob,sid_828779326,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {112}.
table(statestore(alice,bob,sid_828779326,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_828779326,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {133}.
The event SendMsg(alice,bob,stagepack_c(sid_828779326),msg_c(alice,bob,sid_828779326)) may be executed at {130}.
So the entry statestore(alice,bob,sid_828779326,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {131}.
table(statestore(alice,bob,sid_828779326,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_828779327,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {425}.
The event SendMsg(bob,alice,stagepack_b(sid_828779327),msg_b(bob,alice,sid_828779327)) may be executed at {422}.
So the entry statestore(bob,alice,sid_828779327,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_e(bob,alice,sid_828779327)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {423}.
table(statestore(bob,alice,sid_828779327,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_e(bob,alice,sid_828779327)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_828779326,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {133}.
The event SendMsg(alice,bob,stagepack_c(sid_828779326),msg_c(alice,bob,sid_828779326)) may be executed at {130}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326))) may be sent on channel pub at output {132}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))).

11. The entry statestore(bob,alice,sid_828779327,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_e(bob,alice,sid_828779327)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 9 may be read at get {446}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326))) that may be sent on channel pub by 10 may be received at input {428}.
So the entry statestore(bob,alice,sid_828779327,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_e(bob,alice,sid_828779327)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {445}.
table(statestore(bob,alice,sid_828779327,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_e(bob,alice,sid_828779327)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_828779327,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_e(bob,alice,sid_828779327)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 11 may be read at get {465}.
The event SendMsg(bob,alice,stagepack_d(sid_828779327),msg_d(bob,alice,sid_828779327)) may be executed at {463}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326))),msg_d(bob,alice,sid_828779327))) may be sent on channel pub at output {464}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326))),msg_d(bob,alice,sid_828779327)))).

13. The entry statestore(alice,bob,sid_828779326,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779326),g)),key_e(alice,bob,sid_828779326)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 8 may be read at get {154}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),msg_a(alice,bob,sid_828779326))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779326),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779327),g))),dhexp_real(key_e(bob,alice,sid_828779327),dhexp_real(key_e(alice,bob,sid_828779326),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779326),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779327))),msg_c(alice,bob,sid_828779326))),msg_d(bob,alice,sid_828779327))) that may be sent on channel pub by 12 may be received at input {136}.
So event RecvEnd(true) may be executed at {153}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
