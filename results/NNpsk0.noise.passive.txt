File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NNpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NNpsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 268, character 6:
Warning: identifier e rebound.
File "NNpsk0.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ne rebound.
File "NNpsk0.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 272, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 272, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 280, character 6:
Warning: identifier e rebound.
File "NNpsk0.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ne rebound.
File "NNpsk0.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 285, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 294, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 302, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 302, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 303, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 312, characters 6-7:
Warning: identifier re rebound.
File "NNpsk0.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 317, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 325, characters 6-7:
Warning: identifier re rebound.
File "NNpsk0.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 331, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 507, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 509, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 500, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 501, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 294, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 494, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 325, characters 6-7:
Warning: identifier re rebound.
File "NNpsk0.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 331, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 487, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 268, character 6:
Warning: identifier e rebound.
File "NNpsk0.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ne rebound.
File "NNpsk0.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 272, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 272, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NNpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 555, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 556, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 302, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 302, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 303, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 547, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 549, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 541, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 280, character 6:
Warning: identifier e rebound.
File "NNpsk0.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ne rebound.
File "NNpsk0.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 285, characters 26-35:
Warning: identifier ciphertext rebound.
File "NNpsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 535, characters 8-9:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 312, characters 6-7:
Warning: identifier re rebound.
File "NNpsk0.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "NNpsk0.noise.passive.pv", line 317, characters 7-8:
Warning: identifier hs rebound.
File "NNpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "NNpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "NNpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "NNpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_496: keypair = keypairpack(empty,empty) in
    (
        {5}let e_497: keypair = keypairpack(empty,empty) in
        {6}let rs_498: key = empty in
        {7}let re_499: key = empty in
        {8}let v_500: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_501: key = catch-fail(v_500) in
        {10}let v_502: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_503: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_500) then (if not-caught-fail(v_501) then (if not-caught-fail(v_502) then symmetricstatepack(v_502,v_501,v_500) else fail-any) else fail-any) else fail-any))) in
        {12}let v_504: symmetricstate = catch-fail((if success?((if not-caught-fail(v_500) then (if not-caught-fail(v_501) then (if not-caught-fail(v_502) then symmetricstatepack(v_502,v_501,v_500) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then symmetricstatepack(1-proj-3-tuple(v_503),2-proj-3-tuple(v_503),hash(3-proj-3-tuple(v_503),empty)) else fail-any) else fail-any)) in
        {13}let hs: handshakestate = (if not-caught-fail(v_504) then handshakestatepack(v_504,s_496,e_497,rs_498,re_499,key_psk(alice,bob),true) else fail-any) in
        {14}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {51}get statestore(=alice,=bob,=sid,statepack_a(hs_505: handshakestate)) in
        {15}let v_506: bitstring = catch-fail(handshakestateunpack(hs_505)) in
        {16}let v_507: bitstring = catch-fail((empty,empty,empty)) in
        {17}let v_508: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_506))) in
        {18}let v_509: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_508),6-proj-7-tuple(v_506))) in
        {19}let v_510: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_508),6-proj-7-tuple(v_506))) in
        {20}let v_511: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_508),6-proj-7-tuple(v_506))) in
        {21}let v_512: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_506)) && success?(2-proj-3-tuple(v_508))) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (if not-caught-fail(v_511) then (v_509,v_510,v_511) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {22}let v_513: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_508),1-proj-3-tuple(v_512),3-proj-3-tuple(v_508)))) in
        {23}let v_514: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_512)) && success?(symmetricstatepack(1-proj-3-tuple(v_508),1-proj-3-tuple(v_512),3-proj-3-tuple(v_508)))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-3-tuple(v_513))))) then symmetricstatepack(1-proj-3-tuple(v_513),2-proj-3-tuple(v_513),hash(3-proj-3-tuple(v_513),2-proj-3-tuple(v_512))) else fail-any) else fail-any))) in
        {24}let v_515: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_506)) && success?(1-proj-7-tuple(v_506))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_512)) then cipherstatepack(3-proj-3-tuple(v_512),minnonce) else fail-any),1-proj-3-tuple(v_512),3-proj-3-tuple(v_514)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {25}let v_516: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {26}let v_517: keypair = catch-fail((if not-caught-fail(v_516) then keypairpack(validkey(v_516),key_e(alice,bob,sid)) else fail-any)) in
        {27}let v_518: bitstring = catch-fail(getpublickey(v_517)) in
        {28}let v_519: bitstring = catch-fail(symmetricstateunpack(v_515)) in
        {29}let v_520: symmetricstate = catch-fail((if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then symmetricstatepack(1-proj-3-tuple(v_519),2-proj-3-tuple(v_519),hash(3-proj-3-tuple(v_519),v_518)) else fail-any)) in
        {30}let v_521: bitstring = catch-fail(symmetricstateunpack(v_520)) in
        {31}let v_522: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_521),getpublickey(v_517))) in
        {32}let v_523: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_521),getpublickey(v_517))) in
        {33}let v_524: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_521),getpublickey(v_517))) in
        {34}let v_525: bitstring = catch-fail((if (success?(getpublickey(v_517)) && success?(2-proj-3-tuple(v_521))) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (v_522,v_523,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_526: symmetricstate = catch-fail((if success?(getpublickey(v_517)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_525)) then cipherstatepack(2-proj-3-tuple(v_525),minnonce) else fail-any),1-proj-3-tuple(v_525),3-proj-3-tuple(v_521)) else fail-any) else fail-any) else fail-any)) in
        {36}let v_527: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {37}let v_528: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_527))) in
        {38}let v_529: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_528),2-proj-2-tuple(v_528),3-proj-3-tuple(v_527),msg_a(alice,bob,sid))) in
        {39}let v_530: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_527))) in
        {40}let v_531: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_528))) && success?(1-proj-3-tuple(v_527))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then cipherstatepack(1-proj-2-tuple(v_530),increment_nonce(2-proj-2-tuple(v_528))) else fail-any) else fail-any)) in
        {41}let v_532: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_527)) && success?(1-proj-3-tuple(v_527))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-2-tuple(v_528))))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_531) then (v_531,v_529) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_533: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_532),2-proj-3-tuple(v_527),3-proj-3-tuple(v_527)))) in
        {43}let v_534: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_532)) && success?(symmetricstatepack(1-proj-2-tuple(v_532),2-proj-3-tuple(v_527),3-proj-3-tuple(v_527)))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then symmetricstatepack(1-proj-3-tuple(v_533),2-proj-3-tuple(v_533),hash(3-proj-3-tuple(v_533),2-proj-2-tuple(v_532))) else fail-any) else fail-any)) in
        {44}let v_535: bitstring = catch-fail((if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-2-tuple(v_532))))) then (if not-caught-fail(v_534) then (v_534,2-proj-2-tuple(v_532)) else fail-any) else fail-any) else fail-any)) in
        {45}let v_536: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_535),2-proj-7-tuple(v_506),v_517,4-proj-7-tuple(v_506),5-proj-7-tuple(v_506),6-proj-7-tuple(v_506),7-proj-7-tuple(v_506))) in
        {46}let v_537: bitstring = catch-fail(concat3(v_518,2-proj-3-tuple(v_507),2-proj-2-tuple(v_535))) in
        {47}let (hs_538: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-7-tuple(v_506))))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then (if not-caught-fail(v_515) then (if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (if not-caught-fail(v_520) then (if not-caught-fail(v_526) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (v_536,v_537) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {48}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {49}insert statestore(alice,bob,sid,statepack_b(hs_538));
        {50}out(pub, message_a)
    ) | (
        {94}get statestore(=alice,=bob,=sid,statepack_b(hs_539: handshakestate)) in
        {52}in(pub, message_b: bitstring);
        {53}let v_540: bitstring = catch-fail(handshakestateunpack(hs_539)) in
        {54}let v_541: bitstring = catch-fail(deconcat3(message_b)) in
        {55}let v_542: bool = catch-fail(true) in
        {56}let v_543: key = catch-fail(1-proj-3-tuple(v_541)) in
        {57}let v_544: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_540))) in
        {58}let v_545: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_540)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then symmetricstatepack(1-proj-3-tuple(v_544),2-proj-3-tuple(v_544),hash(3-proj-3-tuple(v_544),v_543)) else fail-any) else fail-any)) in
        {59}let v_546: bitstring = catch-fail(symmetricstateunpack(v_545)) in
        {60}let v_547: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_546),v_543)) in
        {61}let v_548: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_546),v_543)) in
        {62}let v_549: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_546),v_543)) in
        {63}let v_550: bitstring = catch-fail((if success?(2-proj-3-tuple(v_546)) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (v_547,v_548,v_549) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_551: symmetricstate = catch-fail((if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_550)) then cipherstatepack(2-proj-3-tuple(v_550),minnonce) else fail-any),1-proj-3-tuple(v_550),3-proj-3-tuple(v_546)) else fail-any) else fail-any)) in
        {65}let v_552: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_540))) in
        {66}let v_553: bitstring = catch-fail(symmetricstateunpack(v_551)) in
        {67}let v_554: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_553),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then dhexp(2-proj-2-tuple(v_552),v_543) else fail-any) else fail-any))) in
        {68}let v_555: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_553),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then dhexp(2-proj-2-tuple(v_552),v_543) else fail-any) else fail-any))) in
        {69}let v_556: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_553),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then dhexp(2-proj-2-tuple(v_552),v_543) else fail-any) else fail-any))) in
        {70}let v_557: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then dhexp(2-proj-2-tuple(v_552),v_543) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_553))) then (if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (v_554,v_555,v_556) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_558: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then dhexp(2-proj-2-tuple(v_552),v_543) else fail-any) else fail-any)) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_557)) then cipherstatepack(2-proj-3-tuple(v_557),minnonce) else fail-any),1-proj-3-tuple(v_557),3-proj-3-tuple(v_553)) else fail-any) else fail-any) else fail-any)) in
        {72}let v_559: bitstring = catch-fail(symmetricstateunpack(v_558)) in
        {73}let v_560: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_559))) in
        {74}let v_561: aead = catch-fail(decrypt(1-proj-2-tuple(v_560),2-proj-2-tuple(v_560),3-proj-3-tuple(v_559),3-proj-3-tuple(v_541))) in
        {75}let v_562: bitstring = catch-fail(aeadunpack(v_561)) in
        {76}let v_563: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_559))) in
        {77}let v_564: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_560))) && success?(1-proj-3-tuple(v_559))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then cipherstatepack(1-proj-2-tuple(v_563),increment_nonce(2-proj-2-tuple(v_560))) else fail-any) else fail-any)) in
        {78}let v_565: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_541)) && (success?(3-proj-3-tuple(v_559)) && success?(1-proj-3-tuple(v_559)))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_561) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then (if not-caught-fail(v_564) then (v_564,3-proj-3-tuple(v_562),1-proj-3-tuple(v_562)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_566: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_559),3-proj-3-tuple(v_559)))) in
        {80}let v_567: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_541)) && success?(symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_559),3-proj-3-tuple(v_559)))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_566),hash(3-proj-3-tuple(v_566),3-proj-3-tuple(v_541))) else fail-any) else fail-any)) in
        {81}let v_568: bitstring = catch-fail((if success?(3-proj-3-tuple(v_541)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if not-caught-fail(v_567) then (v_567,2-proj-3-tuple(v_565),3-proj-3-tuple(v_565)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let v_569: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_568),2-proj-7-tuple(v_540),3-proj-7-tuple(v_540),4-proj-7-tuple(v_540),v_543,6-proj-7-tuple(v_540),7-proj-7-tuple(v_540))) in
        {83}let v_570: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_568))) in
        {84}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),zero)) in
        {85}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),zero)) in
        {86}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),zero)) in
        {87}let v_574: bitstring = catch-fail((if success?(2-proj-3-tuple(v_570)) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_575: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_574)) then cipherstatepack(1-proj-3-tuple(v_574),minnonce) else fail-any)) in
        {89}let v_576: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any)) in
        {90}let v_577: bitstring = catch-fail((if success?(1-proj-3-tuple(v_568)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (1-proj-3-tuple(v_568),v_575,v_576) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let (hs_578: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-7-tuple(v_540))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (if not-caught-fail(v_545) then (if not-caught-fail(v_551) then (if not-caught-fail(v_558) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then (if (v_542 && 3-proj-3-tuple(v_568)) then (if not-caught-fail(v_569) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (v_569,2-proj-3-tuple(v_568),true,2-proj-3-tuple(v_577),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {92}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {93}insert statestore(alice,bob,sid,statepack_c(hs_578,cs1,cs2))
    ) | (
        {95}!
        {114}get statestore(=alice,=bob,=sid,statepack_c(hs_579: handshakestate,cs1_580: cipherstate,cs2_581: cipherstate)) in
        {96}let hs_582: handshakestate = handshakestatesetcs(hs_579,cs1_580) in
        {97}let v_583: bitstring = catch-fail(handshakestateunpack(hs_582)) in
        {98}let v_584: bitstring = catch-fail((empty,empty,empty)) in
        {99}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_583))) in
        {100}let v_586: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_585))) in
        {101}let v_587: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_586),2-proj-2-tuple(v_586),3-proj-3-tuple(v_585),msg_c(alice,bob,sid))) in
        {102}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_585))) in
        {103}let v_589: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_586))) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then cipherstatepack(1-proj-2-tuple(v_588),increment_nonce(2-proj-2-tuple(v_586))) else fail-any) else fail-any)) in
        {104}let v_590: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_585)) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then (if not-caught-fail(v_587) then (if not-caught-fail(v_589) then (v_589,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let v_591: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_590),2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)))) in
        {106}let v_592: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_590)) && success?(symmetricstatepack(1-proj-2-tuple(v_590),2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),hash(3-proj-3-tuple(v_591),2-proj-2-tuple(v_590))) else fail-any) else fail-any)) in
        {107}let v_593: bitstring = catch-fail((if success?(1-proj-7-tuple(v_583)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_592) then (v_592,2-proj-2-tuple(v_590)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_594: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_593),2-proj-7-tuple(v_583),3-proj-7-tuple(v_583),4-proj-7-tuple(v_583),5-proj-7-tuple(v_583),6-proj-7-tuple(v_583),7-proj-7-tuple(v_583))) in
        {109}let v_595: bitstring = catch-fail(concat3(1-proj-3-tuple(v_584),2-proj-3-tuple(v_584),2-proj-2-tuple(v_593))) in
        {110}let (hs_596: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-7-tuple(v_583))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then (v_594,v_595) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {111}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {112}insert statestore(alice,bob,sid,statepack_d(hs_596,handshakestategetcs(hs_596),cs2_581));
        {113}out(pub, message_c)
    ) | (
        {115}!
        {135}get statestore(=alice,=bob,=sid,statepack_d(hs_597: handshakestate,cs1_598: cipherstate,cs2_599: cipherstate)) in
        {116}let hs_600: handshakestate = handshakestatesetcs(hs_597,cs2_599) in
        {117}in(pub, message_d: bitstring);
        {118}let v_601: bitstring = catch-fail(handshakestateunpack(hs_600)) in
        {119}let v_602: bitstring = catch-fail(deconcat3(message_d)) in
        {120}let v_603: bool = catch-fail(true) in
        {121}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_601))) in
        {122}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {123}let v_606: aead = catch-fail(decrypt(1-proj-2-tuple(v_605),2-proj-2-tuple(v_605),3-proj-3-tuple(v_604),3-proj-3-tuple(v_602))) in
        {124}let v_607: bitstring = catch-fail(aeadunpack(v_606)) in
        {125}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {126}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_605))) && success?(1-proj-3-tuple(v_604))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_605))) else fail-any) else fail-any)) in
        {127}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && (success?(3-proj-3-tuple(v_604)) && success?(1-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,3-proj-3-tuple(v_607),1-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {128}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) in
        {129}let v_612: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),3-proj-3-tuple(v_602))) else fail-any) else fail-any)) in
        {130}let v_613: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(1-proj-7-tuple(v_601))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {131}let v_614: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_613),2-proj-7-tuple(v_601),3-proj-7-tuple(v_601),4-proj-7-tuple(v_601),5-proj-7-tuple(v_601),6-proj-7-tuple(v_601),7-proj-7-tuple(v_601))) in
        {132}let (hs_615: handshakestate,plaintext_d: bitstring,valid_616: bool) = (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-7-tuple(v_601))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (v_603 && 3-proj-3-tuple(v_613)) then (if not-caught-fail(v_614) then (v_614,2-proj-3-tuple(v_613),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {133}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {134}event RecvEnd(valid_616)
    ) | (
        {136}event LeakPsk(phase0,alice,bob);
        {137}out(pub, key_psk(alice,bob))
    ) | (
        {138}phase 1;
        {139}event LeakPsk(phase1,alice,bob);
        {140}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {141}let s_617: keypair = keypairpack(empty,empty) in
    (
        {142}let e_618: keypair = keypairpack(empty,empty) in
        {143}let rs_619: key = empty in
        {144}let re_620: key = empty in
        {145}let v_621: bitstring = catch-fail(hash(somename,empty)) in
        {146}let v_622: key = catch-fail(v_621) in
        {147}let v_623: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {148}let v_624: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then symmetricstatepack(v_623,v_622,v_621) else fail-any) else fail-any) else fail-any))) in
        {149}let v_625: symmetricstate = catch-fail((if success?((if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then symmetricstatepack(v_623,v_622,v_621) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_624),hash(3-proj-3-tuple(v_624),empty)) else fail-any) else fail-any)) in
        {150}let hs_626: handshakestate = (if not-caught-fail(v_625) then handshakestatepack(v_625,s_617,e_618,rs_619,re_620,key_psk(alice,charlie),true) else fail-any) in
        {151}insert statestore(alice,charlie,sid,statepack_a(hs_626))
    ) | (
        {188}get statestore(=alice,=charlie,=sid,statepack_a(hs_627: handshakestate)) in
        {152}let v_628: bitstring = catch-fail(handshakestateunpack(hs_627)) in
        {153}let v_629: bitstring = catch-fail((empty,empty,empty)) in
        {154}let v_630: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_628))) in
        {155}let v_631: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_630),6-proj-7-tuple(v_628))) in
        {156}let v_632: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_630),6-proj-7-tuple(v_628))) in
        {157}let v_633: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_630),6-proj-7-tuple(v_628))) in
        {158}let v_634: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_628)) && success?(2-proj-3-tuple(v_630))) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (if not-caught-fail(v_633) then (v_631,v_632,v_633) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_635: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_630),1-proj-3-tuple(v_634),3-proj-3-tuple(v_630)))) in
        {160}let v_636: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_634)) && success?(symmetricstatepack(1-proj-3-tuple(v_630),1-proj-3-tuple(v_634),3-proj-3-tuple(v_630)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_635),hash(3-proj-3-tuple(v_635),2-proj-3-tuple(v_634))) else fail-any) else fail-any))) in
        {161}let v_637: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_628)) && success?(1-proj-7-tuple(v_628))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_634)) then cipherstatepack(3-proj-3-tuple(v_634),minnonce) else fail-any),1-proj-3-tuple(v_634),3-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let v_638: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {163}let v_639: keypair = catch-fail((if not-caught-fail(v_638) then keypairpack(validkey(v_638),key_e(alice,charlie,sid)) else fail-any)) in
        {164}let v_640: bitstring = catch-fail(getpublickey(v_639)) in
        {165}let v_641: bitstring = catch-fail(symmetricstateunpack(v_637)) in
        {166}let v_642: symmetricstate = catch-fail((if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),v_640)) else fail-any)) in
        {167}let v_643: bitstring = catch-fail(symmetricstateunpack(v_642)) in
        {168}let v_644: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_643),getpublickey(v_639))) in
        {169}let v_645: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_643),getpublickey(v_639))) in
        {170}let v_646: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_643),getpublickey(v_639))) in
        {171}let v_647: bitstring = catch-fail((if (success?(getpublickey(v_639)) && success?(2-proj-3-tuple(v_643))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (v_644,v_645,v_646) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {172}let v_648: symmetricstate = catch-fail((if success?(getpublickey(v_639)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_647)) then cipherstatepack(2-proj-3-tuple(v_647),minnonce) else fail-any),1-proj-3-tuple(v_647),3-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any)) in
        {173}let v_649: bitstring = catch-fail(symmetricstateunpack(v_648)) in
        {174}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {175}let v_651: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_650),2-proj-2-tuple(v_650),3-proj-3-tuple(v_649),msg_a(alice,charlie,sid))) in
        {176}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {177}let v_653: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_650))) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then cipherstatepack(1-proj-2-tuple(v_652),increment_nonce(2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {178}let v_654: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_649)) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_653) then (v_653,v_651) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_655: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_654),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) in
        {180}let v_656: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_654)) && success?(symmetricstatepack(1-proj-2-tuple(v_654),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),2-proj-2-tuple(v_654))) else fail-any) else fail-any)) in
        {181}let v_657: bitstring = catch-fail((if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then (if not-caught-fail(v_656) then (v_656,2-proj-2-tuple(v_654)) else fail-any) else fail-any) else fail-any)) in
        {182}let v_658: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_657),2-proj-7-tuple(v_628),v_639,4-proj-7-tuple(v_628),5-proj-7-tuple(v_628),6-proj-7-tuple(v_628),7-proj-7-tuple(v_628))) in
        {183}let v_659: bitstring = catch-fail(concat3(v_640,2-proj-3-tuple(v_629),2-proj-2-tuple(v_657))) in
        {184}let (hs_660: handshakestate,message_a_661: bitstring) = (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-7-tuple(v_628))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (if not-caught-fail(v_642) then (if not-caught-fail(v_648) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (v_658,v_659) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {185}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {186}insert statestore(alice,charlie,sid,statepack_b(hs_660));
        {187}out(pub, message_a_661)
    ) | (
        {231}get statestore(=alice,=charlie,=sid,statepack_b(hs_662: handshakestate)) in
        {189}in(pub, message_b_663: bitstring);
        {190}let v_664: bitstring = catch-fail(handshakestateunpack(hs_662)) in
        {191}let v_665: bitstring = catch-fail(deconcat3(message_b_663)) in
        {192}let v_666: bool = catch-fail(true) in
        {193}let v_667: key = catch-fail(1-proj-3-tuple(v_665)) in
        {194}let v_668: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_664))) in
        {195}let v_669: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_664)) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_668),hash(3-proj-3-tuple(v_668),v_667)) else fail-any) else fail-any)) in
        {196}let v_670: bitstring = catch-fail(symmetricstateunpack(v_669)) in
        {197}let v_671: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_670),v_667)) in
        {198}let v_672: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_670),v_667)) in
        {199}let v_673: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_670),v_667)) in
        {200}let v_674: bitstring = catch-fail((if success?(2-proj-3-tuple(v_670)) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (if not-caught-fail(v_673) then (v_671,v_672,v_673) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_675: symmetricstate = catch-fail((if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_674)) then cipherstatepack(2-proj-3-tuple(v_674),minnonce) else fail-any),1-proj-3-tuple(v_674),3-proj-3-tuple(v_670)) else fail-any) else fail-any)) in
        {202}let v_676: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_664))) in
        {203}let v_677: bitstring = catch-fail(symmetricstateunpack(v_675)) in
        {204}let v_678: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_677),(if success?(3-proj-7-tuple(v_664)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_667) else fail-any) else fail-any))) in
        {205}let v_679: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_677),(if success?(3-proj-7-tuple(v_664)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_667) else fail-any) else fail-any))) in
        {206}let v_680: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_677),(if success?(3-proj-7-tuple(v_664)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_667) else fail-any) else fail-any))) in
        {207}let v_681: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_664)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_667) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_677))) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (v_678,v_679,v_680) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_682: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_664)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_667) else fail-any) else fail-any)) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_681)) then cipherstatepack(2-proj-3-tuple(v_681),minnonce) else fail-any),1-proj-3-tuple(v_681),3-proj-3-tuple(v_677)) else fail-any) else fail-any) else fail-any)) in
        {209}let v_683: bitstring = catch-fail(symmetricstateunpack(v_682)) in
        {210}let v_684: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_683))) in
        {211}let v_685: aead = catch-fail(decrypt(1-proj-2-tuple(v_684),2-proj-2-tuple(v_684),3-proj-3-tuple(v_683),3-proj-3-tuple(v_665))) in
        {212}let v_686: bitstring = catch-fail(aeadunpack(v_685)) in
        {213}let v_687: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_683))) in
        {214}let v_688: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_684))) && success?(1-proj-3-tuple(v_683))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then cipherstatepack(1-proj-2-tuple(v_687),increment_nonce(2-proj-2-tuple(v_684))) else fail-any) else fail-any)) in
        {215}let v_689: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && (success?(3-proj-3-tuple(v_683)) && success?(1-proj-3-tuple(v_683)))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then (if not-caught-fail(v_685) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if not-caught-fail(v_688) then (v_688,3-proj-3-tuple(v_686),1-proj-3-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_690: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_683),3-proj-3-tuple(v_683)))) in
        {217}let v_691: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_683),3-proj-3-tuple(v_683)))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then symmetricstatepack(1-proj-3-tuple(v_690),2-proj-3-tuple(v_690),hash(3-proj-3-tuple(v_690),3-proj-3-tuple(v_665))) else fail-any) else fail-any)) in
        {218}let v_692: bitstring = catch-fail((if success?(3-proj-3-tuple(v_665)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if not-caught-fail(v_691) then (v_691,2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_693: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_692),2-proj-7-tuple(v_664),3-proj-7-tuple(v_664),4-proj-7-tuple(v_664),v_667,6-proj-7-tuple(v_664),7-proj-7-tuple(v_664))) in
        {220}let v_694: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_692))) in
        {221}let v_695: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_694),zero)) in
        {222}let v_696: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_694),zero)) in
        {223}let v_697: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_694),zero)) in
        {224}let v_698: bitstring = catch-fail((if success?(2-proj-3-tuple(v_694)) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (v_695,v_696,v_697) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_699: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_698)) then cipherstatepack(1-proj-3-tuple(v_698),minnonce) else fail-any)) in
        {226}let v_700: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_698)) then cipherstatepack(2-proj-3-tuple(v_698),minnonce) else fail-any)) in
        {227}let v_701: bitstring = catch-fail((if success?(1-proj-3-tuple(v_692)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (1-proj-3-tuple(v_692),v_699,v_700) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let (hs_702: handshakestate,plaintext_b_703: bitstring,valid_704: bool,cs1_705: cipherstate,cs2_706: cipherstate) = (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-7-tuple(v_664))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (if not-caught-fail(v_669) then (if not-caught-fail(v_675) then (if not-caught-fail(v_682) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then (if (v_666 && 3-proj-3-tuple(v_692)) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (v_693,2-proj-3-tuple(v_692),true,2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {229}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_703);
        {230}insert statestore(alice,charlie,sid,statepack_c(hs_702,cs1_705,cs2_706))
    ) | (
        {232}!
        {251}get statestore(=alice,=charlie,=sid,statepack_c(hs_707: handshakestate,cs1_708: cipherstate,cs2_709: cipherstate)) in
        {233}let hs_710: handshakestate = handshakestatesetcs(hs_707,cs1_708) in
        {234}let v_711: bitstring = catch-fail(handshakestateunpack(hs_710)) in
        {235}let v_712: bitstring = catch-fail((empty,empty,empty)) in
        {236}let v_713: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_711))) in
        {237}let v_714: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_713))) in
        {238}let v_715: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_714),2-proj-2-tuple(v_714),3-proj-3-tuple(v_713),msg_c(alice,charlie,sid))) in
        {239}let v_716: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_713))) in
        {240}let v_717: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_714))) && success?(1-proj-3-tuple(v_713))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then cipherstatepack(1-proj-2-tuple(v_716),increment_nonce(2-proj-2-tuple(v_714))) else fail-any) else fail-any)) in
        {241}let v_718: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_713)) && success?(1-proj-3-tuple(v_713))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then (if not-caught-fail(v_715) then (if not-caught-fail(v_717) then (v_717,v_715) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {242}let v_719: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_718),2-proj-3-tuple(v_713),3-proj-3-tuple(v_713)))) in
        {243}let v_720: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_718)) && success?(symmetricstatepack(1-proj-2-tuple(v_718),2-proj-3-tuple(v_713),3-proj-3-tuple(v_713)))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),2-proj-2-tuple(v_718))) else fail-any) else fail-any)) in
        {244}let v_721: bitstring = catch-fail((if success?(1-proj-7-tuple(v_711)) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then (if not-caught-fail(v_720) then (v_720,2-proj-2-tuple(v_718)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_722: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_721),2-proj-7-tuple(v_711),3-proj-7-tuple(v_711),4-proj-7-tuple(v_711),5-proj-7-tuple(v_711),6-proj-7-tuple(v_711),7-proj-7-tuple(v_711))) in
        {246}let v_723: bitstring = catch-fail(concat3(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),2-proj-2-tuple(v_721))) in
        {247}let (hs_724: handshakestate,message_c_725: bitstring) = (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-7-tuple(v_711))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (v_722,v_723) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {248}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {249}insert statestore(alice,charlie,sid,statepack_d(hs_724,handshakestategetcs(hs_724),cs2_709));
        {250}out(pub, message_c_725)
    ) | (
        {252}!
        {272}get statestore(=alice,=charlie,=sid,statepack_d(hs_726: handshakestate,cs1_727: cipherstate,cs2_728: cipherstate)) in
        {253}let hs_729: handshakestate = handshakestatesetcs(hs_726,cs2_728) in
        {254}in(pub, message_d_730: bitstring);
        {255}let v_731: bitstring = catch-fail(handshakestateunpack(hs_729)) in
        {256}let v_732: bitstring = catch-fail(deconcat3(message_d_730)) in
        {257}let v_733: bool = catch-fail(true) in
        {258}let v_734: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_731))) in
        {259}let v_735: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_734))) in
        {260}let v_736: aead = catch-fail(decrypt(1-proj-2-tuple(v_735),2-proj-2-tuple(v_735),3-proj-3-tuple(v_734),3-proj-3-tuple(v_732))) in
        {261}let v_737: bitstring = catch-fail(aeadunpack(v_736)) in
        {262}let v_738: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_734))) in
        {263}let v_739: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_735))) && success?(1-proj-3-tuple(v_734))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then cipherstatepack(1-proj-2-tuple(v_738),increment_nonce(2-proj-2-tuple(v_735))) else fail-any) else fail-any)) in
        {264}let v_740: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_732)) && (success?(3-proj-3-tuple(v_734)) && success?(1-proj-3-tuple(v_734)))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then (if not-caught-fail(v_736) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (v_739,3-proj-3-tuple(v_737),1-proj-3-tuple(v_737)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {265}let v_741: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_734),3-proj-3-tuple(v_734)))) in
        {266}let v_742: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_732)) && success?(symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_734),3-proj-3-tuple(v_734)))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_741),hash(3-proj-3-tuple(v_741),3-proj-3-tuple(v_732))) else fail-any) else fail-any)) in
        {267}let v_743: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_732)) && success?(1-proj-7-tuple(v_731))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if not-caught-fail(v_742) then (v_742,2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {268}let v_744: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_743),2-proj-7-tuple(v_731),3-proj-7-tuple(v_731),4-proj-7-tuple(v_731),5-proj-7-tuple(v_731),6-proj-7-tuple(v_731),7-proj-7-tuple(v_731))) in
        {269}let (hs_745: handshakestate,plaintext_d_746: bitstring,valid_747: bool) = (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-7-tuple(v_731))))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_733) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if (v_733 && 3-proj-3-tuple(v_743)) then (if not-caught-fail(v_744) then (v_744,2-proj-3-tuple(v_743),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {270}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_746);
        {271}event RecvEnd(valid_747)
    ) | (
        {273}event LeakPsk(phase0,alice,charlie);
        {274}out(pub, key_psk(alice,charlie))
    ) | (
        {275}phase 1;
        {276}event LeakPsk(phase1,alice,charlie);
        {277}out(pub, key_psk(alice,charlie))
    ) | (
        0
    )
) | (
    {278}let s_748: keypair = keypairpack(empty,empty) in
    (
        {279}let e_749: keypair = keypairpack(empty,empty) in
        {280}let rs_750: key = empty in
        {281}let re_751: key = empty in
        {282}let v_752: bitstring = catch-fail(hash(somename,empty)) in
        {283}let v_753: key = catch-fail(v_752) in
        {284}let v_754: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {285}let v_755: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then symmetricstatepack(v_754,v_753,v_752) else fail-any) else fail-any) else fail-any))) in
        {286}let v_756: symmetricstate = catch-fail((if success?((if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then symmetricstatepack(v_754,v_753,v_752) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_755),hash(3-proj-3-tuple(v_755),empty)) else fail-any) else fail-any)) in
        {287}let hs_757: handshakestate = (if not-caught-fail(v_756) then handshakestatepack(v_756,s_748,e_749,rs_750,re_751,key_psk(alice,bob),false) else fail-any) in
        {288}insert statestore(bob,alice,sid,statepack_a(hs_757))
    ) | (
        {324}get statestore(=bob,=alice,=sid,statepack_a(hs_758: handshakestate)) in
        {289}in(pub, message_a_759: bitstring);
        {290}let v_760: bitstring = catch-fail(handshakestateunpack(hs_758)) in
        {291}let v_761: bitstring = catch-fail(deconcat3(message_a_759)) in
        {292}let v_762: bool = catch-fail(true) in
        {293}let v_763: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_760))) in
        {294}let v_764: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_763),6-proj-7-tuple(v_760))) in
        {295}let v_765: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_763),6-proj-7-tuple(v_760))) in
        {296}let v_766: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_763),6-proj-7-tuple(v_760))) in
        {297}let v_767: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_760)) && success?(2-proj-3-tuple(v_763))) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (if not-caught-fail(v_766) then (v_764,v_765,v_766) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_768: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_763),1-proj-3-tuple(v_767),3-proj-3-tuple(v_763)))) in
        {299}let v_769: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_767)) && success?(symmetricstatepack(1-proj-3-tuple(v_763),1-proj-3-tuple(v_767),3-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),2-proj-3-tuple(v_767))) else fail-any) else fail-any))) in
        {300}let v_770: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_760)) && success?(1-proj-7-tuple(v_760))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_767)) then cipherstatepack(3-proj-3-tuple(v_767),minnonce) else fail-any),1-proj-3-tuple(v_767),3-proj-3-tuple(v_769)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_771: key = catch-fail(1-proj-3-tuple(v_761)) in
        {302}let v_772: bitstring = catch-fail(symmetricstateunpack(v_770)) in
        {303}let v_773: symmetricstate = catch-fail((if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_772),hash(3-proj-3-tuple(v_772),v_771)) else fail-any)) in
        {304}let v_774: bitstring = catch-fail(symmetricstateunpack(v_773)) in
        {305}let v_775: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_774),v_771)) in
        {306}let v_776: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_774),v_771)) in
        {307}let v_777: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_774),v_771)) in
        {308}let v_778: bitstring = catch-fail((if success?(2-proj-3-tuple(v_774)) then (if not-caught-fail(v_775) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (v_775,v_776,v_777) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {309}let v_779: symmetricstate = catch-fail((if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_778)) then cipherstatepack(2-proj-3-tuple(v_778),minnonce) else fail-any),1-proj-3-tuple(v_778),3-proj-3-tuple(v_774)) else fail-any) else fail-any)) in
        {310}let v_780: bitstring = catch-fail(symmetricstateunpack(v_779)) in
        {311}let v_781: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_780))) in
        {312}let v_782: aead = catch-fail(decrypt(1-proj-2-tuple(v_781),2-proj-2-tuple(v_781),3-proj-3-tuple(v_780),3-proj-3-tuple(v_761))) in
        {313}let v_783: bitstring = catch-fail(aeadunpack(v_782)) in
        {314}let v_784: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_780))) in
        {315}let v_785: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_781))) && success?(1-proj-3-tuple(v_780))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then cipherstatepack(1-proj-2-tuple(v_784),increment_nonce(2-proj-2-tuple(v_781))) else fail-any) else fail-any)) in
        {316}let v_786: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_761)) && (success?(3-proj-3-tuple(v_780)) && success?(1-proj-3-tuple(v_780)))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then (if not-caught-fail(v_782) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if not-caught-fail(v_785) then (v_785,3-proj-3-tuple(v_783),1-proj-3-tuple(v_783)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {317}let v_787: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_786),2-proj-3-tuple(v_780),3-proj-3-tuple(v_780)))) in
        {318}let v_788: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_761)) && success?(symmetricstatepack(1-proj-3-tuple(v_786),2-proj-3-tuple(v_780),3-proj-3-tuple(v_780)))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then symmetricstatepack(1-proj-3-tuple(v_787),2-proj-3-tuple(v_787),hash(3-proj-3-tuple(v_787),3-proj-3-tuple(v_761))) else fail-any) else fail-any)) in
        {319}let v_789: bitstring = catch-fail((if success?(3-proj-3-tuple(v_761)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if not-caught-fail(v_788) then (v_788,2-proj-3-tuple(v_786),3-proj-3-tuple(v_786)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {320}let v_790: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_789),2-proj-7-tuple(v_760),3-proj-7-tuple(v_760),4-proj-7-tuple(v_760),v_771,6-proj-7-tuple(v_760),7-proj-7-tuple(v_760))) in
        {321}let (hs_791: handshakestate,plaintext_a: bitstring,valid_792: bool) = (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-7-tuple(v_760))))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (if not-caught-fail(v_773) then (if not-caught-fail(v_779) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (v_762 && 3-proj-3-tuple(v_789)) then (if not-caught-fail(v_790) then (v_790,2-proj-3-tuple(v_789),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {322}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {323}insert statestore(bob,alice,sid,statepack_b(hs_791))
    ) | (
        {368}get statestore(=bob,=alice,=sid,statepack_b(hs_793: handshakestate)) in
        {325}let v_794: bitstring = catch-fail(handshakestateunpack(hs_793)) in
        {326}let v_795: bitstring = catch-fail((empty,empty,empty)) in
        {327}let v_796: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {328}let v_797: keypair = catch-fail((if not-caught-fail(v_796) then keypairpack(validkey(v_796),key_e(bob,alice,sid)) else fail-any)) in
        {329}let v_798: bitstring = catch-fail(getpublickey(v_797)) in
        {330}let v_799: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_794))) in
        {331}let v_800: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_794)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack(1-proj-3-tuple(v_799),2-proj-3-tuple(v_799),hash(3-proj-3-tuple(v_799),v_798)) else fail-any) else fail-any)) in
        {332}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {333}let v_802: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_801),getpublickey(v_797))) in
        {334}let v_803: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_801),getpublickey(v_797))) in
        {335}let v_804: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_801),getpublickey(v_797))) in
        {336}let v_805: bitstring = catch-fail((if (success?(getpublickey(v_797)) && success?(2-proj-3-tuple(v_801))) then (if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (v_802,v_803,v_804) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_806: symmetricstate = catch-fail((if success?(getpublickey(v_797)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_805)) then cipherstatepack(2-proj-3-tuple(v_805),minnonce) else fail-any),1-proj-3-tuple(v_805),3-proj-3-tuple(v_801)) else fail-any) else fail-any) else fail-any)) in
        {338}let v_807: bitstring = catch-fail(keypairunpack(v_797)) in
        {339}let v_808: bitstring = catch-fail(symmetricstateunpack(v_806)) in
        {340}let v_809: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_808),(if success?(5-proj-7-tuple(v_794)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),5-proj-7-tuple(v_794)) else fail-any) else fail-any))) in
        {341}let v_810: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_808),(if success?(5-proj-7-tuple(v_794)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),5-proj-7-tuple(v_794)) else fail-any) else fail-any))) in
        {342}let v_811: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_808),(if success?(5-proj-7-tuple(v_794)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),5-proj-7-tuple(v_794)) else fail-any) else fail-any))) in
        {343}let v_812: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_794)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),5-proj-7-tuple(v_794)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_808))) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then (if not-caught-fail(v_811) then (v_809,v_810,v_811) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {344}let v_813: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_794)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),5-proj-7-tuple(v_794)) else fail-any) else fail-any)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_812)) then cipherstatepack(2-proj-3-tuple(v_812),minnonce) else fail-any),1-proj-3-tuple(v_812),3-proj-3-tuple(v_808)) else fail-any) else fail-any) else fail-any)) in
        {345}let v_814: bitstring = catch-fail(symmetricstateunpack(v_813)) in
        {346}let v_815: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_814))) in
        {347}let v_816: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_815),2-proj-2-tuple(v_815),3-proj-3-tuple(v_814),msg_b(bob,alice,sid))) in
        {348}let v_817: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_814))) in
        {349}let v_818: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_815))) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then cipherstatepack(1-proj-2-tuple(v_817),increment_nonce(2-proj-2-tuple(v_815))) else fail-any) else fail-any)) in
        {350}let v_819: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_814)) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-2-tuple(v_815))))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_818) then (v_818,v_816) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_820: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_819),2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)))) in
        {352}let v_821: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_819)) && success?(symmetricstatepack(1-proj-2-tuple(v_819),2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then symmetricstatepack(1-proj-3-tuple(v_820),2-proj-3-tuple(v_820),hash(3-proj-3-tuple(v_820),2-proj-2-tuple(v_819))) else fail-any) else fail-any)) in
        {353}let v_822: bitstring = catch-fail((if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then (if not-caught-fail(v_821) then (v_821,2-proj-2-tuple(v_819)) else fail-any) else fail-any) else fail-any)) in
        {354}let v_823: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_822),2-proj-7-tuple(v_794),v_797,4-proj-7-tuple(v_794),5-proj-7-tuple(v_794),6-proj-7-tuple(v_794),7-proj-7-tuple(v_794))) in
        {355}let v_824: bitstring = catch-fail(concat3(v_798,2-proj-3-tuple(v_795),2-proj-2-tuple(v_822))) in
        {356}let v_825: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_822))) in
        {357}let v_826: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_825),zero)) in
        {358}let v_827: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_825),zero)) in
        {359}let v_828: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_825),zero)) in
        {360}let v_829: bitstring = catch-fail((if success?(2-proj-3-tuple(v_825)) then (if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_828) then (v_826,v_827,v_828) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_830: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_829)) then cipherstatepack(1-proj-3-tuple(v_829),minnonce) else fail-any)) in
        {362}let v_831: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_829)) then cipherstatepack(2-proj-3-tuple(v_829),minnonce) else fail-any)) in
        {363}let v_832: bitstring = catch-fail((if success?(1-proj-2-tuple(v_822)) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then (1-proj-2-tuple(v_822),v_830,v_831) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let (hs_833: handshakestate,message_b_834: bitstring,cs1_835: cipherstate,cs2_836: cipherstate) = (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-7-tuple(v_794))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_800) then (if not-caught-fail(v_806) then (if not-caught-fail(v_813) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (v_823,v_824,2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {365}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {366}insert statestore(bob,alice,sid,statepack_c(hs_833,cs1_835,cs2_836));
        {367}out(pub, message_b_834)
    ) | (
        {369}!
        {389}get statestore(=bob,=alice,=sid,statepack_c(hs_837: handshakestate,cs1_838: cipherstate,cs2_839: cipherstate)) in
        {370}let hs_840: handshakestate = handshakestatesetcs(hs_837,cs1_838) in
        {371}in(pub, message_c_841: bitstring);
        {372}let v_842: bitstring = catch-fail(handshakestateunpack(hs_840)) in
        {373}let v_843: bitstring = catch-fail(deconcat3(message_c_841)) in
        {374}let v_844: bool = catch-fail(true) in
        {375}let v_845: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_842))) in
        {376}let v_846: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {377}let v_847: aead = catch-fail(decrypt(1-proj-2-tuple(v_846),2-proj-2-tuple(v_846),3-proj-3-tuple(v_845),3-proj-3-tuple(v_843))) in
        {378}let v_848: bitstring = catch-fail(aeadunpack(v_847)) in
        {379}let v_849: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {380}let v_850: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_846))) && success?(1-proj-3-tuple(v_845))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then cipherstatepack(1-proj-2-tuple(v_849),increment_nonce(2-proj-2-tuple(v_846))) else fail-any) else fail-any)) in
        {381}let v_851: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_843)) && (success?(3-proj-3-tuple(v_845)) && success?(1-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_847) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if not-caught-fail(v_850) then (v_850,3-proj-3-tuple(v_848),1-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_852: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) in
        {383}let v_853: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_843)) && success?(symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_852),hash(3-proj-3-tuple(v_852),3-proj-3-tuple(v_843))) else fail-any) else fail-any)) in
        {384}let v_854: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_843)) && success?(1-proj-7-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_853) then (v_853,2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {385}let v_855: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_854),2-proj-7-tuple(v_842),3-proj-7-tuple(v_842),4-proj-7-tuple(v_842),5-proj-7-tuple(v_842),6-proj-7-tuple(v_842),7-proj-7-tuple(v_842))) in
        {386}let (hs_856: handshakestate,plaintext_c: bitstring,valid_857: bool) = (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-7-tuple(v_842))))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if not-caught-fail(v_844) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (v_844 && 3-proj-3-tuple(v_854)) then (if not-caught-fail(v_855) then (v_855,2-proj-3-tuple(v_854),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {387}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {388}insert statestore(bob,alice,sid,statepack_d(hs_856,handshakestategetcs(hs_856),cs2_839))
    ) | (
        {390}!
        {408}get statestore(=bob,=alice,=sid,statepack_d(hs_858: handshakestate,cs1_859: cipherstate,cs2_860: cipherstate)) in
        {391}let hs_861: handshakestate = handshakestatesetcs(hs_858,cs2_860) in
        {392}let v_862: bitstring = catch-fail(handshakestateunpack(hs_861)) in
        {393}let v_863: bitstring = catch-fail((empty,empty,empty)) in
        {394}let v_864: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_862))) in
        {395}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {396}let v_866: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_865),2-proj-2-tuple(v_865),3-proj-3-tuple(v_864),msg_d(bob,alice,sid))) in
        {397}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {398}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_865))) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {399}let v_869: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_864)) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_868) then (v_868,v_866) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_869),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) in
        {401}let v_871: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_869)) && success?(symmetricstatepack(1-proj-2-tuple(v_869),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),2-proj-2-tuple(v_869))) else fail-any) else fail-any)) in
        {402}let v_872: bitstring = catch-fail((if success?(1-proj-7-tuple(v_862)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-2-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_873: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_872),2-proj-7-tuple(v_862),3-proj-7-tuple(v_862),4-proj-7-tuple(v_862),5-proj-7-tuple(v_862),6-proj-7-tuple(v_862),7-proj-7-tuple(v_862))) in
        {404}let v_874: bitstring = catch-fail(concat3(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),2-proj-2-tuple(v_872))) in
        {405}let (hs_875: handshakestate,message_d_876: bitstring) = (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-7-tuple(v_862))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (v_873,v_874) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {406}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {407}out(pub, message_d_876)
    ) | (
        {409}event LeakPsk(phase0,alice,bob);
        {410}out(pub, key_psk(alice,bob))
    ) | (
        {411}phase 1;
        {412}event LeakPsk(phase1,alice,bob);
        {413}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {414}let s_877: keypair = keypairpack(empty,empty) in
    (
        {415}let e_878: keypair = keypairpack(empty,empty) in
        {416}let rs_879: key = empty in
        {417}let re_880: key = empty in
        {418}let v_881: bitstring = catch-fail(hash(somename,empty)) in
        {419}let v_882: key = catch-fail(v_881) in
        {420}let v_883: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {421}let v_884: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then symmetricstatepack(v_883,v_882,v_881) else fail-any) else fail-any) else fail-any))) in
        {422}let v_885: symmetricstate = catch-fail((if success?((if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then symmetricstatepack(v_883,v_882,v_881) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),empty)) else fail-any) else fail-any)) in
        {423}let hs_886: handshakestate = (if not-caught-fail(v_885) then handshakestatepack(v_885,s_877,e_878,rs_879,re_880,key_psk(charlie,bob),false) else fail-any) in
        {424}insert statestore(bob,charlie,sid,statepack_a(hs_886))
    ) | (
        {460}get statestore(=bob,=charlie,=sid,statepack_a(hs_887: handshakestate)) in
        {425}in(pub, message_a_888: bitstring);
        {426}let v_889: bitstring = catch-fail(handshakestateunpack(hs_887)) in
        {427}let v_890: bitstring = catch-fail(deconcat3(message_a_888)) in
        {428}let v_891: bool = catch-fail(true) in
        {429}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_889))) in
        {430}let v_893: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_892),6-proj-7-tuple(v_889))) in
        {431}let v_894: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_892),6-proj-7-tuple(v_889))) in
        {432}let v_895: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_892),6-proj-7-tuple(v_889))) in
        {433}let v_896: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_889)) && success?(2-proj-3-tuple(v_892))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (v_893,v_894,v_895) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_892),1-proj-3-tuple(v_896),3-proj-3-tuple(v_892)))) in
        {435}let v_898: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_896)) && success?(symmetricstatepack(1-proj-3-tuple(v_892),1-proj-3-tuple(v_896),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),2-proj-3-tuple(v_896))) else fail-any) else fail-any))) in
        {436}let v_899: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_889)) && success?(1-proj-7-tuple(v_889))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_896)) then cipherstatepack(3-proj-3-tuple(v_896),minnonce) else fail-any),1-proj-3-tuple(v_896),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_900: key = catch-fail(1-proj-3-tuple(v_890)) in
        {438}let v_901: bitstring = catch-fail(symmetricstateunpack(v_899)) in
        {439}let v_902: symmetricstate = catch-fail((if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),v_900)) else fail-any)) in
        {440}let v_903: bitstring = catch-fail(symmetricstateunpack(v_902)) in
        {441}let v_904: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_903),v_900)) in
        {442}let v_905: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_903),v_900)) in
        {443}let v_906: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_903),v_900)) in
        {444}let v_907: bitstring = catch-fail((if success?(2-proj-3-tuple(v_903)) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (v_904,v_905,v_906) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_908: symmetricstate = catch-fail((if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_907)) then cipherstatepack(2-proj-3-tuple(v_907),minnonce) else fail-any),1-proj-3-tuple(v_907),3-proj-3-tuple(v_903)) else fail-any) else fail-any)) in
        {446}let v_909: bitstring = catch-fail(symmetricstateunpack(v_908)) in
        {447}let v_910: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_909))) in
        {448}let v_911: aead = catch-fail(decrypt(1-proj-2-tuple(v_910),2-proj-2-tuple(v_910),3-proj-3-tuple(v_909),3-proj-3-tuple(v_890))) in
        {449}let v_912: bitstring = catch-fail(aeadunpack(v_911)) in
        {450}let v_913: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_909))) in
        {451}let v_914: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_910))) && success?(1-proj-3-tuple(v_909))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then cipherstatepack(1-proj-2-tuple(v_913),increment_nonce(2-proj-2-tuple(v_910))) else fail-any) else fail-any)) in
        {452}let v_915: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_890)) && (success?(3-proj-3-tuple(v_909)) && success?(1-proj-3-tuple(v_909)))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then (if not-caught-fail(v_911) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if not-caught-fail(v_914) then (v_914,3-proj-3-tuple(v_912),1-proj-3-tuple(v_912)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {453}let v_916: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_915),2-proj-3-tuple(v_909),3-proj-3-tuple(v_909)))) in
        {454}let v_917: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_890)) && success?(symmetricstatepack(1-proj-3-tuple(v_915),2-proj-3-tuple(v_909),3-proj-3-tuple(v_909)))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_916),hash(3-proj-3-tuple(v_916),3-proj-3-tuple(v_890))) else fail-any) else fail-any)) in
        {455}let v_918: bitstring = catch-fail((if success?(3-proj-3-tuple(v_890)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if not-caught-fail(v_917) then (v_917,2-proj-3-tuple(v_915),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {456}let v_919: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_918),2-proj-7-tuple(v_889),3-proj-7-tuple(v_889),4-proj-7-tuple(v_889),v_900,6-proj-7-tuple(v_889),7-proj-7-tuple(v_889))) in
        {457}let (hs_920: handshakestate,plaintext_a_921: bitstring,valid_922: bool) = (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-7-tuple(v_889))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_891) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (if not-caught-fail(v_902) then (if not-caught-fail(v_908) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (v_891 && 3-proj-3-tuple(v_918)) then (if not-caught-fail(v_919) then (v_919,2-proj-3-tuple(v_918),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {458}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_921);
        {459}insert statestore(bob,charlie,sid,statepack_b(hs_920))
    ) | (
        {504}get statestore(=bob,=charlie,=sid,statepack_b(hs_923: handshakestate)) in
        {461}let v_924: bitstring = catch-fail(handshakestateunpack(hs_923)) in
        {462}let v_925: bitstring = catch-fail((empty,empty,empty)) in
        {463}let v_926: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {464}let v_927: keypair = catch-fail((if not-caught-fail(v_926) then keypairpack(validkey(v_926),key_e(bob,charlie,sid)) else fail-any)) in
        {465}let v_928: bitstring = catch-fail(getpublickey(v_927)) in
        {466}let v_929: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_924))) in
        {467}let v_930: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_924)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),hash(3-proj-3-tuple(v_929),v_928)) else fail-any) else fail-any)) in
        {468}let v_931: bitstring = catch-fail(symmetricstateunpack(v_930)) in
        {469}let v_932: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_931),getpublickey(v_927))) in
        {470}let v_933: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_931),getpublickey(v_927))) in
        {471}let v_934: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_931),getpublickey(v_927))) in
        {472}let v_935: bitstring = catch-fail((if (success?(getpublickey(v_927)) && success?(2-proj-3-tuple(v_931))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (v_932,v_933,v_934) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_936: symmetricstate = catch-fail((if success?(getpublickey(v_927)) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_935)) then cipherstatepack(2-proj-3-tuple(v_935),minnonce) else fail-any),1-proj-3-tuple(v_935),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any)) in
        {474}let v_937: bitstring = catch-fail(keypairunpack(v_927)) in
        {475}let v_938: bitstring = catch-fail(symmetricstateunpack(v_936)) in
        {476}let v_939: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_938),(if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {477}let v_940: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_938),(if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {478}let v_941: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_938),(if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {479}let v_942: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_938))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (v_939,v_940,v_941) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let v_943: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_942)) then cipherstatepack(2-proj-3-tuple(v_942),minnonce) else fail-any),1-proj-3-tuple(v_942),3-proj-3-tuple(v_938)) else fail-any) else fail-any) else fail-any)) in
        {481}let v_944: bitstring = catch-fail(symmetricstateunpack(v_943)) in
        {482}let v_945: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {483}let v_946: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_945),2-proj-2-tuple(v_945),3-proj-3-tuple(v_944),msg_b(bob,charlie,sid))) in
        {484}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {485}let v_948: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_945))) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then cipherstatepack(1-proj-2-tuple(v_947),increment_nonce(2-proj-2-tuple(v_945))) else fail-any) else fail-any)) in
        {486}let v_949: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_944)) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then (if not-caught-fail(v_946) then (if not-caught-fail(v_948) then (v_948,v_946) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_950: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_949),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) in
        {488}let v_951: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_949)) && success?(symmetricstatepack(1-proj-2-tuple(v_949),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_950),hash(3-proj-3-tuple(v_950),2-proj-2-tuple(v_949))) else fail-any) else fail-any)) in
        {489}let v_952: bitstring = catch-fail((if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then (if not-caught-fail(v_951) then (v_951,2-proj-2-tuple(v_949)) else fail-any) else fail-any) else fail-any)) in
        {490}let v_953: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_952),2-proj-7-tuple(v_924),v_927,4-proj-7-tuple(v_924),5-proj-7-tuple(v_924),6-proj-7-tuple(v_924),7-proj-7-tuple(v_924))) in
        {491}let v_954: bitstring = catch-fail(concat3(v_928,2-proj-3-tuple(v_925),2-proj-2-tuple(v_952))) in
        {492}let v_955: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_952))) in
        {493}let v_956: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_955),zero)) in
        {494}let v_957: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_955),zero)) in
        {495}let v_958: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_955),zero)) in
        {496}let v_959: bitstring = catch-fail((if success?(2-proj-3-tuple(v_955)) then (if not-caught-fail(v_956) then (if not-caught-fail(v_957) then (if not-caught-fail(v_958) then (v_956,v_957,v_958) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_960: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_959)) then cipherstatepack(1-proj-3-tuple(v_959),minnonce) else fail-any)) in
        {498}let v_961: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_959)) then cipherstatepack(2-proj-3-tuple(v_959),minnonce) else fail-any)) in
        {499}let v_962: bitstring = catch-fail((if success?(1-proj-2-tuple(v_952)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (1-proj-2-tuple(v_952),v_960,v_961) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {500}let (hs_963: handshakestate,message_b_964: bitstring,cs1_965: cipherstate,cs2_966: cipherstate) = (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-7-tuple(v_924))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_927) then (if not-caught-fail(v_928) then (if not-caught-fail(v_930) then (if not-caught-fail(v_936) then (if not-caught-fail(v_943) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (v_953,v_954,2-proj-3-tuple(v_962),3-proj-3-tuple(v_962)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {501}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {502}insert statestore(bob,charlie,sid,statepack_c(hs_963,cs1_965,cs2_966));
        {503}out(pub, message_b_964)
    ) | (
        {505}!
        {525}get statestore(=bob,=charlie,=sid,statepack_c(hs_967: handshakestate,cs1_968: cipherstate,cs2_969: cipherstate)) in
        {506}let hs_970: handshakestate = handshakestatesetcs(hs_967,cs1_968) in
        {507}in(pub, message_c_971: bitstring);
        {508}let v_972: bitstring = catch-fail(handshakestateunpack(hs_970)) in
        {509}let v_973: bitstring = catch-fail(deconcat3(message_c_971)) in
        {510}let v_974: bool = catch-fail(true) in
        {511}let v_975: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_972))) in
        {512}let v_976: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_975))) in
        {513}let v_977: aead = catch-fail(decrypt(1-proj-2-tuple(v_976),2-proj-2-tuple(v_976),3-proj-3-tuple(v_975),3-proj-3-tuple(v_973))) in
        {514}let v_978: bitstring = catch-fail(aeadunpack(v_977)) in
        {515}let v_979: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_975))) in
        {516}let v_980: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_976))) && success?(1-proj-3-tuple(v_975))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-2-tuple(v_979))))) then cipherstatepack(1-proj-2-tuple(v_979),increment_nonce(2-proj-2-tuple(v_976))) else fail-any) else fail-any)) in
        {517}let v_981: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_973)) && (success?(3-proj-3-tuple(v_975)) && success?(1-proj-3-tuple(v_975)))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then (if not-caught-fail(v_977) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then (if not-caught-fail(v_980) then (v_980,3-proj-3-tuple(v_978),1-proj-3-tuple(v_978)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_982: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)))) in
        {519}let v_983: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_973)) && success?(symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then symmetricstatepack(1-proj-3-tuple(v_982),2-proj-3-tuple(v_982),hash(3-proj-3-tuple(v_982),3-proj-3-tuple(v_973))) else fail-any) else fail-any)) in
        {520}let v_984: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_973)) && success?(1-proj-7-tuple(v_972))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if not-caught-fail(v_983) then (v_983,2-proj-3-tuple(v_981),3-proj-3-tuple(v_981)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let v_985: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_984),2-proj-7-tuple(v_972),3-proj-7-tuple(v_972),4-proj-7-tuple(v_972),5-proj-7-tuple(v_972),6-proj-7-tuple(v_972),7-proj-7-tuple(v_972))) in
        {522}let (hs_986: handshakestate,plaintext_c_987: bitstring,valid_988: bool) = (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-7-tuple(v_972))))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then (if not-caught-fail(v_974) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then (if (v_974 && 3-proj-3-tuple(v_984)) then (if not-caught-fail(v_985) then (v_985,2-proj-3-tuple(v_984),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {523}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_987);
        {524}insert statestore(bob,charlie,sid,statepack_d(hs_986,handshakestategetcs(hs_986),cs2_969))
    ) | (
        {526}!
        {544}get statestore(=bob,=charlie,=sid,statepack_d(hs_989: handshakestate,cs1_990: cipherstate,cs2_991: cipherstate)) in
        {527}let hs_992: handshakestate = handshakestatesetcs(hs_989,cs2_991) in
        {528}let v_993: bitstring = catch-fail(handshakestateunpack(hs_992)) in
        {529}let v_994: bitstring = catch-fail((empty,empty,empty)) in
        {530}let v_995: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_993))) in
        {531}let v_996: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_995))) in
        {532}let v_997: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_996),2-proj-2-tuple(v_996),3-proj-3-tuple(v_995),msg_d(bob,charlie,sid))) in
        {533}let v_998: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_995))) in
        {534}let v_999: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_996))) && success?(1-proj-3-tuple(v_995))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-2-tuple(v_998))))) then cipherstatepack(1-proj-2-tuple(v_998),increment_nonce(2-proj-2-tuple(v_996))) else fail-any) else fail-any)) in
        {535}let v_1000: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_995)) && success?(1-proj-3-tuple(v_995))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then (if not-caught-fail(v_997) then (if not-caught-fail(v_999) then (v_999,v_997) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1001: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1000),2-proj-3-tuple(v_995),3-proj-3-tuple(v_995)))) in
        {537}let v_1002: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1000)) && success?(symmetricstatepack(1-proj-2-tuple(v_1000),2-proj-3-tuple(v_995),3-proj-3-tuple(v_995)))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then symmetricstatepack(1-proj-3-tuple(v_1001),2-proj-3-tuple(v_1001),hash(3-proj-3-tuple(v_1001),2-proj-2-tuple(v_1000))) else fail-any) else fail-any)) in
        {538}let v_1003: bitstring = catch-fail((if success?(1-proj-7-tuple(v_993)) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then (if not-caught-fail(v_1002) then (v_1002,2-proj-2-tuple(v_1000)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {539}let v_1004: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1003),2-proj-7-tuple(v_993),3-proj-7-tuple(v_993),4-proj-7-tuple(v_993),5-proj-7-tuple(v_993),6-proj-7-tuple(v_993),7-proj-7-tuple(v_993))) in
        {540}let v_1005: bitstring = catch-fail(concat3(1-proj-3-tuple(v_994),2-proj-3-tuple(v_994),2-proj-2-tuple(v_1003))) in
        {541}let (hs_1006: handshakestate,message_d_1007: bitstring) = (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-7-tuple(v_993))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-2-tuple(v_1003))))) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (v_1004,v_1005) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {542}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {543}out(pub, message_d_1007)
    ) | (
        {545}event LeakPsk(phase0,charlie,bob);
        {546}out(pub, key_psk(charlie,bob))
    ) | (
        {547}phase 1;
        {548}event LeakPsk(phase1,charlie,bob);
        {549}out(pub, key_psk(charlie,bob))
    ) | (
        0
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 75 rules in the queue.
400 rules inserted. The rule base contains 382 rules. 32 rules in the queue.
600 rules inserted. The rule base contains 518 rules. 44 rules in the queue.
800 rules inserted. The rule base contains 665 rules. 51 rules in the queue.
1000 rules inserted. The rule base contains 784 rules. 48 rules in the queue.
1200 rules inserted. The rule base contains 910 rules. 55 rules in the queue.
1400 rules inserted. The rule base contains 976 rules. 4 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640827]),msg_a(alice,bob,sid[!1 = @sid_23640827]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23640828]),msg_a(alice,bob,sid[!1 = @sid_23640827])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640836]),msg_a(alice,bob,sid[!1 = @sid_23640836]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23640837]),msg_a(alice,bob,sid[!1 = @sid_23640836])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640846]),msg_a(alice,bob,sid[!1 = @sid_23640846]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23640847]),msg_a(alice,bob,sid[!1 = @sid_23640846])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640856]),msg_a(alice,bob,sid[!1 = @sid_23640856]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23640857]),msg_a(alice,bob,sid[!1 = @sid_23640856])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640865]),msg_a(alice,bob,sid[!1 = @sid_23640865]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23640866]),msg_a(alice,bob,sid[!1 = @sid_23640865])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640873]),msg_a(alice,bob,sid[!1 = @sid_23640873]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23640873]))
Abbreviations:
sid_23640940 = sid[!1 = @sid_23640916]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23640940,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_23640940,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_23640940,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_23640940),msg_a(alice,bob,sid_23640940)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {139}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {140}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

17. By 16, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

18. By 17, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23640940),g))),msg_a(alice,bob,sid_23640940)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23640940) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23640940)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(py,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640942]),msg_a(alice,bob,sid[!1 = @sid_23640942]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23640942]))
goal reachable: begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640945]),msg_a(alice,bob,sid[!1 = @sid_23640945]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23640945]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23640952]),msg_a(alice,bob,sid[!1 = @sid_23640952]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23640952]))
Abbreviations:
sid_23641022 = sid[!1 = @sid_23640998]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23641022,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_23641022,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_23641022,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_23641022),msg_a(alice,bob,sid_23641022)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {139}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {140}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

17. By 16, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

18. By 17, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641022),g))),msg_a(alice,bob,sid_23641022)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23641022) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23641022)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641024]),msg_a(alice,bob,sid[!1 = @sid_23641024]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23641024]))
Abbreviations:
sid_23641091 = sid[!1 = @sid_23641067]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23641091,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_23641091,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_23641091,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_23641091),msg_a(alice,bob,sid_23641091)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {139}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {140}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

17. By 16, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

18. By 17, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))) in phase 1.
By 19, the attacker may know minnonce in phase 1.
By 18, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641091),g))),msg_a(alice,bob,sid_23641091)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23641091) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23641091)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641094]),msg_b(bob,alice,sid[!1 = @sid_23641094]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641095]),msg_a(alice,bob,sid[!1 = @sid_23641095]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23641095]),msg_b(bob,alice,sid[!1 = @sid_23641094])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641103]),msg_b(bob,alice,sid[!1 = @sid_23641103]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641104]),msg_a(alice,bob,sid[!1 = @sid_23641104]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23641104]),msg_b(bob,alice,sid[!1 = @sid_23641103])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641113]),msg_b(bob,alice,sid[!1 = @sid_23641113]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641114]),msg_a(alice,bob,sid[!1 = @sid_23641114]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23641114]),msg_b(bob,alice,sid[!1 = @sid_23641113])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641123]),msg_b(bob,alice,sid[!1 = @sid_23641123]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641124]),msg_a(alice,bob,sid[!1 = @sid_23641124]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23641124]),msg_b(bob,alice,sid[!1 = @sid_23641123])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641132]),msg_b(bob,alice,sid[!1 = @sid_23641132]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641133]),msg_a(alice,bob,sid[!1 = @sid_23641133]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23641133]),msg_b(bob,alice,sid[!1 = @sid_23641132])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641157]),msg_c(alice,bob,sid[!1 = @sid_23641157]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641158]),msg_b(bob,alice,sid[!1 = @sid_23641158]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641157]),msg_a(alice,bob,sid[!1 = @sid_23641157]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23641158]),msg_c(alice,bob,sid[!1 = @sid_23641157])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641166]),msg_c(alice,bob,sid[!1 = @sid_23641166]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641167]),msg_b(bob,alice,sid[!1 = @sid_23641167]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641166]),msg_a(alice,bob,sid[!1 = @sid_23641166]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23641167]),msg_c(alice,bob,sid[!1 = @sid_23641166])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641176]),msg_c(alice,bob,sid[!1 = @sid_23641176]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641177]),msg_b(bob,alice,sid[!1 = @sid_23641177]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641176]),msg_a(alice,bob,sid[!1 = @sid_23641176]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23641177]),msg_c(alice,bob,sid[!1 = @sid_23641176])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1117,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641186]),msg_c(alice,bob,sid[!1 = @sid_23641186]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641187]),msg_b(bob,alice,sid[!1 = @sid_23641187]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641186]),msg_a(alice,bob,sid[!1 = @sid_23641186]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23641187]),msg_c(alice,bob,sid[!1 = @sid_23641186])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641195]),msg_c(alice,bob,sid[!1 = @sid_23641195]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641196]),msg_b(bob,alice,sid[!1 = @sid_23641196]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641195]),msg_a(alice,bob,sid[!1 = @sid_23641195]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23641196]),msg_c(alice,bob,sid[!1 = @sid_23641195])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23641220]),msg_d(bob,alice,sid[!1 = @sid_23641220]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641221]),msg_c(alice,bob,sid[!1 = @sid_23641221]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641220]),msg_b(bob,alice,sid[!1 = @sid_23641220]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641221]),msg_a(alice,bob,sid[!1 = @sid_23641221]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23641221]),msg_d(bob,alice,sid[!1 = @sid_23641220])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23641229]),msg_d(bob,alice,sid[!1 = @sid_23641229]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641230]),msg_c(alice,bob,sid[!1 = @sid_23641230]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641229]),msg_b(bob,alice,sid[!1 = @sid_23641229]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641230]),msg_a(alice,bob,sid[!1 = @sid_23641230]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23641230]),msg_d(bob,alice,sid[!1 = @sid_23641229])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23641239]),msg_d(bob,alice,sid[!1 = @sid_23641239]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641240]),msg_c(alice,bob,sid[!1 = @sid_23641240]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641239]),msg_b(bob,alice,sid[!1 = @sid_23641239]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641240]),msg_a(alice,bob,sid[!1 = @sid_23641240]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23641240]),msg_d(bob,alice,sid[!1 = @sid_23641239])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1117,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23641249]),msg_d(bob,alice,sid[!1 = @sid_23641249]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641250]),msg_c(alice,bob,sid[!1 = @sid_23641250]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641249]),msg_b(bob,alice,sid[!1 = @sid_23641249]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641250]),msg_a(alice,bob,sid[!1 = @sid_23641250]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23641250]),msg_d(bob,alice,sid[!1 = @sid_23641249])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23641258]),msg_d(bob,alice,sid[!1 = @sid_23641258]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641259]),msg_c(alice,bob,sid[!1 = @sid_23641259]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641258]),msg_b(bob,alice,sid[!1 = @sid_23641258]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641259]),msg_a(alice,bob,sid[!1 = @sid_23641259]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23641259]),msg_d(bob,alice,sid[!1 = @sid_23641258])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23641281]),msg_d(bob,alice,sid[!1 = @sid_23641281]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23641282]),msg_c(alice,bob,sid[!1 = @sid_23641282]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23641281]),msg_b(bob,alice,sid[!1 = @sid_23641281]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23641282]),msg_a(alice,bob,sid[!1 = @sid_23641282]))) -> end(RecvEnd(true))
Abbreviations:
sid_23641516 = sid[!1 = @sid_23641505]
sid_23641517 = sid[!1 = @sid_23641461]

1. The entry statestore(alice,bob,sid_23641516,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_23641516,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_23641516,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_23641516),msg_a(alice,bob,sid_23641516)) may be executed at {48}.
So the entry statestore(alice,bob,sid_23641516,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_23641516,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_23641517,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {288}.
table(statestore(bob,alice,sid_23641517,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_23641516,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_23641516),msg_a(alice,bob,sid_23641516)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))).

5. The entry statestore(bob,alice,sid_23641517,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {324}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))) that may be sent on channel pub by 4 may be received at input {289}.
We have validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_23641517,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {323}.
table(statestore(bob,alice,sid_23641517,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_23641517,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {368}.
The event SendMsg(bob,alice,stagepack_b(sid_23641517),msg_b(bob,alice,sid_23641517)) may be executed at {365}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))) may be sent on channel pub at output {367}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))).

7. The entry statestore(alice,bob,sid_23641516,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {94}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))) that may be sent on channel pub by 6 may be received at input {52}.
So the entry statestore(alice,bob,sid_23641516,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) may be inserted in a table at insert {93}.
table(statestore(alice,bob,sid_23641516,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_23641516,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) that may be in a table by 7 may be read at get {114}.
The event SendMsg(alice,bob,stagepack_c(sid_23641516),msg_c(alice,bob,sid_23641516)) may be executed at {111}.
So the entry statestore(alice,bob,sid_23641516,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) may be inserted in a table at insert {112}.
table(statestore(alice,bob,sid_23641516,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_23641517,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {368}.
The event SendMsg(bob,alice,stagepack_b(sid_23641517),msg_b(bob,alice,sid_23641517)) may be executed at {365}.
So the entry statestore(bob,alice,sid_23641517,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_e(bob,alice,sid_23641517)),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) may be inserted in a table at insert {366}.
table(statestore(bob,alice,sid_23641517,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_e(bob,alice,sid_23641517)),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_23641516,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) that may be in a table by 7 may be read at get {114}.
The event SendMsg(alice,bob,stagepack_c(sid_23641516),msg_c(alice,bob,sid_23641516)) may be executed at {111}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516))) may be sent on channel pub at output {113}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))).

11. The entry statestore(bob,alice,sid_23641517,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_e(bob,alice,sid_23641517)),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) that may be in a table by 9 may be read at get {389}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516))) that may be sent on channel pub by 10 may be received at input {371}.
So the entry statestore(bob,alice,sid_23641517,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_e(bob,alice,sid_23641517)),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) may be inserted in a table at insert {388}.
table(statestore(bob,alice,sid_23641517,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_e(bob,alice,sid_23641517)),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_23641517,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_e(bob,alice,sid_23641517)),empty,validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) that may be in a table by 11 may be read at get {408}.
The event SendMsg(bob,alice,stagepack_d(sid_23641517),msg_d(bob,alice,sid_23641517)) may be executed at {406}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516))),msg_d(bob,alice,sid_23641517))) may be sent on channel pub at output {407}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516))),msg_d(bob,alice,sid_23641517)))).

13. The entry statestore(alice,bob,sid_23641516,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_23641516),g)),key_e(alice,bob,sid_23641516)),empty,validkey(dhexp_real(key_e(bob,alice,sid_23641517),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce))) that may be in a table by 8 may be read at get {135}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(alice,bob,sid_23641516),dhexp_real(key_e(bob,alice,sid_23641517),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),dhexp_real(key_e(bob,alice,sid_23641517),dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_23641516),g))),msg_a(alice,bob,sid_23641516))),validkey(dhexp_real(key_e(bob,alice,sid_23641517),g))),msg_b(bob,alice,sid_23641517))),msg_c(alice,bob,sid_23641516))),msg_d(bob,alice,sid_23641517))) that may be sent on channel pub by 12 may be received at input {117}.
So event RecvEnd(true) may be executed at {134}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
