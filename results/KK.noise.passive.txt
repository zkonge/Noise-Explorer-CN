File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KK.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 277, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 324, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 332, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 518, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 520, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 511, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 512, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 332, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 277, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 565, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 566, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 557, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 551, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "KK.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 545, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 324, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_514: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_515: keypair = (if not-caught-fail(v_514) then keypairpack(validkey(v_514),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_515));
    (
        {7}let e_516: keypair = keypairpack(empty,empty) in
        {8}let v_517: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_518: key = getpublickey((if not-caught-fail(v_517) then keypairpack(validkey(v_517),key_s(bob)) else fail-any)) in
        {10}let re_519: key = empty in
        {11}let v_520: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_521: key = catch-fail(v_520) in
        {13}let v_522: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_523: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_520) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then symmetricstatepack(v_522,v_521,v_520) else fail-any) else fail-any) else fail-any))) in
        {15}let v_524: symmetricstate = catch-fail((if success?((if not-caught-fail(v_520) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then symmetricstatepack(v_522,v_521,v_520) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then symmetricstatepack(1-proj-3-tuple(v_523),2-proj-3-tuple(v_523),hash(3-proj-3-tuple(v_523),empty)) else fail-any) else fail-any)) in
        {16}let v_525: bitstring = catch-fail(symmetricstateunpack(v_524)) in
        {17}let v_526: symmetricstate = catch-fail((if success?(getpublickey(s_515)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_525),hash(3-proj-3-tuple(v_525),getpublickey(s_515))) else fail-any) else fail-any)) in
        {18}let v_527: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {19}let v_528: symmetricstate = catch-fail((if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),rs_518)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_524) then (if not-caught-fail(v_526) then (if not-caught-fail(v_528) then handshakestatepack(v_528,s_515,e_516,rs_518,re_519,empty,true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {58}get statestore(=alice,=bob,=sid,statepack_a(hs_529: handshakestate)) in
        {22}let v_530: bitstring = catch-fail(handshakestateunpack(hs_529)) in
        {23}let v_531: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_532: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {25}let v_533: keypair = catch-fail((if not-caught-fail(v_532) then keypairpack(validkey(v_532),key_e(alice,bob,sid)) else fail-any)) in
        {26}let v_534: bitstring = catch-fail(getpublickey(v_533)) in
        {27}let v_535: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_530))) in
        {28}let v_536: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_530)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_535),hash(3-proj-3-tuple(v_535),v_534)) else fail-any) else fail-any)) in
        {29}let v_537: bitstring = catch-fail(keypairunpack(v_533)) in
        {30}let v_538: bitstring = catch-fail(symmetricstateunpack(v_536)) in
        {31}let v_539: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_538),(if success?(4-proj-7-tuple(v_530)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then dhexp(2-proj-2-tuple(v_537),4-proj-7-tuple(v_530)) else fail-any) else fail-any))) in
        {32}let v_540: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_538),(if success?(4-proj-7-tuple(v_530)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then dhexp(2-proj-2-tuple(v_537),4-proj-7-tuple(v_530)) else fail-any) else fail-any))) in
        {33}let v_541: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_538),(if success?(4-proj-7-tuple(v_530)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then dhexp(2-proj-2-tuple(v_537),4-proj-7-tuple(v_530)) else fail-any) else fail-any))) in
        {34}let v_542: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_530)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then dhexp(2-proj-2-tuple(v_537),4-proj-7-tuple(v_530)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_538))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (v_539,v_540,v_541) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_543: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_530)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then dhexp(2-proj-2-tuple(v_537),4-proj-7-tuple(v_530)) else fail-any) else fail-any)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-3-tuple(v_542))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_542)) then cipherstatepack(2-proj-3-tuple(v_542),minnonce) else fail-any),1-proj-3-tuple(v_542),3-proj-3-tuple(v_538)) else fail-any) else fail-any) else fail-any)) in
        {36}let v_544: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_530))) in
        {37}let v_545: bitstring = catch-fail(symmetricstateunpack(v_543)) in
        {38}let v_546: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_545),(if (success?(4-proj-7-tuple(v_530)) && success?(2-proj-7-tuple(v_530))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_530)) else fail-any) else fail-any))) in
        {39}let v_547: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_545),(if (success?(4-proj-7-tuple(v_530)) && success?(2-proj-7-tuple(v_530))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_530)) else fail-any) else fail-any))) in
        {40}let v_548: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_545),(if (success?(4-proj-7-tuple(v_530)) && success?(2-proj-7-tuple(v_530))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_530)) else fail-any) else fail-any))) in
        {41}let v_549: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_530)) && success?(2-proj-7-tuple(v_530))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_530)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_545))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (v_546,v_547,v_548) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_550: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_530)) && success?(2-proj-7-tuple(v_530))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_530)) else fail-any) else fail-any)) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_549)) then cipherstatepack(2-proj-3-tuple(v_549),minnonce) else fail-any),1-proj-3-tuple(v_549),3-proj-3-tuple(v_545)) else fail-any) else fail-any) else fail-any)) in
        {43}let v_551: bitstring = catch-fail(symmetricstateunpack(v_550)) in
        {44}let v_552: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_551))) in
        {45}let v_553: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_552),2-proj-2-tuple(v_552),3-proj-3-tuple(v_551),msg_a(alice,bob,sid))) in
        {46}let v_554: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_551))) in
        {47}let v_555: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_552))) && success?(1-proj-3-tuple(v_551))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then cipherstatepack(1-proj-2-tuple(v_554),increment_nonce(2-proj-2-tuple(v_552))) else fail-any) else fail-any)) in
        {48}let v_556: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_551)) && success?(1-proj-3-tuple(v_551))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then (if not-caught-fail(v_553) then (if not-caught-fail(v_555) then (v_555,v_553) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_557: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_556),2-proj-3-tuple(v_551),3-proj-3-tuple(v_551)))) in
        {50}let v_558: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_556)) && success?(symmetricstatepack(1-proj-2-tuple(v_556),2-proj-3-tuple(v_551),3-proj-3-tuple(v_551)))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),2-proj-2-tuple(v_556))) else fail-any) else fail-any)) in
        {51}let v_559: bitstring = catch-fail((if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then (if not-caught-fail(v_558) then (v_558,2-proj-2-tuple(v_556)) else fail-any) else fail-any) else fail-any)) in
        {52}let v_560: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_559),2-proj-7-tuple(v_530),v_533,4-proj-7-tuple(v_530),5-proj-7-tuple(v_530),6-proj-7-tuple(v_530),7-proj-7-tuple(v_530))) in
        {53}let v_561: bitstring = catch-fail(concat3(v_534,2-proj-3-tuple(v_531),2-proj-2-tuple(v_559))) in
        {54}let (hs_562: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-7-tuple(v_530))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (if not-caught-fail(v_536) then (if not-caught-fail(v_543) then (if not-caught-fail(v_550) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (v_560,v_561) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {55}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {56}insert statestore(alice,bob,sid,statepack_b(hs_562));
        {57}out(pub, message_a)
    ) | (
        {102}get statestore(=alice,=bob,=sid,statepack_b(hs_563: handshakestate)) in
        {59}in(pub, message_b: bitstring);
        {60}let v_564: bitstring = catch-fail(handshakestateunpack(hs_563)) in
        {61}let v_565: bitstring = catch-fail(deconcat3(message_b)) in
        {62}let v_566: bool = catch-fail(true) in
        {63}let v_567: key = catch-fail(1-proj-3-tuple(v_565)) in
        {64}let v_568: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_564))) in
        {65}let v_569: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_564)) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then symmetricstatepack(1-proj-3-tuple(v_568),2-proj-3-tuple(v_568),hash(3-proj-3-tuple(v_568),v_567)) else fail-any) else fail-any)) in
        {66}let v_570: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_564))) in
        {67}let v_571: bitstring = catch-fail(symmetricstateunpack(v_569)) in
        {68}let v_572: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_571),(if success?(3-proj-7-tuple(v_564)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then dhexp(2-proj-2-tuple(v_570),v_567) else fail-any) else fail-any))) in
        {69}let v_573: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_571),(if success?(3-proj-7-tuple(v_564)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then dhexp(2-proj-2-tuple(v_570),v_567) else fail-any) else fail-any))) in
        {70}let v_574: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_571),(if success?(3-proj-7-tuple(v_564)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then dhexp(2-proj-2-tuple(v_570),v_567) else fail-any) else fail-any))) in
        {71}let v_575: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_564)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then dhexp(2-proj-2-tuple(v_570),v_567) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_571))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then (v_572,v_573,v_574) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_576: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_564)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then dhexp(2-proj-2-tuple(v_570),v_567) else fail-any) else fail-any)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_575)) then cipherstatepack(2-proj-3-tuple(v_575),minnonce) else fail-any),1-proj-3-tuple(v_575),3-proj-3-tuple(v_571)) else fail-any) else fail-any) else fail-any)) in
        {73}let v_577: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_564))) in
        {74}let v_578: bitstring = catch-fail(symmetricstateunpack(v_576)) in
        {75}let v_579: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_578),(if success?(2-proj-7-tuple(v_564)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),v_567) else fail-any) else fail-any))) in
        {76}let v_580: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_578),(if success?(2-proj-7-tuple(v_564)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),v_567) else fail-any) else fail-any))) in
        {77}let v_581: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_578),(if success?(2-proj-7-tuple(v_564)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),v_567) else fail-any) else fail-any))) in
        {78}let v_582: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_564)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),v_567) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_578))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (v_579,v_580,v_581) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_583: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_564)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),v_567) else fail-any) else fail-any)) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_582)) then cipherstatepack(2-proj-3-tuple(v_582),minnonce) else fail-any),1-proj-3-tuple(v_582),3-proj-3-tuple(v_578)) else fail-any) else fail-any) else fail-any)) in
        {80}let v_584: bitstring = catch-fail(symmetricstateunpack(v_583)) in
        {81}let v_585: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_584))) in
        {82}let v_586: aead = catch-fail(decrypt(1-proj-2-tuple(v_585),2-proj-2-tuple(v_585),3-proj-3-tuple(v_584),3-proj-3-tuple(v_565))) in
        {83}let v_587: bitstring = catch-fail(aeadunpack(v_586)) in
        {84}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_584))) in
        {85}let v_589: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_585))) && success?(1-proj-3-tuple(v_584))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then cipherstatepack(1-proj-2-tuple(v_588),increment_nonce(2-proj-2-tuple(v_585))) else fail-any) else fail-any)) in
        {86}let v_590: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_565)) && (success?(3-proj-3-tuple(v_584)) && success?(1-proj-3-tuple(v_584)))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then (if not-caught-fail(v_586) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if not-caught-fail(v_589) then (v_589,3-proj-3-tuple(v_587),1-proj-3-tuple(v_587)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_591: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)))) in
        {88}let v_592: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_565)) && success?(symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),hash(3-proj-3-tuple(v_591),3-proj-3-tuple(v_565))) else fail-any) else fail-any)) in
        {89}let v_593: bitstring = catch-fail((if success?(3-proj-3-tuple(v_565)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_592) then (v_592,2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_594: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_593),2-proj-7-tuple(v_564),3-proj-7-tuple(v_564),4-proj-7-tuple(v_564),v_567,6-proj-7-tuple(v_564),7-proj-7-tuple(v_564))) in
        {91}let v_595: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_593))) in
        {92}let v_596: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_595),zero)) in
        {93}let v_597: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_595),zero)) in
        {94}let v_598: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_595),zero)) in
        {95}let v_599: bitstring = catch-fail((if success?(2-proj-3-tuple(v_595)) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (v_596,v_597,v_598) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_600: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_599)) then cipherstatepack(1-proj-3-tuple(v_599),minnonce) else fail-any)) in
        {97}let v_601: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_599)) then cipherstatepack(2-proj-3-tuple(v_599),minnonce) else fail-any)) in
        {98}let v_602: bitstring = catch-fail((if success?(1-proj-3-tuple(v_593)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (1-proj-3-tuple(v_593),v_600,v_601) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let (hs_603: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-7-tuple(v_564))))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_569) then (if not-caught-fail(v_576) then (if not-caught-fail(v_583) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (v_566 && 3-proj-3-tuple(v_593)) then (if not-caught-fail(v_594) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (v_594,2-proj-3-tuple(v_593),true,2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {100}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {101}insert statestore(alice,bob,sid,statepack_c(hs_603,cs1,cs2))
    ) | (
        {103}!
        {122}get statestore(=alice,=bob,=sid,statepack_c(hs_604: handshakestate,cs1_605: cipherstate,cs2_606: cipherstate)) in
        {104}let hs_607: handshakestate = handshakestatesetcs(hs_604,cs1_605) in
        {105}let v_608: bitstring = catch-fail(handshakestateunpack(hs_607)) in
        {106}let v_609: bitstring = catch-fail((empty,empty,empty)) in
        {107}let v_610: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_608))) in
        {108}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_610))) in
        {109}let v_612: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_611),2-proj-2-tuple(v_611),3-proj-3-tuple(v_610),msg_c(alice,bob,sid))) in
        {110}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_610))) in
        {111}let v_614: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_611))) && success?(1-proj-3-tuple(v_610))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then cipherstatepack(1-proj-2-tuple(v_613),increment_nonce(2-proj-2-tuple(v_611))) else fail-any) else fail-any)) in
        {112}let v_615: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_610)) && success?(1-proj-3-tuple(v_610))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_614) then (v_614,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {113}let v_616: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_615),2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)))) in
        {114}let v_617: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_615)) && success?(symmetricstatepack(1-proj-2-tuple(v_615),2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {115}let v_618: bitstring = catch-fail((if success?(1-proj-7-tuple(v_608)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_617) then (v_617,2-proj-2-tuple(v_615)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_619: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_618),2-proj-7-tuple(v_608),3-proj-7-tuple(v_608),4-proj-7-tuple(v_608),5-proj-7-tuple(v_608),6-proj-7-tuple(v_608),7-proj-7-tuple(v_608))) in
        {117}let v_620: bitstring = catch-fail(concat3(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),2-proj-2-tuple(v_618))) in
        {118}let (hs_621: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-7-tuple(v_608))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then (v_619,v_620) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {119}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {120}insert statestore(alice,bob,sid,statepack_d(hs_621,handshakestategetcs(hs_621),cs2_606));
        {121}out(pub, message_c)
    ) | (
        {123}!
        {143}get statestore(=alice,=bob,=sid,statepack_d(hs_622: handshakestate,cs1_623: cipherstate,cs2_624: cipherstate)) in
        {124}let hs_625: handshakestate = handshakestatesetcs(hs_622,cs2_624) in
        {125}in(pub, message_d: bitstring);
        {126}let v_626: bitstring = catch-fail(handshakestateunpack(hs_625)) in
        {127}let v_627: bitstring = catch-fail(deconcat3(message_d)) in
        {128}let v_628: bool = catch-fail(true) in
        {129}let v_629: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_626))) in
        {130}let v_630: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {131}let v_631: aead = catch-fail(decrypt(1-proj-2-tuple(v_630),2-proj-2-tuple(v_630),3-proj-3-tuple(v_629),3-proj-3-tuple(v_627))) in
        {132}let v_632: bitstring = catch-fail(aeadunpack(v_631)) in
        {133}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {134}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_630))) && success?(1-proj-3-tuple(v_629))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_630))) else fail-any) else fail-any)) in
        {135}let v_635: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_627)) && (success?(3-proj-3-tuple(v_629)) && success?(1-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_634) then (v_634,3-proj-3-tuple(v_632),1-proj-3-tuple(v_632)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) in
        {137}let v_637: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_627)) && success?(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),3-proj-3-tuple(v_627))) else fail-any) else fail-any)) in
        {138}let v_638: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_627)) && success?(1-proj-7-tuple(v_626))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_639: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_638),2-proj-7-tuple(v_626),3-proj-7-tuple(v_626),4-proj-7-tuple(v_626),5-proj-7-tuple(v_626),6-proj-7-tuple(v_626),7-proj-7-tuple(v_626))) in
        {140}let (hs_640: handshakestate,plaintext_d: bitstring,valid_641: bool) = (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-7-tuple(v_626))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if not-caught-fail(v_628) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (v_628 && 3-proj-3-tuple(v_638)) then (if not-caught-fail(v_639) then (v_639,2-proj-3-tuple(v_638),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {141}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {142}event RecvEnd(valid_641)
    ) | (
        {144}event LeakS(phase0,alice);
        {145}out(pub, key_s(alice))
    ) | (
        {146}phase 1;
        {147}event LeakS(phase1,alice);
        {148}out(pub, key_s(alice))
    )
) | (
    {149}let v_642: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {150}let s_643: keypair = (if not-caught-fail(v_642) then keypairpack(validkey(v_642),key_s(alice)) else fail-any) in
    {151}out(pub, getpublickey(s_643));
    (
        {152}let e_644: keypair = keypairpack(empty,empty) in
        {153}let v_645: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {154}let rs_646: key = getpublickey((if not-caught-fail(v_645) then keypairpack(validkey(v_645),key_s(charlie)) else fail-any)) in
        {155}let re_647: key = empty in
        {156}let v_648: bitstring = catch-fail(hash(somename,empty)) in
        {157}let v_649: key = catch-fail(v_648) in
        {158}let v_650: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {159}let v_651: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then symmetricstatepack(v_650,v_649,v_648) else fail-any) else fail-any) else fail-any))) in
        {160}let v_652: symmetricstate = catch-fail((if success?((if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then symmetricstatepack(v_650,v_649,v_648) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),hash(3-proj-3-tuple(v_651),empty)) else fail-any) else fail-any)) in
        {161}let v_653: bitstring = catch-fail(symmetricstateunpack(v_652)) in
        {162}let v_654: symmetricstate = catch-fail((if success?(getpublickey(s_643)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),getpublickey(s_643))) else fail-any) else fail-any)) in
        {163}let v_655: bitstring = catch-fail(symmetricstateunpack(v_654)) in
        {164}let v_656: symmetricstate = catch-fail((if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),rs_646)) else fail-any)) in
        {165}let hs_657: handshakestate = (if not-caught-fail(v_652) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then handshakestatepack(v_656,s_643,e_644,rs_646,re_647,empty,true) else fail-any) else fail-any) else fail-any) in
        {166}insert statestore(alice,charlie,sid,statepack_a(hs_657))
    ) | (
        {203}get statestore(=alice,=charlie,=sid,statepack_a(hs_658: handshakestate)) in
        {167}let v_659: bitstring = catch-fail(handshakestateunpack(hs_658)) in
        {168}let v_660: bitstring = catch-fail((empty,empty,empty)) in
        {169}let v_661: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {170}let v_662: keypair = catch-fail((if not-caught-fail(v_661) then keypairpack(validkey(v_661),key_e(alice,charlie,sid)) else fail-any)) in
        {171}let v_663: bitstring = catch-fail(getpublickey(v_662)) in
        {172}let v_664: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_659))) in
        {173}let v_665: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_659)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_664),hash(3-proj-3-tuple(v_664),v_663)) else fail-any) else fail-any)) in
        {174}let v_666: bitstring = catch-fail(keypairunpack(v_662)) in
        {175}let v_667: bitstring = catch-fail(symmetricstateunpack(v_665)) in
        {176}let v_668: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_667),(if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {177}let v_669: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_667),(if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {178}let v_670: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_667),(if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {179}let v_671: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_667))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (v_668,v_669,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_672: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_671)) then cipherstatepack(2-proj-3-tuple(v_671),minnonce) else fail-any),1-proj-3-tuple(v_671),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any)) in
        {181}let v_673: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_659))) in
        {182}let v_674: bitstring = catch-fail(symmetricstateunpack(v_672)) in
        {183}let v_675: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_674),(if (success?(4-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {184}let v_676: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_674),(if (success?(4-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {185}let v_677: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_674),(if (success?(4-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {186}let v_678: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),4-proj-7-tuple(v_659)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_674))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (v_675,v_676,v_677) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_679: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),4-proj-7-tuple(v_659)) else fail-any) else fail-any)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_678)) then cipherstatepack(2-proj-3-tuple(v_678),minnonce) else fail-any),1-proj-3-tuple(v_678),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any)) in
        {188}let v_680: bitstring = catch-fail(symmetricstateunpack(v_679)) in
        {189}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
        {190}let v_682: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_681),2-proj-2-tuple(v_681),3-proj-3-tuple(v_680),msg_a(alice,charlie,sid))) in
        {191}let v_683: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
        {192}let v_684: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_681))) && success?(1-proj-3-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then cipherstatepack(1-proj-2-tuple(v_683),increment_nonce(2-proj-2-tuple(v_681))) else fail-any) else fail-any)) in
        {193}let v_685: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_680)) && success?(1-proj-3-tuple(v_680))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_684) then (v_684,v_682) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_686: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_685),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) in
        {195}let v_687: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_685)) && success?(symmetricstatepack(1-proj-2-tuple(v_685),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_686),hash(3-proj-3-tuple(v_686),2-proj-2-tuple(v_685))) else fail-any) else fail-any)) in
        {196}let v_688: bitstring = catch-fail((if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-2-tuple(v_685))))) then (if not-caught-fail(v_687) then (v_687,2-proj-2-tuple(v_685)) else fail-any) else fail-any) else fail-any)) in
        {197}let v_689: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_688),2-proj-7-tuple(v_659),v_662,4-proj-7-tuple(v_659),5-proj-7-tuple(v_659),6-proj-7-tuple(v_659),7-proj-7-tuple(v_659))) in
        {198}let v_690: bitstring = catch-fail(concat3(v_663,2-proj-3-tuple(v_660),2-proj-2-tuple(v_688))) in
        {199}let (hs_691: handshakestate,message_a_692: bitstring) = (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-7-tuple(v_659))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (if not-caught-fail(v_665) then (if not-caught-fail(v_672) then (if not-caught-fail(v_679) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-2-tuple(v_688))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (v_689,v_690) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {200}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {201}insert statestore(alice,charlie,sid,statepack_b(hs_691));
        {202}out(pub, message_a_692)
    ) | (
        {247}get statestore(=alice,=charlie,=sid,statepack_b(hs_693: handshakestate)) in
        {204}in(pub, message_b_694: bitstring);
        {205}let v_695: bitstring = catch-fail(handshakestateunpack(hs_693)) in
        {206}let v_696: bitstring = catch-fail(deconcat3(message_b_694)) in
        {207}let v_697: bool = catch-fail(true) in
        {208}let v_698: key = catch-fail(1-proj-3-tuple(v_696)) in
        {209}let v_699: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_695))) in
        {210}let v_700: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_695)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),v_698)) else fail-any) else fail-any)) in
        {211}let v_701: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_695))) in
        {212}let v_702: bitstring = catch-fail(symmetricstateunpack(v_700)) in
        {213}let v_703: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {214}let v_704: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {215}let v_705: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {216}let v_706: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_702))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (v_703,v_704,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_707: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_706)) then cipherstatepack(2-proj-3-tuple(v_706),minnonce) else fail-any),1-proj-3-tuple(v_706),3-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any)) in
        {218}let v_708: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_695))) in
        {219}let v_709: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {220}let v_710: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {221}let v_711: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {222}let v_712: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {223}let v_713: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_709))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then (v_710,v_711,v_712) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {224}let v_714: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any)) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_713)) then cipherstatepack(2-proj-3-tuple(v_713),minnonce) else fail-any),1-proj-3-tuple(v_713),3-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any)) in
        {225}let v_715: bitstring = catch-fail(symmetricstateunpack(v_714)) in
        {226}let v_716: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_715))) in
        {227}let v_717: aead = catch-fail(decrypt(1-proj-2-tuple(v_716),2-proj-2-tuple(v_716),3-proj-3-tuple(v_715),3-proj-3-tuple(v_696))) in
        {228}let v_718: bitstring = catch-fail(aeadunpack(v_717)) in
        {229}let v_719: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_715))) in
        {230}let v_720: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_716))) && success?(1-proj-3-tuple(v_715))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then cipherstatepack(1-proj-2-tuple(v_719),increment_nonce(2-proj-2-tuple(v_716))) else fail-any) else fail-any)) in
        {231}let v_721: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_696)) && (success?(3-proj-3-tuple(v_715)) && success?(1-proj-3-tuple(v_715)))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then (if not-caught-fail(v_717) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_720) then (v_720,3-proj-3-tuple(v_718),1-proj-3-tuple(v_718)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_722: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_715),3-proj-3-tuple(v_715)))) in
        {233}let v_723: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_696)) && success?(symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_715),3-proj-3-tuple(v_715)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),3-proj-3-tuple(v_696))) else fail-any) else fail-any)) in
        {234}let v_724: bitstring = catch-fail((if success?(3-proj-3-tuple(v_696)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if not-caught-fail(v_723) then (v_723,2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_725: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_724),2-proj-7-tuple(v_695),3-proj-7-tuple(v_695),4-proj-7-tuple(v_695),v_698,6-proj-7-tuple(v_695),7-proj-7-tuple(v_695))) in
        {236}let v_726: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_724))) in
        {237}let v_727: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_726),zero)) in
        {238}let v_728: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_726),zero)) in
        {239}let v_729: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_726),zero)) in
        {240}let v_730: bitstring = catch-fail((if success?(2-proj-3-tuple(v_726)) then (if not-caught-fail(v_727) then (if not-caught-fail(v_728) then (if not-caught-fail(v_729) then (v_727,v_728,v_729) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {241}let v_731: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_730)) then cipherstatepack(1-proj-3-tuple(v_730),minnonce) else fail-any)) in
        {242}let v_732: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_730)) then cipherstatepack(2-proj-3-tuple(v_730),minnonce) else fail-any)) in
        {243}let v_733: bitstring = catch-fail((if success?(1-proj-3-tuple(v_724)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_732) then (1-proj-3-tuple(v_724),v_731,v_732) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let (hs_734: handshakestate,plaintext_b_735: bitstring,valid_736: bool,cs1_737: cipherstate,cs2_738: cipherstate) = (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-7-tuple(v_695))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (if not-caught-fail(v_700) then (if not-caught-fail(v_707) then (if not-caught-fail(v_714) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (v_697 && 3-proj-3-tuple(v_724)) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (v_725,2-proj-3-tuple(v_724),true,2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {245}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_735);
        {246}insert statestore(alice,charlie,sid,statepack_c(hs_734,cs1_737,cs2_738))
    ) | (
        {248}!
        {267}get statestore(=alice,=charlie,=sid,statepack_c(hs_739: handshakestate,cs1_740: cipherstate,cs2_741: cipherstate)) in
        {249}let hs_742: handshakestate = handshakestatesetcs(hs_739,cs1_740) in
        {250}let v_743: bitstring = catch-fail(handshakestateunpack(hs_742)) in
        {251}let v_744: bitstring = catch-fail((empty,empty,empty)) in
        {252}let v_745: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_743))) in
        {253}let v_746: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_745))) in
        {254}let v_747: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_746),2-proj-2-tuple(v_746),3-proj-3-tuple(v_745),msg_c(alice,charlie,sid))) in
        {255}let v_748: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_745))) in
        {256}let v_749: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_746))) && success?(1-proj-3-tuple(v_745))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then cipherstatepack(1-proj-2-tuple(v_748),increment_nonce(2-proj-2-tuple(v_746))) else fail-any) else fail-any)) in
        {257}let v_750: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_745)) && success?(1-proj-3-tuple(v_745))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_749) then (v_749,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let v_751: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_750),2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)))) in
        {259}let v_752: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_750)) && success?(symmetricstatepack(1-proj-2-tuple(v_750),2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then symmetricstatepack(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),hash(3-proj-3-tuple(v_751),2-proj-2-tuple(v_750))) else fail-any) else fail-any)) in
        {260}let v_753: bitstring = catch-fail((if success?(1-proj-7-tuple(v_743)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then (if not-caught-fail(v_752) then (v_752,2-proj-2-tuple(v_750)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_754: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_753),2-proj-7-tuple(v_743),3-proj-7-tuple(v_743),4-proj-7-tuple(v_743),5-proj-7-tuple(v_743),6-proj-7-tuple(v_743),7-proj-7-tuple(v_743))) in
        {262}let v_755: bitstring = catch-fail(concat3(1-proj-3-tuple(v_744),2-proj-3-tuple(v_744),2-proj-2-tuple(v_753))) in
        {263}let (hs_756: handshakestate,message_c_757: bitstring) = (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-7-tuple(v_743))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (v_754,v_755) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {264}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {265}insert statestore(alice,charlie,sid,statepack_d(hs_756,handshakestategetcs(hs_756),cs2_741));
        {266}out(pub, message_c_757)
    ) | (
        {268}!
        {288}get statestore(=alice,=charlie,=sid,statepack_d(hs_758: handshakestate,cs1_759: cipherstate,cs2_760: cipherstate)) in
        {269}let hs_761: handshakestate = handshakestatesetcs(hs_758,cs2_760) in
        {270}in(pub, message_d_762: bitstring);
        {271}let v_763: bitstring = catch-fail(handshakestateunpack(hs_761)) in
        {272}let v_764: bitstring = catch-fail(deconcat3(message_d_762)) in
        {273}let v_765: bool = catch-fail(true) in
        {274}let v_766: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_763))) in
        {275}let v_767: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_766))) in
        {276}let v_768: aead = catch-fail(decrypt(1-proj-2-tuple(v_767),2-proj-2-tuple(v_767),3-proj-3-tuple(v_766),3-proj-3-tuple(v_764))) in
        {277}let v_769: bitstring = catch-fail(aeadunpack(v_768)) in
        {278}let v_770: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_766))) in
        {279}let v_771: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_767))) && success?(1-proj-3-tuple(v_766))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then cipherstatepack(1-proj-2-tuple(v_770),increment_nonce(2-proj-2-tuple(v_767))) else fail-any) else fail-any)) in
        {280}let v_772: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_764)) && (success?(3-proj-3-tuple(v_766)) && success?(1-proj-3-tuple(v_766)))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then (if not-caught-fail(v_768) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if not-caught-fail(v_771) then (v_771,3-proj-3-tuple(v_769),1-proj-3-tuple(v_769)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {281}let v_773: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_766),3-proj-3-tuple(v_766)))) in
        {282}let v_774: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_764)) && success?(symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_766),3-proj-3-tuple(v_766)))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_773),hash(3-proj-3-tuple(v_773),3-proj-3-tuple(v_764))) else fail-any) else fail-any)) in
        {283}let v_775: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_764)) && success?(1-proj-7-tuple(v_763))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_774) then (v_774,2-proj-3-tuple(v_772),3-proj-3-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_776: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_775),2-proj-7-tuple(v_763),3-proj-7-tuple(v_763),4-proj-7-tuple(v_763),5-proj-7-tuple(v_763),6-proj-7-tuple(v_763),7-proj-7-tuple(v_763))) in
        {285}let (hs_777: handshakestate,plaintext_d_778: bitstring,valid_779: bool) = (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-7-tuple(v_763))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_765) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if (v_765 && 3-proj-3-tuple(v_775)) then (if not-caught-fail(v_776) then (v_776,2-proj-3-tuple(v_775),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {286}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_778);
        {287}event RecvEnd(valid_779)
    ) | (
        {289}event LeakS(phase0,alice);
        {290}out(pub, key_s(alice))
    ) | (
        {291}phase 1;
        {292}event LeakS(phase1,alice);
        {293}out(pub, key_s(alice))
    )
) | (
    {294}let v_780: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {295}let s_781: keypair = (if not-caught-fail(v_780) then keypairpack(validkey(v_780),key_s(bob)) else fail-any) in
    {296}out(pub, getpublickey(s_781));
    (
        {297}let e_782: keypair = keypairpack(empty,empty) in
        {298}let v_783: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {299}let rs_784: key = getpublickey((if not-caught-fail(v_783) then keypairpack(validkey(v_783),key_s(alice)) else fail-any)) in
        {300}let re_785: key = empty in
        {301}let v_786: bitstring = catch-fail(hash(somename,empty)) in
        {302}let v_787: key = catch-fail(v_786) in
        {303}let v_788: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {304}let v_789: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then symmetricstatepack(v_788,v_787,v_786) else fail-any) else fail-any) else fail-any))) in
        {305}let v_790: symmetricstate = catch-fail((if success?((if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then symmetricstatepack(v_788,v_787,v_786) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then symmetricstatepack(1-proj-3-tuple(v_789),2-proj-3-tuple(v_789),hash(3-proj-3-tuple(v_789),empty)) else fail-any) else fail-any)) in
        {306}let v_791: bitstring = catch-fail(symmetricstateunpack(v_790)) in
        {307}let v_792: symmetricstate = catch-fail((if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),rs_784)) else fail-any)) in
        {308}let v_793: bitstring = catch-fail(symmetricstateunpack(v_792)) in
        {309}let v_794: symmetricstate = catch-fail((if success?(getpublickey(s_781)) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),getpublickey(s_781))) else fail-any) else fail-any)) in
        {310}let hs_795: handshakestate = (if not-caught-fail(v_790) then (if not-caught-fail(v_792) then (if not-caught-fail(v_794) then handshakestatepack(v_794,s_781,e_782,rs_784,re_785,empty,false) else fail-any) else fail-any) else fail-any) in
        {311}insert statestore(bob,alice,sid,statepack_a(hs_795))
    ) | (
        {347}get statestore(=bob,=alice,=sid,statepack_a(hs_796: handshakestate)) in
        {312}in(pub, message_a_797: bitstring);
        {313}let v_798: bitstring = catch-fail(handshakestateunpack(hs_796)) in
        {314}let v_799: bitstring = catch-fail(deconcat3(message_a_797)) in
        {315}let v_800: bool = catch-fail(true) in
        {316}let v_801: key = catch-fail(1-proj-3-tuple(v_799)) in
        {317}let v_802: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_798))) in
        {318}let v_803: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_798)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_802),hash(3-proj-3-tuple(v_802),v_801)) else fail-any) else fail-any)) in
        {319}let v_804: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_798))) in
        {320}let v_805: bitstring = catch-fail(symmetricstateunpack(v_803)) in
        {321}let v_806: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_805),(if success?(2-proj-7-tuple(v_798)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then dhexp(2-proj-2-tuple(v_804),v_801) else fail-any) else fail-any))) in
        {322}let v_807: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_805),(if success?(2-proj-7-tuple(v_798)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then dhexp(2-proj-2-tuple(v_804),v_801) else fail-any) else fail-any))) in
        {323}let v_808: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_805),(if success?(2-proj-7-tuple(v_798)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then dhexp(2-proj-2-tuple(v_804),v_801) else fail-any) else fail-any))) in
        {324}let v_809: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_798)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then dhexp(2-proj-2-tuple(v_804),v_801) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_805))) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then (if not-caught-fail(v_808) then (v_806,v_807,v_808) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_810: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_798)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then dhexp(2-proj-2-tuple(v_804),v_801) else fail-any) else fail-any)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_809)) then cipherstatepack(2-proj-3-tuple(v_809),minnonce) else fail-any),1-proj-3-tuple(v_809),3-proj-3-tuple(v_805)) else fail-any) else fail-any) else fail-any)) in
        {326}let v_811: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_798))) in
        {327}let v_812: bitstring = catch-fail(symmetricstateunpack(v_810)) in
        {328}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),(if (success?(4-proj-7-tuple(v_798)) && success?(2-proj-7-tuple(v_798))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),4-proj-7-tuple(v_798)) else fail-any) else fail-any))) in
        {329}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),(if (success?(4-proj-7-tuple(v_798)) && success?(2-proj-7-tuple(v_798))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),4-proj-7-tuple(v_798)) else fail-any) else fail-any))) in
        {330}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),(if (success?(4-proj-7-tuple(v_798)) && success?(2-proj-7-tuple(v_798))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),4-proj-7-tuple(v_798)) else fail-any) else fail-any))) in
        {331}let v_816: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_798)) && success?(2-proj-7-tuple(v_798))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),4-proj-7-tuple(v_798)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_812))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_817: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_798)) && success?(2-proj-7-tuple(v_798))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),4-proj-7-tuple(v_798)) else fail-any) else fail-any)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any),1-proj-3-tuple(v_816),3-proj-3-tuple(v_812)) else fail-any) else fail-any) else fail-any)) in
        {333}let v_818: bitstring = catch-fail(symmetricstateunpack(v_817)) in
        {334}let v_819: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_818))) in
        {335}let v_820: aead = catch-fail(decrypt(1-proj-2-tuple(v_819),2-proj-2-tuple(v_819),3-proj-3-tuple(v_818),3-proj-3-tuple(v_799))) in
        {336}let v_821: bitstring = catch-fail(aeadunpack(v_820)) in
        {337}let v_822: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_818))) in
        {338}let v_823: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_819))) && success?(1-proj-3-tuple(v_818))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then cipherstatepack(1-proj-2-tuple(v_822),increment_nonce(2-proj-2-tuple(v_819))) else fail-any) else fail-any)) in
        {339}let v_824: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_799)) && (success?(3-proj-3-tuple(v_818)) && success?(1-proj-3-tuple(v_818)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then (if not-caught-fail(v_820) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if not-caught-fail(v_823) then (v_823,3-proj-3-tuple(v_821),1-proj-3-tuple(v_821)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_825: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_824),2-proj-3-tuple(v_818),3-proj-3-tuple(v_818)))) in
        {341}let v_826: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_799)) && success?(symmetricstatepack(1-proj-3-tuple(v_824),2-proj-3-tuple(v_818),3-proj-3-tuple(v_818)))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then symmetricstatepack(1-proj-3-tuple(v_825),2-proj-3-tuple(v_825),hash(3-proj-3-tuple(v_825),3-proj-3-tuple(v_799))) else fail-any) else fail-any)) in
        {342}let v_827: bitstring = catch-fail((if success?(3-proj-3-tuple(v_799)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_826) then (v_826,2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_828: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_827),2-proj-7-tuple(v_798),3-proj-7-tuple(v_798),4-proj-7-tuple(v_798),v_801,6-proj-7-tuple(v_798),7-proj-7-tuple(v_798))) in
        {344}let (hs_829: handshakestate,plaintext_a: bitstring,valid_830: bool) = (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-7-tuple(v_798))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if not-caught-fail(v_803) then (if not-caught-fail(v_810) then (if not-caught-fail(v_817) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if (v_800 && 3-proj-3-tuple(v_827)) then (if not-caught-fail(v_828) then (v_828,2-proj-3-tuple(v_827),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {345}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {346}insert statestore(bob,alice,sid,statepack_b(hs_829))
    ) | (
        {392}get statestore(=bob,=alice,=sid,statepack_b(hs_831: handshakestate)) in
        {348}let v_832: bitstring = catch-fail(handshakestateunpack(hs_831)) in
        {349}let v_833: bitstring = catch-fail((empty,empty,empty)) in
        {350}let v_834: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {351}let v_835: keypair = catch-fail((if not-caught-fail(v_834) then keypairpack(validkey(v_834),key_e(bob,alice,sid)) else fail-any)) in
        {352}let v_836: bitstring = catch-fail(getpublickey(v_835)) in
        {353}let v_837: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_832))) in
        {354}let v_838: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_832)) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack(1-proj-3-tuple(v_837),2-proj-3-tuple(v_837),hash(3-proj-3-tuple(v_837),v_836)) else fail-any) else fail-any)) in
        {355}let v_839: bitstring = catch-fail(keypairunpack(v_835)) in
        {356}let v_840: bitstring = catch-fail(symmetricstateunpack(v_838)) in
        {357}let v_841: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_840),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {358}let v_842: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_840),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {359}let v_843: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_840),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {360}let v_844: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_840))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (v_841,v_842,v_843) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_845: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_844)) then cipherstatepack(2-proj-3-tuple(v_844),minnonce) else fail-any),1-proj-3-tuple(v_844),3-proj-3-tuple(v_840)) else fail-any) else fail-any) else fail-any)) in
        {362}let v_846: bitstring = catch-fail(keypairunpack(v_835)) in
        {363}let v_847: bitstring = catch-fail(symmetricstateunpack(v_845)) in
        {364}let v_848: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_847),(if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {365}let v_849: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_847),(if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {366}let v_850: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_847),(if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {367}let v_851: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_847))) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (v_848,v_849,v_850) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {368}let v_852: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_851)) then cipherstatepack(2-proj-3-tuple(v_851),minnonce) else fail-any),1-proj-3-tuple(v_851),3-proj-3-tuple(v_847)) else fail-any) else fail-any) else fail-any)) in
        {369}let v_853: bitstring = catch-fail(symmetricstateunpack(v_852)) in
        {370}let v_854: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_853))) in
        {371}let v_855: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_854),2-proj-2-tuple(v_854),3-proj-3-tuple(v_853),msg_b(bob,alice,sid))) in
        {372}let v_856: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_853))) in
        {373}let v_857: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_854))) && success?(1-proj-3-tuple(v_853))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then cipherstatepack(1-proj-2-tuple(v_856),increment_nonce(2-proj-2-tuple(v_854))) else fail-any) else fail-any)) in
        {374}let v_858: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_853)) && success?(1-proj-3-tuple(v_853))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then (if not-caught-fail(v_855) then (if not-caught-fail(v_857) then (v_857,v_855) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_859: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_858),2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)))) in
        {376}let v_860: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_858)) && success?(symmetricstatepack(1-proj-2-tuple(v_858),2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_859),hash(3-proj-3-tuple(v_859),2-proj-2-tuple(v_858))) else fail-any) else fail-any)) in
        {377}let v_861: bitstring = catch-fail((if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then (if not-caught-fail(v_860) then (v_860,2-proj-2-tuple(v_858)) else fail-any) else fail-any) else fail-any)) in
        {378}let v_862: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_861),2-proj-7-tuple(v_832),v_835,4-proj-7-tuple(v_832),5-proj-7-tuple(v_832),6-proj-7-tuple(v_832),7-proj-7-tuple(v_832))) in
        {379}let v_863: bitstring = catch-fail(concat3(v_836,2-proj-3-tuple(v_833),2-proj-2-tuple(v_861))) in
        {380}let v_864: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_861))) in
        {381}let v_865: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_864),zero)) in
        {382}let v_866: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_864),zero)) in
        {383}let v_867: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_864),zero)) in
        {384}let v_868: bitstring = catch-fail((if success?(2-proj-3-tuple(v_864)) then (if not-caught-fail(v_865) then (if not-caught-fail(v_866) then (if not-caught-fail(v_867) then (v_865,v_866,v_867) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {385}let v_869: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_868)) then cipherstatepack(1-proj-3-tuple(v_868),minnonce) else fail-any)) in
        {386}let v_870: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_868)) then cipherstatepack(2-proj-3-tuple(v_868),minnonce) else fail-any)) in
        {387}let v_871: bitstring = catch-fail((if success?(1-proj-2-tuple(v_861)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (1-proj-2-tuple(v_861),v_869,v_870) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {388}let (hs_872: handshakestate,message_b_873: bitstring,cs1_874: cipherstate,cs2_875: cipherstate) = (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-7-tuple(v_832))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if not-caught-fail(v_835) then (if not-caught-fail(v_836) then (if not-caught-fail(v_838) then (if not-caught-fail(v_845) then (if not-caught-fail(v_852) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then (if not-caught-fail(v_862) then (if not-caught-fail(v_863) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (v_862,v_863,2-proj-3-tuple(v_871),3-proj-3-tuple(v_871)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {389}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {390}insert statestore(bob,alice,sid,statepack_c(hs_872,cs1_874,cs2_875));
        {391}out(pub, message_b_873)
    ) | (
        {393}!
        {413}get statestore(=bob,=alice,=sid,statepack_c(hs_876: handshakestate,cs1_877: cipherstate,cs2_878: cipherstate)) in
        {394}let hs_879: handshakestate = handshakestatesetcs(hs_876,cs1_877) in
        {395}in(pub, message_c_880: bitstring);
        {396}let v_881: bitstring = catch-fail(handshakestateunpack(hs_879)) in
        {397}let v_882: bitstring = catch-fail(deconcat3(message_c_880)) in
        {398}let v_883: bool = catch-fail(true) in
        {399}let v_884: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_881))) in
        {400}let v_885: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_884))) in
        {401}let v_886: aead = catch-fail(decrypt(1-proj-2-tuple(v_885),2-proj-2-tuple(v_885),3-proj-3-tuple(v_884),3-proj-3-tuple(v_882))) in
        {402}let v_887: bitstring = catch-fail(aeadunpack(v_886)) in
        {403}let v_888: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_884))) in
        {404}let v_889: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_885))) && success?(1-proj-3-tuple(v_884))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then cipherstatepack(1-proj-2-tuple(v_888),increment_nonce(2-proj-2-tuple(v_885))) else fail-any) else fail-any)) in
        {405}let v_890: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_882)) && (success?(3-proj-3-tuple(v_884)) && success?(1-proj-3-tuple(v_884)))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then (if not-caught-fail(v_886) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_889) then (v_889,3-proj-3-tuple(v_887),1-proj-3-tuple(v_887)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_891: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_890),2-proj-3-tuple(v_884),3-proj-3-tuple(v_884)))) in
        {407}let v_892: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_882)) && success?(symmetricstatepack(1-proj-3-tuple(v_890),2-proj-3-tuple(v_884),3-proj-3-tuple(v_884)))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then symmetricstatepack(1-proj-3-tuple(v_891),2-proj-3-tuple(v_891),hash(3-proj-3-tuple(v_891),3-proj-3-tuple(v_882))) else fail-any) else fail-any)) in
        {408}let v_893: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_882)) && success?(1-proj-7-tuple(v_881))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_892) then (v_892,2-proj-3-tuple(v_890),3-proj-3-tuple(v_890)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_894: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_893),2-proj-7-tuple(v_881),3-proj-7-tuple(v_881),4-proj-7-tuple(v_881),5-proj-7-tuple(v_881),6-proj-7-tuple(v_881),7-proj-7-tuple(v_881))) in
        {410}let (hs_895: handshakestate,plaintext_c: bitstring,valid_896: bool) = (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-7-tuple(v_881))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_883) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if (v_883 && 3-proj-3-tuple(v_893)) then (if not-caught-fail(v_894) then (v_894,2-proj-3-tuple(v_893),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {411}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {412}insert statestore(bob,alice,sid,statepack_d(hs_895,handshakestategetcs(hs_895),cs2_878))
    ) | (
        {414}!
        {432}get statestore(=bob,=alice,=sid,statepack_d(hs_897: handshakestate,cs1_898: cipherstate,cs2_899: cipherstate)) in
        {415}let hs_900: handshakestate = handshakestatesetcs(hs_897,cs2_899) in
        {416}let v_901: bitstring = catch-fail(handshakestateunpack(hs_900)) in
        {417}let v_902: bitstring = catch-fail((empty,empty,empty)) in
        {418}let v_903: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_901))) in
        {419}let v_904: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_903))) in
        {420}let v_905: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_904),2-proj-2-tuple(v_904),3-proj-3-tuple(v_903),msg_d(bob,alice,sid))) in
        {421}let v_906: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_903))) in
        {422}let v_907: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_904))) && success?(1-proj-3-tuple(v_903))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then cipherstatepack(1-proj-2-tuple(v_906),increment_nonce(2-proj-2-tuple(v_904))) else fail-any) else fail-any)) in
        {423}let v_908: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_903)) && success?(1-proj-3-tuple(v_903))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then (if not-caught-fail(v_905) then (if not-caught-fail(v_907) then (v_907,v_905) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_909: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_908),2-proj-3-tuple(v_903),3-proj-3-tuple(v_903)))) in
        {425}let v_910: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_908)) && success?(symmetricstatepack(1-proj-2-tuple(v_908),2-proj-3-tuple(v_903),3-proj-3-tuple(v_903)))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),hash(3-proj-3-tuple(v_909),2-proj-2-tuple(v_908))) else fail-any) else fail-any)) in
        {426}let v_911: bitstring = catch-fail((if success?(1-proj-7-tuple(v_901)) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-2-tuple(v_908))))) then (if not-caught-fail(v_910) then (v_910,2-proj-2-tuple(v_908)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_912: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_911),2-proj-7-tuple(v_901),3-proj-7-tuple(v_901),4-proj-7-tuple(v_901),5-proj-7-tuple(v_901),6-proj-7-tuple(v_901),7-proj-7-tuple(v_901))) in
        {428}let v_913: bitstring = catch-fail(concat3(1-proj-3-tuple(v_902),2-proj-3-tuple(v_902),2-proj-2-tuple(v_911))) in
        {429}let (hs_914: handshakestate,message_d_915: bitstring) = (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-7-tuple(v_901))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (v_912,v_913) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {430}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {431}out(pub, message_d_915)
    ) | (
        {433}event LeakS(phase0,bob);
        {434}out(pub, key_s(bob))
    ) | (
        {435}phase 1;
        {436}event LeakS(phase1,bob);
        {437}out(pub, key_s(bob))
    )
) | (
    {438}let v_916: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {439}let s_917: keypair = (if not-caught-fail(v_916) then keypairpack(validkey(v_916),key_s(bob)) else fail-any) in
    {440}out(pub, getpublickey(s_917));
    (
        {441}let e_918: keypair = keypairpack(empty,empty) in
        {442}let v_919: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {443}let rs_920: key = getpublickey((if not-caught-fail(v_919) then keypairpack(validkey(v_919),key_s(charlie)) else fail-any)) in
        {444}let re_921: key = empty in
        {445}let v_922: bitstring = catch-fail(hash(somename,empty)) in
        {446}let v_923: key = catch-fail(v_922) in
        {447}let v_924: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {448}let v_925: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then symmetricstatepack(v_924,v_923,v_922) else fail-any) else fail-any) else fail-any))) in
        {449}let v_926: symmetricstate = catch-fail((if success?((if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then symmetricstatepack(v_924,v_923,v_922) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_925),hash(3-proj-3-tuple(v_925),empty)) else fail-any) else fail-any)) in
        {450}let v_927: bitstring = catch-fail(symmetricstateunpack(v_926)) in
        {451}let v_928: symmetricstate = catch-fail((if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_927),hash(3-proj-3-tuple(v_927),rs_920)) else fail-any)) in
        {452}let v_929: bitstring = catch-fail(symmetricstateunpack(v_928)) in
        {453}let v_930: symmetricstate = catch-fail((if success?(getpublickey(s_917)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),hash(3-proj-3-tuple(v_929),getpublickey(s_917))) else fail-any) else fail-any)) in
        {454}let hs_931: handshakestate = (if not-caught-fail(v_926) then (if not-caught-fail(v_928) then (if not-caught-fail(v_930) then handshakestatepack(v_930,s_917,e_918,rs_920,re_921,empty,false) else fail-any) else fail-any) else fail-any) in
        {455}insert statestore(bob,charlie,sid,statepack_a(hs_931))
    ) | (
        {491}get statestore(=bob,=charlie,=sid,statepack_a(hs_932: handshakestate)) in
        {456}in(pub, message_a_933: bitstring);
        {457}let v_934: bitstring = catch-fail(handshakestateunpack(hs_932)) in
        {458}let v_935: bitstring = catch-fail(deconcat3(message_a_933)) in
        {459}let v_936: bool = catch-fail(true) in
        {460}let v_937: key = catch-fail(1-proj-3-tuple(v_935)) in
        {461}let v_938: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_934))) in
        {462}let v_939: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_934)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then symmetricstatepack(1-proj-3-tuple(v_938),2-proj-3-tuple(v_938),hash(3-proj-3-tuple(v_938),v_937)) else fail-any) else fail-any)) in
        {463}let v_940: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_934))) in
        {464}let v_941: bitstring = catch-fail(symmetricstateunpack(v_939)) in
        {465}let v_942: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_941),(if success?(2-proj-7-tuple(v_934)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_937) else fail-any) else fail-any))) in
        {466}let v_943: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_941),(if success?(2-proj-7-tuple(v_934)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_937) else fail-any) else fail-any))) in
        {467}let v_944: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_941),(if success?(2-proj-7-tuple(v_934)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_937) else fail-any) else fail-any))) in
        {468}let v_945: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_934)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_937) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_941))) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then (v_942,v_943,v_944) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {469}let v_946: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_934)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_937) else fail-any) else fail-any)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_945)) then cipherstatepack(2-proj-3-tuple(v_945),minnonce) else fail-any),1-proj-3-tuple(v_945),3-proj-3-tuple(v_941)) else fail-any) else fail-any) else fail-any)) in
        {470}let v_947: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_934))) in
        {471}let v_948: bitstring = catch-fail(symmetricstateunpack(v_946)) in
        {472}let v_949: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_948),(if (success?(4-proj-7-tuple(v_934)) && success?(2-proj-7-tuple(v_934))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_934)) else fail-any) else fail-any))) in
        {473}let v_950: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_948),(if (success?(4-proj-7-tuple(v_934)) && success?(2-proj-7-tuple(v_934))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_934)) else fail-any) else fail-any))) in
        {474}let v_951: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_948),(if (success?(4-proj-7-tuple(v_934)) && success?(2-proj-7-tuple(v_934))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_934)) else fail-any) else fail-any))) in
        {475}let v_952: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_934)) && success?(2-proj-7-tuple(v_934))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_934)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_948))) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (v_949,v_950,v_951) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_953: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_934)) && success?(2-proj-7-tuple(v_934))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_934)) else fail-any) else fail-any)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_952)) then cipherstatepack(2-proj-3-tuple(v_952),minnonce) else fail-any),1-proj-3-tuple(v_952),3-proj-3-tuple(v_948)) else fail-any) else fail-any) else fail-any)) in
        {477}let v_954: bitstring = catch-fail(symmetricstateunpack(v_953)) in
        {478}let v_955: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {479}let v_956: aead = catch-fail(decrypt(1-proj-2-tuple(v_955),2-proj-2-tuple(v_955),3-proj-3-tuple(v_954),3-proj-3-tuple(v_935))) in
        {480}let v_957: bitstring = catch-fail(aeadunpack(v_956)) in
        {481}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {482}let v_959: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_955))) && success?(1-proj-3-tuple(v_954))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then cipherstatepack(1-proj-2-tuple(v_958),increment_nonce(2-proj-2-tuple(v_955))) else fail-any) else fail-any)) in
        {483}let v_960: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_935)) && (success?(3-proj-3-tuple(v_954)) && success?(1-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if not-caught-fail(v_959) then (v_959,3-proj-3-tuple(v_957),1-proj-3-tuple(v_957)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_961: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) in
        {485}let v_962: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_935)) && success?(symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_961),hash(3-proj-3-tuple(v_961),3-proj-3-tuple(v_935))) else fail-any) else fail-any)) in
        {486}let v_963: bitstring = catch-fail((if success?(3-proj-3-tuple(v_935)) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,2-proj-3-tuple(v_960),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_964: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_963),2-proj-7-tuple(v_934),3-proj-7-tuple(v_934),4-proj-7-tuple(v_934),v_937,6-proj-7-tuple(v_934),7-proj-7-tuple(v_934))) in
        {488}let (hs_965: handshakestate,plaintext_a_966: bitstring,valid_967: bool) = (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-7-tuple(v_934))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (if not-caught-fail(v_939) then (if not-caught-fail(v_946) then (if not-caught-fail(v_953) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (v_936 && 3-proj-3-tuple(v_963)) then (if not-caught-fail(v_964) then (v_964,2-proj-3-tuple(v_963),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {489}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_966);
        {490}insert statestore(bob,charlie,sid,statepack_b(hs_965))
    ) | (
        {536}get statestore(=bob,=charlie,=sid,statepack_b(hs_968: handshakestate)) in
        {492}let v_969: bitstring = catch-fail(handshakestateunpack(hs_968)) in
        {493}let v_970: bitstring = catch-fail((empty,empty,empty)) in
        {494}let v_971: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {495}let v_972: keypair = catch-fail((if not-caught-fail(v_971) then keypairpack(validkey(v_971),key_e(bob,charlie,sid)) else fail-any)) in
        {496}let v_973: bitstring = catch-fail(getpublickey(v_972)) in
        {497}let v_974: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_969))) in
        {498}let v_975: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_969)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then symmetricstatepack(1-proj-3-tuple(v_974),2-proj-3-tuple(v_974),hash(3-proj-3-tuple(v_974),v_973)) else fail-any) else fail-any)) in
        {499}let v_976: bitstring = catch-fail(keypairunpack(v_972)) in
        {500}let v_977: bitstring = catch-fail(symmetricstateunpack(v_975)) in
        {501}let v_978: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_977),(if success?(5-proj-7-tuple(v_969)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then dhexp(2-proj-2-tuple(v_976),5-proj-7-tuple(v_969)) else fail-any) else fail-any))) in
        {502}let v_979: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_977),(if success?(5-proj-7-tuple(v_969)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then dhexp(2-proj-2-tuple(v_976),5-proj-7-tuple(v_969)) else fail-any) else fail-any))) in
        {503}let v_980: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_977),(if success?(5-proj-7-tuple(v_969)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then dhexp(2-proj-2-tuple(v_976),5-proj-7-tuple(v_969)) else fail-any) else fail-any))) in
        {504}let v_981: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_969)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then dhexp(2-proj-2-tuple(v_976),5-proj-7-tuple(v_969)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_977))) then (if not-caught-fail(v_978) then (if not-caught-fail(v_979) then (if not-caught-fail(v_980) then (v_978,v_979,v_980) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {505}let v_982: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_969)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then dhexp(2-proj-2-tuple(v_976),5-proj-7-tuple(v_969)) else fail-any) else fail-any)) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_981)) then cipherstatepack(2-proj-3-tuple(v_981),minnonce) else fail-any),1-proj-3-tuple(v_981),3-proj-3-tuple(v_977)) else fail-any) else fail-any) else fail-any)) in
        {506}let v_983: bitstring = catch-fail(keypairunpack(v_972)) in
        {507}let v_984: bitstring = catch-fail(symmetricstateunpack(v_982)) in
        {508}let v_985: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_984),(if success?(4-proj-7-tuple(v_969)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),4-proj-7-tuple(v_969)) else fail-any) else fail-any))) in
        {509}let v_986: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_984),(if success?(4-proj-7-tuple(v_969)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),4-proj-7-tuple(v_969)) else fail-any) else fail-any))) in
        {510}let v_987: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_984),(if success?(4-proj-7-tuple(v_969)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),4-proj-7-tuple(v_969)) else fail-any) else fail-any))) in
        {511}let v_988: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_969)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),4-proj-7-tuple(v_969)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_984))) then (if not-caught-fail(v_985) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (v_985,v_986,v_987) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_989: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_969)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),4-proj-7-tuple(v_969)) else fail-any) else fail-any)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_988)) then cipherstatepack(2-proj-3-tuple(v_988),minnonce) else fail-any),1-proj-3-tuple(v_988),3-proj-3-tuple(v_984)) else fail-any) else fail-any) else fail-any)) in
        {513}let v_990: bitstring = catch-fail(symmetricstateunpack(v_989)) in
        {514}let v_991: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {515}let v_992: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_991),2-proj-2-tuple(v_991),3-proj-3-tuple(v_990),msg_b(bob,charlie,sid))) in
        {516}let v_993: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {517}let v_994: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_991))) && success?(1-proj-3-tuple(v_990))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-2-tuple(v_993))))) then cipherstatepack(1-proj-2-tuple(v_993),increment_nonce(2-proj-2-tuple(v_991))) else fail-any) else fail-any)) in
        {518}let v_995: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_990)) && success?(1-proj-3-tuple(v_990))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_992) then (if not-caught-fail(v_994) then (v_994,v_992) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_996: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_995),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) in
        {520}let v_997: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_995)) && success?(symmetricstatepack(1-proj-2-tuple(v_995),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_996),hash(3-proj-3-tuple(v_996),2-proj-2-tuple(v_995))) else fail-any) else fail-any)) in
        {521}let v_998: bitstring = catch-fail((if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-2-tuple(v_995))))) then (if not-caught-fail(v_997) then (v_997,2-proj-2-tuple(v_995)) else fail-any) else fail-any) else fail-any)) in
        {522}let v_999: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_998),2-proj-7-tuple(v_969),v_972,4-proj-7-tuple(v_969),5-proj-7-tuple(v_969),6-proj-7-tuple(v_969),7-proj-7-tuple(v_969))) in
        {523}let v_1000: bitstring = catch-fail(concat3(v_973,2-proj-3-tuple(v_970),2-proj-2-tuple(v_998))) in
        {524}let v_1001: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_998))) in
        {525}let v_1002: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1001),zero)) in
        {526}let v_1003: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1001),zero)) in
        {527}let v_1004: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1001),zero)) in
        {528}let v_1005: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1001)) then (if not-caught-fail(v_1002) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1004) then (v_1002,v_1003,v_1004) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1006: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1005)) then cipherstatepack(1-proj-3-tuple(v_1005),minnonce) else fail-any)) in
        {530}let v_1007: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1005)) then cipherstatepack(2-proj-3-tuple(v_1005),minnonce) else fail-any)) in
        {531}let v_1008: bitstring = catch-fail((if success?(1-proj-2-tuple(v_998)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1006) then (if not-caught-fail(v_1007) then (1-proj-2-tuple(v_998),v_1006,v_1007) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let (hs_1009: handshakestate,message_b_1010: bitstring,cs1_1011: cipherstate,cs2_1012: cipherstate) = (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-7-tuple(v_969))))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (if not-caught-fail(v_975) then (if not-caught-fail(v_982) then (if not-caught-fail(v_989) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-2-tuple(v_998))))) then (if not-caught-fail(v_999) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (v_999,v_1000,2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {533}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {534}insert statestore(bob,charlie,sid,statepack_c(hs_1009,cs1_1011,cs2_1012));
        {535}out(pub, message_b_1010)
    ) | (
        {537}!
        {557}get statestore(=bob,=charlie,=sid,statepack_c(hs_1013: handshakestate,cs1_1014: cipherstate,cs2_1015: cipherstate)) in
        {538}let hs_1016: handshakestate = handshakestatesetcs(hs_1013,cs1_1014) in
        {539}in(pub, message_c_1017: bitstring);
        {540}let v_1018: bitstring = catch-fail(handshakestateunpack(hs_1016)) in
        {541}let v_1019: bitstring = catch-fail(deconcat3(message_c_1017)) in
        {542}let v_1020: bool = catch-fail(true) in
        {543}let v_1021: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1018))) in
        {544}let v_1022: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1021))) in
        {545}let v_1023: aead = catch-fail(decrypt(1-proj-2-tuple(v_1022),2-proj-2-tuple(v_1022),3-proj-3-tuple(v_1021),3-proj-3-tuple(v_1019))) in
        {546}let v_1024: bitstring = catch-fail(aeadunpack(v_1023)) in
        {547}let v_1025: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1021))) in
        {548}let v_1026: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1022))) && success?(1-proj-3-tuple(v_1021))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then cipherstatepack(1-proj-2-tuple(v_1025),increment_nonce(2-proj-2-tuple(v_1022))) else fail-any) else fail-any)) in
        {549}let v_1027: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1019)) && (success?(3-proj-3-tuple(v_1021)) && success?(1-proj-3-tuple(v_1021)))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-2-tuple(v_1022))))) then (if not-caught-fail(v_1023) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then (if not-caught-fail(v_1026) then (v_1026,3-proj-3-tuple(v_1024),1-proj-3-tuple(v_1024)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {550}let v_1028: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1027),2-proj-3-tuple(v_1021),3-proj-3-tuple(v_1021)))) in
        {551}let v_1029: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1019)) && success?(symmetricstatepack(1-proj-3-tuple(v_1027),2-proj-3-tuple(v_1021),3-proj-3-tuple(v_1021)))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1028),hash(3-proj-3-tuple(v_1028),3-proj-3-tuple(v_1019))) else fail-any) else fail-any)) in
        {552}let v_1030: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1019)) && success?(1-proj-7-tuple(v_1018))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then (if not-caught-fail(v_1029) then (v_1029,2-proj-3-tuple(v_1027),3-proj-3-tuple(v_1027)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1031: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1030),2-proj-7-tuple(v_1018),3-proj-7-tuple(v_1018),4-proj-7-tuple(v_1018),5-proj-7-tuple(v_1018),6-proj-7-tuple(v_1018),7-proj-7-tuple(v_1018))) in
        {554}let (hs_1032: handshakestate,plaintext_c_1033: bitstring,valid_1034: bool) = (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-7-tuple(v_1018))))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if not-caught-fail(v_1020) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (v_1020 && 3-proj-3-tuple(v_1030)) then (if not-caught-fail(v_1031) then (v_1031,2-proj-3-tuple(v_1030),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {555}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1033);
        {556}insert statestore(bob,charlie,sid,statepack_d(hs_1032,handshakestategetcs(hs_1032),cs2_1015))
    ) | (
        {558}!
        {576}get statestore(=bob,=charlie,=sid,statepack_d(hs_1035: handshakestate,cs1_1036: cipherstate,cs2_1037: cipherstate)) in
        {559}let hs_1038: handshakestate = handshakestatesetcs(hs_1035,cs2_1037) in
        {560}let v_1039: bitstring = catch-fail(handshakestateunpack(hs_1038)) in
        {561}let v_1040: bitstring = catch-fail((empty,empty,empty)) in
        {562}let v_1041: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1039))) in
        {563}let v_1042: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1041))) in
        {564}let v_1043: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1042),2-proj-2-tuple(v_1042),3-proj-3-tuple(v_1041),msg_d(bob,charlie,sid))) in
        {565}let v_1044: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1041))) in
        {566}let v_1045: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1042))) && success?(1-proj-3-tuple(v_1041))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then cipherstatepack(1-proj-2-tuple(v_1044),increment_nonce(2-proj-2-tuple(v_1042))) else fail-any) else fail-any)) in
        {567}let v_1046: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && success?(1-proj-3-tuple(v_1041))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then (if not-caught-fail(v_1043) then (if not-caught-fail(v_1045) then (v_1045,v_1043) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1047: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1046),2-proj-3-tuple(v_1041),3-proj-3-tuple(v_1041)))) in
        {569}let v_1048: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1046)) && success?(symmetricstatepack(1-proj-2-tuple(v_1046),2-proj-3-tuple(v_1041),3-proj-3-tuple(v_1041)))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then symmetricstatepack(1-proj-3-tuple(v_1047),2-proj-3-tuple(v_1047),hash(3-proj-3-tuple(v_1047),2-proj-2-tuple(v_1046))) else fail-any) else fail-any)) in
        {570}let v_1049: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1039)) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then (if not-caught-fail(v_1048) then (v_1048,2-proj-2-tuple(v_1046)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1050: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1049),2-proj-7-tuple(v_1039),3-proj-7-tuple(v_1039),4-proj-7-tuple(v_1039),5-proj-7-tuple(v_1039),6-proj-7-tuple(v_1039),7-proj-7-tuple(v_1039))) in
        {572}let v_1051: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1040),2-proj-2-tuple(v_1049))) in
        {573}let (hs_1052: handshakestate,message_d_1053: bitstring) = (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-7-tuple(v_1039))))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-2-tuple(v_1049))))) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1051) then (v_1050,v_1051) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {574}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {575}out(pub, message_d_1053)
    ) | (
        {577}event LeakS(phase0,bob);
        {578}out(pub, key_s(bob))
    ) | (
        {579}phase 1;
        {580}event LeakS(phase1,bob);
        {581}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 187 rules in the queue.
400 rules inserted. The rule base contains 396 rules. 47 rules in the queue.
600 rules inserted. The rule base contains 579 rules. 298 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 290 rules in the queue.
1000 rules inserted. The rule base contains 949 rules. 148 rules in the queue.
1200 rules inserted. The rule base contains 1146 rules. 317 rules in the queue.
1400 rules inserted. The rule base contains 1346 rules. 437 rules in the queue.
1600 rules inserted. The rule base contains 1529 rules. 460 rules in the queue.
1800 rules inserted. The rule base contains 1700 rules. 417 rules in the queue.
2000 rules inserted. The rule base contains 1879 rules. 410 rules in the queue.
2200 rules inserted. The rule base contains 2068 rules. 428 rules in the queue.
2400 rules inserted. The rule base contains 2238 rules. 440 rules in the queue.
2600 rules inserted. The rule base contains 2336 rules. 436 rules in the queue.
2800 rules inserted. The rule base contains 2509 rules. 508 rules in the queue.
3000 rules inserted. The rule base contains 2686 rules. 607 rules in the queue.
3200 rules inserted. The rule base contains 2848 rules. 618 rules in the queue.
3400 rules inserted. The rule base contains 2976 rules. 610 rules in the queue.
3600 rules inserted. The rule base contains 3100 rules. 584 rules in the queue.
3800 rules inserted. The rule base contains 3238 rules. 589 rules in the queue.
4000 rules inserted. The rule base contains 3408 rules. 616 rules in the queue.
4200 rules inserted. The rule base contains 3521 rules. 618 rules in the queue.
4400 rules inserted. The rule base contains 3605 rules. 608 rules in the queue.
4600 rules inserted. The rule base contains 3713 rules. 610 rules in the queue.
4800 rules inserted. The rule base contains 3846 rules. 594 rules in the queue.
5000 rules inserted. The rule base contains 3992 rules. 585 rules in the queue.
5200 rules inserted. The rule base contains 4132 rules. 571 rules in the queue.
5400 rules inserted. The rule base contains 4277 rules. 595 rules in the queue.
5600 rules inserted. The rule base contains 4431 rules. 633 rules in the queue.
5800 rules inserted. The rule base contains 4586 rules. 648 rules in the queue.
6000 rules inserted. The rule base contains 4732 rules. 632 rules in the queue.
6200 rules inserted. The rule base contains 4848 rules. 621 rules in the queue.
6400 rules inserted. The rule base contains 5038 rules. 674 rules in the queue.
6600 rules inserted. The rule base contains 5229 rules. 666 rules in the queue.
6800 rules inserted. The rule base contains 5413 rules. 682 rules in the queue.
7000 rules inserted. The rule base contains 5598 rules. 731 rules in the queue.
7200 rules inserted. The rule base contains 5789 rules. 783 rules in the queue.
7400 rules inserted. The rule base contains 5717 rules. 810 rules in the queue.
7600 rules inserted. The rule base contains 5896 rules. 845 rules in the queue.
7800 rules inserted. The rule base contains 6077 rules. 882 rules in the queue.
8000 rules inserted. The rule base contains 6277 rules. 865 rules in the queue.
8200 rules inserted. The rule base contains 6466 rules. 835 rules in the queue.
8400 rules inserted. The rule base contains 6584 rules. 816 rules in the queue.
8600 rules inserted. The rule base contains 6708 rules. 804 rules in the queue.
8800 rules inserted. The rule base contains 6884 rules. 717 rules in the queue.
9000 rules inserted. The rule base contains 7008 rules. 682 rules in the queue.
9200 rules inserted. The rule base contains 7154 rules. 671 rules in the queue.
9400 rules inserted. The rule base contains 7333 rules. 680 rules in the queue.
9600 rules inserted. The rule base contains 7444 rules. 642 rules in the queue.
9800 rules inserted. The rule base contains 7585 rules. 634 rules in the queue.
10000 rules inserted. The rule base contains 7781 rules. 673 rules in the queue.
10200 rules inserted. The rule base contains 7891 rules. 671 rules in the queue.
10400 rules inserted. The rule base contains 8064 rules. 682 rules in the queue.
10600 rules inserted. The rule base contains 8264 rules. 733 rules in the queue.
10800 rules inserted. The rule base contains 8406 rules. 746 rules in the queue.
11000 rules inserted. The rule base contains 8549 rules. 756 rules in the queue.
11200 rules inserted. The rule base contains 8749 rules. 752 rules in the queue.
11400 rules inserted. The rule base contains 8943 rules. 793 rules in the queue.
11600 rules inserted. The rule base contains 9044 rules. 791 rules in the queue.
11800 rules inserted. The rule base contains 9235 rules. 839 rules in the queue.
12000 rules inserted. The rule base contains 9435 rules. 874 rules in the queue.
12200 rules inserted. The rule base contains 9601 rules. 883 rules in the queue.
12400 rules inserted. The rule base contains 9707 rules. 864 rules in the queue.
12600 rules inserted. The rule base contains 9894 rules. 858 rules in the queue.
12800 rules inserted. The rule base contains 10094 rules. 833 rules in the queue.
13000 rules inserted. The rule base contains 10230 rules. 836 rules in the queue.
13200 rules inserted. The rule base contains 10326 rules. 815 rules in the queue.
13400 rules inserted. The rule base contains 10507 rules. 800 rules in the queue.
13600 rules inserted. The rule base contains 10667 rules. 775 rules in the queue.
13800 rules inserted. The rule base contains 10775 rules. 731 rules in the queue.
14000 rules inserted. The rule base contains 10918 rules. 709 rules in the queue.
14200 rules inserted. The rule base contains 11118 rules. 717 rules in the queue.
14400 rules inserted. The rule base contains 11214 rules. 700 rules in the queue.
14600 rules inserted. The rule base contains 11349 rules. 684 rules in the queue.
14800 rules inserted. The rule base contains 11547 rules. 677 rules in the queue.
15000 rules inserted. The rule base contains 11620 rules. 640 rules in the queue.
15200 rules inserted. The rule base contains 11776 rules. 644 rules in the queue.
15400 rules inserted. The rule base contains 11962 rules. 668 rules in the queue.
15600 rules inserted. The rule base contains 12056 rules. 661 rules in the queue.
15800 rules inserted. The rule base contains 12215 rules. 651 rules in the queue.
16000 rules inserted. The rule base contains 12377 rules. 595 rules in the queue.
16200 rules inserted. The rule base contains 12440 rules. 545 rules in the queue.
16400 rules inserted. The rule base contains 12592 rules. 487 rules in the queue.
16600 rules inserted. The rule base contains 12677 rules. 384 rules in the queue.
16800 rules inserted. The rule base contains 12773 rules. 288 rules in the queue.
17000 rules inserted. The rule base contains 12836 rules. 209 rules in the queue.
17200 rules inserted. The rule base contains 12889 rules. 137 rules in the queue.
17400 rules inserted. The rule base contains 12899 rules. 70 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134275]),msg_a(alice,bob,sid[!1 = @sid_1072134275]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1072134276]),msg_a(alice,bob,sid[!1 = @sid_1072134275])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134284]),msg_a(alice,bob,sid[!1 = @sid_1072134284]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1072134285]),msg_a(alice,bob,sid[!1 = @sid_1072134284])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134294]),msg_a(alice,bob,sid[!1 = @sid_1072134294]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1072134295]),msg_a(alice,bob,sid[!1 = @sid_1072134294])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134304]),msg_a(alice,bob,sid[!1 = @sid_1072134304]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1072134305]),msg_a(alice,bob,sid[!1 = @sid_1072134304])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134313]),msg_a(alice,bob,sid[!1 = @sid_1072134313]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1072134314]),msg_a(alice,bob,sid[!1 = @sid_1072134313])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134321]),msg_a(alice,bob,sid[!1 = @sid_1072134321]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1072134321]))
Abbreviations:
sid_1072134423 = sid[!1 = @sid_1072134398]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1072134423,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1072134423,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_1072134423,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {58}.
The event SendMsg(alice,bob,stagepack_a(sid_1072134423),msg_a(alice,bob,sid_1072134423)) may be executed at {55}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))) may be sent on channel pub at output {57}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {296}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {436}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {437}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134423),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134423),g))),msg_a(alice,bob,sid_1072134423)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1072134423) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1072134423)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134425]),msg_a(alice,bob,sid[!1 = @sid_1072134425]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1072134425]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134428]),msg_a(alice,bob,sid[!1 = @sid_1072134428]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1072134428]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134435]),msg_a(alice,bob,sid[!1 = @sid_1072134435]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1072134435]))
Abbreviations:
sid_1072134539 = sid[!1 = @sid_1072134514]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1072134539,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1072134539,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_1072134539,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {58}.
The event SendMsg(alice,bob,stagepack_a(sid_1072134539),msg_a(alice,bob,sid_1072134539)) may be executed at {55}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))) may be sent on channel pub at output {57}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {296}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {436}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {437}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134539),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134539),g))),msg_a(alice,bob,sid_1072134539)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1072134539) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1072134539)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134541]),msg_a(alice,bob,sid[!1 = @sid_1072134541]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1072134541]))
Abbreviations:
sid_1072134643 = sid[!1 = @sid_1072134618]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1072134643,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1072134643,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_1072134643,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {58}.
The event SendMsg(alice,bob,stagepack_a(sid_1072134643),msg_a(alice,bob,sid_1072134643)) may be executed at {55}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))) may be sent on channel pub at output {57}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {296}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {436}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {437}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072134643),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072134643),g))),msg_a(alice,bob,sid_1072134643)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1072134643) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1072134643)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134646]),msg_b(bob,alice,sid[!1 = @sid_1072134646]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134647]),msg_a(alice,bob,sid[!1 = @sid_1072134647]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1072134647]),msg_b(bob,alice,sid[!1 = @sid_1072134646])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134655]),msg_b(bob,alice,sid[!1 = @sid_1072134655]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134656]),msg_a(alice,bob,sid[!1 = @sid_1072134656]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1072134656]),msg_b(bob,alice,sid[!1 = @sid_1072134655])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134665]),msg_b(bob,alice,sid[!1 = @sid_1072134665]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134666]),msg_a(alice,bob,sid[!1 = @sid_1072134666]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1072134666]),msg_b(bob,alice,sid[!1 = @sid_1072134665])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134675]),msg_b(bob,alice,sid[!1 = @sid_1072134675]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134676]),msg_a(alice,bob,sid[!1 = @sid_1072134676]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1072134676]),msg_b(bob,alice,sid[!1 = @sid_1072134675])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134684]),msg_b(bob,alice,sid[!1 = @sid_1072134684]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134685]),msg_a(alice,bob,sid[!1 = @sid_1072134685]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1072134685]),msg_b(bob,alice,sid[!1 = @sid_1072134684])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134708]),msg_c(alice,bob,sid[!1 = @sid_1072134708]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134709]),msg_b(bob,alice,sid[!1 = @sid_1072134709]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134708]),msg_a(alice,bob,sid[!1 = @sid_1072134708]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1072134709]),msg_c(alice,bob,sid[!1 = @sid_1072134708])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134717]),msg_c(alice,bob,sid[!1 = @sid_1072134717]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134718]),msg_b(bob,alice,sid[!1 = @sid_1072134718]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134717]),msg_a(alice,bob,sid[!1 = @sid_1072134717]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1072134718]),msg_c(alice,bob,sid[!1 = @sid_1072134717])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134727]),msg_c(alice,bob,sid[!1 = @sid_1072134727]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134728]),msg_b(bob,alice,sid[!1 = @sid_1072134728]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134727]),msg_a(alice,bob,sid[!1 = @sid_1072134727]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1072134728]),msg_c(alice,bob,sid[!1 = @sid_1072134727])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1163,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134737]),msg_c(alice,bob,sid[!1 = @sid_1072134737]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134738]),msg_b(bob,alice,sid[!1 = @sid_1072134738]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134737]),msg_a(alice,bob,sid[!1 = @sid_1072134737]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1072134738]),msg_c(alice,bob,sid[!1 = @sid_1072134737])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134746]),msg_c(alice,bob,sid[!1 = @sid_1072134746]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134747]),msg_b(bob,alice,sid[!1 = @sid_1072134747]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134746]),msg_a(alice,bob,sid[!1 = @sid_1072134746]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1072134747]),msg_c(alice,bob,sid[!1 = @sid_1072134746])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1072134770]),msg_d(bob,alice,sid[!1 = @sid_1072134770]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134771]),msg_c(alice,bob,sid[!1 = @sid_1072134771]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134770]),msg_b(bob,alice,sid[!1 = @sid_1072134770]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134771]),msg_a(alice,bob,sid[!1 = @sid_1072134771]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1072134771]),msg_d(bob,alice,sid[!1 = @sid_1072134770])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1072134779]),msg_d(bob,alice,sid[!1 = @sid_1072134779]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134780]),msg_c(alice,bob,sid[!1 = @sid_1072134780]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134779]),msg_b(bob,alice,sid[!1 = @sid_1072134779]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134780]),msg_a(alice,bob,sid[!1 = @sid_1072134780]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1072134780]),msg_d(bob,alice,sid[!1 = @sid_1072134779])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1072134789]),msg_d(bob,alice,sid[!1 = @sid_1072134789]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134790]),msg_c(alice,bob,sid[!1 = @sid_1072134790]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134789]),msg_b(bob,alice,sid[!1 = @sid_1072134789]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134790]),msg_a(alice,bob,sid[!1 = @sid_1072134790]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1072134790]),msg_d(bob,alice,sid[!1 = @sid_1072134789])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1163,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1072134799]),msg_d(bob,alice,sid[!1 = @sid_1072134799]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134800]),msg_c(alice,bob,sid[!1 = @sid_1072134800]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134799]),msg_b(bob,alice,sid[!1 = @sid_1072134799]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134800]),msg_a(alice,bob,sid[!1 = @sid_1072134800]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1072134800]),msg_d(bob,alice,sid[!1 = @sid_1072134799])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1072134808]),msg_d(bob,alice,sid[!1 = @sid_1072134808]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134809]),msg_c(alice,bob,sid[!1 = @sid_1072134809]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134808]),msg_b(bob,alice,sid[!1 = @sid_1072134808]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134809]),msg_a(alice,bob,sid[!1 = @sid_1072134809]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1072134809]),msg_d(bob,alice,sid[!1 = @sid_1072134808])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1072134830]),msg_d(bob,alice,sid[!1 = @sid_1072134830]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1072134831]),msg_c(alice,bob,sid[!1 = @sid_1072134831]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1072134830]),msg_b(bob,alice,sid[!1 = @sid_1072134830]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1072134831]),msg_a(alice,bob,sid[!1 = @sid_1072134831]))) -> end(RecvEnd(true))
Abbreviations:
sid_1072135075 = sid[!1 = @sid_1072135064]
sid_1072135076 = sid[!1 = @sid_1072135019]

1. The entry statestore(alice,bob,sid_1072135075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1072135075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_1072135075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {58}.
The event SendMsg(alice,bob,stagepack_a(sid_1072135075),msg_a(alice,bob,sid_1072135075)) may be executed at {55}.
So the entry statestore(alice,bob,sid_1072135075,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {56}.
table(statestore(alice,bob,sid_1072135075,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,alice,sid_1072135076,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,sid_1072135076,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

4. The entry statestore(alice,bob,sid_1072135075,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {58}.
The event SendMsg(alice,bob,stagepack_a(sid_1072135075),msg_a(alice,bob,sid_1072135075)) may be executed at {55}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))) may be sent on channel pub at output {57}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))).

5. The entry statestore(bob,alice,sid_1072135076,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 3 may be read at get {347}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))) that may be sent on channel pub by 4 may be received at input {312}.
So the entry statestore(bob,alice,sid_1072135076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false))) may be inserted in a table at insert {346}.
table(statestore(bob,alice,sid_1072135076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false)))).

6. The entry statestore(bob,alice,sid_1072135076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false))) that may be in a table by 5 may be read at get {392}.
The event SendMsg(bob,alice,stagepack_b(sid_1072135076),msg_b(bob,alice,sid_1072135076)) may be executed at {389}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))) may be sent on channel pub at output {391}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))).

7. The entry statestore(alice,bob,sid_1072135075,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {102}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))) that may be sent on channel pub by 6 may be received at input {59}.
So the entry statestore(alice,bob,sid_1072135075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) may be inserted in a table at insert {101}.
table(statestore(alice,bob,sid_1072135075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_1072135075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) that may be in a table by 7 may be read at get {122}.
The event SendMsg(alice,bob,stagepack_c(sid_1072135075),msg_c(alice,bob,sid_1072135075)) may be executed at {119}.
So the entry statestore(alice,bob,sid_1072135075,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) may be inserted in a table at insert {120}.
table(statestore(alice,bob,sid_1072135075,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_1072135076,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false))) that may be in a table by 5 may be read at get {392}.
The event SendMsg(bob,alice,stagepack_b(sid_1072135076),msg_b(bob,alice,sid_1072135076)) may be executed at {389}.
So the entry statestore(bob,alice,sid_1072135076,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),key_e(bob,alice,sid_1072135076)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) may be inserted in a table at insert {390}.
table(statestore(bob,alice,sid_1072135076,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),key_e(bob,alice,sid_1072135076)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_1072135075,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) that may be in a table by 7 may be read at get {122}.
The event SendMsg(alice,bob,stagepack_c(sid_1072135075),msg_c(alice,bob,sid_1072135075)) may be executed at {119}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075))) may be sent on channel pub at output {121}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))).

11. The entry statestore(bob,alice,sid_1072135076,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),key_e(bob,alice,sid_1072135076)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) that may be in a table by 9 may be read at get {413}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075))) that may be sent on channel pub by 10 may be received at input {395}.
So the entry statestore(bob,alice,sid_1072135076,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),key_e(bob,alice,sid_1072135076)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) may be inserted in a table at insert {412}.
table(statestore(bob,alice,sid_1072135076,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),key_e(bob,alice,sid_1072135076)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_1072135076,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),key_e(bob,alice,sid_1072135076)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) that may be in a table by 11 may be read at get {432}.
The event SendMsg(bob,alice,stagepack_d(sid_1072135076),msg_d(bob,alice,sid_1072135076)) may be executed at {430}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075))),msg_d(bob,alice,sid_1072135076))) may be sent on channel pub at output {431}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075))),msg_d(bob,alice,sid_1072135076)))).

13. The entry statestore(alice,bob,sid_1072135075,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g)),key_e(alice,bob,sid_1072135075)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce))) that may be in a table by 8 may be read at get {143}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1072135076),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_e(bob,alice,sid_1072135076),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1072135075),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1072135075),g))),msg_a(alice,bob,sid_1072135075))),validkey(dhexp_real(key_e(bob,alice,sid_1072135076),g))),msg_b(bob,alice,sid_1072135076))),msg_c(alice,bob,sid_1072135075))),msg_d(bob,alice,sid_1072135076))) that may be sent on channel pub by 12 may be received at input {125}.
So event RecvEnd(true) may be executed at {142}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
