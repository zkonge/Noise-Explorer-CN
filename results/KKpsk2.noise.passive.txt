File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KKpsk2.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 277, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 325, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 333, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 333, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KKpsk2.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 277, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 574, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "KKpsk2.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KKpsk2.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 325, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_560: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_561: keypair = (if not-caught-fail(v_560) then keypairpack(validkey(v_560),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_561));
    (
        {7}let e_562: keypair = keypairpack(empty,empty) in
        {8}let v_563: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_564: key = getpublickey((if not-caught-fail(v_563) then keypairpack(validkey(v_563),key_s(bob)) else fail-any)) in
        {10}let re_565: key = empty in
        {11}let v_566: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_567: key = catch-fail(v_566) in
        {13}let v_568: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_569: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then symmetricstatepack(v_568,v_567,v_566) else fail-any) else fail-any) else fail-any))) in
        {15}let v_570: symmetricstate = catch-fail((if success?((if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then symmetricstatepack(v_568,v_567,v_566) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),hash(3-proj-3-tuple(v_569),empty)) else fail-any) else fail-any)) in
        {16}let v_571: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {17}let v_572: symmetricstate = catch-fail((if success?(getpublickey(s_561)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),getpublickey(s_561))) else fail-any) else fail-any)) in
        {18}let v_573: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {19}let v_574: symmetricstate = catch-fail((if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),rs_564)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_570) then (if not-caught-fail(v_572) then (if not-caught-fail(v_574) then handshakestatepack(v_574,s_561,e_562,rs_564,re_565,key_psk(alice,bob),true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {64}get statestore(=alice,=bob,=sid,statepack_a(hs_575: handshakestate)) in
        {22}let v_576: bitstring = catch-fail(handshakestateunpack(hs_575)) in
        {23}let v_577: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_578: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {25}let v_579: keypair = catch-fail((if not-caught-fail(v_578) then keypairpack(validkey(v_578),key_e(alice,bob,sid)) else fail-any)) in
        {26}let v_580: bitstring = catch-fail(getpublickey(v_579)) in
        {27}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_576))) in
        {28}let v_582: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_576)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),v_580)) else fail-any) else fail-any)) in
        {29}let v_583: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {30}let v_584: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_583),getpublickey(v_579))) in
        {31}let v_585: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_583),getpublickey(v_579))) in
        {32}let v_586: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_583),getpublickey(v_579))) in
        {33}let v_587: bitstring = catch-fail((if (success?(getpublickey(v_579)) && success?(2-proj-3-tuple(v_583))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_584,v_585,v_586) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_588: symmetricstate = catch-fail((if success?(getpublickey(v_579)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_587)) then cipherstatepack(2-proj-3-tuple(v_587),minnonce) else fail-any),1-proj-3-tuple(v_587),3-proj-3-tuple(v_583)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_589: bitstring = catch-fail(keypairunpack(v_579)) in
        {36}let v_590: bitstring = catch-fail(symmetricstateunpack(v_588)) in
        {37}let v_591: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_590),(if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {38}let v_592: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_590),(if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {39}let v_593: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_590),(if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {40}let v_594: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_590))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (v_591,v_592,v_593) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_595: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_576)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_594)) then cipherstatepack(2-proj-3-tuple(v_594),minnonce) else fail-any),1-proj-3-tuple(v_594),3-proj-3-tuple(v_590)) else fail-any) else fail-any) else fail-any)) in
        {42}let v_596: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_576))) in
        {43}let v_597: bitstring = catch-fail(symmetricstateunpack(v_595)) in
        {44}let v_598: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_597),(if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {45}let v_599: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_597),(if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {46}let v_600: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_597),(if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),4-proj-7-tuple(v_576)) else fail-any) else fail-any))) in
        {47}let v_601: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_597))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (v_598,v_599,v_600) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {48}let v_602: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_576)) && success?(2-proj-7-tuple(v_576))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),4-proj-7-tuple(v_576)) else fail-any) else fail-any)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_601)) then cipherstatepack(2-proj-3-tuple(v_601),minnonce) else fail-any),1-proj-3-tuple(v_601),3-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any)) in
        {49}let v_603: bitstring = catch-fail(symmetricstateunpack(v_602)) in
        {50}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {51}let v_605: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_604),2-proj-2-tuple(v_604),3-proj-3-tuple(v_603),msg_a(alice,bob,sid))) in
        {52}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {53}let v_607: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_604))) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then cipherstatepack(1-proj-2-tuple(v_606),increment_nonce(2-proj-2-tuple(v_604))) else fail-any) else fail-any)) in
        {54}let v_608: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_603)) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (v_607,v_605) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_609: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_608),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) in
        {56}let v_610: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_608)) && success?(symmetricstatepack(1-proj-2-tuple(v_608),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),2-proj-2-tuple(v_608))) else fail-any) else fail-any)) in
        {57}let v_611: bitstring = catch-fail((if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then (if not-caught-fail(v_610) then (v_610,2-proj-2-tuple(v_608)) else fail-any) else fail-any) else fail-any)) in
        {58}let v_612: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_611),2-proj-7-tuple(v_576),v_579,4-proj-7-tuple(v_576),5-proj-7-tuple(v_576),6-proj-7-tuple(v_576),7-proj-7-tuple(v_576))) in
        {59}let v_613: bitstring = catch-fail(concat3(v_580,2-proj-3-tuple(v_577),2-proj-2-tuple(v_611))) in
        {60}let (hs_614: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-7-tuple(v_576))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_582) then (if not-caught-fail(v_588) then (if not-caught-fail(v_595) then (if not-caught-fail(v_602) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (v_612,v_613) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {61}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {62}insert statestore(alice,bob,sid,statepack_b(hs_614));
        {63}out(pub, message_a)
    ) | (
        {122}get statestore(=alice,=bob,=sid,statepack_b(hs_615: handshakestate)) in
        {65}in(pub, message_b: bitstring);
        {66}let v_616: bitstring = catch-fail(handshakestateunpack(hs_615)) in
        {67}let v_617: bitstring = catch-fail(deconcat3(message_b)) in
        {68}let v_618: bool = catch-fail(true) in
        {69}let v_619: key = catch-fail(1-proj-3-tuple(v_617)) in
        {70}let v_620: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_616))) in
        {71}let v_621: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_616)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),v_619)) else fail-any) else fail-any)) in
        {72}let v_622: bitstring = catch-fail(symmetricstateunpack(v_621)) in
        {73}let v_623: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_622),v_619)) in
        {74}let v_624: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_622),v_619)) in
        {75}let v_625: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_622),v_619)) in
        {76}let v_626: bitstring = catch-fail((if success?(2-proj-3-tuple(v_622)) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (v_623,v_624,v_625) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {77}let v_627: symmetricstate = catch-fail((if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_626)) then cipherstatepack(2-proj-3-tuple(v_626),minnonce) else fail-any),1-proj-3-tuple(v_626),3-proj-3-tuple(v_622)) else fail-any) else fail-any)) in
        {78}let v_628: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_616))) in
        {79}let v_629: bitstring = catch-fail(symmetricstateunpack(v_627)) in
        {80}let v_630: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_629),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_619) else fail-any) else fail-any))) in
        {81}let v_631: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_629),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_619) else fail-any) else fail-any))) in
        {82}let v_632: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_629),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_619) else fail-any) else fail-any))) in
        {83}let v_633: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_619) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_629))) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (v_630,v_631,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_634: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_619) else fail-any) else fail-any)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_633)) then cipherstatepack(2-proj-3-tuple(v_633),minnonce) else fail-any),1-proj-3-tuple(v_633),3-proj-3-tuple(v_629)) else fail-any) else fail-any) else fail-any)) in
        {85}let v_635: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_616))) in
        {86}let v_636: bitstring = catch-fail(symmetricstateunpack(v_634)) in
        {87}let v_637: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_636),(if success?(2-proj-7-tuple(v_616)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_619) else fail-any) else fail-any))) in
        {88}let v_638: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_636),(if success?(2-proj-7-tuple(v_616)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_619) else fail-any) else fail-any))) in
        {89}let v_639: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_636),(if success?(2-proj-7-tuple(v_616)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_619) else fail-any) else fail-any))) in
        {90}let v_640: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_616)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_619) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_636))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (v_637,v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_641: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_616)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_619) else fail-any) else fail-any)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_640)) then cipherstatepack(2-proj-3-tuple(v_640),minnonce) else fail-any),1-proj-3-tuple(v_640),3-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any)) in
        {92}let v_642: bitstring = catch-fail(symmetricstateunpack(v_641)) in
        {93}let v_643: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_642),6-proj-7-tuple(v_616))) in
        {94}let v_644: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_642),6-proj-7-tuple(v_616))) in
        {95}let v_645: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_642),6-proj-7-tuple(v_616))) in
        {96}let v_646: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_616)) && success?(2-proj-3-tuple(v_642))) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (v_643,v_644,v_645) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_642),1-proj-3-tuple(v_646),3-proj-3-tuple(v_642)))) in
        {98}let v_648: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_646)) && success?(symmetricstatepack(1-proj-3-tuple(v_642),1-proj-3-tuple(v_646),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),2-proj-3-tuple(v_646))) else fail-any) else fail-any))) in
        {99}let v_649: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_616)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_646)) then cipherstatepack(3-proj-3-tuple(v_646),minnonce) else fail-any),1-proj-3-tuple(v_646),3-proj-3-tuple(v_648)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let v_650: bitstring = catch-fail(symmetricstateunpack(v_649)) in
        {101}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {102}let v_652: aead = catch-fail(decrypt(1-proj-2-tuple(v_651),2-proj-2-tuple(v_651),3-proj-3-tuple(v_650),3-proj-3-tuple(v_617))) in
        {103}let v_653: bitstring = catch-fail(aeadunpack(v_652)) in
        {104}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {105}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_651))) && success?(1-proj-3-tuple(v_650))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_651))) else fail-any) else fail-any)) in
        {106}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_650)) && success?(1-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,3-proj-3-tuple(v_653),1-proj-3-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) in
        {108}let v_658: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),3-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {109}let v_659: bitstring = catch-fail((if success?(3-proj-3-tuple(v_617)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_659),2-proj-7-tuple(v_616),3-proj-7-tuple(v_616),4-proj-7-tuple(v_616),v_619,6-proj-7-tuple(v_616),7-proj-7-tuple(v_616))) in
        {111}let v_661: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_659))) in
        {112}let v_662: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_661),zero)) in
        {113}let v_663: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_661),zero)) in
        {114}let v_664: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_661),zero)) in
        {115}let v_665: bitstring = catch-fail((if success?(2-proj-3-tuple(v_661)) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (v_662,v_663,v_664) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_666: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_665)) then cipherstatepack(1-proj-3-tuple(v_665),minnonce) else fail-any)) in
        {117}let v_667: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_665)) then cipherstatepack(2-proj-3-tuple(v_665),minnonce) else fail-any)) in
        {118}let v_668: bitstring = catch-fail((if success?(1-proj-3-tuple(v_659)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (1-proj-3-tuple(v_659),v_666,v_667) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let (hs_669: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-7-tuple(v_616))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (if not-caught-fail(v_627) then (if not-caught-fail(v_634) then (if not-caught-fail(v_641) then (if not-caught-fail(v_649) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if (v_618 && 3-proj-3-tuple(v_659)) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (v_660,2-proj-3-tuple(v_659),true,2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {121}insert statestore(alice,bob,sid,statepack_c(hs_669,cs1,cs2))
    ) | (
        {123}!
        {142}get statestore(=alice,=bob,=sid,statepack_c(hs_670: handshakestate,cs1_671: cipherstate,cs2_672: cipherstate)) in
        {124}let hs_673: handshakestate = handshakestatesetcs(hs_670,cs1_671) in
        {125}let v_674: bitstring = catch-fail(handshakestateunpack(hs_673)) in
        {126}let v_675: bitstring = catch-fail((empty,empty,empty)) in
        {127}let v_676: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_674))) in
        {128}let v_677: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {129}let v_678: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_677),2-proj-2-tuple(v_677),3-proj-3-tuple(v_676),msg_c(alice,bob,sid))) in
        {130}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {131}let v_680: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_677))) && success?(1-proj-3-tuple(v_676))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then cipherstatepack(1-proj-2-tuple(v_679),increment_nonce(2-proj-2-tuple(v_677))) else fail-any) else fail-any)) in
        {132}let v_681: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_676)) && success?(1-proj-3-tuple(v_676))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then (if not-caught-fail(v_678) then (if not-caught-fail(v_680) then (v_680,v_678) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {133}let v_682: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_681),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) in
        {134}let v_683: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_681)) && success?(symmetricstatepack(1-proj-2-tuple(v_681),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),2-proj-2-tuple(v_681))) else fail-any) else fail-any)) in
        {135}let v_684: bitstring = catch-fail((if success?(1-proj-7-tuple(v_674)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,2-proj-2-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_685: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_684),2-proj-7-tuple(v_674),3-proj-7-tuple(v_674),4-proj-7-tuple(v_674),5-proj-7-tuple(v_674),6-proj-7-tuple(v_674),7-proj-7-tuple(v_674))) in
        {137}let v_686: bitstring = catch-fail(concat3(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),2-proj-2-tuple(v_684))) in
        {138}let (hs_687: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-7-tuple(v_674))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (v_685,v_686) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {139}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {140}insert statestore(alice,bob,sid,statepack_d(hs_687,handshakestategetcs(hs_687),cs2_672));
        {141}out(pub, message_c)
    ) | (
        {143}!
        {163}get statestore(=alice,=bob,=sid,statepack_d(hs_688: handshakestate,cs1_689: cipherstate,cs2_690: cipherstate)) in
        {144}let hs_691: handshakestate = handshakestatesetcs(hs_688,cs2_690) in
        {145}in(pub, message_d: bitstring);
        {146}let v_692: bitstring = catch-fail(handshakestateunpack(hs_691)) in
        {147}let v_693: bitstring = catch-fail(deconcat3(message_d)) in
        {148}let v_694: bool = catch-fail(true) in
        {149}let v_695: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_692))) in
        {150}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {151}let v_697: aead = catch-fail(decrypt(1-proj-2-tuple(v_696),2-proj-2-tuple(v_696),3-proj-3-tuple(v_695),3-proj-3-tuple(v_693))) in
        {152}let v_698: bitstring = catch-fail(aeadunpack(v_697)) in
        {153}let v_699: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {154}let v_700: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_696))) && success?(1-proj-3-tuple(v_695))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then cipherstatepack(1-proj-2-tuple(v_699),increment_nonce(2-proj-2-tuple(v_696))) else fail-any) else fail-any)) in
        {155}let v_701: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && (success?(3-proj-3-tuple(v_695)) && success?(1-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_700) then (v_700,3-proj-3-tuple(v_698),1-proj-3-tuple(v_698)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_702: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) in
        {157}let v_703: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then symmetricstatepack(1-proj-3-tuple(v_702),2-proj-3-tuple(v_702),hash(3-proj-3-tuple(v_702),3-proj-3-tuple(v_693))) else fail-any) else fail-any)) in
        {158}let v_704: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(1-proj-7-tuple(v_692))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if not-caught-fail(v_703) then (v_703,2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_705: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_704),2-proj-7-tuple(v_692),3-proj-7-tuple(v_692),4-proj-7-tuple(v_692),5-proj-7-tuple(v_692),6-proj-7-tuple(v_692),7-proj-7-tuple(v_692))) in
        {160}let (hs_706: handshakestate,plaintext_d: bitstring,valid_707: bool) = (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-7-tuple(v_692))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_694) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (v_694 && 3-proj-3-tuple(v_704)) then (if not-caught-fail(v_705) then (v_705,2-proj-3-tuple(v_704),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {161}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {162}event RecvEnd(valid_707)
    ) | (
        {164}event LeakPsk(phase0,alice,bob);
        {165}out(pub, key_psk(alice,bob))
    ) | (
        {166}phase 1;
        {167}event LeakPsk(phase1,alice,bob);
        {168}out(pub, key_psk(alice,bob))
    ) | (
        {169}event LeakS(phase0,alice);
        {170}out(pub, key_s(alice))
    ) | (
        {171}phase 1;
        {172}event LeakS(phase1,alice);
        {173}out(pub, key_s(alice))
    )
) | (
    {174}let v_708: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {175}let s_709: keypair = (if not-caught-fail(v_708) then keypairpack(validkey(v_708),key_s(alice)) else fail-any) in
    {176}out(pub, getpublickey(s_709));
    (
        {177}let e_710: keypair = keypairpack(empty,empty) in
        {178}let v_711: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {179}let rs_712: key = getpublickey((if not-caught-fail(v_711) then keypairpack(validkey(v_711),key_s(charlie)) else fail-any)) in
        {180}let re_713: key = empty in
        {181}let v_714: bitstring = catch-fail(hash(somename,empty)) in
        {182}let v_715: key = catch-fail(v_714) in
        {183}let v_716: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {184}let v_717: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then symmetricstatepack(v_716,v_715,v_714) else fail-any) else fail-any) else fail-any))) in
        {185}let v_718: symmetricstate = catch-fail((if success?((if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then symmetricstatepack(v_716,v_715,v_714) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),empty)) else fail-any) else fail-any)) in
        {186}let v_719: bitstring = catch-fail(symmetricstateunpack(v_718)) in
        {187}let v_720: symmetricstate = catch-fail((if success?(getpublickey(s_709)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),getpublickey(s_709))) else fail-any) else fail-any)) in
        {188}let v_721: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {189}let v_722: symmetricstate = catch-fail((if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_721),hash(3-proj-3-tuple(v_721),rs_712)) else fail-any)) in
        {190}let hs_723: handshakestate = (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (if not-caught-fail(v_722) then handshakestatepack(v_722,s_709,e_710,rs_712,re_713,key_psk(alice,charlie),true) else fail-any) else fail-any) else fail-any) in
        {191}insert statestore(alice,charlie,sid,statepack_a(hs_723))
    ) | (
        {234}get statestore(=alice,=charlie,=sid,statepack_a(hs_724: handshakestate)) in
        {192}let v_725: bitstring = catch-fail(handshakestateunpack(hs_724)) in
        {193}let v_726: bitstring = catch-fail((empty,empty,empty)) in
        {194}let v_727: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {195}let v_728: keypair = catch-fail((if not-caught-fail(v_727) then keypairpack(validkey(v_727),key_e(alice,charlie,sid)) else fail-any)) in
        {196}let v_729: bitstring = catch-fail(getpublickey(v_728)) in
        {197}let v_730: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_725))) in
        {198}let v_731: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_725)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_730),hash(3-proj-3-tuple(v_730),v_729)) else fail-any) else fail-any)) in
        {199}let v_732: bitstring = catch-fail(symmetricstateunpack(v_731)) in
        {200}let v_733: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_732),getpublickey(v_728))) in
        {201}let v_734: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_732),getpublickey(v_728))) in
        {202}let v_735: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_732),getpublickey(v_728))) in
        {203}let v_736: bitstring = catch-fail((if (success?(getpublickey(v_728)) && success?(2-proj-3-tuple(v_732))) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (v_733,v_734,v_735) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {204}let v_737: symmetricstate = catch-fail((if success?(getpublickey(v_728)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_736)) then cipherstatepack(2-proj-3-tuple(v_736),minnonce) else fail-any),1-proj-3-tuple(v_736),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any)) in
        {205}let v_738: bitstring = catch-fail(keypairunpack(v_728)) in
        {206}let v_739: bitstring = catch-fail(symmetricstateunpack(v_737)) in
        {207}let v_740: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_739),(if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {208}let v_741: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_739),(if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {209}let v_742: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_739),(if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {210}let v_743: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_739))) then (if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then (v_740,v_741,v_742) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {211}let v_744: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_725)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_743)) then cipherstatepack(2-proj-3-tuple(v_743),minnonce) else fail-any),1-proj-3-tuple(v_743),3-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any)) in
        {212}let v_745: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_725))) in
        {213}let v_746: bitstring = catch-fail(symmetricstateunpack(v_744)) in
        {214}let v_747: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_746),(if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {215}let v_748: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_746),(if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {216}let v_749: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_746),(if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),4-proj-7-tuple(v_725)) else fail-any) else fail-any))) in
        {217}let v_750: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_746))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then (v_747,v_748,v_749) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_751: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_725)) && success?(2-proj-7-tuple(v_725))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),4-proj-7-tuple(v_725)) else fail-any) else fail-any)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_750)) then cipherstatepack(2-proj-3-tuple(v_750),minnonce) else fail-any),1-proj-3-tuple(v_750),3-proj-3-tuple(v_746)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_752: bitstring = catch-fail(symmetricstateunpack(v_751)) in
        {220}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {221}let v_754: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_753),2-proj-2-tuple(v_753),3-proj-3-tuple(v_752),msg_a(alice,charlie,sid))) in
        {222}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {223}let v_756: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_753))) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then cipherstatepack(1-proj-2-tuple(v_755),increment_nonce(2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {224}let v_757: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_752)) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then (v_756,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_758: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) in
        {226}let v_759: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_757)) && success?(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_758),hash(3-proj-3-tuple(v_758),2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {227}let v_760: bitstring = catch-fail((if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_759) then (v_759,2-proj-2-tuple(v_757)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_761: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_760),2-proj-7-tuple(v_725),v_728,4-proj-7-tuple(v_725),5-proj-7-tuple(v_725),6-proj-7-tuple(v_725),7-proj-7-tuple(v_725))) in
        {229}let v_762: bitstring = catch-fail(concat3(v_729,2-proj-3-tuple(v_726),2-proj-2-tuple(v_760))) in
        {230}let (hs_763: handshakestate,message_a_764: bitstring) = (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-7-tuple(v_725))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_729) then (if not-caught-fail(v_731) then (if not-caught-fail(v_737) then (if not-caught-fail(v_744) then (if not-caught-fail(v_751) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {232}insert statestore(alice,charlie,sid,statepack_b(hs_763));
        {233}out(pub, message_a_764)
    ) | (
        {292}get statestore(=alice,=charlie,=sid,statepack_b(hs_765: handshakestate)) in
        {235}in(pub, message_b_766: bitstring);
        {236}let v_767: bitstring = catch-fail(handshakestateunpack(hs_765)) in
        {237}let v_768: bitstring = catch-fail(deconcat3(message_b_766)) in
        {238}let v_769: bool = catch-fail(true) in
        {239}let v_770: key = catch-fail(1-proj-3-tuple(v_768)) in
        {240}let v_771: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_767))) in
        {241}let v_772: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_767)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),v_770)) else fail-any) else fail-any)) in
        {242}let v_773: bitstring = catch-fail(symmetricstateunpack(v_772)) in
        {243}let v_774: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_773),v_770)) in
        {244}let v_775: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_773),v_770)) in
        {245}let v_776: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_773),v_770)) in
        {246}let v_777: bitstring = catch-fail((if success?(2-proj-3-tuple(v_773)) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (if not-caught-fail(v_776) then (v_774,v_775,v_776) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_778: symmetricstate = catch-fail((if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_777)) then cipherstatepack(2-proj-3-tuple(v_777),minnonce) else fail-any),1-proj-3-tuple(v_777),3-proj-3-tuple(v_773)) else fail-any) else fail-any)) in
        {248}let v_779: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_767))) in
        {249}let v_780: bitstring = catch-fail(symmetricstateunpack(v_778)) in
        {250}let v_781: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_780),(if success?(3-proj-7-tuple(v_767)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then dhexp(2-proj-2-tuple(v_779),v_770) else fail-any) else fail-any))) in
        {251}let v_782: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_780),(if success?(3-proj-7-tuple(v_767)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then dhexp(2-proj-2-tuple(v_779),v_770) else fail-any) else fail-any))) in
        {252}let v_783: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_780),(if success?(3-proj-7-tuple(v_767)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then dhexp(2-proj-2-tuple(v_779),v_770) else fail-any) else fail-any))) in
        {253}let v_784: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_767)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then dhexp(2-proj-2-tuple(v_779),v_770) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_780))) then (if not-caught-fail(v_781) then (if not-caught-fail(v_782) then (if not-caught-fail(v_783) then (v_781,v_782,v_783) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_785: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_767)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then dhexp(2-proj-2-tuple(v_779),v_770) else fail-any) else fail-any)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_784)) then cipherstatepack(2-proj-3-tuple(v_784),minnonce) else fail-any),1-proj-3-tuple(v_784),3-proj-3-tuple(v_780)) else fail-any) else fail-any) else fail-any)) in
        {255}let v_786: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_767))) in
        {256}let v_787: bitstring = catch-fail(symmetricstateunpack(v_785)) in
        {257}let v_788: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_787),(if success?(2-proj-7-tuple(v_767)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),v_770) else fail-any) else fail-any))) in
        {258}let v_789: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_787),(if success?(2-proj-7-tuple(v_767)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),v_770) else fail-any) else fail-any))) in
        {259}let v_790: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_787),(if success?(2-proj-7-tuple(v_767)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),v_770) else fail-any) else fail-any))) in
        {260}let v_791: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_767)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),v_770) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_787))) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (v_788,v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_792: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_767)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),v_770) else fail-any) else fail-any)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_791)) then cipherstatepack(2-proj-3-tuple(v_791),minnonce) else fail-any),1-proj-3-tuple(v_791),3-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any)) in
        {262}let v_793: bitstring = catch-fail(symmetricstateunpack(v_792)) in
        {263}let v_794: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_793),6-proj-7-tuple(v_767))) in
        {264}let v_795: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_793),6-proj-7-tuple(v_767))) in
        {265}let v_796: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_793),6-proj-7-tuple(v_767))) in
        {266}let v_797: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_767)) && success?(2-proj-3-tuple(v_793))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then (v_794,v_795,v_796) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_798: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_793),1-proj-3-tuple(v_797),3-proj-3-tuple(v_793)))) in
        {268}let v_799: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_797)) && success?(symmetricstatepack(1-proj-3-tuple(v_793),1-proj-3-tuple(v_797),3-proj-3-tuple(v_793)))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_798),hash(3-proj-3-tuple(v_798),2-proj-3-tuple(v_797))) else fail-any) else fail-any))) in
        {269}let v_800: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_767)) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_797)) then cipherstatepack(3-proj-3-tuple(v_797),minnonce) else fail-any),1-proj-3-tuple(v_797),3-proj-3-tuple(v_799)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {271}let v_802: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {272}let v_803: aead = catch-fail(decrypt(1-proj-2-tuple(v_802),2-proj-2-tuple(v_802),3-proj-3-tuple(v_801),3-proj-3-tuple(v_768))) in
        {273}let v_804: bitstring = catch-fail(aeadunpack(v_803)) in
        {274}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {275}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_802))) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
        {276}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_768)) && (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_806) then (v_806,3-proj-3-tuple(v_804),1-proj-3-tuple(v_804)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) in
        {278}let v_809: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_768)) && success?(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),3-proj-3-tuple(v_768))) else fail-any) else fail-any)) in
        {279}let v_810: bitstring = catch-fail((if success?(3-proj-3-tuple(v_768)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_810),2-proj-7-tuple(v_767),3-proj-7-tuple(v_767),4-proj-7-tuple(v_767),v_770,6-proj-7-tuple(v_767),7-proj-7-tuple(v_767))) in
        {281}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_810))) in
        {282}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),zero)) in
        {283}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),zero)) in
        {284}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),zero)) in
        {285}let v_816: bitstring = catch-fail((if success?(2-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_817: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_816)) then cipherstatepack(1-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {287}let v_818: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {288}let v_819: bitstring = catch-fail((if success?(1-proj-3-tuple(v_810)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (1-proj-3-tuple(v_810),v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {289}let (hs_820: handshakestate,plaintext_b_821: bitstring,valid_822: bool,cs1_823: cipherstate,cs2_824: cipherstate) = (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-7-tuple(v_767))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (if not-caught-fail(v_772) then (if not-caught-fail(v_778) then (if not-caught-fail(v_785) then (if not-caught-fail(v_792) then (if not-caught-fail(v_800) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (v_769 && 3-proj-3-tuple(v_810)) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (v_811,2-proj-3-tuple(v_810),true,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_821);
        {291}insert statestore(alice,charlie,sid,statepack_c(hs_820,cs1_823,cs2_824))
    ) | (
        {293}!
        {312}get statestore(=alice,=charlie,=sid,statepack_c(hs_825: handshakestate,cs1_826: cipherstate,cs2_827: cipherstate)) in
        {294}let hs_828: handshakestate = handshakestatesetcs(hs_825,cs1_826) in
        {295}let v_829: bitstring = catch-fail(handshakestateunpack(hs_828)) in
        {296}let v_830: bitstring = catch-fail((empty,empty,empty)) in
        {297}let v_831: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_829))) in
        {298}let v_832: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_831))) in
        {299}let v_833: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_832),2-proj-2-tuple(v_832),3-proj-3-tuple(v_831),msg_c(alice,charlie,sid))) in
        {300}let v_834: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_831))) in
        {301}let v_835: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_832))) && success?(1-proj-3-tuple(v_831))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-2-tuple(v_834))))) then cipherstatepack(1-proj-2-tuple(v_834),increment_nonce(2-proj-2-tuple(v_832))) else fail-any) else fail-any)) in
        {302}let v_836: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_831)) && success?(1-proj-3-tuple(v_831))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then (if not-caught-fail(v_833) then (if not-caught-fail(v_835) then (v_835,v_833) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_837: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_836),2-proj-3-tuple(v_831),3-proj-3-tuple(v_831)))) in
        {304}let v_838: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_836)) && success?(symmetricstatepack(1-proj-2-tuple(v_836),2-proj-3-tuple(v_831),3-proj-3-tuple(v_831)))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack(1-proj-3-tuple(v_837),2-proj-3-tuple(v_837),hash(3-proj-3-tuple(v_837),2-proj-2-tuple(v_836))) else fail-any) else fail-any)) in
        {305}let v_839: bitstring = catch-fail((if success?(1-proj-7-tuple(v_829)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then (if not-caught-fail(v_838) then (v_838,2-proj-2-tuple(v_836)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_840: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_839),2-proj-7-tuple(v_829),3-proj-7-tuple(v_829),4-proj-7-tuple(v_829),5-proj-7-tuple(v_829),6-proj-7-tuple(v_829),7-proj-7-tuple(v_829))) in
        {307}let v_841: bitstring = catch-fail(concat3(1-proj-3-tuple(v_830),2-proj-3-tuple(v_830),2-proj-2-tuple(v_839))) in
        {308}let (hs_842: handshakestate,message_c_843: bitstring) = (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-7-tuple(v_829))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then (v_840,v_841) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {310}insert statestore(alice,charlie,sid,statepack_d(hs_842,handshakestategetcs(hs_842),cs2_827));
        {311}out(pub, message_c_843)
    ) | (
        {313}!
        {333}get statestore(=alice,=charlie,=sid,statepack_d(hs_844: handshakestate,cs1_845: cipherstate,cs2_846: cipherstate)) in
        {314}let hs_847: handshakestate = handshakestatesetcs(hs_844,cs2_846) in
        {315}in(pub, message_d_848: bitstring);
        {316}let v_849: bitstring = catch-fail(handshakestateunpack(hs_847)) in
        {317}let v_850: bitstring = catch-fail(deconcat3(message_d_848)) in
        {318}let v_851: bool = catch-fail(true) in
        {319}let v_852: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_849))) in
        {320}let v_853: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_852))) in
        {321}let v_854: aead = catch-fail(decrypt(1-proj-2-tuple(v_853),2-proj-2-tuple(v_853),3-proj-3-tuple(v_852),3-proj-3-tuple(v_850))) in
        {322}let v_855: bitstring = catch-fail(aeadunpack(v_854)) in
        {323}let v_856: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_852))) in
        {324}let v_857: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_853))) && success?(1-proj-3-tuple(v_852))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then cipherstatepack(1-proj-2-tuple(v_856),increment_nonce(2-proj-2-tuple(v_853))) else fail-any) else fail-any)) in
        {325}let v_858: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_850)) && (success?(3-proj-3-tuple(v_852)) && success?(1-proj-3-tuple(v_852)))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_854) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if not-caught-fail(v_857) then (v_857,3-proj-3-tuple(v_855),1-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_859: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)))) in
        {327}let v_860: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_850)) && success?(symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_859),hash(3-proj-3-tuple(v_859),3-proj-3-tuple(v_850))) else fail-any) else fail-any)) in
        {328}let v_861: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_850)) && success?(1-proj-7-tuple(v_849))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if not-caught-fail(v_860) then (v_860,2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_862: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_861),2-proj-7-tuple(v_849),3-proj-7-tuple(v_849),4-proj-7-tuple(v_849),5-proj-7-tuple(v_849),6-proj-7-tuple(v_849),7-proj-7-tuple(v_849))) in
        {330}let (hs_863: handshakestate,plaintext_d_864: bitstring,valid_865: bool) = (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-7-tuple(v_849))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if not-caught-fail(v_851) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if (v_851 && 3-proj-3-tuple(v_861)) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_861),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {331}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_864);
        {332}event RecvEnd(valid_865)
    ) | (
        {334}event LeakPsk(phase0,alice,charlie);
        {335}out(pub, key_psk(alice,charlie))
    ) | (
        {336}phase 1;
        {337}event LeakPsk(phase1,alice,charlie);
        {338}out(pub, key_psk(alice,charlie))
    ) | (
        {339}event LeakS(phase0,alice);
        {340}out(pub, key_s(alice))
    ) | (
        {341}phase 1;
        {342}event LeakS(phase1,alice);
        {343}out(pub, key_s(alice))
    )
) | (
    {344}let v_866: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {345}let s_867: keypair = (if not-caught-fail(v_866) then keypairpack(validkey(v_866),key_s(bob)) else fail-any) in
    {346}out(pub, getpublickey(s_867));
    (
        {347}let e_868: keypair = keypairpack(empty,empty) in
        {348}let v_869: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {349}let rs_870: key = getpublickey((if not-caught-fail(v_869) then keypairpack(validkey(v_869),key_s(alice)) else fail-any)) in
        {350}let re_871: key = empty in
        {351}let v_872: bitstring = catch-fail(hash(somename,empty)) in
        {352}let v_873: key = catch-fail(v_872) in
        {353}let v_874: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {354}let v_875: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then symmetricstatepack(v_874,v_873,v_872) else fail-any) else fail-any) else fail-any))) in
        {355}let v_876: symmetricstate = catch-fail((if success?((if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then symmetricstatepack(v_874,v_873,v_872) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_875),hash(3-proj-3-tuple(v_875),empty)) else fail-any) else fail-any)) in
        {356}let v_877: bitstring = catch-fail(symmetricstateunpack(v_876)) in
        {357}let v_878: symmetricstate = catch-fail((if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_877),hash(3-proj-3-tuple(v_877),rs_870)) else fail-any)) in
        {358}let v_879: bitstring = catch-fail(symmetricstateunpack(v_878)) in
        {359}let v_880: symmetricstate = catch-fail((if success?(getpublickey(s_867)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack(1-proj-3-tuple(v_879),2-proj-3-tuple(v_879),hash(3-proj-3-tuple(v_879),getpublickey(s_867))) else fail-any) else fail-any)) in
        {360}let hs_881: handshakestate = (if not-caught-fail(v_876) then (if not-caught-fail(v_878) then (if not-caught-fail(v_880) then handshakestatepack(v_880,s_867,e_868,rs_870,re_871,key_psk(alice,bob),false) else fail-any) else fail-any) else fail-any) in
        {361}insert statestore(bob,alice,sid,statepack_a(hs_881))
    ) | (
        {403}get statestore(=bob,=alice,=sid,statepack_a(hs_882: handshakestate)) in
        {362}in(pub, message_a_883: bitstring);
        {363}let v_884: bitstring = catch-fail(handshakestateunpack(hs_882)) in
        {364}let v_885: bitstring = catch-fail(deconcat3(message_a_883)) in
        {365}let v_886: bool = catch-fail(true) in
        {366}let v_887: key = catch-fail(1-proj-3-tuple(v_885)) in
        {367}let v_888: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_884))) in
        {368}let v_889: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_884)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),v_887)) else fail-any) else fail-any)) in
        {369}let v_890: bitstring = catch-fail(symmetricstateunpack(v_889)) in
        {370}let v_891: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_890),v_887)) in
        {371}let v_892: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_890),v_887)) in
        {372}let v_893: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_890),v_887)) in
        {373}let v_894: bitstring = catch-fail((if success?(2-proj-3-tuple(v_890)) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (v_891,v_892,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_895: symmetricstate = catch-fail((if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_894)) then cipherstatepack(2-proj-3-tuple(v_894),minnonce) else fail-any),1-proj-3-tuple(v_894),3-proj-3-tuple(v_890)) else fail-any) else fail-any)) in
        {375}let v_896: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_884))) in
        {376}let v_897: bitstring = catch-fail(symmetricstateunpack(v_895)) in
        {377}let v_898: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_897),(if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then dhexp(2-proj-2-tuple(v_896),v_887) else fail-any) else fail-any))) in
        {378}let v_899: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_897),(if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then dhexp(2-proj-2-tuple(v_896),v_887) else fail-any) else fail-any))) in
        {379}let v_900: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_897),(if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then dhexp(2-proj-2-tuple(v_896),v_887) else fail-any) else fail-any))) in
        {380}let v_901: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then dhexp(2-proj-2-tuple(v_896),v_887) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_897))) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (v_898,v_899,v_900) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_902: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_884)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then dhexp(2-proj-2-tuple(v_896),v_887) else fail-any) else fail-any)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_901)) then cipherstatepack(2-proj-3-tuple(v_901),minnonce) else fail-any),1-proj-3-tuple(v_901),3-proj-3-tuple(v_897)) else fail-any) else fail-any) else fail-any)) in
        {382}let v_903: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_884))) in
        {383}let v_904: bitstring = catch-fail(symmetricstateunpack(v_902)) in
        {384}let v_905: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_904),(if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then dhexp(2-proj-2-tuple(v_903),4-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {385}let v_906: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_904),(if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then dhexp(2-proj-2-tuple(v_903),4-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {386}let v_907: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_904),(if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then dhexp(2-proj-2-tuple(v_903),4-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {387}let v_908: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then dhexp(2-proj-2-tuple(v_903),4-proj-7-tuple(v_884)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_904))) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (v_905,v_906,v_907) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {388}let v_909: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_884)) && success?(2-proj-7-tuple(v_884))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then dhexp(2-proj-2-tuple(v_903),4-proj-7-tuple(v_884)) else fail-any) else fail-any)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_908)) then cipherstatepack(2-proj-3-tuple(v_908),minnonce) else fail-any),1-proj-3-tuple(v_908),3-proj-3-tuple(v_904)) else fail-any) else fail-any) else fail-any)) in
        {389}let v_910: bitstring = catch-fail(symmetricstateunpack(v_909)) in
        {390}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {391}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),3-proj-3-tuple(v_885))) in
        {392}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {393}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {394}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {395}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_885)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {397}let v_918: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_885)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),3-proj-3-tuple(v_885))) else fail-any) else fail-any)) in
        {398}let v_919: bitstring = catch-fail((if success?(3-proj-3-tuple(v_885)) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_919),2-proj-7-tuple(v_884),3-proj-7-tuple(v_884),4-proj-7-tuple(v_884),v_887,6-proj-7-tuple(v_884),7-proj-7-tuple(v_884))) in
        {400}let (hs_921: handshakestate,plaintext_a: bitstring,valid_922: bool) = (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-7-tuple(v_884))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_887) then (if not-caught-fail(v_889) then (if not-caught-fail(v_895) then (if not-caught-fail(v_902) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (v_886 && 3-proj-3-tuple(v_919)) then (if not-caught-fail(v_920) then (v_920,2-proj-3-tuple(v_919),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {401}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {402}insert statestore(bob,alice,sid,statepack_b(hs_921))
    ) | (
        {462}get statestore(=bob,=alice,=sid,statepack_b(hs_923: handshakestate)) in
        {404}let v_924: bitstring = catch-fail(handshakestateunpack(hs_923)) in
        {405}let v_925: bitstring = catch-fail((empty,empty,empty)) in
        {406}let v_926: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {407}let v_927: keypair = catch-fail((if not-caught-fail(v_926) then keypairpack(validkey(v_926),key_e(bob,alice,sid)) else fail-any)) in
        {408}let v_928: bitstring = catch-fail(getpublickey(v_927)) in
        {409}let v_929: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_924))) in
        {410}let v_930: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_924)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),hash(3-proj-3-tuple(v_929),v_928)) else fail-any) else fail-any)) in
        {411}let v_931: bitstring = catch-fail(symmetricstateunpack(v_930)) in
        {412}let v_932: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_931),getpublickey(v_927))) in
        {413}let v_933: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_931),getpublickey(v_927))) in
        {414}let v_934: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_931),getpublickey(v_927))) in
        {415}let v_935: bitstring = catch-fail((if (success?(getpublickey(v_927)) && success?(2-proj-3-tuple(v_931))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (v_932,v_933,v_934) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {416}let v_936: symmetricstate = catch-fail((if success?(getpublickey(v_927)) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_935)) then cipherstatepack(2-proj-3-tuple(v_935),minnonce) else fail-any),1-proj-3-tuple(v_935),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any)) in
        {417}let v_937: bitstring = catch-fail(keypairunpack(v_927)) in
        {418}let v_938: bitstring = catch-fail(symmetricstateunpack(v_936)) in
        {419}let v_939: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_938),(if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {420}let v_940: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_938),(if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {421}let v_941: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_938),(if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {422}let v_942: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_938))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (v_939,v_940,v_941) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {423}let v_943: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_924)) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then dhexp(2-proj-2-tuple(v_937),5-proj-7-tuple(v_924)) else fail-any) else fail-any)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_942)) then cipherstatepack(2-proj-3-tuple(v_942),minnonce) else fail-any),1-proj-3-tuple(v_942),3-proj-3-tuple(v_938)) else fail-any) else fail-any) else fail-any)) in
        {424}let v_944: bitstring = catch-fail(keypairunpack(v_927)) in
        {425}let v_945: bitstring = catch-fail(symmetricstateunpack(v_943)) in
        {426}let v_946: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_945),(if success?(4-proj-7-tuple(v_924)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {427}let v_947: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_945),(if success?(4-proj-7-tuple(v_924)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {428}let v_948: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_945),(if success?(4-proj-7-tuple(v_924)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_924)) else fail-any) else fail-any))) in
        {429}let v_949: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_924)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_924)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_945))) then (if not-caught-fail(v_946) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (v_946,v_947,v_948) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {430}let v_950: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_924)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_924)) else fail-any) else fail-any)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_949)) then cipherstatepack(2-proj-3-tuple(v_949),minnonce) else fail-any),1-proj-3-tuple(v_949),3-proj-3-tuple(v_945)) else fail-any) else fail-any) else fail-any)) in
        {431}let v_951: bitstring = catch-fail(symmetricstateunpack(v_950)) in
        {432}let v_952: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_951),6-proj-7-tuple(v_924))) in
        {433}let v_953: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_951),6-proj-7-tuple(v_924))) in
        {434}let v_954: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_951),6-proj-7-tuple(v_924))) in
        {435}let v_955: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_924)) && success?(2-proj-3-tuple(v_951))) then (if not-caught-fail(v_952) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (v_952,v_953,v_954) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_956: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_951),1-proj-3-tuple(v_955),3-proj-3-tuple(v_951)))) in
        {437}let v_957: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_955)) && success?(symmetricstatepack(1-proj-3-tuple(v_951),1-proj-3-tuple(v_955),3-proj-3-tuple(v_951)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then symmetricstatepack(1-proj-3-tuple(v_956),2-proj-3-tuple(v_956),hash(3-proj-3-tuple(v_956),2-proj-3-tuple(v_955))) else fail-any) else fail-any))) in
        {438}let v_958: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_924)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_955)) then cipherstatepack(3-proj-3-tuple(v_955),minnonce) else fail-any),1-proj-3-tuple(v_955),3-proj-3-tuple(v_957)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_959: bitstring = catch-fail(symmetricstateunpack(v_958)) in
        {440}let v_960: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_959))) in
        {441}let v_961: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_960),2-proj-2-tuple(v_960),3-proj-3-tuple(v_959),msg_b(bob,alice,sid))) in
        {442}let v_962: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_959))) in
        {443}let v_963: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_960))) && success?(1-proj-3-tuple(v_959))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then cipherstatepack(1-proj-2-tuple(v_962),increment_nonce(2-proj-2-tuple(v_960))) else fail-any) else fail-any)) in
        {444}let v_964: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_959)) && success?(1-proj-3-tuple(v_959))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-2-tuple(v_960))))) then (if not-caught-fail(v_961) then (if not-caught-fail(v_963) then (v_963,v_961) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_965: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_964),2-proj-3-tuple(v_959),3-proj-3-tuple(v_959)))) in
        {446}let v_966: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_964)) && success?(symmetricstatepack(1-proj-2-tuple(v_964),2-proj-3-tuple(v_959),3-proj-3-tuple(v_959)))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then symmetricstatepack(1-proj-3-tuple(v_965),2-proj-3-tuple(v_965),hash(3-proj-3-tuple(v_965),2-proj-2-tuple(v_964))) else fail-any) else fail-any)) in
        {447}let v_967: bitstring = catch-fail((if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-2-tuple(v_964))))) then (if not-caught-fail(v_966) then (v_966,2-proj-2-tuple(v_964)) else fail-any) else fail-any) else fail-any)) in
        {448}let v_968: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_967),2-proj-7-tuple(v_924),v_927,4-proj-7-tuple(v_924),5-proj-7-tuple(v_924),6-proj-7-tuple(v_924),7-proj-7-tuple(v_924))) in
        {449}let v_969: bitstring = catch-fail(concat3(v_928,2-proj-3-tuple(v_925),2-proj-2-tuple(v_967))) in
        {450}let v_970: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_967))) in
        {451}let v_971: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_970),zero)) in
        {452}let v_972: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_970),zero)) in
        {453}let v_973: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_970),zero)) in
        {454}let v_974: bitstring = catch-fail((if success?(2-proj-3-tuple(v_970)) then (if not-caught-fail(v_971) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (v_971,v_972,v_973) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {455}let v_975: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_974)) then cipherstatepack(1-proj-3-tuple(v_974),minnonce) else fail-any)) in
        {456}let v_976: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_974)) then cipherstatepack(2-proj-3-tuple(v_974),minnonce) else fail-any)) in
        {457}let v_977: bitstring = catch-fail((if success?(1-proj-2-tuple(v_967)) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if not-caught-fail(v_975) then (if not-caught-fail(v_976) then (1-proj-2-tuple(v_967),v_975,v_976) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let (hs_978: handshakestate,message_b_979: bitstring,cs1_980: cipherstate,cs2_981: cipherstate) = (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-7-tuple(v_924))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_927) then (if not-caught-fail(v_928) then (if not-caught-fail(v_930) then (if not-caught-fail(v_936) then (if not-caught-fail(v_943) then (if not-caught-fail(v_950) then (if not-caught-fail(v_958) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then (if not-caught-fail(v_968) then (if not-caught-fail(v_969) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (v_968,v_969,2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {460}insert statestore(bob,alice,sid,statepack_c(hs_978,cs1_980,cs2_981));
        {461}out(pub, message_b_979)
    ) | (
        {463}!
        {483}get statestore(=bob,=alice,=sid,statepack_c(hs_982: handshakestate,cs1_983: cipherstate,cs2_984: cipherstate)) in
        {464}let hs_985: handshakestate = handshakestatesetcs(hs_982,cs1_983) in
        {465}in(pub, message_c_986: bitstring);
        {466}let v_987: bitstring = catch-fail(handshakestateunpack(hs_985)) in
        {467}let v_988: bitstring = catch-fail(deconcat3(message_c_986)) in
        {468}let v_989: bool = catch-fail(true) in
        {469}let v_990: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_987))) in
        {470}let v_991: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {471}let v_992: aead = catch-fail(decrypt(1-proj-2-tuple(v_991),2-proj-2-tuple(v_991),3-proj-3-tuple(v_990),3-proj-3-tuple(v_988))) in
        {472}let v_993: bitstring = catch-fail(aeadunpack(v_992)) in
        {473}let v_994: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {474}let v_995: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_991))) && success?(1-proj-3-tuple(v_990))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then cipherstatepack(1-proj-2-tuple(v_994),increment_nonce(2-proj-2-tuple(v_991))) else fail-any) else fail-any)) in
        {475}let v_996: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_988)) && (success?(3-proj-3-tuple(v_990)) && success?(1-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_992) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if not-caught-fail(v_995) then (v_995,3-proj-3-tuple(v_993),1-proj-3-tuple(v_993)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_997: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) in
        {477}let v_998: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_988)) && success?(symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),3-proj-3-tuple(v_988))) else fail-any) else fail-any)) in
        {478}let v_999: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_988)) && success?(1-proj-7-tuple(v_987))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_998) then (v_998,2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {479}let v_1000: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_999),2-proj-7-tuple(v_987),3-proj-7-tuple(v_987),4-proj-7-tuple(v_987),5-proj-7-tuple(v_987),6-proj-7-tuple(v_987),7-proj-7-tuple(v_987))) in
        {480}let (hs_1001: handshakestate,plaintext_c: bitstring,valid_1002: bool) = (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-7-tuple(v_987))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if not-caught-fail(v_989) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (v_989 && 3-proj-3-tuple(v_999)) then (if not-caught-fail(v_1000) then (v_1000,2-proj-3-tuple(v_999),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {481}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {482}insert statestore(bob,alice,sid,statepack_d(hs_1001,handshakestategetcs(hs_1001),cs2_984))
    ) | (
        {484}!
        {502}get statestore(=bob,=alice,=sid,statepack_d(hs_1003: handshakestate,cs1_1004: cipherstate,cs2_1005: cipherstate)) in
        {485}let hs_1006: handshakestate = handshakestatesetcs(hs_1003,cs2_1005) in
        {486}let v_1007: bitstring = catch-fail(handshakestateunpack(hs_1006)) in
        {487}let v_1008: bitstring = catch-fail((empty,empty,empty)) in
        {488}let v_1009: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1007))) in
        {489}let v_1010: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {490}let v_1011: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1010),2-proj-2-tuple(v_1010),3-proj-3-tuple(v_1009),msg_d(bob,alice,sid))) in
        {491}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {492}let v_1013: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1010))) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then cipherstatepack(1-proj-2-tuple(v_1012),increment_nonce(2-proj-2-tuple(v_1010))) else fail-any) else fail-any)) in
        {493}let v_1014: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1009)) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then (if not-caught-fail(v_1011) then (if not-caught-fail(v_1013) then (v_1013,v_1011) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_1015: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1014),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) in
        {495}let v_1016: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1014)) && success?(symmetricstatepack(1-proj-2-tuple(v_1014),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1015),hash(3-proj-3-tuple(v_1015),2-proj-2-tuple(v_1014))) else fail-any) else fail-any)) in
        {496}let v_1017: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1007)) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,2-proj-2-tuple(v_1014)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_1018: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1017),2-proj-7-tuple(v_1007),3-proj-7-tuple(v_1007),4-proj-7-tuple(v_1007),5-proj-7-tuple(v_1007),6-proj-7-tuple(v_1007),7-proj-7-tuple(v_1007))) in
        {498}let v_1019: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1008),2-proj-2-tuple(v_1017))) in
        {499}let (hs_1020: handshakestate,message_d_1021: bitstring) = (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-7-tuple(v_1007))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (v_1018,v_1019) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {500}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {501}out(pub, message_d_1021)
    ) | (
        {503}event LeakPsk(phase0,alice,bob);
        {504}out(pub, key_psk(alice,bob))
    ) | (
        {505}phase 1;
        {506}event LeakPsk(phase1,alice,bob);
        {507}out(pub, key_psk(alice,bob))
    ) | (
        {508}event LeakS(phase0,bob);
        {509}out(pub, key_s(bob))
    ) | (
        {510}phase 1;
        {511}event LeakS(phase1,bob);
        {512}out(pub, key_s(bob))
    )
) | (
    {513}let v_1022: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {514}let s_1023: keypair = (if not-caught-fail(v_1022) then keypairpack(validkey(v_1022),key_s(bob)) else fail-any) in
    {515}out(pub, getpublickey(s_1023));
    (
        {516}let e_1024: keypair = keypairpack(empty,empty) in
        {517}let v_1025: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {518}let rs_1026: key = getpublickey((if not-caught-fail(v_1025) then keypairpack(validkey(v_1025),key_s(charlie)) else fail-any)) in
        {519}let re_1027: key = empty in
        {520}let v_1028: bitstring = catch-fail(hash(somename,empty)) in
        {521}let v_1029: key = catch-fail(v_1028) in
        {522}let v_1030: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {523}let v_1031: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then symmetricstatepack(v_1030,v_1029,v_1028) else fail-any) else fail-any) else fail-any))) in
        {524}let v_1032: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then symmetricstatepack(v_1030,v_1029,v_1028) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack(1-proj-3-tuple(v_1031),2-proj-3-tuple(v_1031),hash(3-proj-3-tuple(v_1031),empty)) else fail-any) else fail-any)) in
        {525}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1032)) in
        {526}let v_1034: symmetricstate = catch-fail((if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then symmetricstatepack(1-proj-3-tuple(v_1033),2-proj-3-tuple(v_1033),hash(3-proj-3-tuple(v_1033),rs_1026)) else fail-any)) in
        {527}let v_1035: bitstring = catch-fail(symmetricstateunpack(v_1034)) in
        {528}let v_1036: symmetricstate = catch-fail((if success?(getpublickey(s_1023)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then symmetricstatepack(1-proj-3-tuple(v_1035),2-proj-3-tuple(v_1035),hash(3-proj-3-tuple(v_1035),getpublickey(s_1023))) else fail-any) else fail-any)) in
        {529}let hs_1037: handshakestate = (if not-caught-fail(v_1032) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1036) then handshakestatepack(v_1036,s_1023,e_1024,rs_1026,re_1027,key_psk(charlie,bob),false) else fail-any) else fail-any) else fail-any) in
        {530}insert statestore(bob,charlie,sid,statepack_a(hs_1037))
    ) | (
        {572}get statestore(=bob,=charlie,=sid,statepack_a(hs_1038: handshakestate)) in
        {531}in(pub, message_a_1039: bitstring);
        {532}let v_1040: bitstring = catch-fail(handshakestateunpack(hs_1038)) in
        {533}let v_1041: bitstring = catch-fail(deconcat3(message_a_1039)) in
        {534}let v_1042: bool = catch-fail(true) in
        {535}let v_1043: key = catch-fail(1-proj-3-tuple(v_1041)) in
        {536}let v_1044: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1040))) in
        {537}let v_1045: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then symmetricstatepack(1-proj-3-tuple(v_1044),2-proj-3-tuple(v_1044),hash(3-proj-3-tuple(v_1044),v_1043)) else fail-any) else fail-any)) in
        {538}let v_1046: bitstring = catch-fail(symmetricstateunpack(v_1045)) in
        {539}let v_1047: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1046),v_1043)) in
        {540}let v_1048: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1046),v_1043)) in
        {541}let v_1049: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1046),v_1043)) in
        {542}let v_1050: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1046)) then (if not-caught-fail(v_1047) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (v_1047,v_1048,v_1049) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1051: symmetricstate = catch-fail((if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1050)) then cipherstatepack(2-proj-3-tuple(v_1050),minnonce) else fail-any),1-proj-3-tuple(v_1050),3-proj-3-tuple(v_1046)) else fail-any) else fail-any)) in
        {544}let v_1052: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1040))) in
        {545}let v_1053: bitstring = catch-fail(symmetricstateunpack(v_1051)) in
        {546}let v_1054: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1053),(if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),v_1043) else fail-any) else fail-any))) in
        {547}let v_1055: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1053),(if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),v_1043) else fail-any) else fail-any))) in
        {548}let v_1056: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1053),(if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),v_1043) else fail-any) else fail-any))) in
        {549}let v_1057: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),v_1043) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1053))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (v_1054,v_1055,v_1056) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {550}let v_1058: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1040)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),v_1043) else fail-any) else fail-any)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1057)) then cipherstatepack(2-proj-3-tuple(v_1057),minnonce) else fail-any),1-proj-3-tuple(v_1057),3-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1059: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1040))) in
        {552}let v_1060: bitstring = catch-fail(symmetricstateunpack(v_1058)) in
        {553}let v_1061: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1060),(if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {554}let v_1062: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1060),(if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {555}let v_1063: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1060),(if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {556}let v_1064: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),4-proj-7-tuple(v_1040)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1060))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (v_1061,v_1062,v_1063) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {557}let v_1065: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_1040)) && success?(2-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),4-proj-7-tuple(v_1040)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1064)) then cipherstatepack(2-proj-3-tuple(v_1064),minnonce) else fail-any),1-proj-3-tuple(v_1064),3-proj-3-tuple(v_1060)) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1066: bitstring = catch-fail(symmetricstateunpack(v_1065)) in
        {559}let v_1067: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1066))) in
        {560}let v_1068: aead = catch-fail(decrypt(1-proj-2-tuple(v_1067),2-proj-2-tuple(v_1067),3-proj-3-tuple(v_1066),3-proj-3-tuple(v_1041))) in
        {561}let v_1069: bitstring = catch-fail(aeadunpack(v_1068)) in
        {562}let v_1070: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1066))) in
        {563}let v_1071: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1067))) && success?(1-proj-3-tuple(v_1066))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then cipherstatepack(1-proj-2-tuple(v_1070),increment_nonce(2-proj-2-tuple(v_1067))) else fail-any) else fail-any)) in
        {564}let v_1072: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && (success?(3-proj-3-tuple(v_1066)) && success?(1-proj-3-tuple(v_1066)))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then (if not-caught-fail(v_1068) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if not-caught-fail(v_1071) then (v_1071,3-proj-3-tuple(v_1069),1-proj-3-tuple(v_1069)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1073: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1072),2-proj-3-tuple(v_1066),3-proj-3-tuple(v_1066)))) in
        {566}let v_1074: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && success?(symmetricstatepack(1-proj-3-tuple(v_1072),2-proj-3-tuple(v_1066),3-proj-3-tuple(v_1066)))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then symmetricstatepack(1-proj-3-tuple(v_1073),2-proj-3-tuple(v_1073),hash(3-proj-3-tuple(v_1073),3-proj-3-tuple(v_1041))) else fail-any) else fail-any)) in
        {567}let v_1075: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1041)) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if not-caught-fail(v_1074) then (v_1074,2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1076: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1075),2-proj-7-tuple(v_1040),3-proj-7-tuple(v_1040),4-proj-7-tuple(v_1040),v_1043,6-proj-7-tuple(v_1040),7-proj-7-tuple(v_1040))) in
        {569}let (hs_1077: handshakestate,plaintext_a_1078: bitstring,valid_1079: bool) = (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-7-tuple(v_1040))))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if not-caught-fail(v_1042) then (if not-caught-fail(v_1043) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1058) then (if not-caught-fail(v_1065) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-3-tuple(v_1075))))) then (if (v_1042 && 3-proj-3-tuple(v_1075)) then (if not-caught-fail(v_1076) then (v_1076,2-proj-3-tuple(v_1075),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {570}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1078);
        {571}insert statestore(bob,charlie,sid,statepack_b(hs_1077))
    ) | (
        {631}get statestore(=bob,=charlie,=sid,statepack_b(hs_1080: handshakestate)) in
        {573}let v_1081: bitstring = catch-fail(handshakestateunpack(hs_1080)) in
        {574}let v_1082: bitstring = catch-fail((empty,empty,empty)) in
        {575}let v_1083: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {576}let v_1084: keypair = catch-fail((if not-caught-fail(v_1083) then keypairpack(validkey(v_1083),key_e(bob,charlie,sid)) else fail-any)) in
        {577}let v_1085: bitstring = catch-fail(getpublickey(v_1084)) in
        {578}let v_1086: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1081))) in
        {579}let v_1087: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then symmetricstatepack(1-proj-3-tuple(v_1086),2-proj-3-tuple(v_1086),hash(3-proj-3-tuple(v_1086),v_1085)) else fail-any) else fail-any)) in
        {580}let v_1088: bitstring = catch-fail(symmetricstateunpack(v_1087)) in
        {581}let v_1089: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1088),getpublickey(v_1084))) in
        {582}let v_1090: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1088),getpublickey(v_1084))) in
        {583}let v_1091: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1088),getpublickey(v_1084))) in
        {584}let v_1092: bitstring = catch-fail((if (success?(getpublickey(v_1084)) && success?(2-proj-3-tuple(v_1088))) then (if not-caught-fail(v_1089) then (if not-caught-fail(v_1090) then (if not-caught-fail(v_1091) then (v_1089,v_1090,v_1091) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {585}let v_1093: symmetricstate = catch-fail((if success?(getpublickey(v_1084)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-3-tuple(v_1088))))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1092)) then cipherstatepack(2-proj-3-tuple(v_1092),minnonce) else fail-any),1-proj-3-tuple(v_1092),3-proj-3-tuple(v_1088)) else fail-any) else fail-any) else fail-any)) in
        {586}let v_1094: bitstring = catch-fail(keypairunpack(v_1084)) in
        {587}let v_1095: bitstring = catch-fail(symmetricstateunpack(v_1093)) in
        {588}let v_1096: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1095),(if success?(5-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),5-proj-7-tuple(v_1081)) else fail-any) else fail-any))) in
        {589}let v_1097: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1095),(if success?(5-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),5-proj-7-tuple(v_1081)) else fail-any) else fail-any))) in
        {590}let v_1098: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1095),(if success?(5-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),5-proj-7-tuple(v_1081)) else fail-any) else fail-any))) in
        {591}let v_1099: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),5-proj-7-tuple(v_1081)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1095))) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1098) then (v_1096,v_1097,v_1098) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1100: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),5-proj-7-tuple(v_1081)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1099)) then cipherstatepack(2-proj-3-tuple(v_1099),minnonce) else fail-any),1-proj-3-tuple(v_1099),3-proj-3-tuple(v_1095)) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1101: bitstring = catch-fail(keypairunpack(v_1084)) in
        {594}let v_1102: bitstring = catch-fail(symmetricstateunpack(v_1100)) in
        {595}let v_1103: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1102),(if success?(4-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then dhexp(2-proj-2-tuple(v_1101),4-proj-7-tuple(v_1081)) else fail-any) else fail-any))) in
        {596}let v_1104: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1102),(if success?(4-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then dhexp(2-proj-2-tuple(v_1101),4-proj-7-tuple(v_1081)) else fail-any) else fail-any))) in
        {597}let v_1105: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1102),(if success?(4-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then dhexp(2-proj-2-tuple(v_1101),4-proj-7-tuple(v_1081)) else fail-any) else fail-any))) in
        {598}let v_1106: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then dhexp(2-proj-2-tuple(v_1101),4-proj-7-tuple(v_1081)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1102))) then (if not-caught-fail(v_1103) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (v_1103,v_1104,v_1105) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1107: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then dhexp(2-proj-2-tuple(v_1101),4-proj-7-tuple(v_1081)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1106)) then cipherstatepack(2-proj-3-tuple(v_1106),minnonce) else fail-any),1-proj-3-tuple(v_1106),3-proj-3-tuple(v_1102)) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1108: bitstring = catch-fail(symmetricstateunpack(v_1107)) in
        {601}let v_1109: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1108),6-proj-7-tuple(v_1081))) in
        {602}let v_1110: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1108),6-proj-7-tuple(v_1081))) in
        {603}let v_1111: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1108),6-proj-7-tuple(v_1081))) in
        {604}let v_1112: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1081)) && success?(2-proj-3-tuple(v_1108))) then (if not-caught-fail(v_1109) then (if not-caught-fail(v_1110) then (if not-caught-fail(v_1111) then (v_1109,v_1110,v_1111) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1113: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1108),1-proj-3-tuple(v_1112),3-proj-3-tuple(v_1108)))) in
        {606}let v_1114: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1112)) && success?(symmetricstatepack(1-proj-3-tuple(v_1108),1-proj-3-tuple(v_1112),3-proj-3-tuple(v_1108)))) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-3-tuple(v_1113))))) then symmetricstatepack(1-proj-3-tuple(v_1113),2-proj-3-tuple(v_1113),hash(3-proj-3-tuple(v_1113),2-proj-3-tuple(v_1112))) else fail-any) else fail-any))) in
        {607}let v_1115: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-3-tuple(v_1108))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1112)) then cipherstatepack(3-proj-3-tuple(v_1112),minnonce) else fail-any),1-proj-3-tuple(v_1112),3-proj-3-tuple(v_1114)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1116: bitstring = catch-fail(symmetricstateunpack(v_1115)) in
        {609}let v_1117: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1116))) in
        {610}let v_1118: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1117),2-proj-2-tuple(v_1117),3-proj-3-tuple(v_1116),msg_b(bob,charlie,sid))) in
        {611}let v_1119: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1116))) in
        {612}let v_1120: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1117))) && success?(1-proj-3-tuple(v_1116))) then (if (not-caught-fail(v_1119) && success?(is-true(success?(1-proj-2-tuple(v_1119))))) then cipherstatepack(1-proj-2-tuple(v_1119),increment_nonce(2-proj-2-tuple(v_1117))) else fail-any) else fail-any)) in
        {613}let v_1121: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1116)) && success?(1-proj-3-tuple(v_1116))) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-2-tuple(v_1117))))) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1120) then (v_1120,v_1118) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1122: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1121),2-proj-3-tuple(v_1116),3-proj-3-tuple(v_1116)))) in
        {615}let v_1123: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1121)) && success?(symmetricstatepack(1-proj-2-tuple(v_1121),2-proj-3-tuple(v_1116),3-proj-3-tuple(v_1116)))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then symmetricstatepack(1-proj-3-tuple(v_1122),2-proj-3-tuple(v_1122),hash(3-proj-3-tuple(v_1122),2-proj-2-tuple(v_1121))) else fail-any) else fail-any)) in
        {616}let v_1124: bitstring = catch-fail((if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-2-tuple(v_1121))))) then (if not-caught-fail(v_1123) then (v_1123,2-proj-2-tuple(v_1121)) else fail-any) else fail-any) else fail-any)) in
        {617}let v_1125: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1124),2-proj-7-tuple(v_1081),v_1084,4-proj-7-tuple(v_1081),5-proj-7-tuple(v_1081),6-proj-7-tuple(v_1081),7-proj-7-tuple(v_1081))) in
        {618}let v_1126: bitstring = catch-fail(concat3(v_1085,2-proj-3-tuple(v_1082),2-proj-2-tuple(v_1124))) in
        {619}let v_1127: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1124))) in
        {620}let v_1128: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1127),zero)) in
        {621}let v_1129: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1127),zero)) in
        {622}let v_1130: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1127),zero)) in
        {623}let v_1131: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1127)) then (if not-caught-fail(v_1128) then (if not-caught-fail(v_1129) then (if not-caught-fail(v_1130) then (v_1128,v_1129,v_1130) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {624}let v_1132: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1131)) then cipherstatepack(1-proj-3-tuple(v_1131),minnonce) else fail-any)) in
        {625}let v_1133: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1131)) then cipherstatepack(2-proj-3-tuple(v_1131),minnonce) else fail-any)) in
        {626}let v_1134: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1124)) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-3-tuple(v_1127))))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then (if not-caught-fail(v_1132) then (if not-caught-fail(v_1133) then (1-proj-2-tuple(v_1124),v_1132,v_1133) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {627}let (hs_1135: handshakestate,message_b_1136: bitstring,cs1_1137: cipherstate,cs2_1138: cipherstate) = (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-7-tuple(v_1081))))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-3-tuple(v_1082))))) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1085) then (if not-caught-fail(v_1087) then (if not-caught-fail(v_1093) then (if not-caught-fail(v_1100) then (if not-caught-fail(v_1107) then (if not-caught-fail(v_1115) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if not-caught-fail(v_1126) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (v_1125,v_1126,2-proj-3-tuple(v_1134),3-proj-3-tuple(v_1134)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {628}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {629}insert statestore(bob,charlie,sid,statepack_c(hs_1135,cs1_1137,cs2_1138));
        {630}out(pub, message_b_1136)
    ) | (
        {632}!
        {652}get statestore(=bob,=charlie,=sid,statepack_c(hs_1139: handshakestate,cs1_1140: cipherstate,cs2_1141: cipherstate)) in
        {633}let hs_1142: handshakestate = handshakestatesetcs(hs_1139,cs1_1140) in
        {634}in(pub, message_c_1143: bitstring);
        {635}let v_1144: bitstring = catch-fail(handshakestateunpack(hs_1142)) in
        {636}let v_1145: bitstring = catch-fail(deconcat3(message_c_1143)) in
        {637}let v_1146: bool = catch-fail(true) in
        {638}let v_1147: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1144))) in
        {639}let v_1148: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1147))) in
        {640}let v_1149: aead = catch-fail(decrypt(1-proj-2-tuple(v_1148),2-proj-2-tuple(v_1148),3-proj-3-tuple(v_1147),3-proj-3-tuple(v_1145))) in
        {641}let v_1150: bitstring = catch-fail(aeadunpack(v_1149)) in
        {642}let v_1151: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1147))) in
        {643}let v_1152: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1148))) && success?(1-proj-3-tuple(v_1147))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then cipherstatepack(1-proj-2-tuple(v_1151),increment_nonce(2-proj-2-tuple(v_1148))) else fail-any) else fail-any)) in
        {644}let v_1153: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1145)) && (success?(3-proj-3-tuple(v_1147)) && success?(1-proj-3-tuple(v_1147)))) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-2-tuple(v_1148))))) then (if not-caught-fail(v_1149) then (if (not-caught-fail(v_1150) && success?(is-true(success?(1-proj-3-tuple(v_1150))))) then (if not-caught-fail(v_1152) then (v_1152,3-proj-3-tuple(v_1150),1-proj-3-tuple(v_1150)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {645}let v_1154: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1153),2-proj-3-tuple(v_1147),3-proj-3-tuple(v_1147)))) in
        {646}let v_1155: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1145)) && success?(symmetricstatepack(1-proj-3-tuple(v_1153),2-proj-3-tuple(v_1147),3-proj-3-tuple(v_1147)))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then symmetricstatepack(1-proj-3-tuple(v_1154),2-proj-3-tuple(v_1154),hash(3-proj-3-tuple(v_1154),3-proj-3-tuple(v_1145))) else fail-any) else fail-any)) in
        {647}let v_1156: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1145)) && success?(1-proj-7-tuple(v_1144))) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-3-tuple(v_1147))))) then (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-3-tuple(v_1153))))) then (if not-caught-fail(v_1155) then (v_1155,2-proj-3-tuple(v_1153),3-proj-3-tuple(v_1153)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {648}let v_1157: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1156),2-proj-7-tuple(v_1144),3-proj-7-tuple(v_1144),4-proj-7-tuple(v_1144),5-proj-7-tuple(v_1144),6-proj-7-tuple(v_1144),7-proj-7-tuple(v_1144))) in
        {649}let (hs_1158: handshakestate,plaintext_c_1159: bitstring,valid_1160: bool) = (if (not-caught-fail(v_1144) && success?(is-true(success?(1-proj-7-tuple(v_1144))))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then (if not-caught-fail(v_1146) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (v_1146 && 3-proj-3-tuple(v_1156)) then (if not-caught-fail(v_1157) then (v_1157,2-proj-3-tuple(v_1156),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {650}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1159);
        {651}insert statestore(bob,charlie,sid,statepack_d(hs_1158,handshakestategetcs(hs_1158),cs2_1141))
    ) | (
        {653}!
        {671}get statestore(=bob,=charlie,=sid,statepack_d(hs_1161: handshakestate,cs1_1162: cipherstate,cs2_1163: cipherstate)) in
        {654}let hs_1164: handshakestate = handshakestatesetcs(hs_1161,cs2_1163) in
        {655}let v_1165: bitstring = catch-fail(handshakestateunpack(hs_1164)) in
        {656}let v_1166: bitstring = catch-fail((empty,empty,empty)) in
        {657}let v_1167: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1165))) in
        {658}let v_1168: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1167))) in
        {659}let v_1169: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1168),2-proj-2-tuple(v_1168),3-proj-3-tuple(v_1167),msg_d(bob,charlie,sid))) in
        {660}let v_1170: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1167))) in
        {661}let v_1171: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1168))) && success?(1-proj-3-tuple(v_1167))) then (if (not-caught-fail(v_1170) && success?(is-true(success?(1-proj-2-tuple(v_1170))))) then cipherstatepack(1-proj-2-tuple(v_1170),increment_nonce(2-proj-2-tuple(v_1168))) else fail-any) else fail-any)) in
        {662}let v_1172: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1167)) && success?(1-proj-3-tuple(v_1167))) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then (if not-caught-fail(v_1169) then (if not-caught-fail(v_1171) then (v_1171,v_1169) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {663}let v_1173: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1172),2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)))) in
        {664}let v_1174: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1172)) && success?(symmetricstatepack(1-proj-2-tuple(v_1172),2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)))) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-3-tuple(v_1173))))) then symmetricstatepack(1-proj-3-tuple(v_1173),2-proj-3-tuple(v_1173),hash(3-proj-3-tuple(v_1173),2-proj-2-tuple(v_1172))) else fail-any) else fail-any)) in
        {665}let v_1175: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1165)) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if (not-caught-fail(v_1172) && success?(is-true(success?(1-proj-2-tuple(v_1172))))) then (if not-caught-fail(v_1174) then (v_1174,2-proj-2-tuple(v_1172)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {666}let v_1176: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1175),2-proj-7-tuple(v_1165),3-proj-7-tuple(v_1165),4-proj-7-tuple(v_1165),5-proj-7-tuple(v_1165),6-proj-7-tuple(v_1165),7-proj-7-tuple(v_1165))) in
        {667}let v_1177: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1166),2-proj-3-tuple(v_1166),2-proj-2-tuple(v_1175))) in
        {668}let (hs_1178: handshakestate,message_d_1179: bitstring) = (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-7-tuple(v_1165))))) then (if (not-caught-fail(v_1166) && success?(is-true(success?(1-proj-3-tuple(v_1166))))) then (if (not-caught-fail(v_1175) && success?(is-true(success?(1-proj-2-tuple(v_1175))))) then (if not-caught-fail(v_1176) then (if not-caught-fail(v_1177) then (v_1176,v_1177) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {669}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {670}out(pub, message_d_1179)
    ) | (
        {672}event LeakPsk(phase0,charlie,bob);
        {673}out(pub, key_psk(charlie,bob))
    ) | (
        {674}phase 1;
        {675}event LeakPsk(phase1,charlie,bob);
        {676}out(pub, key_psk(charlie,bob))
    ) | (
        {677}event LeakS(phase0,bob);
        {678}out(pub, key_s(bob))
    ) | (
        {679}phase 1;
        {680}event LeakS(phase1,bob);
        {681}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 173 rules in the queue.
400 rules inserted. The rule base contains 392 rules. 67 rules in the queue.
600 rules inserted. The rule base contains 573 rules. 223 rules in the queue.
800 rules inserted. The rule base contains 746 rules. 119 rules in the queue.
1000 rules inserted. The rule base contains 940 rules. 235 rules in the queue.
1200 rules inserted. The rule base contains 1135 rules. 315 rules in the queue.
1400 rules inserted. The rule base contains 1313 rules. 302 rules in the queue.
1600 rules inserted. The rule base contains 1508 rules. 331 rules in the queue.
1800 rules inserted. The rule base contains 1707 rules. 361 rules in the queue.
2000 rules inserted. The rule base contains 1886 rules. 410 rules in the queue.
2200 rules inserted. The rule base contains 2064 rules. 457 rules in the queue.
2400 rules inserted. The rule base contains 2211 rules. 556 rules in the queue.
2600 rules inserted. The rule base contains 2369 rules. 619 rules in the queue.
2800 rules inserted. The rule base contains 2475 rules. 625 rules in the queue.
3000 rules inserted. The rule base contains 2583 rules. 616 rules in the queue.
3200 rules inserted. The rule base contains 2698 rules. 604 rules in the queue.
3400 rules inserted. The rule base contains 2786 rules. 571 rules in the queue.
3600 rules inserted. The rule base contains 2866 rules. 526 rules in the queue.
3800 rules inserted. The rule base contains 2962 rules. 558 rules in the queue.
4000 rules inserted. The rule base contains 3058 rules. 587 rules in the queue.
4200 rules inserted. The rule base contains 3168 rules. 581 rules in the queue.
4400 rules inserted. The rule base contains 3291 rules. 581 rules in the queue.
4600 rules inserted. The rule base contains 3416 rules. 584 rules in the queue.
4800 rules inserted. The rule base contains 3566 rules. 608 rules in the queue.
5000 rules inserted. The rule base contains 3753 rules. 662 rules in the queue.
5200 rules inserted. The rule base contains 3886 rules. 665 rules in the queue.
5400 rules inserted. The rule base contains 4033 rules. 652 rules in the queue.
5600 rules inserted. The rule base contains 4203 rules. 646 rules in the queue.
5800 rules inserted. The rule base contains 4340 rules. 635 rules in the queue.
6000 rules inserted. The rule base contains 4512 rules. 613 rules in the queue.
6200 rules inserted. The rule base contains 4695 rules. 599 rules in the queue.
6400 rules inserted. The rule base contains 4821 rules. 590 rules in the queue.
6600 rules inserted. The rule base contains 4969 rules. 599 rules in the queue.
6800 rules inserted. The rule base contains 5130 rules. 614 rules in the queue.
7000 rules inserted. The rule base contains 5249 rules. 589 rules in the queue.
7200 rules inserted. The rule base contains 5383 rules. 582 rules in the queue.
7400 rules inserted. The rule base contains 5203 rules. 583 rules in the queue.
7600 rules inserted. The rule base contains 5382 rules. 653 rules in the queue.
7800 rules inserted. The rule base contains 5543 rules. 718 rules in the queue.
8000 rules inserted. The rule base contains 5704 rules. 776 rules in the queue.
8200 rules inserted. The rule base contains 5874 rules. 812 rules in the queue.
8400 rules inserted. The rule base contains 6054 rules. 856 rules in the queue.
8600 rules inserted. The rule base contains 6229 rules. 896 rules in the queue.
8800 rules inserted. The rule base contains 6417 rules. 929 rules in the queue.
9000 rules inserted. The rule base contains 6602 rules. 952 rules in the queue.
9200 rules inserted. The rule base contains 6777 rules. 962 rules in the queue.
9400 rules inserted. The rule base contains 6965 rules. 985 rules in the queue.
9600 rules inserted. The rule base contains 7131 rules. 996 rules in the queue.
9800 rules inserted. The rule base contains 7305 rules. 998 rules in the queue.
10000 rules inserted. The rule base contains 7465 rules. 982 rules in the queue.
10200 rules inserted. The rule base contains 7635 rules. 991 rules in the queue.
10400 rules inserted. The rule base contains 7809 rules. 994 rules in the queue.
10600 rules inserted. The rule base contains 7942 rules. 990 rules in the queue.
10800 rules inserted. The rule base contains 8078 rules. 977 rules in the queue.
11000 rules inserted. The rule base contains 8217 rules. 951 rules in the queue.
11200 rules inserted. The rule base contains 8370 rules. 896 rules in the queue.
11400 rules inserted. The rule base contains 8508 rules. 856 rules in the queue.
11600 rules inserted. The rule base contains 8644 rules. 857 rules in the queue.
11800 rules inserted. The rule base contains 8767 rules. 866 rules in the queue.
12000 rules inserted. The rule base contains 8949 rules. 852 rules in the queue.
12200 rules inserted. The rule base contains 9059 rules. 861 rules in the queue.
12400 rules inserted. The rule base contains 9180 rules. 855 rules in the queue.
12600 rules inserted. The rule base contains 9291 rules. 837 rules in the queue.
12800 rules inserted. The rule base contains 9463 rules. 813 rules in the queue.
13000 rules inserted. The rule base contains 9531 rules. 818 rules in the queue.
13200 rules inserted. The rule base contains 9639 rules. 826 rules in the queue.
13400 rules inserted. The rule base contains 9804 rules. 853 rules in the queue.
13600 rules inserted. The rule base contains 9996 rules. 878 rules in the queue.
13800 rules inserted. The rule base contains 10073 rules. 862 rules in the queue.
14000 rules inserted. The rule base contains 10169 rules. 857 rules in the queue.
14200 rules inserted. The rule base contains 10368 rules. 880 rules in the queue.
14400 rules inserted. The rule base contains 10568 rules. 908 rules in the queue.
14600 rules inserted. The rule base contains 10645 rules. 900 rules in the queue.
14800 rules inserted. The rule base contains 10787 rules. 893 rules in the queue.
15000 rules inserted. The rule base contains 10982 rules. 914 rules in the queue.
15200 rules inserted. The rule base contains 11177 rules. 931 rules in the queue.
15400 rules inserted. The rule base contains 11239 rules. 916 rules in the queue.
15600 rules inserted. The rule base contains 11397 rules. 915 rules in the queue.
15800 rules inserted. The rule base contains 11584 rules. 944 rules in the queue.
16000 rules inserted. The rule base contains 11771 rules. 968 rules in the queue.
16200 rules inserted. The rule base contains 11889 rules. 931 rules in the queue.
16400 rules inserted. The rule base contains 12028 rules. 921 rules in the queue.
16600 rules inserted. The rule base contains 12197 rules. 922 rules in the queue.
16800 rules inserted. The rule base contains 12380 rules. 907 rules in the queue.
17000 rules inserted. The rule base contains 12524 rules. 881 rules in the queue.
17200 rules inserted. The rule base contains 12593 rules. 832 rules in the queue.
17400 rules inserted. The rule base contains 12723 rules. 827 rules in the queue.
17600 rules inserted. The rule base contains 12915 rules. 793 rules in the queue.
17800 rules inserted. The rule base contains 13018 rules. 780 rules in the queue.
18000 rules inserted. The rule base contains 13141 rules. 792 rules in the queue.
18200 rules inserted. The rule base contains 13284 rules. 803 rules in the queue.
18400 rules inserted. The rule base contains 13441 rules. 821 rules in the queue.
18600 rules inserted. The rule base contains 13492 rules. 811 rules in the queue.
18800 rules inserted. The rule base contains 13567 rules. 827 rules in the queue.
19000 rules inserted. The rule base contains 13755 rules. 847 rules in the queue.
19200 rules inserted. The rule base contains 13859 rules. 845 rules in the queue.
19400 rules inserted. The rule base contains 13987 rules. 831 rules in the queue.
19600 rules inserted. The rule base contains 14077 rules. 809 rules in the queue.
19800 rules inserted. The rule base contains 14259 rules. 844 rules in the queue.
20000 rules inserted. The rule base contains 14346 rules. 838 rules in the queue.
20200 rules inserted. The rule base contains 14444 rules. 827 rules in the queue.
20400 rules inserted. The rule base contains 14578 rules. 807 rules in the queue.
20600 rules inserted. The rule base contains 14735 rules. 750 rules in the queue.
20800 rules inserted. The rule base contains 14775 rules. 699 rules in the queue.
21000 rules inserted. The rule base contains 14879 rules. 653 rules in the queue.
21200 rules inserted. The rule base contains 15014 rules. 586 rules in the queue.
21400 rules inserted. The rule base contains 15067 rules. 530 rules in the queue.
21600 rules inserted. The rule base contains 15159 rules. 481 rules in the queue.
21800 rules inserted. The rule base contains 15143 rules. 430 rules in the queue.
22000 rules inserted. The rule base contains 15184 rules. 384 rules in the queue.
22200 rules inserted. The rule base contains 15212 rules. 328 rules in the queue.
22400 rules inserted. The rule base contains 15239 rules. 292 rules in the queue.
22600 rules inserted. The rule base contains 15241 rules. 228 rules in the queue.
22800 rules inserted. The rule base contains 15279 rules. 140 rules in the queue.
23000 rules inserted. The rule base contains 15276 rules. 17 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535317]),msg_a(alice,bob,sid[!1 = @sid_1693535317]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535318]),msg_a(alice,bob,sid[!1 = @sid_1693535317])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535326]),msg_a(alice,bob,sid[!1 = @sid_1693535326]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535327]),msg_a(alice,bob,sid[!1 = @sid_1693535326])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535336]),msg_a(alice,bob,sid[!1 = @sid_1693535336]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535337]),msg_a(alice,bob,sid[!1 = @sid_1693535336])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535346]),msg_a(alice,bob,sid[!1 = @sid_1693535346]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535347]),msg_a(alice,bob,sid[!1 = @sid_1693535346])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535355]),msg_a(alice,bob,sid[!1 = @sid_1693535355]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535356]),msg_a(alice,bob,sid[!1 = @sid_1693535355])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535363]),msg_a(alice,bob,sid[!1 = @sid_1693535363]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535363]))
Abbreviations:
sid_1693535467 = sid[!1 = @sid_1693535442]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693535467,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693535467,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693535467,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693535467),msg_a(alice,bob,sid_1693535467)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535467),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535467),g))),msg_a(alice,bob,sid_1693535467)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693535467) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693535467)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535469]),msg_a(alice,bob,sid[!1 = @sid_1693535469]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535469]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535472]),msg_a(alice,bob,sid[!1 = @sid_1693535472]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535472]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535479]),msg_a(alice,bob,sid[!1 = @sid_1693535479]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535479]))
Abbreviations:
sid_1693535585 = sid[!1 = @sid_1693535560]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693535585,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693535585,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693535585,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693535585),msg_a(alice,bob,sid_1693535585)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535585),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535585),g))),msg_a(alice,bob,sid_1693535585)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693535585) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693535585)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535587]),msg_a(alice,bob,sid[!1 = @sid_1693535587]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535587]))
Abbreviations:
sid_1693535691 = sid[!1 = @sid_1693535666]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693535691,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693535691,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693535691,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693535691),msg_a(alice,bob,sid_1693535691)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535691),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535691),g))),msg_a(alice,bob,sid_1693535691)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693535691) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693535691)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535694]),msg_b(bob,alice,sid[!1 = @sid_1693535694]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535695]),msg_a(alice,bob,sid[!1 = @sid_1693535695]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693535695]),msg_b(bob,alice,sid[!1 = @sid_1693535694])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535703]),msg_b(bob,alice,sid[!1 = @sid_1693535703]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535704]),msg_a(alice,bob,sid[!1 = @sid_1693535704]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693535704]),msg_b(bob,alice,sid[!1 = @sid_1693535703])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535713]),msg_b(bob,alice,sid[!1 = @sid_1693535713]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535714]),msg_a(alice,bob,sid[!1 = @sid_1693535714]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693535714]),msg_b(bob,alice,sid[!1 = @sid_1693535713])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535723]),msg_b(bob,alice,sid[!1 = @sid_1693535723]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535724]),msg_a(alice,bob,sid[!1 = @sid_1693535724]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693535724]),msg_b(bob,alice,sid[!1 = @sid_1693535723])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535732]),msg_b(bob,alice,sid[!1 = @sid_1693535732]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535733]),msg_a(alice,bob,sid[!1 = @sid_1693535733]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693535733]),msg_b(bob,alice,sid[!1 = @sid_1693535732])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535758]),msg_c(alice,bob,sid[!1 = @sid_1693535758]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535759]),msg_b(bob,alice,sid[!1 = @sid_1693535759]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535758]),msg_a(alice,bob,sid[!1 = @sid_1693535758]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693535759]),msg_c(alice,bob,sid[!1 = @sid_1693535758])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535767]),msg_c(alice,bob,sid[!1 = @sid_1693535767]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535768]),msg_b(bob,alice,sid[!1 = @sid_1693535768]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535767]),msg_a(alice,bob,sid[!1 = @sid_1693535767]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693535768]),msg_c(alice,bob,sid[!1 = @sid_1693535767])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535777]),msg_c(alice,bob,sid[!1 = @sid_1693535777]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535778]),msg_b(bob,alice,sid[!1 = @sid_1693535778]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535777]),msg_a(alice,bob,sid[!1 = @sid_1693535777]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693535778]),msg_c(alice,bob,sid[!1 = @sid_1693535777])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1289,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535787]),msg_c(alice,bob,sid[!1 = @sid_1693535787]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535788]),msg_b(bob,alice,sid[!1 = @sid_1693535788]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535787]),msg_a(alice,bob,sid[!1 = @sid_1693535787]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693535788]),msg_c(alice,bob,sid[!1 = @sid_1693535787])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535796]),msg_c(alice,bob,sid[!1 = @sid_1693535796]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535797]),msg_b(bob,alice,sid[!1 = @sid_1693535797]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535796]),msg_a(alice,bob,sid[!1 = @sid_1693535796]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693535797]),msg_c(alice,bob,sid[!1 = @sid_1693535796])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693535822]),msg_d(bob,alice,sid[!1 = @sid_1693535822]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535823]),msg_c(alice,bob,sid[!1 = @sid_1693535823]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535822]),msg_b(bob,alice,sid[!1 = @sid_1693535822]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535823]),msg_a(alice,bob,sid[!1 = @sid_1693535823]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693535823]),msg_d(bob,alice,sid[!1 = @sid_1693535822])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693535831]),msg_d(bob,alice,sid[!1 = @sid_1693535831]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535832]),msg_c(alice,bob,sid[!1 = @sid_1693535832]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535831]),msg_b(bob,alice,sid[!1 = @sid_1693535831]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535832]),msg_a(alice,bob,sid[!1 = @sid_1693535832]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693535832]),msg_d(bob,alice,sid[!1 = @sid_1693535831])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693535841]),msg_d(bob,alice,sid[!1 = @sid_1693535841]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535842]),msg_c(alice,bob,sid[!1 = @sid_1693535842]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535841]),msg_b(bob,alice,sid[!1 = @sid_1693535841]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535842]),msg_a(alice,bob,sid[!1 = @sid_1693535842]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693535842]),msg_d(bob,alice,sid[!1 = @sid_1693535841])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1289,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693535851]),msg_d(bob,alice,sid[!1 = @sid_1693535851]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535852]),msg_c(alice,bob,sid[!1 = @sid_1693535852]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535851]),msg_b(bob,alice,sid[!1 = @sid_1693535851]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535852]),msg_a(alice,bob,sid[!1 = @sid_1693535852]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693535852]),msg_d(bob,alice,sid[!1 = @sid_1693535851])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693535860]),msg_d(bob,alice,sid[!1 = @sid_1693535860]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535861]),msg_c(alice,bob,sid[!1 = @sid_1693535861]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535860]),msg_b(bob,alice,sid[!1 = @sid_1693535860]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535861]),msg_a(alice,bob,sid[!1 = @sid_1693535861]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693535861]),msg_d(bob,alice,sid[!1 = @sid_1693535860])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693535884]),msg_d(bob,alice,sid[!1 = @sid_1693535884]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693535885]),msg_c(alice,bob,sid[!1 = @sid_1693535885]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693535884]),msg_b(bob,alice,sid[!1 = @sid_1693535884]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535885]),msg_a(alice,bob,sid[!1 = @sid_1693535885]))) -> end(RecvEnd(true))
Abbreviations:
sid_1693536129 = sid[!1 = @sid_1693536118]
sid_1693536130 = sid[!1 = @sid_1693536073]

1. The entry statestore(alice,bob,sid_1693536129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693536129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_1693536129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693536129),msg_a(alice,bob,sid_1693536129)) may be executed at {61}.
So the entry statestore(alice,bob,sid_1693536129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {62}.
table(statestore(alice,bob,sid_1693536129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_1693536130,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {361}.
table(statestore(bob,alice,sid_1693536130,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_1693536129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693536129),msg_a(alice,bob,sid_1693536129)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))).

5. The entry statestore(bob,alice,sid_1693536130,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {403}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))) that may be sent on channel pub by 4 may be received at input {362}.
So the entry statestore(bob,alice,sid_1693536130,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {402}.
table(statestore(bob,alice,sid_1693536130,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_1693536130,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1693536130),msg_b(bob,alice,sid_1693536130)) may be executed at {459}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))) may be sent on channel pub at output {461}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))).

7. The entry statestore(alice,bob,sid_1693536129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {122}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))) that may be sent on channel pub by 6 may be received at input {65}.
So the entry statestore(alice,bob,sid_1693536129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {121}.
table(statestore(alice,bob,sid_1693536129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_1693536129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1693536129),msg_c(alice,bob,sid_1693536129)) may be executed at {139}.
So the entry statestore(alice,bob,sid_1693536129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {140}.
table(statestore(alice,bob,sid_1693536129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_1693536130,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1693536130),msg_b(bob,alice,sid_1693536130)) may be executed at {459}.
So the entry statestore(bob,alice,sid_1693536130,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_e(bob,alice,sid_1693536130)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {460}.
table(statestore(bob,alice,sid_1693536130,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_e(bob,alice,sid_1693536130)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_1693536129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1693536129),msg_c(alice,bob,sid_1693536129)) may be executed at {139}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129))) may be sent on channel pub at output {141}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))).

11. The entry statestore(bob,alice,sid_1693536130,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_e(bob,alice,sid_1693536130)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 9 may be read at get {483}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129))) that may be sent on channel pub by 10 may be received at input {465}.
So the entry statestore(bob,alice,sid_1693536130,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_e(bob,alice,sid_1693536130)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {482}.
table(statestore(bob,alice,sid_1693536130,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_e(bob,alice,sid_1693536130)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_1693536130,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_e(bob,alice,sid_1693536130)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 11 may be read at get {502}.
The event SendMsg(bob,alice,stagepack_d(sid_1693536130),msg_d(bob,alice,sid_1693536130)) may be executed at {500}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129))),msg_d(bob,alice,sid_1693536130))) may be sent on channel pub at output {501}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129))),msg_d(bob,alice,sid_1693536130)))).

13. The entry statestore(alice,bob,sid_1693536129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g)),key_e(alice,bob,sid_1693536129)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 8 may be read at get {163}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),msg_a(alice,bob,sid_1693536129))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536130),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_e(alice,bob,sid_1693536129),g))),dhexp_real(key_e(bob,alice,sid_1693536130),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536130))),msg_c(alice,bob,sid_1693536129))),msg_d(bob,alice,sid_1693536130))) that may be sent on channel pub by 12 may be received at input {145}.
So event RecvEnd(true) may be executed at {162}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
