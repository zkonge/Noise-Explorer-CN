File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 230, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 231, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 231, character 36:
Warning: identifier h rebound.
File "XK1.noise.passive.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 272, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 276, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 276, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 277, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 284, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 298, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 299, characters 26-27:
Warning: identifier ns rebound.
File "XK1.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 310, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 318, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 345, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 347, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 355, characters 26-27:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 355, characters 40-45:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 356, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 567, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 318, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 553, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 298, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 299, characters 26-27:
Warning: identifier ns rebound.
File "XK1.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 345, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 347, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 272, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 276, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 276, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 277, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 619, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 621, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 612, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 613, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 310, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 606, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 355, characters 26-27:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 355, characters 40-45:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 356, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 599, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 284, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "XK1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 593, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_554: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_554));
    (
        {6}let e_555: keypair = keypairpack(empty,empty) in
        {7}let v_556: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {8}let rs_557: key = getpublickey((if not-caught-fail(v_556) then keypairpack(validkey(v_556),key_s(bob)) else fail-any)) in
        {9}let re_558: key = empty in
        {10}let v_559: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_560: key = catch-fail(v_559) in
        {12}let v_561: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_562: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then symmetricstatepack(v_561,v_560,v_559) else fail-any) else fail-any) else fail-any))) in
        {14}let v_563: symmetricstate = catch-fail((if success?((if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then symmetricstatepack(v_561,v_560,v_559) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_562),hash(3-proj-3-tuple(v_562),empty)) else fail-any) else fail-any)) in
        {15}let v_564: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {16}let v_565: symmetricstate = catch-fail((if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),rs_557)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_563) then (if not-caught-fail(v_565) then handshakestatepack(v_565,s_554,e_555,rs_557,re_558,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {41}get statestore(=alice,=bob,=sid,statepack_a(hs_566: handshakestate)) in
        {19}let v_567: bitstring = catch-fail(handshakestateunpack(hs_566)) in
        {20}let v_568: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_569: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_570: keypair = catch-fail((if not-caught-fail(v_569) then keypairpack(validkey(v_569),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_571: bitstring = catch-fail(getpublickey(v_570)) in
        {24}let v_572: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_567))) in
        {25}let v_573: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_567)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_572),hash(3-proj-3-tuple(v_572),v_571)) else fail-any) else fail-any)) in
        {26}let v_574: bitstring = catch-fail(symmetricstateunpack(v_573)) in
        {27}let v_575: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_574))) in
        {28}let v_576: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_575),2-proj-2-tuple(v_575),3-proj-3-tuple(v_574),msg_a(alice,bob,sid))) in
        {29}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_574))) in
        {30}let v_578: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_575))) && success?(1-proj-3-tuple(v_574))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then cipherstatepack(1-proj-2-tuple(v_577),increment_nonce(2-proj-2-tuple(v_575))) else fail-any) else fail-any)) in
        {31}let v_579: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_574)) && success?(1-proj-3-tuple(v_574))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if not-caught-fail(v_576) then (if not-caught-fail(v_578) then (v_578,v_576) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_580: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_579),2-proj-3-tuple(v_574),3-proj-3-tuple(v_574)))) in
        {33}let v_581: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_579)) && success?(symmetricstatepack(1-proj-2-tuple(v_579),2-proj-3-tuple(v_574),3-proj-3-tuple(v_574)))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),2-proj-2-tuple(v_579))) else fail-any) else fail-any)) in
        {34}let v_582: bitstring = catch-fail((if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then (if not-caught-fail(v_581) then (v_581,2-proj-2-tuple(v_579)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_583: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_582),2-proj-7-tuple(v_567),v_570,4-proj-7-tuple(v_567),5-proj-7-tuple(v_567),6-proj-7-tuple(v_567),7-proj-7-tuple(v_567))) in
        {36}let v_584: bitstring = catch-fail(concat3(v_571,2-proj-3-tuple(v_568),2-proj-2-tuple(v_582))) in
        {37}let (hs_585: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-7-tuple(v_567))))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {38}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {39}insert statestore(alice,bob,sid,statepack_b(hs_585));
        {40}out(pub, message_a)
    ) | (
        {77}get statestore(=alice,=bob,=sid,statepack_b(hs_586: handshakestate)) in
        {42}in(pub, message_b: bitstring);
        {43}let v_587: bitstring = catch-fail(handshakestateunpack(hs_586)) in
        {44}let v_588: bitstring = catch-fail(deconcat3(message_b)) in
        {45}let v_589: bool = catch-fail(true) in
        {46}let v_590: key = catch-fail(1-proj-3-tuple(v_588)) in
        {47}let v_591: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_587))) in
        {48}let v_592: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_587)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),hash(3-proj-3-tuple(v_591),v_590)) else fail-any) else fail-any)) in
        {49}let v_593: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_587))) in
        {50}let v_594: bitstring = catch-fail(symmetricstateunpack(v_592)) in
        {51}let v_595: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_594),(if success?(3-proj-7-tuple(v_587)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then dhexp(2-proj-2-tuple(v_593),v_590) else fail-any) else fail-any))) in
        {52}let v_596: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_594),(if success?(3-proj-7-tuple(v_587)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then dhexp(2-proj-2-tuple(v_593),v_590) else fail-any) else fail-any))) in
        {53}let v_597: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_594),(if success?(3-proj-7-tuple(v_587)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then dhexp(2-proj-2-tuple(v_593),v_590) else fail-any) else fail-any))) in
        {54}let v_598: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_587)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then dhexp(2-proj-2-tuple(v_593),v_590) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_594))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (v_595,v_596,v_597) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_599: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_587)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then dhexp(2-proj-2-tuple(v_593),v_590) else fail-any) else fail-any)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_598)) then cipherstatepack(2-proj-3-tuple(v_598),minnonce) else fail-any),1-proj-3-tuple(v_598),3-proj-3-tuple(v_594)) else fail-any) else fail-any) else fail-any)) in
        {56}let v_600: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_587))) in
        {57}let v_601: bitstring = catch-fail(symmetricstateunpack(v_599)) in
        {58}let v_602: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_601),(if (success?(4-proj-7-tuple(v_587)) && success?(3-proj-7-tuple(v_587))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {59}let v_603: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_601),(if (success?(4-proj-7-tuple(v_587)) && success?(3-proj-7-tuple(v_587))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {60}let v_604: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_601),(if (success?(4-proj-7-tuple(v_587)) && success?(3-proj-7-tuple(v_587))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {61}let v_605: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_587)) && success?(3-proj-7-tuple(v_587))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_601))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_602,v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_606: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_587)) && success?(3-proj-7-tuple(v_587))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_605)) then cipherstatepack(2-proj-3-tuple(v_605),minnonce) else fail-any),1-proj-3-tuple(v_605),3-proj-3-tuple(v_601)) else fail-any) else fail-any) else fail-any)) in
        {63}let v_607: bitstring = catch-fail(symmetricstateunpack(v_606)) in
        {64}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_607))) in
        {65}let v_609: aead = catch-fail(decrypt(1-proj-2-tuple(v_608),2-proj-2-tuple(v_608),3-proj-3-tuple(v_607),3-proj-3-tuple(v_588))) in
        {66}let v_610: bitstring = catch-fail(aeadunpack(v_609)) in
        {67}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_607))) in
        {68}let v_612: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_608))) && success?(1-proj-3-tuple(v_607))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then cipherstatepack(1-proj-2-tuple(v_611),increment_nonce(2-proj-2-tuple(v_608))) else fail-any) else fail-any)) in
        {69}let v_613: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_588)) && (success?(3-proj-3-tuple(v_607)) && success?(1-proj-3-tuple(v_607)))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then (if not-caught-fail(v_609) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,3-proj-3-tuple(v_610),1-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_614: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_613),2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)))) in
        {71}let v_615: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_588)) && success?(symmetricstatepack(1-proj-3-tuple(v_613),2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),3-proj-3-tuple(v_588))) else fail-any) else fail-any)) in
        {72}let v_616: bitstring = catch-fail((if success?(3-proj-3-tuple(v_588)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if not-caught-fail(v_615) then (v_615,2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_617: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_616),2-proj-7-tuple(v_587),3-proj-7-tuple(v_587),4-proj-7-tuple(v_587),v_590,6-proj-7-tuple(v_587),7-proj-7-tuple(v_587))) in
        {74}let (hs_618: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-7-tuple(v_587))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_592) then (if not-caught-fail(v_599) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (v_589 && 3-proj-3-tuple(v_616)) then (if not-caught-fail(v_617) then (v_617,2-proj-3-tuple(v_616),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {75}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {76}insert statestore(alice,bob,sid,statepack_c(hs_618))
    ) | (
        {121}get statestore(=alice,=bob,=sid,statepack_c(hs_619: handshakestate)) in
        {78}let v_620: bitstring = catch-fail(handshakestateunpack(hs_619)) in
        {79}let v_621: bitstring = catch-fail((empty,empty,empty)) in
        {80}let v_622: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {81}let v_623: keypair = catch-fail((if not-caught-fail(v_622) then keypairpack(validkey(v_622),key_s(alice)) else fail-any)) in
        {82}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_620))) in
        {83}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_624))) in
        {84}let v_626: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_625),2-proj-2-tuple(v_625),3-proj-3-tuple(v_624),getpublickey(v_623))) in
        {85}let v_627: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_624))) in
        {86}let v_628: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_625))) && success?(1-proj-3-tuple(v_624))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then cipherstatepack(1-proj-2-tuple(v_627),increment_nonce(2-proj-2-tuple(v_625))) else fail-any) else fail-any)) in
        {87}let v_629: bitstring = catch-fail((if (success?(getpublickey(v_623)) && (success?(3-proj-3-tuple(v_624)) && success?(1-proj-3-tuple(v_624)))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_628) then (v_628,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_630: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_629),2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)))) in
        {89}let v_631: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_629)) && success?(symmetricstatepack(1-proj-2-tuple(v_629),2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_630),hash(3-proj-3-tuple(v_630),2-proj-2-tuple(v_629))) else fail-any) else fail-any)) in
        {90}let v_632: bitstring = catch-fail((if (success?(getpublickey(v_623)) && success?(1-proj-7-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then (if not-caught-fail(v_631) then (v_631,2-proj-2-tuple(v_629)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_633: bitstring = catch-fail(keypairunpack(v_623)) in
        {92}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_632))) in
        {93}let v_635: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_634),(if success?(5-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_620)) else fail-any) else fail-any))) in
        {94}let v_636: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_634),(if success?(5-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_620)) else fail-any) else fail-any))) in
        {95}let v_637: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_634),(if success?(5-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_620)) else fail-any) else fail-any))) in
        {96}let v_638: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_620)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_634))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (v_635,v_636,v_637) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_639: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),5-proj-7-tuple(v_620)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_632))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_638)) then cipherstatepack(2-proj-3-tuple(v_638),minnonce) else fail-any),1-proj-3-tuple(v_638),3-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any)) in
        {98}let v_640: bitstring = catch-fail(symmetricstateunpack(v_639)) in
        {99}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {100}let v_642: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_641),2-proj-2-tuple(v_641),3-proj-3-tuple(v_640),msg_c(alice,bob,sid))) in
        {101}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {102}let v_644: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_641))) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then cipherstatepack(1-proj-2-tuple(v_643),increment_nonce(2-proj-2-tuple(v_641))) else fail-any) else fail-any)) in
        {103}let v_645: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_640)) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if not-caught-fail(v_644) then (v_644,v_642) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_646: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_645),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) in
        {105}let v_647: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_645)) && success?(symmetricstatepack(1-proj-2-tuple(v_645),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),hash(3-proj-3-tuple(v_646),2-proj-2-tuple(v_645))) else fail-any) else fail-any)) in
        {106}let v_648: bitstring = catch-fail((if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then (if not-caught-fail(v_647) then (v_647,2-proj-2-tuple(v_645)) else fail-any) else fail-any) else fail-any)) in
        {107}let v_649: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_648),v_623,3-proj-7-tuple(v_620),4-proj-7-tuple(v_620),5-proj-7-tuple(v_620),6-proj-7-tuple(v_620),7-proj-7-tuple(v_620))) in
        {108}let v_650: bitstring = catch-fail(concat3(1-proj-3-tuple(v_621),2-proj-2-tuple(v_632),2-proj-2-tuple(v_648))) in
        {109}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_648))) in
        {110}let v_652: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_651),zero)) in
        {111}let v_653: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_651),zero)) in
        {112}let v_654: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_651),zero)) in
        {113}let v_655: bitstring = catch-fail((if success?(2-proj-3-tuple(v_651)) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (v_652,v_653,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_656: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_655)) then cipherstatepack(1-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {115}let v_657: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_655)) then cipherstatepack(2-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {116}let v_658: bitstring = catch-fail((if success?(1-proj-2-tuple(v_648)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (1-proj-2-tuple(v_648),v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let (hs_659: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-7-tuple(v_620))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then (if not-caught-fail(v_639) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (v_649,v_650,2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {118}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {119}insert statestore(alice,bob,sid,statepack_d(hs_659,cs1,cs2));
        {120}out(pub, message_c)
    ) | (
        {122}!
        {142}get statestore(=alice,=bob,=sid,statepack_d(hs_660: handshakestate,cs1_661: cipherstate,cs2_662: cipherstate)) in
        {123}let hs_663: handshakestate = handshakestatesetcs(hs_660,cs2_662) in
        {124}in(pub, message_d: bitstring);
        {125}let v_664: bitstring = catch-fail(handshakestateunpack(hs_663)) in
        {126}let v_665: bitstring = catch-fail(deconcat3(message_d)) in
        {127}let v_666: bool = catch-fail(true) in
        {128}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_664))) in
        {129}let v_668: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_667))) in
        {130}let v_669: aead = catch-fail(decrypt(1-proj-2-tuple(v_668),2-proj-2-tuple(v_668),3-proj-3-tuple(v_667),3-proj-3-tuple(v_665))) in
        {131}let v_670: bitstring = catch-fail(aeadunpack(v_669)) in
        {132}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_667))) in
        {133}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_668))) && success?(1-proj-3-tuple(v_667))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_668))) else fail-any) else fail-any)) in
        {134}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && (success?(3-proj-3-tuple(v_667)) && success?(1-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then (if not-caught-fail(v_669) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if not-caught-fail(v_672) then (v_672,3-proj-3-tuple(v_670),1-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)))) in
        {136}let v_675: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),3-proj-3-tuple(v_665))) else fail-any) else fail-any)) in
        {137}let v_676: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(1-proj-7-tuple(v_664))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_676),2-proj-7-tuple(v_664),3-proj-7-tuple(v_664),4-proj-7-tuple(v_664),5-proj-7-tuple(v_664),6-proj-7-tuple(v_664),7-proj-7-tuple(v_664))) in
        {139}let (hs_678: handshakestate,plaintext_d: bitstring,valid_679: bool) = (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-7-tuple(v_664))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (v_666 && 3-proj-3-tuple(v_676)) then (if not-caught-fail(v_677) then (v_677,2-proj-3-tuple(v_676),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {140}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {141}insert statestore(alice,bob,sid,statepack_e(hs_678,cs1_661,handshakestategetcs(hs_678)))
    ) | (
        {143}!
        {161}get statestore(=alice,=bob,=sid,statepack_e(hs_680: handshakestate,cs1_681: cipherstate,cs2_682: cipherstate)) in
        {144}let hs_683: handshakestate = handshakestatesetcs(hs_680,cs1_681) in
        {145}let v_684: bitstring = catch-fail(handshakestateunpack(hs_683)) in
        {146}let v_685: bitstring = catch-fail((empty,empty,empty)) in
        {147}let v_686: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_684))) in
        {148}let v_687: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_686))) in
        {149}let v_688: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_687),2-proj-2-tuple(v_687),3-proj-3-tuple(v_686),msg_e(alice,bob,sid))) in
        {150}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_686))) in
        {151}let v_690: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_687))) && success?(1-proj-3-tuple(v_686))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then cipherstatepack(1-proj-2-tuple(v_689),increment_nonce(2-proj-2-tuple(v_687))) else fail-any) else fail-any)) in
        {152}let v_691: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_686)) && success?(1-proj-3-tuple(v_686))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_690) then (v_690,v_688) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_692: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_691),2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)))) in
        {154}let v_693: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_691)) && success?(symmetricstatepack(1-proj-2-tuple(v_691),2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack(1-proj-3-tuple(v_692),2-proj-3-tuple(v_692),hash(3-proj-3-tuple(v_692),2-proj-2-tuple(v_691))) else fail-any) else fail-any)) in
        {155}let v_694: bitstring = catch-fail((if success?(1-proj-7-tuple(v_684)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then (if not-caught-fail(v_693) then (v_693,2-proj-2-tuple(v_691)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_695: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_694),2-proj-7-tuple(v_684),3-proj-7-tuple(v_684),4-proj-7-tuple(v_684),5-proj-7-tuple(v_684),6-proj-7-tuple(v_684),7-proj-7-tuple(v_684))) in
        {157}let v_696: bitstring = catch-fail(concat3(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),2-proj-2-tuple(v_694))) in
        {158}let (hs_697: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-7-tuple(v_684))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {159}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {160}out(pub, message_e)
    ) | (
        {162}event LeakS(phase0,alice);
        {163}out(pub, key_s(alice))
    ) | (
        {164}phase 1;
        {165}event LeakS(phase1,alice);
        {166}out(pub, key_s(alice))
    )
) | (
    {167}let s_698: keypair = keypairpack(empty,empty) in
    {168}out(pub, getpublickey(s_698));
    (
        {169}let e_699: keypair = keypairpack(empty,empty) in
        {170}let v_700: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {171}let rs_701: key = getpublickey((if not-caught-fail(v_700) then keypairpack(validkey(v_700),key_s(charlie)) else fail-any)) in
        {172}let re_702: key = empty in
        {173}let v_703: bitstring = catch-fail(hash(somename,empty)) in
        {174}let v_704: key = catch-fail(v_703) in
        {175}let v_705: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {176}let v_706: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then symmetricstatepack(v_705,v_704,v_703) else fail-any) else fail-any) else fail-any))) in
        {177}let v_707: symmetricstate = catch-fail((if success?((if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then symmetricstatepack(v_705,v_704,v_703) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),empty)) else fail-any) else fail-any)) in
        {178}let v_708: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {179}let v_709: symmetricstate = catch-fail((if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_708),hash(3-proj-3-tuple(v_708),rs_701)) else fail-any)) in
        {180}let hs_710: handshakestate = (if not-caught-fail(v_707) then (if not-caught-fail(v_709) then handshakestatepack(v_709,s_698,e_699,rs_701,re_702,empty,true) else fail-any) else fail-any) in
        {181}insert statestore(alice,charlie,sid,statepack_a(hs_710))
    ) | (
        {204}get statestore(=alice,=charlie,=sid,statepack_a(hs_711: handshakestate)) in
        {182}let v_712: bitstring = catch-fail(handshakestateunpack(hs_711)) in
        {183}let v_713: bitstring = catch-fail((empty,empty,empty)) in
        {184}let v_714: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {185}let v_715: keypair = catch-fail((if not-caught-fail(v_714) then keypairpack(validkey(v_714),key_e(alice,charlie,sid)) else fail-any)) in
        {186}let v_716: bitstring = catch-fail(getpublickey(v_715)) in
        {187}let v_717: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_712))) in
        {188}let v_718: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_712)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),v_716)) else fail-any) else fail-any)) in
        {189}let v_719: bitstring = catch-fail(symmetricstateunpack(v_718)) in
        {190}let v_720: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_719))) in
        {191}let v_721: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_720),2-proj-2-tuple(v_720),3-proj-3-tuple(v_719),msg_a(alice,charlie,sid))) in
        {192}let v_722: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_719))) in
        {193}let v_723: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_720))) && success?(1-proj-3-tuple(v_719))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then cipherstatepack(1-proj-2-tuple(v_722),increment_nonce(2-proj-2-tuple(v_720))) else fail-any) else fail-any)) in
        {194}let v_724: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_719)) && success?(1-proj-3-tuple(v_719))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_723) then (v_723,v_721) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {195}let v_725: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_724),2-proj-3-tuple(v_719),3-proj-3-tuple(v_719)))) in
        {196}let v_726: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_724)) && success?(symmetricstatepack(1-proj-2-tuple(v_724),2-proj-3-tuple(v_719),3-proj-3-tuple(v_719)))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then symmetricstatepack(1-proj-3-tuple(v_725),2-proj-3-tuple(v_725),hash(3-proj-3-tuple(v_725),2-proj-2-tuple(v_724))) else fail-any) else fail-any)) in
        {197}let v_727: bitstring = catch-fail((if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then (if not-caught-fail(v_726) then (v_726,2-proj-2-tuple(v_724)) else fail-any) else fail-any) else fail-any)) in
        {198}let v_728: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_727),2-proj-7-tuple(v_712),v_715,4-proj-7-tuple(v_712),5-proj-7-tuple(v_712),6-proj-7-tuple(v_712),7-proj-7-tuple(v_712))) in
        {199}let v_729: bitstring = catch-fail(concat3(v_716,2-proj-3-tuple(v_713),2-proj-2-tuple(v_727))) in
        {200}let (hs_730: handshakestate,message_a_731: bitstring) = (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-7-tuple(v_712))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (if not-caught-fail(v_718) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_729) then (v_728,v_729) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {201}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {202}insert statestore(alice,charlie,sid,statepack_b(hs_730));
        {203}out(pub, message_a_731)
    ) | (
        {240}get statestore(=alice,=charlie,=sid,statepack_b(hs_732: handshakestate)) in
        {205}in(pub, message_b_733: bitstring);
        {206}let v_734: bitstring = catch-fail(handshakestateunpack(hs_732)) in
        {207}let v_735: bitstring = catch-fail(deconcat3(message_b_733)) in
        {208}let v_736: bool = catch-fail(true) in
        {209}let v_737: key = catch-fail(1-proj-3-tuple(v_735)) in
        {210}let v_738: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_734))) in
        {211}let v_739: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_734)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),v_737)) else fail-any) else fail-any)) in
        {212}let v_740: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_734))) in
        {213}let v_741: bitstring = catch-fail(symmetricstateunpack(v_739)) in
        {214}let v_742: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_741),(if success?(3-proj-7-tuple(v_734)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then dhexp(2-proj-2-tuple(v_740),v_737) else fail-any) else fail-any))) in
        {215}let v_743: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_741),(if success?(3-proj-7-tuple(v_734)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then dhexp(2-proj-2-tuple(v_740),v_737) else fail-any) else fail-any))) in
        {216}let v_744: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_741),(if success?(3-proj-7-tuple(v_734)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then dhexp(2-proj-2-tuple(v_740),v_737) else fail-any) else fail-any))) in
        {217}let v_745: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_734)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then dhexp(2-proj-2-tuple(v_740),v_737) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_741))) then (if not-caught-fail(v_742) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (v_742,v_743,v_744) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_746: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_734)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then dhexp(2-proj-2-tuple(v_740),v_737) else fail-any) else fail-any)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_745)) then cipherstatepack(2-proj-3-tuple(v_745),minnonce) else fail-any),1-proj-3-tuple(v_745),3-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_747: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_734))) in
        {220}let v_748: bitstring = catch-fail(symmetricstateunpack(v_746)) in
        {221}let v_749: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_748),(if (success?(4-proj-7-tuple(v_734)) && success?(3-proj-7-tuple(v_734))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),4-proj-7-tuple(v_734)) else fail-any) else fail-any))) in
        {222}let v_750: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_748),(if (success?(4-proj-7-tuple(v_734)) && success?(3-proj-7-tuple(v_734))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),4-proj-7-tuple(v_734)) else fail-any) else fail-any))) in
        {223}let v_751: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_748),(if (success?(4-proj-7-tuple(v_734)) && success?(3-proj-7-tuple(v_734))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),4-proj-7-tuple(v_734)) else fail-any) else fail-any))) in
        {224}let v_752: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_734)) && success?(3-proj-7-tuple(v_734))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),4-proj-7-tuple(v_734)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_748))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (v_749,v_750,v_751) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_753: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_734)) && success?(3-proj-7-tuple(v_734))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),4-proj-7-tuple(v_734)) else fail-any) else fail-any)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_752)) then cipherstatepack(2-proj-3-tuple(v_752),minnonce) else fail-any),1-proj-3-tuple(v_752),3-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any)) in
        {226}let v_754: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {227}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {228}let v_756: aead = catch-fail(decrypt(1-proj-2-tuple(v_755),2-proj-2-tuple(v_755),3-proj-3-tuple(v_754),3-proj-3-tuple(v_735))) in
        {229}let v_757: bitstring = catch-fail(aeadunpack(v_756)) in
        {230}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {231}let v_759: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_755))) && success?(1-proj-3-tuple(v_754))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then cipherstatepack(1-proj-2-tuple(v_758),increment_nonce(2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {232}let v_760: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_735)) && (success?(3-proj-3-tuple(v_754)) && success?(1-proj-3-tuple(v_754)))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_756) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if not-caught-fail(v_759) then (v_759,3-proj-3-tuple(v_757),1-proj-3-tuple(v_757)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_761: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) in
        {234}let v_762: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_735)) && success?(symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then symmetricstatepack(1-proj-3-tuple(v_761),2-proj-3-tuple(v_761),hash(3-proj-3-tuple(v_761),3-proj-3-tuple(v_735))) else fail-any) else fail-any)) in
        {235}let v_763: bitstring = catch-fail((if success?(3-proj-3-tuple(v_735)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if not-caught-fail(v_762) then (v_762,2-proj-3-tuple(v_760),3-proj-3-tuple(v_760)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_764: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_763),2-proj-7-tuple(v_734),3-proj-7-tuple(v_734),4-proj-7-tuple(v_734),v_737,6-proj-7-tuple(v_734),7-proj-7-tuple(v_734))) in
        {237}let (hs_765: handshakestate,plaintext_b_766: bitstring,valid_767: bool) = (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-7-tuple(v_734))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (if not-caught-fail(v_739) then (if not-caught-fail(v_746) then (if not-caught-fail(v_753) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (v_736 && 3-proj-3-tuple(v_763)) then (if not-caught-fail(v_764) then (v_764,2-proj-3-tuple(v_763),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {238}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_766);
        {239}insert statestore(alice,charlie,sid,statepack_c(hs_765))
    ) | (
        {284}get statestore(=alice,=charlie,=sid,statepack_c(hs_768: handshakestate)) in
        {241}let v_769: bitstring = catch-fail(handshakestateunpack(hs_768)) in
        {242}let v_770: bitstring = catch-fail((empty,empty,empty)) in
        {243}let v_771: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {244}let v_772: keypair = catch-fail((if not-caught-fail(v_771) then keypairpack(validkey(v_771),key_s(alice)) else fail-any)) in
        {245}let v_773: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_769))) in
        {246}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {247}let v_775: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),getpublickey(v_772))) in
        {248}let v_776: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {249}let v_777: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then cipherstatepack(1-proj-2-tuple(v_776),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {250}let v_778: bitstring = catch-fail((if (success?(getpublickey(v_772)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if not-caught-fail(v_777) then (v_777,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_779: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_778),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {252}let v_780: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_778)) && success?(symmetricstatepack(1-proj-2-tuple(v_778),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_779),hash(3-proj-3-tuple(v_779),2-proj-2-tuple(v_778))) else fail-any) else fail-any)) in
        {253}let v_781: bitstring = catch-fail((if (success?(getpublickey(v_772)) && success?(1-proj-7-tuple(v_769))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then (if not-caught-fail(v_780) then (v_780,2-proj-2-tuple(v_778)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_782: bitstring = catch-fail(keypairunpack(v_772)) in
        {255}let v_783: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_781))) in
        {256}let v_784: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_783),(if success?(5-proj-7-tuple(v_769)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_769)) else fail-any) else fail-any))) in
        {257}let v_785: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_783),(if success?(5-proj-7-tuple(v_769)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_769)) else fail-any) else fail-any))) in
        {258}let v_786: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_783),(if success?(5-proj-7-tuple(v_769)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_769)) else fail-any) else fail-any))) in
        {259}let v_787: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_769)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_769)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_783))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (v_784,v_785,v_786) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_788: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_769)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then dhexp(2-proj-2-tuple(v_782),5-proj-7-tuple(v_769)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_781))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_787)) then cipherstatepack(2-proj-3-tuple(v_787),minnonce) else fail-any),1-proj-3-tuple(v_787),3-proj-3-tuple(v_783)) else fail-any) else fail-any) else fail-any)) in
        {261}let v_789: bitstring = catch-fail(symmetricstateunpack(v_788)) in
        {262}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {263}let v_791: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_790),2-proj-2-tuple(v_790),3-proj-3-tuple(v_789),msg_c(alice,charlie,sid))) in
        {264}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {265}let v_793: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_790))) && success?(1-proj-3-tuple(v_789))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then cipherstatepack(1-proj-2-tuple(v_792),increment_nonce(2-proj-2-tuple(v_790))) else fail-any) else fail-any)) in
        {266}let v_794: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_789)) && success?(1-proj-3-tuple(v_789))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_793) then (v_793,v_791) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_795: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_794),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) in
        {268}let v_796: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_794)) && success?(symmetricstatepack(1-proj-2-tuple(v_794),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_795),hash(3-proj-3-tuple(v_795),2-proj-2-tuple(v_794))) else fail-any) else fail-any)) in
        {269}let v_797: bitstring = catch-fail((if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then (if not-caught-fail(v_796) then (v_796,2-proj-2-tuple(v_794)) else fail-any) else fail-any) else fail-any)) in
        {270}let v_798: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_797),v_772,3-proj-7-tuple(v_769),4-proj-7-tuple(v_769),5-proj-7-tuple(v_769),6-proj-7-tuple(v_769),7-proj-7-tuple(v_769))) in
        {271}let v_799: bitstring = catch-fail(concat3(1-proj-3-tuple(v_770),2-proj-2-tuple(v_781),2-proj-2-tuple(v_797))) in
        {272}let v_800: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_797))) in
        {273}let v_801: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_800),zero)) in
        {274}let v_802: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_800),zero)) in
        {275}let v_803: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_800),zero)) in
        {276}let v_804: bitstring = catch-fail((if success?(2-proj-3-tuple(v_800)) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (v_801,v_802,v_803) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_805: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_804)) then cipherstatepack(1-proj-3-tuple(v_804),minnonce) else fail-any)) in
        {278}let v_806: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_804)) then cipherstatepack(2-proj-3-tuple(v_804),minnonce) else fail-any)) in
        {279}let v_807: bitstring = catch-fail((if success?(1-proj-2-tuple(v_797)) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (1-proj-2-tuple(v_797),v_805,v_806) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let (hs_808: handshakestate,message_c_809: bitstring,cs1_810: cipherstate,cs2_811: cipherstate) = (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-7-tuple(v_769))))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then (if not-caught-fail(v_788) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (v_798,v_799,2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {281}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {282}insert statestore(alice,charlie,sid,statepack_d(hs_808,cs1_810,cs2_811));
        {283}out(pub, message_c_809)
    ) | (
        {285}!
        {305}get statestore(=alice,=charlie,=sid,statepack_d(hs_812: handshakestate,cs1_813: cipherstate,cs2_814: cipherstate)) in
        {286}let hs_815: handshakestate = handshakestatesetcs(hs_812,cs2_814) in
        {287}in(pub, message_d_816: bitstring);
        {288}let v_817: bitstring = catch-fail(handshakestateunpack(hs_815)) in
        {289}let v_818: bitstring = catch-fail(deconcat3(message_d_816)) in
        {290}let v_819: bool = catch-fail(true) in
        {291}let v_820: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_817))) in
        {292}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {293}let v_822: aead = catch-fail(decrypt(1-proj-2-tuple(v_821),2-proj-2-tuple(v_821),3-proj-3-tuple(v_820),3-proj-3-tuple(v_818))) in
        {294}let v_823: bitstring = catch-fail(aeadunpack(v_822)) in
        {295}let v_824: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {296}let v_825: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_821))) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then cipherstatepack(1-proj-2-tuple(v_824),increment_nonce(2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {297}let v_826: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_818)) && (success?(3-proj-3-tuple(v_820)) && success?(1-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (v_825,3-proj-3-tuple(v_823),1-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_827: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) in
        {299}let v_828: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_818)) && success?(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),3-proj-3-tuple(v_818))) else fail-any) else fail-any)) in
        {300}let v_829: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_818)) && success?(1-proj-7-tuple(v_817))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if not-caught-fail(v_828) then (v_828,2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_830: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_829),2-proj-7-tuple(v_817),3-proj-7-tuple(v_817),4-proj-7-tuple(v_817),5-proj-7-tuple(v_817),6-proj-7-tuple(v_817),7-proj-7-tuple(v_817))) in
        {302}let (hs_831: handshakestate,plaintext_d_832: bitstring,valid_833: bool) = (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-7-tuple(v_817))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if (v_819 && 3-proj-3-tuple(v_829)) then (if not-caught-fail(v_830) then (v_830,2-proj-3-tuple(v_829),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {303}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_832);
        {304}insert statestore(alice,charlie,sid,statepack_e(hs_831,cs1_813,handshakestategetcs(hs_831)))
    ) | (
        {306}!
        {324}get statestore(=alice,=charlie,=sid,statepack_e(hs_834: handshakestate,cs1_835: cipherstate,cs2_836: cipherstate)) in
        {307}let hs_837: handshakestate = handshakestatesetcs(hs_834,cs1_835) in
        {308}let v_838: bitstring = catch-fail(handshakestateunpack(hs_837)) in
        {309}let v_839: bitstring = catch-fail((empty,empty,empty)) in
        {310}let v_840: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_838))) in
        {311}let v_841: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_840))) in
        {312}let v_842: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_841),2-proj-2-tuple(v_841),3-proj-3-tuple(v_840),msg_e(alice,charlie,sid))) in
        {313}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_840))) in
        {314}let v_844: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_841))) && success?(1-proj-3-tuple(v_840))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then cipherstatepack(1-proj-2-tuple(v_843),increment_nonce(2-proj-2-tuple(v_841))) else fail-any) else fail-any)) in
        {315}let v_845: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_840)) && success?(1-proj-3-tuple(v_840))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then (if not-caught-fail(v_842) then (if not-caught-fail(v_844) then (v_844,v_842) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_846: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_845),2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)))) in
        {317}let v_847: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_845)) && success?(symmetricstatepack(1-proj-2-tuple(v_845),2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack(1-proj-3-tuple(v_846),2-proj-3-tuple(v_846),hash(3-proj-3-tuple(v_846),2-proj-2-tuple(v_845))) else fail-any) else fail-any)) in
        {318}let v_848: bitstring = catch-fail((if success?(1-proj-7-tuple(v_838)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then (if not-caught-fail(v_847) then (v_847,2-proj-2-tuple(v_845)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let v_849: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_848),2-proj-7-tuple(v_838),3-proj-7-tuple(v_838),4-proj-7-tuple(v_838),5-proj-7-tuple(v_838),6-proj-7-tuple(v_838),7-proj-7-tuple(v_838))) in
        {320}let v_850: bitstring = catch-fail(concat3(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),2-proj-2-tuple(v_848))) in
        {321}let (hs_851: handshakestate,message_e_852: bitstring) = (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-7-tuple(v_838))))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (v_849,v_850) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {322}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {323}out(pub, message_e_852)
    ) | (
        {325}event LeakS(phase0,alice);
        {326}out(pub, key_s(alice))
    ) | (
        {327}phase 1;
        {328}event LeakS(phase1,alice);
        {329}out(pub, key_s(alice))
    )
) | (
    {330}let v_853: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {331}let s_854: keypair = (if not-caught-fail(v_853) then keypairpack(validkey(v_853),key_s(bob)) else fail-any) in
    {332}out(pub, getpublickey(s_854));
    (
        {333}let e_855: keypair = keypairpack(empty,empty) in
        {334}let rs_856: key = empty in
        {335}let re_857: key = empty in
        {336}let v_858: bitstring = catch-fail(hash(somename,empty)) in
        {337}let v_859: key = catch-fail(v_858) in
        {338}let v_860: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {339}let v_861: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then symmetricstatepack(v_860,v_859,v_858) else fail-any) else fail-any) else fail-any))) in
        {340}let v_862: symmetricstate = catch-fail((if success?((if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then symmetricstatepack(v_860,v_859,v_858) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),empty)) else fail-any) else fail-any)) in
        {341}let v_863: bitstring = catch-fail(symmetricstateunpack(v_862)) in
        {342}let v_864: symmetricstate = catch-fail((if success?(getpublickey(s_854)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),getpublickey(s_854))) else fail-any) else fail-any)) in
        {343}let hs_865: handshakestate = (if not-caught-fail(v_862) then (if not-caught-fail(v_864) then handshakestatepack(v_864,s_854,e_855,rs_856,re_857,empty,false) else fail-any) else fail-any) in
        {344}insert statestore(bob,alice,sid,statepack_a(hs_865))
    ) | (
        {366}get statestore(=bob,=alice,=sid,statepack_a(hs_866: handshakestate)) in
        {345}in(pub, message_a_867: bitstring);
        {346}let v_868: bitstring = catch-fail(handshakestateunpack(hs_866)) in
        {347}let v_869: bitstring = catch-fail(deconcat3(message_a_867)) in
        {348}let v_870: bool = catch-fail(true) in
        {349}let v_871: key = catch-fail(1-proj-3-tuple(v_869)) in
        {350}let v_872: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_868))) in
        {351}let v_873: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_868)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),v_871)) else fail-any) else fail-any)) in
        {352}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {353}let v_875: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {354}let v_876: aead = catch-fail(decrypt(1-proj-2-tuple(v_875),2-proj-2-tuple(v_875),3-proj-3-tuple(v_874),3-proj-3-tuple(v_869))) in
        {355}let v_877: bitstring = catch-fail(aeadunpack(v_876)) in
        {356}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {357}let v_879: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_875))) && success?(1-proj-3-tuple(v_874))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then cipherstatepack(1-proj-2-tuple(v_878),increment_nonce(2-proj-2-tuple(v_875))) else fail-any) else fail-any)) in
        {358}let v_880: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_869)) && (success?(3-proj-3-tuple(v_874)) && success?(1-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_879) then (v_879,3-proj-3-tuple(v_877),1-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {359}let v_881: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) in
        {360}let v_882: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_869)) && success?(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),3-proj-3-tuple(v_869))) else fail-any) else fail-any)) in
        {361}let v_883: bitstring = catch-fail((if success?(3-proj-3-tuple(v_869)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_884: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_883),2-proj-7-tuple(v_868),3-proj-7-tuple(v_868),4-proj-7-tuple(v_868),v_871,6-proj-7-tuple(v_868),7-proj-7-tuple(v_868))) in
        {363}let (hs_885: handshakestate,plaintext_a: bitstring,valid_886: bool) = (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-7-tuple(v_868))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (if not-caught-fail(v_873) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if (v_870 && 3-proj-3-tuple(v_883)) then (if not-caught-fail(v_884) then (v_884,2-proj-3-tuple(v_883),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {364}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {365}insert statestore(bob,alice,sid,statepack_b(hs_885))
    ) | (
        {403}get statestore(=bob,=alice,=sid,statepack_b(hs_887: handshakestate)) in
        {367}let v_888: bitstring = catch-fail(handshakestateunpack(hs_887)) in
        {368}let v_889: bitstring = catch-fail((empty,empty,empty)) in
        {369}let v_890: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {370}let v_891: keypair = catch-fail((if not-caught-fail(v_890) then keypairpack(validkey(v_890),key_e(bob,alice,sid)) else fail-any)) in
        {371}let v_892: bitstring = catch-fail(getpublickey(v_891)) in
        {372}let v_893: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_888))) in
        {373}let v_894: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_888)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_893),hash(3-proj-3-tuple(v_893),v_892)) else fail-any) else fail-any)) in
        {374}let v_895: bitstring = catch-fail(keypairunpack(v_891)) in
        {375}let v_896: bitstring = catch-fail(symmetricstateunpack(v_894)) in
        {376}let v_897: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_896),(if success?(5-proj-7-tuple(v_888)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_888)) else fail-any) else fail-any))) in
        {377}let v_898: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_896),(if success?(5-proj-7-tuple(v_888)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_888)) else fail-any) else fail-any))) in
        {378}let v_899: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_896),(if success?(5-proj-7-tuple(v_888)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_888)) else fail-any) else fail-any))) in
        {379}let v_900: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_888)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_888)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_896))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then (v_897,v_898,v_899) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_901: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_888)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_888)) else fail-any) else fail-any)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_900)) then cipherstatepack(2-proj-3-tuple(v_900),minnonce) else fail-any),1-proj-3-tuple(v_900),3-proj-3-tuple(v_896)) else fail-any) else fail-any) else fail-any)) in
        {381}let v_902: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_888))) in
        {382}let v_903: bitstring = catch-fail(symmetricstateunpack(v_901)) in
        {383}let v_904: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_903),(if (success?(5-proj-7-tuple(v_888)) && success?(2-proj-7-tuple(v_888))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then dhexp(2-proj-2-tuple(v_902),5-proj-7-tuple(v_888)) else fail-any) else fail-any))) in
        {384}let v_905: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_903),(if (success?(5-proj-7-tuple(v_888)) && success?(2-proj-7-tuple(v_888))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then dhexp(2-proj-2-tuple(v_902),5-proj-7-tuple(v_888)) else fail-any) else fail-any))) in
        {385}let v_906: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_903),(if (success?(5-proj-7-tuple(v_888)) && success?(2-proj-7-tuple(v_888))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then dhexp(2-proj-2-tuple(v_902),5-proj-7-tuple(v_888)) else fail-any) else fail-any))) in
        {386}let v_907: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_888)) && success?(2-proj-7-tuple(v_888))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then dhexp(2-proj-2-tuple(v_902),5-proj-7-tuple(v_888)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_903))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (v_904,v_905,v_906) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_908: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_888)) && success?(2-proj-7-tuple(v_888))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then dhexp(2-proj-2-tuple(v_902),5-proj-7-tuple(v_888)) else fail-any) else fail-any)) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_907)) then cipherstatepack(2-proj-3-tuple(v_907),minnonce) else fail-any),1-proj-3-tuple(v_907),3-proj-3-tuple(v_903)) else fail-any) else fail-any) else fail-any)) in
        {388}let v_909: bitstring = catch-fail(symmetricstateunpack(v_908)) in
        {389}let v_910: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_909))) in
        {390}let v_911: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_910),2-proj-2-tuple(v_910),3-proj-3-tuple(v_909),msg_b(bob,alice,sid))) in
        {391}let v_912: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_909))) in
        {392}let v_913: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_910))) && success?(1-proj-3-tuple(v_909))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-2-tuple(v_912))))) then cipherstatepack(1-proj-2-tuple(v_912),increment_nonce(2-proj-2-tuple(v_910))) else fail-any) else fail-any)) in
        {393}let v_914: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_909)) && success?(1-proj-3-tuple(v_909))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then (if not-caught-fail(v_911) then (if not-caught-fail(v_913) then (v_913,v_911) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_915: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_914),2-proj-3-tuple(v_909),3-proj-3-tuple(v_909)))) in
        {395}let v_916: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_914)) && success?(symmetricstatepack(1-proj-2-tuple(v_914),2-proj-3-tuple(v_909),3-proj-3-tuple(v_909)))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then symmetricstatepack(1-proj-3-tuple(v_915),2-proj-3-tuple(v_915),hash(3-proj-3-tuple(v_915),2-proj-2-tuple(v_914))) else fail-any) else fail-any)) in
        {396}let v_917: bitstring = catch-fail((if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then (if not-caught-fail(v_916) then (v_916,2-proj-2-tuple(v_914)) else fail-any) else fail-any) else fail-any)) in
        {397}let v_918: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_917),2-proj-7-tuple(v_888),v_891,4-proj-7-tuple(v_888),5-proj-7-tuple(v_888),6-proj-7-tuple(v_888),7-proj-7-tuple(v_888))) in
        {398}let v_919: bitstring = catch-fail(concat3(v_892,2-proj-3-tuple(v_889),2-proj-2-tuple(v_917))) in
        {399}let (hs_920: handshakestate,message_b_921: bitstring) = (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-7-tuple(v_888))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (if not-caught-fail(v_894) then (if not-caught-fail(v_901) then (if not-caught-fail(v_908) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {400}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {401}insert statestore(bob,alice,sid,statepack_c(hs_920));
        {402}out(pub, message_b_921)
    ) | (
        {449}get statestore(=bob,=alice,=sid,statepack_c(hs_922: handshakestate)) in
        {404}in(pub, message_c_923: bitstring);
        {405}let v_924: bitstring = catch-fail(handshakestateunpack(hs_922)) in
        {406}let v_925: bitstring = catch-fail(deconcat3(message_c_923)) in
        {407}let v_926: bool = catch-fail(true) in
        {408}let v_927: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_924))) in
        {409}let v_928: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_927))) in
        {410}let v_929: aead = catch-fail(decrypt(1-proj-2-tuple(v_928),2-proj-2-tuple(v_928),3-proj-3-tuple(v_927),2-proj-3-tuple(v_925))) in
        {411}let v_930: bitstring = catch-fail(aeadunpack(v_929)) in
        {412}let v_931: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_927))) in
        {413}let v_932: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_928))) && success?(1-proj-3-tuple(v_927))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then cipherstatepack(1-proj-2-tuple(v_931),increment_nonce(2-proj-2-tuple(v_928))) else fail-any) else fail-any)) in
        {414}let v_933: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_925)) && (success?(3-proj-3-tuple(v_927)) && success?(1-proj-3-tuple(v_927)))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then (if not-caught-fail(v_929) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if not-caught-fail(v_932) then (v_932,3-proj-3-tuple(v_930),1-proj-3-tuple(v_930)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_934: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)))) in
        {416}let v_935: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_925)) && success?(symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_934),hash(3-proj-3-tuple(v_934),2-proj-3-tuple(v_925))) else fail-any) else fail-any)) in
        {417}let v_936: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_925)) && success?(1-proj-7-tuple(v_924))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if not-caught-fail(v_935) then (v_935,2-proj-3-tuple(v_933),3-proj-3-tuple(v_933)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_937: key = catch-fail(2-proj-3-tuple(v_936)) in
        {419}let v_938: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_924))) in
        {420}let v_939: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_936))) in
        {421}let v_940: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_939),(if success?(3-proj-7-tuple(v_924)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then dhexp(2-proj-2-tuple(v_938),v_937) else fail-any) else fail-any))) in
        {422}let v_941: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_939),(if success?(3-proj-7-tuple(v_924)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then dhexp(2-proj-2-tuple(v_938),v_937) else fail-any) else fail-any))) in
        {423}let v_942: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_939),(if success?(3-proj-7-tuple(v_924)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then dhexp(2-proj-2-tuple(v_938),v_937) else fail-any) else fail-any))) in
        {424}let v_943: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_924)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then dhexp(2-proj-2-tuple(v_938),v_937) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_939))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (v_940,v_941,v_942) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_944: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_924)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then dhexp(2-proj-2-tuple(v_938),v_937) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_943)) then cipherstatepack(2-proj-3-tuple(v_943),minnonce) else fail-any),1-proj-3-tuple(v_943),3-proj-3-tuple(v_939)) else fail-any) else fail-any) else fail-any)) in
        {426}let v_945: bitstring = catch-fail(symmetricstateunpack(v_944)) in
        {427}let v_946: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_945))) in
        {428}let v_947: aead = catch-fail(decrypt(1-proj-2-tuple(v_946),2-proj-2-tuple(v_946),3-proj-3-tuple(v_945),3-proj-3-tuple(v_925))) in
        {429}let v_948: bitstring = catch-fail(aeadunpack(v_947)) in
        {430}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_945))) in
        {431}let v_950: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_946))) && success?(1-proj-3-tuple(v_945))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then cipherstatepack(1-proj-2-tuple(v_949),increment_nonce(2-proj-2-tuple(v_946))) else fail-any) else fail-any)) in
        {432}let v_951: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_925)) && (success?(3-proj-3-tuple(v_945)) && success?(1-proj-3-tuple(v_945)))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then (if not-caught-fail(v_947) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if not-caught-fail(v_950) then (v_950,3-proj-3-tuple(v_948),1-proj-3-tuple(v_948)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {433}let v_952: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)))) in
        {434}let v_953: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_925)) && success?(symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),3-proj-3-tuple(v_925))) else fail-any) else fail-any)) in
        {435}let v_954: bitstring = catch-fail((if success?(3-proj-3-tuple(v_925)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_955: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {437}let v_956: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_954),2-proj-7-tuple(v_924),3-proj-7-tuple(v_924),v_937,5-proj-7-tuple(v_924),6-proj-7-tuple(v_924),7-proj-7-tuple(v_924))) in
        {438}let v_957: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_954))) in
        {439}let v_958: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_957),zero)) in
        {440}let v_959: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_957),zero)) in
        {441}let v_960: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_957),zero)) in
        {442}let v_961: bitstring = catch-fail((if success?(2-proj-3-tuple(v_957)) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (v_958,v_959,v_960) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_962: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_961)) then cipherstatepack(1-proj-3-tuple(v_961),minnonce) else fail-any)) in
        {444}let v_963: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_961)) then cipherstatepack(2-proj-3-tuple(v_961),minnonce) else fail-any)) in
        {445}let v_964: bitstring = catch-fail((if success?(1-proj-3-tuple(v_954)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (1-proj-3-tuple(v_954),v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let (hs_965: handshakestate,plaintext_c: bitstring,valid_966: bool,cs1_967: cipherstate,cs2_968: cipherstate) = (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-7-tuple(v_924))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_937) then (if not-caught-fail(v_944) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if ((3-proj-3-tuple(v_936) && 3-proj-3-tuple(v_954)) && (v_937 = getpublickey((if not-caught-fail(v_955) then keypairpack(validkey(v_955),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (v_956,2-proj-3-tuple(v_954),true,2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {447}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {448}insert statestore(bob,alice,sid,statepack_d(hs_965,cs1_967,cs2_968))
    ) | (
        {450}!
        {469}get statestore(=bob,=alice,=sid,statepack_d(hs_969: handshakestate,cs1_970: cipherstate,cs2_971: cipherstate)) in
        {451}let hs_972: handshakestate = handshakestatesetcs(hs_969,cs2_971) in
        {452}let v_973: bitstring = catch-fail(handshakestateunpack(hs_972)) in
        {453}let v_974: bitstring = catch-fail((empty,empty,empty)) in
        {454}let v_975: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_973))) in
        {455}let v_976: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_975))) in
        {456}let v_977: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_976),2-proj-2-tuple(v_976),3-proj-3-tuple(v_975),msg_d(bob,alice,sid))) in
        {457}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_975))) in
        {458}let v_979: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_976))) && success?(1-proj-3-tuple(v_975))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then cipherstatepack(1-proj-2-tuple(v_978),increment_nonce(2-proj-2-tuple(v_976))) else fail-any) else fail-any)) in
        {459}let v_980: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_975)) && success?(1-proj-3-tuple(v_975))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then (if not-caught-fail(v_977) then (if not-caught-fail(v_979) then (v_979,v_977) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_981: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_980),2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)))) in
        {461}let v_982: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_980)) && success?(symmetricstatepack(1-proj-2-tuple(v_980),2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_981),hash(3-proj-3-tuple(v_981),2-proj-2-tuple(v_980))) else fail-any) else fail-any)) in
        {462}let v_983: bitstring = catch-fail((if success?(1-proj-7-tuple(v_973)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then (if not-caught-fail(v_982) then (v_982,2-proj-2-tuple(v_980)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_984: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_983),2-proj-7-tuple(v_973),3-proj-7-tuple(v_973),4-proj-7-tuple(v_973),5-proj-7-tuple(v_973),6-proj-7-tuple(v_973),7-proj-7-tuple(v_973))) in
        {464}let v_985: bitstring = catch-fail(concat3(1-proj-3-tuple(v_974),2-proj-3-tuple(v_974),2-proj-2-tuple(v_983))) in
        {465}let (hs_986: handshakestate,message_d_987: bitstring) = (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-7-tuple(v_973))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then (if not-caught-fail(v_984) then (if not-caught-fail(v_985) then (v_984,v_985) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {466}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {467}insert statestore(bob,alice,sid,statepack_e(hs_986,cs1_970,handshakestategetcs(hs_986)));
        {468}out(pub, message_d_987)
    ) | (
        {470}!
        {490}get statestore(=bob,=alice,=sid,statepack_e(hs_988: handshakestate,cs1_989: cipherstate,cs2_990: cipherstate)) in
        {471}let hs_991: handshakestate = handshakestatesetcs(hs_988,cs1_989) in
        {472}in(pub, message_e_992: bitstring);
        {473}let v_993: bitstring = catch-fail(handshakestateunpack(hs_991)) in
        {474}let v_994: bitstring = catch-fail(deconcat3(message_e_992)) in
        {475}let v_995: bool = catch-fail(true) in
        {476}let v_996: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_993))) in
        {477}let v_997: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {478}let v_998: aead = catch-fail(decrypt(1-proj-2-tuple(v_997),2-proj-2-tuple(v_997),3-proj-3-tuple(v_996),3-proj-3-tuple(v_994))) in
        {479}let v_999: bitstring = catch-fail(aeadunpack(v_998)) in
        {480}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {481}let v_1001: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_997))) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then cipherstatepack(1-proj-2-tuple(v_1000),increment_nonce(2-proj-2-tuple(v_997))) else fail-any) else fail-any)) in
        {482}let v_1002: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_994)) && (success?(3-proj-3-tuple(v_996)) && success?(1-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1001) then (v_1001,3-proj-3-tuple(v_999),1-proj-3-tuple(v_999)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_1003: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) in
        {484}let v_1004: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_994)) && success?(symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then symmetricstatepack(1-proj-3-tuple(v_1003),2-proj-3-tuple(v_1003),hash(3-proj-3-tuple(v_1003),3-proj-3-tuple(v_994))) else fail-any) else fail-any)) in
        {485}let v_1005: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_994)) && success?(1-proj-7-tuple(v_993))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if not-caught-fail(v_1004) then (v_1004,2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1006: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1005),2-proj-7-tuple(v_993),3-proj-7-tuple(v_993),4-proj-7-tuple(v_993),5-proj-7-tuple(v_993),6-proj-7-tuple(v_993),7-proj-7-tuple(v_993))) in
        {487}let (hs_1007: handshakestate,plaintext_e: bitstring,valid_1008: bool) = (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-7-tuple(v_993))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if not-caught-fail(v_995) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if (v_995 && 3-proj-3-tuple(v_1005)) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1005),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {489}event RecvEnd(valid_1008)
    ) | (
        {491}event LeakS(phase0,bob);
        {492}out(pub, key_s(bob))
    ) | (
        {493}phase 1;
        {494}event LeakS(phase1,bob);
        {495}out(pub, key_s(bob))
    )
) | (
    {496}let v_1009: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {497}let s_1010: keypair = (if not-caught-fail(v_1009) then keypairpack(validkey(v_1009),key_s(bob)) else fail-any) in
    {498}out(pub, getpublickey(s_1010));
    (
        {499}let e_1011: keypair = keypairpack(empty,empty) in
        {500}let rs_1012: key = empty in
        {501}let re_1013: key = empty in
        {502}let v_1014: bitstring = catch-fail(hash(somename,empty)) in
        {503}let v_1015: key = catch-fail(v_1014) in
        {504}let v_1016: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {505}let v_1017: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then symmetricstatepack(v_1016,v_1015,v_1014) else fail-any) else fail-any) else fail-any))) in
        {506}let v_1018: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then symmetricstatepack(v_1016,v_1015,v_1014) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1017),hash(3-proj-3-tuple(v_1017),empty)) else fail-any) else fail-any)) in
        {507}let v_1019: bitstring = catch-fail(symmetricstateunpack(v_1018)) in
        {508}let v_1020: symmetricstate = catch-fail((if success?(getpublickey(s_1010)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),getpublickey(s_1010))) else fail-any) else fail-any)) in
        {509}let hs_1021: handshakestate = (if not-caught-fail(v_1018) then (if not-caught-fail(v_1020) then handshakestatepack(v_1020,s_1010,e_1011,rs_1012,re_1013,empty,false) else fail-any) else fail-any) in
        {510}insert statestore(bob,charlie,sid,statepack_a(hs_1021))
    ) | (
        {532}get statestore(=bob,=charlie,=sid,statepack_a(hs_1022: handshakestate)) in
        {511}in(pub, message_a_1023: bitstring);
        {512}let v_1024: bitstring = catch-fail(handshakestateunpack(hs_1022)) in
        {513}let v_1025: bitstring = catch-fail(deconcat3(message_a_1023)) in
        {514}let v_1026: bool = catch-fail(true) in
        {515}let v_1027: key = catch-fail(1-proj-3-tuple(v_1025)) in
        {516}let v_1028: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1024))) in
        {517}let v_1029: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1028),hash(3-proj-3-tuple(v_1028),v_1027)) else fail-any) else fail-any)) in
        {518}let v_1030: bitstring = catch-fail(symmetricstateunpack(v_1029)) in
        {519}let v_1031: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {520}let v_1032: aead = catch-fail(decrypt(1-proj-2-tuple(v_1031),2-proj-2-tuple(v_1031),3-proj-3-tuple(v_1030),3-proj-3-tuple(v_1025))) in
        {521}let v_1033: bitstring = catch-fail(aeadunpack(v_1032)) in
        {522}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {523}let v_1035: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1031))) && success?(1-proj-3-tuple(v_1030))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then cipherstatepack(1-proj-2-tuple(v_1034),increment_nonce(2-proj-2-tuple(v_1031))) else fail-any) else fail-any)) in
        {524}let v_1036: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1025)) && (success?(3-proj-3-tuple(v_1030)) && success?(1-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if not-caught-fail(v_1035) then (v_1035,3-proj-3-tuple(v_1033),1-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1037: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) in
        {526}let v_1038: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1025)) && success?(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack(1-proj-3-tuple(v_1037),2-proj-3-tuple(v_1037),hash(3-proj-3-tuple(v_1037),3-proj-3-tuple(v_1025))) else fail-any) else fail-any)) in
        {527}let v_1039: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1025)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,2-proj-3-tuple(v_1036),3-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1040: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1039),2-proj-7-tuple(v_1024),3-proj-7-tuple(v_1024),4-proj-7-tuple(v_1024),v_1027,6-proj-7-tuple(v_1024),7-proj-7-tuple(v_1024))) in
        {529}let (hs_1041: handshakestate,plaintext_a_1042: bitstring,valid_1043: bool) = (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-7-tuple(v_1024))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1029) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (v_1026 && 3-proj-3-tuple(v_1039)) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1039),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {530}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1042);
        {531}insert statestore(bob,charlie,sid,statepack_b(hs_1041))
    ) | (
        {569}get statestore(=bob,=charlie,=sid,statepack_b(hs_1044: handshakestate)) in
        {533}let v_1045: bitstring = catch-fail(handshakestateunpack(hs_1044)) in
        {534}let v_1046: bitstring = catch-fail((empty,empty,empty)) in
        {535}let v_1047: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {536}let v_1048: keypair = catch-fail((if not-caught-fail(v_1047) then keypairpack(validkey(v_1047),key_e(bob,charlie,sid)) else fail-any)) in
        {537}let v_1049: bitstring = catch-fail(getpublickey(v_1048)) in
        {538}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1045))) in
        {539}let v_1051: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1050),hash(3-proj-3-tuple(v_1050),v_1049)) else fail-any) else fail-any)) in
        {540}let v_1052: bitstring = catch-fail(keypairunpack(v_1048)) in
        {541}let v_1053: bitstring = catch-fail(symmetricstateunpack(v_1051)) in
        {542}let v_1054: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1053),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {543}let v_1055: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1053),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {544}let v_1056: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1053),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {545}let v_1057: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1053))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (v_1054,v_1055,v_1056) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1058: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1057)) then cipherstatepack(2-proj-3-tuple(v_1057),minnonce) else fail-any),1-proj-3-tuple(v_1057),3-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1059: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1045))) in
        {548}let v_1060: bitstring = catch-fail(symmetricstateunpack(v_1058)) in
        {549}let v_1061: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1060),(if (success?(5-proj-7-tuple(v_1045)) && success?(2-proj-7-tuple(v_1045))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {550}let v_1062: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1060),(if (success?(5-proj-7-tuple(v_1045)) && success?(2-proj-7-tuple(v_1045))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {551}let v_1063: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1060),(if (success?(5-proj-7-tuple(v_1045)) && success?(2-proj-7-tuple(v_1045))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {552}let v_1064: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1045)) && success?(2-proj-7-tuple(v_1045))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1060))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (v_1061,v_1062,v_1063) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1065: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_1045)) && success?(2-proj-7-tuple(v_1045))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then dhexp(2-proj-2-tuple(v_1059),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1064)) then cipherstatepack(2-proj-3-tuple(v_1064),minnonce) else fail-any),1-proj-3-tuple(v_1064),3-proj-3-tuple(v_1060)) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1066: bitstring = catch-fail(symmetricstateunpack(v_1065)) in
        {555}let v_1067: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1066))) in
        {556}let v_1068: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1067),2-proj-2-tuple(v_1067),3-proj-3-tuple(v_1066),msg_b(bob,charlie,sid))) in
        {557}let v_1069: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1066))) in
        {558}let v_1070: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1067))) && success?(1-proj-3-tuple(v_1066))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then cipherstatepack(1-proj-2-tuple(v_1069),increment_nonce(2-proj-2-tuple(v_1067))) else fail-any) else fail-any)) in
        {559}let v_1071: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1066)) && success?(1-proj-3-tuple(v_1066))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1070) then (v_1070,v_1068) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {560}let v_1072: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1071),2-proj-3-tuple(v_1066),3-proj-3-tuple(v_1066)))) in
        {561}let v_1073: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1071)) && success?(symmetricstatepack(1-proj-2-tuple(v_1071),2-proj-3-tuple(v_1066),3-proj-3-tuple(v_1066)))) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then symmetricstatepack(1-proj-3-tuple(v_1072),2-proj-3-tuple(v_1072),hash(3-proj-3-tuple(v_1072),2-proj-2-tuple(v_1071))) else fail-any) else fail-any)) in
        {562}let v_1074: bitstring = catch-fail((if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then (if not-caught-fail(v_1073) then (v_1073,2-proj-2-tuple(v_1071)) else fail-any) else fail-any) else fail-any)) in
        {563}let v_1075: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1074),2-proj-7-tuple(v_1045),v_1048,4-proj-7-tuple(v_1045),5-proj-7-tuple(v_1045),6-proj-7-tuple(v_1045),7-proj-7-tuple(v_1045))) in
        {564}let v_1076: bitstring = catch-fail(concat3(v_1049,2-proj-3-tuple(v_1046),2-proj-2-tuple(v_1074))) in
        {565}let (hs_1077: handshakestate,message_b_1078: bitstring) = (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-7-tuple(v_1045))))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1058) then (if not-caught-fail(v_1065) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-2-tuple(v_1074))))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (v_1075,v_1076) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {566}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {567}insert statestore(bob,charlie,sid,statepack_c(hs_1077));
        {568}out(pub, message_b_1078)
    ) | (
        {615}get statestore(=bob,=charlie,=sid,statepack_c(hs_1079: handshakestate)) in
        {570}in(pub, message_c_1080: bitstring);
        {571}let v_1081: bitstring = catch-fail(handshakestateunpack(hs_1079)) in
        {572}let v_1082: bitstring = catch-fail(deconcat3(message_c_1080)) in
        {573}let v_1083: bool = catch-fail(true) in
        {574}let v_1084: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1081))) in
        {575}let v_1085: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1084))) in
        {576}let v_1086: aead = catch-fail(decrypt(1-proj-2-tuple(v_1085),2-proj-2-tuple(v_1085),3-proj-3-tuple(v_1084),2-proj-3-tuple(v_1082))) in
        {577}let v_1087: bitstring = catch-fail(aeadunpack(v_1086)) in
        {578}let v_1088: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1084))) in
        {579}let v_1089: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1085))) && success?(1-proj-3-tuple(v_1084))) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then cipherstatepack(1-proj-2-tuple(v_1088),increment_nonce(2-proj-2-tuple(v_1085))) else fail-any) else fail-any)) in
        {580}let v_1090: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1082)) && (success?(3-proj-3-tuple(v_1084)) && success?(1-proj-3-tuple(v_1084)))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then (if not-caught-fail(v_1086) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-3-tuple(v_1087))))) then (if not-caught-fail(v_1089) then (v_1089,3-proj-3-tuple(v_1087),1-proj-3-tuple(v_1087)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1091: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1090),2-proj-3-tuple(v_1084),3-proj-3-tuple(v_1084)))) in
        {582}let v_1092: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1082)) && success?(symmetricstatepack(1-proj-3-tuple(v_1090),2-proj-3-tuple(v_1084),3-proj-3-tuple(v_1084)))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1091),hash(3-proj-3-tuple(v_1091),2-proj-3-tuple(v_1082))) else fail-any) else fail-any)) in
        {583}let v_1093: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1082)) && success?(1-proj-7-tuple(v_1081))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then (if not-caught-fail(v_1092) then (v_1092,2-proj-3-tuple(v_1090),3-proj-3-tuple(v_1090)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {584}let v_1094: key = catch-fail(2-proj-3-tuple(v_1093)) in
        {585}let v_1095: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1081))) in
        {586}let v_1096: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1093))) in
        {587}let v_1097: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1096),(if success?(3-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-2-tuple(v_1095))))) then dhexp(2-proj-2-tuple(v_1095),v_1094) else fail-any) else fail-any))) in
        {588}let v_1098: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1096),(if success?(3-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-2-tuple(v_1095))))) then dhexp(2-proj-2-tuple(v_1095),v_1094) else fail-any) else fail-any))) in
        {589}let v_1099: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1096),(if success?(3-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-2-tuple(v_1095))))) then dhexp(2-proj-2-tuple(v_1095),v_1094) else fail-any) else fail-any))) in
        {590}let v_1100: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-2-tuple(v_1095))))) then dhexp(2-proj-2-tuple(v_1095),v_1094) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1096))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1099) then (v_1097,v_1098,v_1099) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {591}let v_1101: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1081)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-2-tuple(v_1095))))) then dhexp(2-proj-2-tuple(v_1095),v_1094) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_1093))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-3-tuple(v_1096))))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1100)) then cipherstatepack(2-proj-3-tuple(v_1100),minnonce) else fail-any),1-proj-3-tuple(v_1100),3-proj-3-tuple(v_1096)) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1102: bitstring = catch-fail(symmetricstateunpack(v_1101)) in
        {593}let v_1103: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1102))) in
        {594}let v_1104: aead = catch-fail(decrypt(1-proj-2-tuple(v_1103),2-proj-2-tuple(v_1103),3-proj-3-tuple(v_1102),3-proj-3-tuple(v_1082))) in
        {595}let v_1105: bitstring = catch-fail(aeadunpack(v_1104)) in
        {596}let v_1106: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1102))) in
        {597}let v_1107: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1103))) && success?(1-proj-3-tuple(v_1102))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then cipherstatepack(1-proj-2-tuple(v_1106),increment_nonce(2-proj-2-tuple(v_1103))) else fail-any) else fail-any)) in
        {598}let v_1108: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1082)) && (success?(3-proj-3-tuple(v_1102)) && success?(1-proj-3-tuple(v_1102)))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-2-tuple(v_1103))))) then (if not-caught-fail(v_1104) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-3-tuple(v_1105))))) then (if not-caught-fail(v_1107) then (v_1107,3-proj-3-tuple(v_1105),1-proj-3-tuple(v_1105)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1109: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1108),2-proj-3-tuple(v_1102),3-proj-3-tuple(v_1102)))) in
        {600}let v_1110: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1082)) && success?(symmetricstatepack(1-proj-3-tuple(v_1108),2-proj-3-tuple(v_1102),3-proj-3-tuple(v_1102)))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1109),hash(3-proj-3-tuple(v_1109),3-proj-3-tuple(v_1082))) else fail-any) else fail-any)) in
        {601}let v_1111: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1082)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-3-tuple(v_1108))))) then (if not-caught-fail(v_1110) then (v_1110,2-proj-3-tuple(v_1108),3-proj-3-tuple(v_1108)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1112: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {603}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1111),2-proj-7-tuple(v_1081),3-proj-7-tuple(v_1081),v_1094,5-proj-7-tuple(v_1081),6-proj-7-tuple(v_1081),7-proj-7-tuple(v_1081))) in
        {604}let v_1114: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1111))) in
        {605}let v_1115: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1114),zero)) in
        {606}let v_1116: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1114),zero)) in
        {607}let v_1117: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1114),zero)) in
        {608}let v_1118: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1114)) then (if not-caught-fail(v_1115) then (if not-caught-fail(v_1116) then (if not-caught-fail(v_1117) then (v_1115,v_1116,v_1117) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1119: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1118)) then cipherstatepack(1-proj-3-tuple(v_1118),minnonce) else fail-any)) in
        {610}let v_1120: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1118)) then cipherstatepack(2-proj-3-tuple(v_1118),minnonce) else fail-any)) in
        {611}let v_1121: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1111)) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then (if not-caught-fail(v_1119) then (if not-caught-fail(v_1120) then (1-proj-3-tuple(v_1111),v_1119,v_1120) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let (hs_1122: handshakestate,plaintext_c_1123: bitstring,valid_1124: bool,cs1_1125: cipherstate,cs2_1126: cipherstate) = (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-7-tuple(v_1081))))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-3-tuple(v_1082))))) then (if not-caught-fail(v_1083) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then (if not-caught-fail(v_1094) then (if not-caught-fail(v_1101) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then (if ((3-proj-3-tuple(v_1093) && 3-proj-3-tuple(v_1111)) && (v_1094 = getpublickey((if not-caught-fail(v_1112) then keypairpack(validkey(v_1112),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1113) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (v_1113,2-proj-3-tuple(v_1111),true,2-proj-3-tuple(v_1121),3-proj-3-tuple(v_1121)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {613}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1123);
        {614}insert statestore(bob,charlie,sid,statepack_d(hs_1122,cs1_1125,cs2_1126))
    ) | (
        {616}!
        {635}get statestore(=bob,=charlie,=sid,statepack_d(hs_1127: handshakestate,cs1_1128: cipherstate,cs2_1129: cipherstate)) in
        {617}let hs_1130: handshakestate = handshakestatesetcs(hs_1127,cs2_1129) in
        {618}let v_1131: bitstring = catch-fail(handshakestateunpack(hs_1130)) in
        {619}let v_1132: bitstring = catch-fail((empty,empty,empty)) in
        {620}let v_1133: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1131))) in
        {621}let v_1134: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1133))) in
        {622}let v_1135: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1134),2-proj-2-tuple(v_1134),3-proj-3-tuple(v_1133),msg_d(bob,charlie,sid))) in
        {623}let v_1136: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1133))) in
        {624}let v_1137: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1134))) && success?(1-proj-3-tuple(v_1133))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then cipherstatepack(1-proj-2-tuple(v_1136),increment_nonce(2-proj-2-tuple(v_1134))) else fail-any) else fail-any)) in
        {625}let v_1138: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1133)) && success?(1-proj-3-tuple(v_1133))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-2-tuple(v_1134))))) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1137) then (v_1137,v_1135) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1139: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1138),2-proj-3-tuple(v_1133),3-proj-3-tuple(v_1133)))) in
        {627}let v_1140: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1138)) && success?(symmetricstatepack(1-proj-2-tuple(v_1138),2-proj-3-tuple(v_1133),3-proj-3-tuple(v_1133)))) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then symmetricstatepack(1-proj-3-tuple(v_1139),2-proj-3-tuple(v_1139),hash(3-proj-3-tuple(v_1139),2-proj-2-tuple(v_1138))) else fail-any) else fail-any)) in
        {628}let v_1141: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1131)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then (if not-caught-fail(v_1140) then (v_1140,2-proj-2-tuple(v_1138)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1142: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1141),2-proj-7-tuple(v_1131),3-proj-7-tuple(v_1131),4-proj-7-tuple(v_1131),5-proj-7-tuple(v_1131),6-proj-7-tuple(v_1131),7-proj-7-tuple(v_1131))) in
        {630}let v_1143: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1132),2-proj-3-tuple(v_1132),2-proj-2-tuple(v_1141))) in
        {631}let (hs_1144: handshakestate,message_d_1145: bitstring) = (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-7-tuple(v_1131))))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-2-tuple(v_1141))))) then (if not-caught-fail(v_1142) then (if not-caught-fail(v_1143) then (v_1142,v_1143) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {632}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {633}insert statestore(bob,charlie,sid,statepack_e(hs_1144,cs1_1128,handshakestategetcs(hs_1144)));
        {634}out(pub, message_d_1145)
    ) | (
        {636}!
        {656}get statestore(=bob,=charlie,=sid,statepack_e(hs_1146: handshakestate,cs1_1147: cipherstate,cs2_1148: cipherstate)) in
        {637}let hs_1149: handshakestate = handshakestatesetcs(hs_1146,cs1_1147) in
        {638}in(pub, message_e_1150: bitstring);
        {639}let v_1151: bitstring = catch-fail(handshakestateunpack(hs_1149)) in
        {640}let v_1152: bitstring = catch-fail(deconcat3(message_e_1150)) in
        {641}let v_1153: bool = catch-fail(true) in
        {642}let v_1154: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1151))) in
        {643}let v_1155: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1154))) in
        {644}let v_1156: aead = catch-fail(decrypt(1-proj-2-tuple(v_1155),2-proj-2-tuple(v_1155),3-proj-3-tuple(v_1154),3-proj-3-tuple(v_1152))) in
        {645}let v_1157: bitstring = catch-fail(aeadunpack(v_1156)) in
        {646}let v_1158: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1154))) in
        {647}let v_1159: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1155))) && success?(1-proj-3-tuple(v_1154))) then (if (not-caught-fail(v_1158) && success?(is-true(success?(1-proj-2-tuple(v_1158))))) then cipherstatepack(1-proj-2-tuple(v_1158),increment_nonce(2-proj-2-tuple(v_1155))) else fail-any) else fail-any)) in
        {648}let v_1160: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1152)) && (success?(3-proj-3-tuple(v_1154)) && success?(1-proj-3-tuple(v_1154)))) then (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-2-tuple(v_1155))))) then (if not-caught-fail(v_1156) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-3-tuple(v_1157))))) then (if not-caught-fail(v_1159) then (v_1159,3-proj-3-tuple(v_1157),1-proj-3-tuple(v_1157)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {649}let v_1161: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1160),2-proj-3-tuple(v_1154),3-proj-3-tuple(v_1154)))) in
        {650}let v_1162: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1152)) && success?(symmetricstatepack(1-proj-3-tuple(v_1160),2-proj-3-tuple(v_1154),3-proj-3-tuple(v_1154)))) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then symmetricstatepack(1-proj-3-tuple(v_1161),2-proj-3-tuple(v_1161),hash(3-proj-3-tuple(v_1161),3-proj-3-tuple(v_1152))) else fail-any) else fail-any)) in
        {651}let v_1163: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1152)) && success?(1-proj-7-tuple(v_1151))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-3-tuple(v_1160))))) then (if not-caught-fail(v_1162) then (v_1162,2-proj-3-tuple(v_1160),3-proj-3-tuple(v_1160)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1164: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1163),2-proj-7-tuple(v_1151),3-proj-7-tuple(v_1151),4-proj-7-tuple(v_1151),5-proj-7-tuple(v_1151),6-proj-7-tuple(v_1151),7-proj-7-tuple(v_1151))) in
        {653}let (hs_1165: handshakestate,plaintext_e_1166: bitstring,valid_1167: bool) = (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-7-tuple(v_1151))))) then (if (not-caught-fail(v_1152) && success?(is-true(success?(1-proj-3-tuple(v_1152))))) then (if not-caught-fail(v_1153) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then (if (v_1153 && 3-proj-3-tuple(v_1163)) then (if not-caught-fail(v_1164) then (v_1164,2-proj-3-tuple(v_1163),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {654}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1166);
        {655}event RecvEnd(valid_1167)
    ) | (
        {657}event LeakS(phase0,bob);
        {658}out(pub, key_s(bob))
    ) | (
        {659}phase 1;
        {660}event LeakS(phase1,bob);
        {661}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 155 rules in the queue.
400 rules inserted. The rule base contains 387 rules. 41 rules in the queue.
600 rules inserted. The rule base contains 575 rules. 224 rules in the queue.
800 rules inserted. The rule base contains 755 rules. 276 rules in the queue.
1000 rules inserted. The rule base contains 931 rules. 130 rules in the queue.
1200 rules inserted. The rule base contains 1111 rules. 257 rules in the queue.
1400 rules inserted. The rule base contains 1263 rules. 309 rules in the queue.
1600 rules inserted. The rule base contains 1419 rules. 287 rules in the queue.
1800 rules inserted. The rule base contains 1549 rules. 303 rules in the queue.
2000 rules inserted. The rule base contains 1642 rules. 281 rules in the queue.
2200 rules inserted. The rule base contains 1806 rules. 311 rules in the queue.
2400 rules inserted. The rule base contains 1977 rules. 384 rules in the queue.
2600 rules inserted. The rule base contains 2118 rules. 402 rules in the queue.
2800 rules inserted. The rule base contains 2236 rules. 342 rules in the queue.
3000 rules inserted. The rule base contains 2385 rules. 379 rules in the queue.
3200 rules inserted. The rule base contains 2517 rules. 404 rules in the queue.
3400 rules inserted. The rule base contains 2621 rules. 410 rules in the queue.
3600 rules inserted. The rule base contains 2747 rules. 391 rules in the queue.
3800 rules inserted. The rule base contains 2873 rules. 376 rules in the queue.
4000 rules inserted. The rule base contains 3011 rules. 399 rules in the queue.
4200 rules inserted. The rule base contains 3134 rules. 421 rules in the queue.
4400 rules inserted. The rule base contains 3233 rules. 399 rules in the queue.
4600 rules inserted. The rule base contains 3342 rules. 397 rules in the queue.
4800 rules inserted. The rule base contains 3455 rules. 387 rules in the queue.
5000 rules inserted. The rule base contains 3630 rules. 411 rules in the queue.
5200 rules inserted. The rule base contains 3790 rules. 419 rules in the queue.
5400 rules inserted. The rule base contains 3912 rules. 412 rules in the queue.
5600 rules inserted. The rule base contains 4058 rules. 415 rules in the queue.
5800 rules inserted. The rule base contains 4211 rules. 414 rules in the queue.
6000 rules inserted. The rule base contains 4361 rules. 436 rules in the queue.
6200 rules inserted. The rule base contains 4520 rules. 444 rules in the queue.
6400 rules inserted. The rule base contains 4657 rules. 447 rules in the queue.
6600 rules inserted. The rule base contains 4783 rules. 471 rules in the queue.
6800 rules inserted. The rule base contains 4911 rules. 486 rules in the queue.
7000 rules inserted. The rule base contains 5049 rules. 479 rules in the queue.
7200 rules inserted. The rule base contains 5173 rules. 474 rules in the queue.
7400 rules inserted. The rule base contains 5280 rules. 485 rules in the queue.
7600 rules inserted. The rule base contains 5389 rules. 490 rules in the queue.
7800 rules inserted. The rule base contains 5525 rules. 481 rules in the queue.
8000 rules inserted. The rule base contains 5624 rules. 459 rules in the queue.
8200 rules inserted. The rule base contains 5735 rules. 411 rules in the queue.
8400 rules inserted. The rule base contains 5832 rules. 361 rules in the queue.
8600 rules inserted. The rule base contains 5977 rules. 323 rules in the queue.
8800 rules inserted. The rule base contains 6088 rules. 350 rules in the queue.
9000 rules inserted. The rule base contains 6185 rules. 311 rules in the queue.
9200 rules inserted. The rule base contains 6291 rules. 347 rules in the queue.
9400 rules inserted. The rule base contains 6410 rules. 341 rules in the queue.
9600 rules inserted. The rule base contains 6507 rules. 353 rules in the queue.
9800 rules inserted. The rule base contains 6595 rules. 301 rules in the queue.
10000 rules inserted. The rule base contains 6727 rules. 243 rules in the queue.
10200 rules inserted. The rule base contains 6857 rules. 206 rules in the queue.
10400 rules inserted. The rule base contains 6978 rules. 215 rules in the queue.
10600 rules inserted. The rule base contains 7080 rules. 181 rules in the queue.
10800 rules inserted. The rule base contains 7201 rules. 121 rules in the queue.
11000 rules inserted. The rule base contains 7238 rules. 48 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850316]),msg_a(alice,bob,sid[!1 = @sid_439850316]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_439850317]),msg_a(alice,bob,sid[!1 = @sid_439850316])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850325]),msg_a(alice,bob,sid[!1 = @sid_439850325]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_439850326]),msg_a(alice,bob,sid[!1 = @sid_439850325])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850335]),msg_a(alice,bob,sid[!1 = @sid_439850335]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_439850336]),msg_a(alice,bob,sid[!1 = @sid_439850335])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850345]),msg_a(alice,bob,sid[!1 = @sid_439850345]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_439850346]),msg_a(alice,bob,sid[!1 = @sid_439850345])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850354]),msg_a(alice,bob,sid[!1 = @sid_439850354]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_439850355]),msg_a(alice,bob,sid[!1 = @sid_439850354])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850363]),msg_a(alice,bob,sid[!1 = @sid_439850363]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_439850363]))
Abbreviations:
sid_439850420 = sid[!1 = @sid_439850395]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_439850420,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850420,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_439850420,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850420),msg_a(alice,bob,sid_439850420)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))).

7. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850420),g))),msg_a(alice,bob,sid_439850420)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_439850420).
attacker(msg_a(alice,bob,sid_439850420)).

18. By 17, the attacker may know msg_a(alice,bob,sid_439850420).
So the attacker may know msg_a(alice,bob,sid_439850420) in phase 1.
attacker_p1(msg_a(alice,bob,sid_439850420)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850423]),msg_a(alice,bob,sid[!1 = @sid_439850423]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_439850423]))
Abbreviations:
sid_439850481 = sid[!1 = @sid_439850456]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_439850481,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850481,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_439850481,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850481),msg_a(alice,bob,sid_439850481)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))).

7. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850481),g))),msg_a(alice,bob,sid_439850481)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_439850481).
attacker(msg_a(alice,bob,sid_439850481)).

18. By 17, the attacker may know msg_a(alice,bob,sid_439850481).
So the attacker may know msg_a(alice,bob,sid_439850481) in phase 1.
attacker_p1(msg_a(alice,bob,sid_439850481)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850484]),msg_a(alice,bob,sid[!1 = @sid_439850484]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_439850484]))
Abbreviations:
sid_439850543 = sid[!1 = @sid_439850518]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_439850543,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850543,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_439850543,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850543),msg_a(alice,bob,sid_439850543)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))).

7. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850543),g))),msg_a(alice,bob,sid_439850543)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_439850543).
attacker(msg_a(alice,bob,sid_439850543)).

18. By 17, the attacker may know msg_a(alice,bob,sid_439850543).
So the attacker may know msg_a(alice,bob,sid_439850543) in phase 1.
attacker_p1(msg_a(alice,bob,sid_439850543)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850546]),msg_a(alice,bob,sid[!1 = @sid_439850546]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_439850546]))
Abbreviations:
sid_439850603 = sid[!1 = @sid_439850578]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_439850603,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850603,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_439850603,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850603),msg_a(alice,bob,sid_439850603)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))).

7. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {332}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850603),g))),msg_a(alice,bob,sid_439850603)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_439850603).
attacker(msg_a(alice,bob,sid_439850603)).

18. By 17, the attacker may know msg_a(alice,bob,sid_439850603).
So the attacker may know msg_a(alice,bob,sid_439850603) in phase 1.
attacker_p1(msg_a(alice,bob,sid_439850603)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_439850606]),msg_b(bob,charlie,sid[!1 = @sid_439850606]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850607]),msg_a(alice,bob,sid[!1 = @sid_439850607]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850607]),msg_b(bob,charlie,sid[!1 = @sid_439850606])))
Abbreviations:
sid_439850683 = sid[!1 = @sid_439850630]
sid_439850684 = sid[!1 = @sid_439850656]

1. The entry statestore(alice,bob,sid_439850683,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850683,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_439850683,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850683),msg_a(alice,bob,sid_439850683)) may be executed at {38}.
So the entry statestore(alice,bob,sid_439850683,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),key_e(alice,bob,sid_439850683)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_439850683,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),key_e(alice,bob,sid_439850683)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_439850684,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {510}.
table(statestore(bob,charlie,sid_439850684,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_439850683,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850683),msg_a(alice,bob,sid_439850683)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))).

5. The entry statestore(bob,charlie,sid_439850684,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {532}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683))) that may be sent on channel pub by 4 may be received at input {511}.
We have validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)) <> caught-fail.
So the entry statestore(bob,charlie,sid_439850684,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),empty,false))) may be inserted in a table at insert {531}.
table(statestore(bob,charlie,sid_439850684,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),empty,false)))).

6. The entry statestore(bob,charlie,sid_439850684,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),empty,false))) that may be in a table by 5 may be read at get {569}.
The event SendMsg(bob,charlie,stagepack_b(sid_439850684),msg_b(bob,charlie,sid_439850684)) may be executed at {566}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850684),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850684),dhexp_real(key_e(alice,bob,sid_439850683),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850683),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683))),validkey(dhexp_real(key_e(bob,charlie,sid_439850684),g))),msg_b(bob,charlie,sid_439850684))) may be sent on channel pub at output {568}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850684),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850684),dhexp_real(key_e(alice,bob,sid_439850683),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850683),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683))),validkey(dhexp_real(key_e(bob,charlie,sid_439850684),g))),msg_b(bob,charlie,sid_439850684)))).

7. The entry statestore(alice,bob,sid_439850683,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850683),g)),key_e(alice,bob,sid_439850683)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850684),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850684),dhexp_real(key_e(alice,bob,sid_439850683),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850683),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850683),g))),msg_a(alice,bob,sid_439850683))),validkey(dhexp_real(key_e(bob,charlie,sid_439850684),g))),msg_b(bob,charlie,sid_439850684))) that may be sent on channel pub by 6 may be received at input {42}.
So event RecvMsg(alice,bob,stagepack_b(sid_439850683),msg_b(bob,charlie,sid_439850684)) may be executed at {75}.
end(RecvMsg(alice,bob,stagepack_b(sid_439850683),msg_b(bob,charlie,sid_439850684))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_439850687]),msg_b(bob,charlie,sid[!1 = @sid_439850687]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850688]),msg_a(alice,bob,sid[!1 = @sid_439850688]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850688]),msg_b(bob,charlie,sid[!1 = @sid_439850687])))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850691]),msg_b(bob,alice,sid[!1 = @sid_439850691]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850692]),msg_a(alice,bob,sid[!1 = @sid_439850692]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850692]),msg_b(bob,alice,sid[!1 = @sid_439850691])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_439850701]),msg_b(bob,charlie,sid[!1 = @sid_439850701]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850702]),msg_a(alice,bob,sid[!1 = @sid_439850702]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850702]),msg_b(bob,charlie,sid[!1 = @sid_439850701])))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850705]),msg_b(bob,alice,sid[!1 = @sid_439850705]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850706]),msg_a(alice,bob,sid[!1 = @sid_439850706]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850706]),msg_b(bob,alice,sid[!1 = @sid_439850705])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_439850715]),msg_b(bob,charlie,sid[!1 = @sid_439850715]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850716]),msg_a(alice,bob,sid[!1 = @sid_439850716]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850716]),msg_b(bob,charlie,sid[!1 = @sid_439850715])))
Abbreviations:
sid_439850792 = sid[!1 = @sid_439850739]
sid_439850793 = sid[!1 = @sid_439850765]

1. The entry statestore(alice,bob,sid_439850792,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850792,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_439850792,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850792),msg_a(alice,bob,sid_439850792)) may be executed at {38}.
So the entry statestore(alice,bob,sid_439850792,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),key_e(alice,bob,sid_439850792)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_439850792,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),key_e(alice,bob,sid_439850792)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_439850793,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {510}.
table(statestore(bob,charlie,sid_439850793,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_439850792,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850792),msg_a(alice,bob,sid_439850792)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))).

5. The entry statestore(bob,charlie,sid_439850793,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {532}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792))) that may be sent on channel pub by 4 may be received at input {511}.
We have validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)) <> caught-fail.
So the entry statestore(bob,charlie,sid_439850793,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),empty,false))) may be inserted in a table at insert {531}.
table(statestore(bob,charlie,sid_439850793,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),empty,false)))).

6. The entry statestore(bob,charlie,sid_439850793,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),empty,false))) that may be in a table by 5 may be read at get {569}.
The event SendMsg(bob,charlie,stagepack_b(sid_439850793),msg_b(bob,charlie,sid_439850793)) may be executed at {566}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850793),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850793),dhexp_real(key_e(alice,bob,sid_439850792),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850792),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792))),validkey(dhexp_real(key_e(bob,charlie,sid_439850793),g))),msg_b(bob,charlie,sid_439850793))) may be sent on channel pub at output {568}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850793),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850793),dhexp_real(key_e(alice,bob,sid_439850792),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850792),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792))),validkey(dhexp_real(key_e(bob,charlie,sid_439850793),g))),msg_b(bob,charlie,sid_439850793)))).

7. The entry statestore(alice,bob,sid_439850792,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850792),g)),key_e(alice,bob,sid_439850792)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850793),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850793),dhexp_real(key_e(alice,bob,sid_439850792),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850792),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850792),g))),msg_a(alice,bob,sid_439850792))),validkey(dhexp_real(key_e(bob,charlie,sid_439850793),g))),msg_b(bob,charlie,sid_439850793))) that may be sent on channel pub by 6 may be received at input {42}.
So event RecvMsg(alice,bob,stagepack_b(sid_439850792),msg_b(bob,charlie,sid_439850793)) may be executed at {75}.
end(RecvMsg(alice,bob,stagepack_b(sid_439850792),msg_b(bob,charlie,sid_439850793))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_439850796]),msg_b(bob,charlie,sid[!1 = @sid_439850796]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850797]),msg_a(alice,bob,sid[!1 = @sid_439850797]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_439850797]),msg_b(bob,charlie,sid[!1 = @sid_439850796])))
Abbreviations:
sid_439850873 = sid[!1 = @sid_439850820]
sid_439850874 = sid[!1 = @sid_439850846]

1. The entry statestore(alice,bob,sid_439850873,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439850873,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_439850873,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850873),msg_a(alice,bob,sid_439850873)) may be executed at {38}.
So the entry statestore(alice,bob,sid_439850873,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),key_e(alice,bob,sid_439850873)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_439850873,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),key_e(alice,bob,sid_439850873)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_439850874,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {510}.
table(statestore(bob,charlie,sid_439850874,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_439850873,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439850873),msg_a(alice,bob,sid_439850873)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))).

5. The entry statestore(bob,charlie,sid_439850874,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {532}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873))) that may be sent on channel pub by 4 may be received at input {511}.
We have validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)) <> caught-fail.
So the entry statestore(bob,charlie,sid_439850874,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),empty,false))) may be inserted in a table at insert {531}.
table(statestore(bob,charlie,sid_439850874,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),empty,false)))).

6. The entry statestore(bob,charlie,sid_439850874,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),empty,false))) that may be in a table by 5 may be read at get {569}.
The event SendMsg(bob,charlie,stagepack_b(sid_439850874),msg_b(bob,charlie,sid_439850874)) may be executed at {566}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850874),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850874),dhexp_real(key_e(alice,bob,sid_439850873),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850873),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873))),validkey(dhexp_real(key_e(bob,charlie,sid_439850874),g))),msg_b(bob,charlie,sid_439850874))) may be sent on channel pub at output {568}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850874),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850874),dhexp_real(key_e(alice,bob,sid_439850873),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850873),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873))),validkey(dhexp_real(key_e(bob,charlie,sid_439850874),g))),msg_b(bob,charlie,sid_439850874)))).

7. The entry statestore(alice,bob,sid_439850873,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439850873),g)),key_e(alice,bob,sid_439850873)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_439850874),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_439850874),dhexp_real(key_e(alice,bob,sid_439850873),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439850873),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439850873),g))),msg_a(alice,bob,sid_439850873))),validkey(dhexp_real(key_e(bob,charlie,sid_439850874),g))),msg_b(bob,charlie,sid_439850874))) that may be sent on channel pub by 6 may be received at input {42}.
So event RecvMsg(alice,bob,stagepack_b(sid_439850873),msg_b(bob,charlie,sid_439850874)) may be executed at {75}.
end(RecvMsg(alice,bob,stagepack_b(sid_439850873),msg_b(bob,charlie,sid_439850874))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850892]),msg_c(alice,bob,sid[!1 = @sid_439850892]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850893]),msg_b(bob,alice,sid[!1 = @sid_439850893]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850892]),msg_a(alice,bob,sid[!1 = @sid_439850892]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_439850893]),msg_c(alice,bob,sid[!1 = @sid_439850892])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850901]),msg_c(alice,bob,sid[!1 = @sid_439850901]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850902]),msg_b(bob,alice,sid[!1 = @sid_439850902]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850901]),msg_a(alice,bob,sid[!1 = @sid_439850901]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_439850902]),msg_c(alice,bob,sid[!1 = @sid_439850901])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850911]),msg_c(alice,bob,sid[!1 = @sid_439850911]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850912]),msg_b(bob,alice,sid[!1 = @sid_439850912]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850911]),msg_a(alice,bob,sid[!1 = @sid_439850911]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_439850912]),msg_c(alice,bob,sid[!1 = @sid_439850911])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850921]),msg_c(alice,bob,sid[!1 = @sid_439850921]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850922]),msg_b(bob,alice,sid[!1 = @sid_439850922]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850921]),msg_a(alice,bob,sid[!1 = @sid_439850921]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_439850922]),msg_c(alice,bob,sid[!1 = @sid_439850921])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850930]),msg_c(alice,bob,sid[!1 = @sid_439850930]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850931]),msg_b(bob,alice,sid[!1 = @sid_439850931]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850930]),msg_a(alice,bob,sid[!1 = @sid_439850930]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_439850931]),msg_c(alice,bob,sid[!1 = @sid_439850930])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439850954]),msg_d(bob,alice,sid[!1 = @sid_439850954]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850955]),msg_c(alice,bob,sid[!1 = @sid_439850955]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850954]),msg_b(bob,alice,sid[!1 = @sid_439850954]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850955]),msg_a(alice,bob,sid[!1 = @sid_439850955]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_439850955]),msg_d(bob,alice,sid[!1 = @sid_439850954])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439850963]),msg_d(bob,alice,sid[!1 = @sid_439850963]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850964]),msg_c(alice,bob,sid[!1 = @sid_439850964]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850963]),msg_b(bob,alice,sid[!1 = @sid_439850963]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850964]),msg_a(alice,bob,sid[!1 = @sid_439850964]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_439850964]),msg_d(bob,alice,sid[!1 = @sid_439850963])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439850973]),msg_d(bob,alice,sid[!1 = @sid_439850973]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850974]),msg_c(alice,bob,sid[!1 = @sid_439850974]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850973]),msg_b(bob,alice,sid[!1 = @sid_439850973]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850974]),msg_a(alice,bob,sid[!1 = @sid_439850974]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_439850974]),msg_d(bob,alice,sid[!1 = @sid_439850973])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1277,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439850983]),msg_d(bob,alice,sid[!1 = @sid_439850983]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850984]),msg_c(alice,bob,sid[!1 = @sid_439850984]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850983]),msg_b(bob,alice,sid[!1 = @sid_439850983]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850984]),msg_a(alice,bob,sid[!1 = @sid_439850984]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_439850984]),msg_d(bob,alice,sid[!1 = @sid_439850983])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439850992]),msg_d(bob,alice,sid[!1 = @sid_439850992]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439850993]),msg_c(alice,bob,sid[!1 = @sid_439850993]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439850992]),msg_b(bob,alice,sid[!1 = @sid_439850992]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439850993]),msg_a(alice,bob,sid[!1 = @sid_439850993]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_439850993]),msg_d(bob,alice,sid[!1 = @sid_439850992])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_439851016]),msg_e(alice,bob,sid[!1 = @sid_439851016]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439851017]),msg_d(bob,alice,sid[!1 = @sid_439851017]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439851016]),msg_c(alice,bob,sid[!1 = @sid_439851016]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439851017]),msg_b(bob,alice,sid[!1 = @sid_439851017]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439851016]),msg_a(alice,bob,sid[!1 = @sid_439851016]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_439851017]),msg_e(alice,bob,sid[!1 = @sid_439851016])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_439851025]),msg_e(alice,bob,sid[!1 = @sid_439851025]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439851026]),msg_d(bob,alice,sid[!1 = @sid_439851026]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439851025]),msg_c(alice,bob,sid[!1 = @sid_439851025]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439851026]),msg_b(bob,alice,sid[!1 = @sid_439851026]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439851025]),msg_a(alice,bob,sid[!1 = @sid_439851025]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_439851026]),msg_e(alice,bob,sid[!1 = @sid_439851025])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_439851035]),msg_e(alice,bob,sid[!1 = @sid_439851035]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439851036]),msg_d(bob,alice,sid[!1 = @sid_439851036]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439851035]),msg_c(alice,bob,sid[!1 = @sid_439851035]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439851036]),msg_b(bob,alice,sid[!1 = @sid_439851036]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439851035]),msg_a(alice,bob,sid[!1 = @sid_439851035]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_439851036]),msg_e(alice,bob,sid[!1 = @sid_439851035])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1277,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_439851045]),msg_e(alice,bob,sid[!1 = @sid_439851045]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439851046]),msg_d(bob,alice,sid[!1 = @sid_439851046]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439851045]),msg_c(alice,bob,sid[!1 = @sid_439851045]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439851046]),msg_b(bob,alice,sid[!1 = @sid_439851046]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439851045]),msg_a(alice,bob,sid[!1 = @sid_439851045]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_439851046]),msg_e(alice,bob,sid[!1 = @sid_439851045])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_439851054]),msg_e(alice,bob,sid[!1 = @sid_439851054]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439851055]),msg_d(bob,alice,sid[!1 = @sid_439851055]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439851054]),msg_c(alice,bob,sid[!1 = @sid_439851054]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439851055]),msg_b(bob,alice,sid[!1 = @sid_439851055]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439851054]),msg_a(alice,bob,sid[!1 = @sid_439851054]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_439851055]),msg_e(alice,bob,sid[!1 = @sid_439851054])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_439851076]),msg_e(alice,bob,sid[!1 = @sid_439851076]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_439851077]),msg_d(bob,alice,sid[!1 = @sid_439851077]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_439851076]),msg_c(alice,bob,sid[!1 = @sid_439851076]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_439851077]),msg_b(bob,alice,sid[!1 = @sid_439851077]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_439851076]),msg_a(alice,bob,sid[!1 = @sid_439851076]))) -> end(RecvEnd(true))
Abbreviations:
sid_439851485 = sid[!1 = @sid_439851474]
sid_439851486 = sid[!1 = @sid_439851429]

1. The entry statestore(bob,alice,sid_439851485,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {344}.
table(statestore(bob,alice,sid_439851485,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,sid_439851486,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_439851486,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_439851486,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439851486),msg_a(alice,bob,sid_439851486)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))).

4. The entry statestore(bob,alice,sid_439851485,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {366}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))) that may be sent on channel pub by 3 may be received at input {345}.
We have validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_439851485,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false))) may be inserted in a table at insert {365}.
table(statestore(bob,alice,sid_439851485,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_439851485,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false))) that may be in a table by 4 may be read at get {403}.
The event SendMsg(bob,alice,stagepack_b(sid_439851485),msg_b(bob,alice,sid_439851485)) may be executed at {400}.
So the entry statestore(bob,alice,sid_439851485,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false))) may be inserted in a table at insert {401}.
table(statestore(bob,alice,sid_439851485,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false)))).

6. The entry statestore(alice,bob,sid_439851486,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_439851486),msg_a(alice,bob,sid_439851486)) may be executed at {38}.
So the entry statestore(alice,bob,sid_439851486,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_439851486,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

7. The entry statestore(bob,alice,sid_439851485,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false))) that may be in a table by 4 may be read at get {403}.
The event SendMsg(bob,alice,stagepack_b(sid_439851485),msg_b(bob,alice,sid_439851485)) may be executed at {400}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))) may be sent on channel pub at output {402}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))).

8. The entry statestore(alice,bob,sid_439851486,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 6 may be read at get {77}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))) that may be sent on channel pub by 7 may be received at input {42}.
So the entry statestore(alice,bob,sid_439851486,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true))) may be inserted in a table at insert {76}.
table(statestore(alice,bob,sid_439851486,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true)))).

9. The entry statestore(alice,bob,sid_439851486,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true))) that may be in a table by 8 may be read at get {121}.
The event SendMsg(alice,bob,stagepack_c(sid_439851486),msg_c(alice,bob,sid_439851486)) may be executed at {118}.
So the message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))) may be sent on channel pub at output {120}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))).

10. The entry statestore(bob,alice,sid_439851485,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),empty,validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false))) that may be in a table by 5 may be read at get {449}.
The message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))) that may be sent on channel pub by 9 may be received at input {404}.
So the entry statestore(bob,alice,sid_439851485,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {448}.
table(statestore(bob,alice,sid_439851485,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_439851485,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {469}.
The event SendMsg(bob,alice,stagepack_d(sid_439851485),msg_d(bob,alice,sid_439851485)) may be executed at {466}.
So the entry statestore(bob,alice,sid_439851485,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {467}.
table(statestore(bob,alice,sid_439851485,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_439851486,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true))) that may be in a table by 8 may be read at get {121}.
The event SendMsg(alice,bob,stagepack_c(sid_439851486),msg_c(alice,bob,sid_439851486)) may be executed at {118}.
So the entry statestore(alice,bob,sid_439851486,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {119}.
table(statestore(alice,bob,sid_439851486,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_439851485,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {469}.
The event SendMsg(bob,alice,stagepack_d(sid_439851485),msg_d(bob,alice,sid_439851485)) may be executed at {466}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485))) may be sent on channel pub at output {468}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))).

14. The entry statestore(alice,bob,sid_439851486,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce))) that may be in a table by 12 may be read at get {142}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485))) that may be sent on channel pub by 13 may be received at input {124}.
So the entry statestore(alice,bob,sid_439851486,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {141}.
table(statestore(alice,bob,sid_439851486,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_439851486,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),key_e(alice,bob,sid_439851486)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {161}.
The event SendMsg(alice,bob,stagepack_e(sid_439851486),msg_e(alice,bob,sid_439851486)) may be executed at {159}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485))),msg_e(alice,bob,sid_439851486))) may be sent on channel pub at output {160}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485))),msg_e(alice,bob,sid_439851486)))).

16. The entry statestore(bob,alice,sid_439851485,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_439851485),g)),key_e(bob,alice,sid_439851485)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {490}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_e(alice,bob,sid_439851486),dhexp_real(key_s(bob),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_439851485),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_439851485),dhexp_real(key_e(alice,bob,sid_439851486),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_439851486),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_439851486),g))),msg_a(alice,bob,sid_439851486))),validkey(dhexp_real(key_e(bob,alice,sid_439851485),g))),msg_b(bob,alice,sid_439851485))),validkey(dhexp_real(key_s(alice),g)))),msg_c(alice,bob,sid_439851486))),msg_d(bob,alice,sid_439851485))),msg_e(alice,bob,sid_439851486))) that may be sent on channel pub by 15 may be received at input {472}.
So event RecvEnd(true) may be executed at {489}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
