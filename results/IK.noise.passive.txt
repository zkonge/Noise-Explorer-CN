File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 229, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 230, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 230, character 36:
Warning: identifier h rebound.
File "IK.noise.passive.pv", line 239, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 240, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "IK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 276, character 6:
Warning: identifier s rebound.
File "IK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 277, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "IK.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 293, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 293, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 294, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 302, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 302, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 303, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 319, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 323, characters 48-53:
Warning: identifier valid1 rebound.
File "IK.noise.passive.pv", line 324, characters 6-7:
Warning: identifier rs rebound.
File "IK.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 326, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 328, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 336, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 302, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 302, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 303, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 239, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 240, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 336, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "IK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 276, character 6:
Warning: identifier s rebound.
File "IK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 277, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 239, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 240, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 239, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 240, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 567, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 239, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 240, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 553, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "IK.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 293, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 293, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.passive.pv", line 294, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 239, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 240, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 319, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 323, characters 48-53:
Warning: identifier valid1 rebound.
File "IK.noise.passive.pv", line 324, characters 6-7:
Warning: identifier rs rebound.
File "IK.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 326, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 328, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 220, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}new sid: sessionid;
(
    {3}let s_535: keypair = keypairpack(empty,empty) in
    {4}out(pub, getpublickey(s_535));
    (
        {5}let e_536: keypair = keypairpack(empty,empty) in
        {6}let v_537: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_538: key = getpublickey((if not-caught-fail(v_537) then keypairpack(v_537,key_s(bob)) else fail-any)) in
        {8}let re_539: key = empty in
        {9}let v_540: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_541: key = catch-fail(v_540) in
        {11}let v_542: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_543: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then symmetricstatepack(v_542,v_541,v_540) else fail-any) else fail-any) else fail-any))) in
        {13}let v_544: symmetricstate = catch-fail((if success?((if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then symmetricstatepack(v_542,v_541,v_540) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_543),hash(3-proj-3-tuple(v_543),empty)) else fail-any) else fail-any)) in
        {14}let v_545: bitstring = catch-fail(symmetricstateunpack(v_544)) in
        {15}let v_546: symmetricstate = catch-fail((if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),rs_538)) else fail-any)) in
        {16}let hs: handshakestate = (if not-caught-fail(v_544) then (if not-caught-fail(v_546) then handshakestatepack(v_546,s_535,e_536,rs_538,re_539,empty,true) else fail-any) else fail-any) in
        {17}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {65}get statestore(=alice,=bob,=sid,statepack_a(hs_547: handshakestate)) in
        {18}let v_548: bitstring = catch-fail(handshakestateunpack(hs_547)) in
        {19}let v_549: bitstring = catch-fail((empty,empty,empty)) in
        {20}let v_550: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {21}let v_551: keypair = catch-fail((if not-caught-fail(v_550) then keypairpack(v_550,key_e(alice,bob,sid)) else fail-any)) in
        {22}let v_552: bitstring = catch-fail(getpublickey(v_551)) in
        {23}let v_553: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_548))) in
        {24}let v_554: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_548)) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then symmetricstatepack(1-proj-3-tuple(v_553),2-proj-3-tuple(v_553),hash(3-proj-3-tuple(v_553),v_552)) else fail-any) else fail-any)) in
        {25}let v_555: bitstring = catch-fail(keypairunpack(v_551)) in
        {26}let v_556: bitstring = catch-fail(symmetricstateunpack(v_554)) in
        {27}let v_557: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_556),(if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then dhexp(2-proj-2-tuple(v_555),4-proj-7-tuple(v_548)) else fail-any) else fail-any))) in
        {28}let v_558: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_556),(if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then dhexp(2-proj-2-tuple(v_555),4-proj-7-tuple(v_548)) else fail-any) else fail-any))) in
        {29}let v_559: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_556),(if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then dhexp(2-proj-2-tuple(v_555),4-proj-7-tuple(v_548)) else fail-any) else fail-any))) in
        {30}let v_560: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then dhexp(2-proj-2-tuple(v_555),4-proj-7-tuple(v_548)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_556))) then (if not-caught-fail(v_557) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_557,v_558,v_559) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_561: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then dhexp(2-proj-2-tuple(v_555),4-proj-7-tuple(v_548)) else fail-any) else fail-any)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_560)) then cipherstatepack(2-proj-3-tuple(v_560),minnonce) else fail-any),1-proj-3-tuple(v_560),3-proj-3-tuple(v_556)) else fail-any) else fail-any) else fail-any)) in
        {32}let v_562: key = catch-fail(dhexp(key_s(alice),g)) in
        {33}let v_563: keypair = catch-fail((if not-caught-fail(v_562) then keypairpack(v_562,key_s(alice)) else fail-any)) in
        {34}let v_564: bitstring = catch-fail(symmetricstateunpack(v_561)) in
        {35}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {36}let v_566: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),getpublickey(v_563))) in
        {37}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {38}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {39}let v_569: bitstring = catch-fail((if (success?(getpublickey(v_563)) && (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (v_568,v_566) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {41}let v_571: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_569)) && success?(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),2-proj-2-tuple(v_569))) else fail-any) else fail-any)) in
        {42}let v_572: bitstring = catch-fail((if success?(getpublickey(v_563)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-2-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_573: bitstring = catch-fail(keypairunpack(v_563)) in
        {44}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_572))) in
        {45}let v_575: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_574),(if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then dhexp(2-proj-2-tuple(v_573),4-proj-7-tuple(v_548)) else fail-any) else fail-any))) in
        {46}let v_576: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_574),(if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then dhexp(2-proj-2-tuple(v_573),4-proj-7-tuple(v_548)) else fail-any) else fail-any))) in
        {47}let v_577: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_574),(if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then dhexp(2-proj-2-tuple(v_573),4-proj-7-tuple(v_548)) else fail-any) else fail-any))) in
        {48}let v_578: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then dhexp(2-proj-2-tuple(v_573),4-proj-7-tuple(v_548)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_574))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_575,v_576,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_579: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_548)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then dhexp(2-proj-2-tuple(v_573),4-proj-7-tuple(v_548)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_572))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_578)) then cipherstatepack(2-proj-3-tuple(v_578),minnonce) else fail-any),1-proj-3-tuple(v_578),3-proj-3-tuple(v_574)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_580: bitstring = catch-fail(symmetricstateunpack(v_579)) in
        {51}let v_581: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_580))) in
        {52}let v_582: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_581),2-proj-2-tuple(v_581),3-proj-3-tuple(v_580),msg_a(alice,bob,sid))) in
        {53}let v_583: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_580))) in
        {54}let v_584: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_581))) && success?(1-proj-3-tuple(v_580))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then cipherstatepack(1-proj-2-tuple(v_583),increment_nonce(2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {55}let v_585: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_580)) && success?(1-proj-3-tuple(v_580))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (v_584,v_582) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_586: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_585),2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)))) in
        {57}let v_587: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_585)) && success?(symmetricstatepack(1-proj-2-tuple(v_585),2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then symmetricstatepack(1-proj-3-tuple(v_586),2-proj-3-tuple(v_586),hash(3-proj-3-tuple(v_586),2-proj-2-tuple(v_585))) else fail-any) else fail-any)) in
        {58}let v_588: bitstring = catch-fail((if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then (if not-caught-fail(v_587) then (v_587,2-proj-2-tuple(v_585)) else fail-any) else fail-any) else fail-any)) in
        {59}let v_589: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_588),v_563,v_551,4-proj-7-tuple(v_548),5-proj-7-tuple(v_548),6-proj-7-tuple(v_548),7-proj-7-tuple(v_548))) in
        {60}let v_590: bitstring = catch-fail(concat3(v_552,2-proj-2-tuple(v_572),2-proj-2-tuple(v_588))) in
        {61}let (hs_591: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-7-tuple(v_548))))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (if not-caught-fail(v_554) then (if not-caught-fail(v_561) then (if not-caught-fail(v_563) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_579) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (v_589,v_590) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {62}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {63}insert statestore(alice,bob,sid,statepack_b(hs_591));
        {64}out(pub, message_a)
    ) | (
        {109}get statestore(=alice,=bob,=sid,statepack_b(hs_592: handshakestate)) in
        {66}in(pub, message_b: bitstring);
        {67}let v_593: bitstring = catch-fail(handshakestateunpack(hs_592)) in
        {68}let v_594: bitstring = catch-fail(deconcat3(message_b)) in
        {69}let v_595: bool = catch-fail(true) in
        {70}let v_596: key = catch-fail(1-proj-3-tuple(v_594)) in
        {71}let v_597: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_593))) in
        {72}let v_598: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_593)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_597),hash(3-proj-3-tuple(v_597),v_596)) else fail-any) else fail-any)) in
        {73}let v_599: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_593))) in
        {74}let v_600: bitstring = catch-fail(symmetricstateunpack(v_598)) in
        {75}let v_601: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_600),(if success?(3-proj-7-tuple(v_593)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then dhexp(2-proj-2-tuple(v_599),v_596) else fail-any) else fail-any))) in
        {76}let v_602: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_600),(if success?(3-proj-7-tuple(v_593)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then dhexp(2-proj-2-tuple(v_599),v_596) else fail-any) else fail-any))) in
        {77}let v_603: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_600),(if success?(3-proj-7-tuple(v_593)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then dhexp(2-proj-2-tuple(v_599),v_596) else fail-any) else fail-any))) in
        {78}let v_604: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_593)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then dhexp(2-proj-2-tuple(v_599),v_596) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_600))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (v_601,v_602,v_603) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_605: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_593)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then dhexp(2-proj-2-tuple(v_599),v_596) else fail-any) else fail-any)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_604)) then cipherstatepack(2-proj-3-tuple(v_604),minnonce) else fail-any),1-proj-3-tuple(v_604),3-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any)) in
        {80}let v_606: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_593))) in
        {81}let v_607: bitstring = catch-fail(symmetricstateunpack(v_605)) in
        {82}let v_608: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_607),(if success?(2-proj-7-tuple(v_593)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),v_596) else fail-any) else fail-any))) in
        {83}let v_609: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_607),(if success?(2-proj-7-tuple(v_593)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),v_596) else fail-any) else fail-any))) in
        {84}let v_610: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_607),(if success?(2-proj-7-tuple(v_593)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),v_596) else fail-any) else fail-any))) in
        {85}let v_611: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_593)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),v_596) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_607))) then (if not-caught-fail(v_608) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (v_608,v_609,v_610) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_612: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_593)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),v_596) else fail-any) else fail-any)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_611)) then cipherstatepack(2-proj-3-tuple(v_611),minnonce) else fail-any),1-proj-3-tuple(v_611),3-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_613: bitstring = catch-fail(symmetricstateunpack(v_612)) in
        {88}let v_614: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {89}let v_615: aead = catch-fail(decrypt(1-proj-2-tuple(v_614),2-proj-2-tuple(v_614),3-proj-3-tuple(v_613),3-proj-3-tuple(v_594))) in
        {90}let v_616: bitstring = catch-fail(aeadunpack(v_615)) in
        {91}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {92}let v_618: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_614))) && success?(1-proj-3-tuple(v_613))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then cipherstatepack(1-proj-2-tuple(v_617),increment_nonce(2-proj-2-tuple(v_614))) else fail-any) else fail-any)) in
        {93}let v_619: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_594)) && (success?(3-proj-3-tuple(v_613)) && success?(1-proj-3-tuple(v_613)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then (if not-caught-fail(v_615) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if not-caught-fail(v_618) then (v_618,3-proj-3-tuple(v_616),1-proj-3-tuple(v_616)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_620: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) in
        {95}let v_621: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_594)) && success?(symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),3-proj-3-tuple(v_594))) else fail-any) else fail-any)) in
        {96}let v_622: bitstring = catch-fail((if success?(3-proj-3-tuple(v_594)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,2-proj-3-tuple(v_619),3-proj-3-tuple(v_619)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_623: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_622),2-proj-7-tuple(v_593),3-proj-7-tuple(v_593),4-proj-7-tuple(v_593),v_596,6-proj-7-tuple(v_593),7-proj-7-tuple(v_593))) in
        {98}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_622))) in
        {99}let v_625: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_624),zero)) in
        {100}let v_626: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_624),zero)) in
        {101}let v_627: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_624),zero)) in
        {102}let v_628: bitstring = catch-fail((if success?(2-proj-3-tuple(v_624)) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_625,v_626,v_627) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {103}let v_629: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_628)) then cipherstatepack(1-proj-3-tuple(v_628),minnonce) else fail-any)) in
        {104}let v_630: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_628)) then cipherstatepack(2-proj-3-tuple(v_628),minnonce) else fail-any)) in
        {105}let v_631: bitstring = catch-fail((if success?(1-proj-3-tuple(v_622)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (1-proj-3-tuple(v_622),v_629,v_630) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let (hs_632: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-7-tuple(v_593))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if not-caught-fail(v_598) then (if not-caught-fail(v_605) then (if not-caught-fail(v_612) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (v_595 && 3-proj-3-tuple(v_622)) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (v_623,2-proj-3-tuple(v_622),true,2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {107}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {108}insert statestore(alice,bob,sid,statepack_c(hs_632,cs1,cs2))
    ) | (
        {110}!
        {129}get statestore(=alice,=bob,=sid,statepack_c(hs_633: handshakestate,cs1_634: cipherstate,cs2_635: cipherstate)) in
        {111}let hs_636: handshakestate = handshakestatesetcs(hs_633,cs1_634) in
        {112}let v_637: bitstring = catch-fail(handshakestateunpack(hs_636)) in
        {113}let v_638: bitstring = catch-fail((empty,empty,empty)) in
        {114}let v_639: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_637))) in
        {115}let v_640: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {116}let v_641: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_640),2-proj-2-tuple(v_640),3-proj-3-tuple(v_639),msg_c(alice,bob,sid))) in
        {117}let v_642: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {118}let v_643: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_640))) && success?(1-proj-3-tuple(v_639))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then cipherstatepack(1-proj-2-tuple(v_642),increment_nonce(2-proj-2-tuple(v_640))) else fail-any) else fail-any)) in
        {119}let v_644: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_639)) && success?(1-proj-3-tuple(v_639))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_643) then (v_643,v_641) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {120}let v_645: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_644),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) in
        {121}let v_646: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_644)) && success?(symmetricstatepack(1-proj-2-tuple(v_644),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_645),hash(3-proj-3-tuple(v_645),2-proj-2-tuple(v_644))) else fail-any) else fail-any)) in
        {122}let v_647: bitstring = catch-fail((if success?(1-proj-7-tuple(v_637)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then (if not-caught-fail(v_646) then (v_646,2-proj-2-tuple(v_644)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_648: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_647),2-proj-7-tuple(v_637),3-proj-7-tuple(v_637),4-proj-7-tuple(v_637),5-proj-7-tuple(v_637),6-proj-7-tuple(v_637),7-proj-7-tuple(v_637))) in
        {124}let v_649: bitstring = catch-fail(concat3(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),2-proj-2-tuple(v_647))) in
        {125}let (hs_650: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-7-tuple(v_637))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (v_648,v_649) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {126}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {127}insert statestore(alice,bob,sid,statepack_d(hs_650,handshakestategetcs(hs_650),cs2_635));
        {128}out(pub, message_c)
    ) | (
        {130}!
        {150}get statestore(=alice,=bob,=sid,statepack_d(hs_651: handshakestate,cs1_652: cipherstate,cs2_653: cipherstate)) in
        {131}let hs_654: handshakestate = handshakestatesetcs(hs_651,cs2_653) in
        {132}in(pub, message_d: bitstring);
        {133}let v_655: bitstring = catch-fail(handshakestateunpack(hs_654)) in
        {134}let v_656: bitstring = catch-fail(deconcat3(message_d)) in
        {135}let v_657: bool = catch-fail(true) in
        {136}let v_658: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_655))) in
        {137}let v_659: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {138}let v_660: aead = catch-fail(decrypt(1-proj-2-tuple(v_659),2-proj-2-tuple(v_659),3-proj-3-tuple(v_658),3-proj-3-tuple(v_656))) in
        {139}let v_661: bitstring = catch-fail(aeadunpack(v_660)) in
        {140}let v_662: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {141}let v_663: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_659))) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then cipherstatepack(1-proj-2-tuple(v_662),increment_nonce(2-proj-2-tuple(v_659))) else fail-any) else fail-any)) in
        {142}let v_664: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_656)) && (success?(3-proj-3-tuple(v_658)) && success?(1-proj-3-tuple(v_658)))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if not-caught-fail(v_663) then (v_663,3-proj-3-tuple(v_661),1-proj-3-tuple(v_661)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {143}let v_665: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) in
        {144}let v_666: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_656)) && success?(symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then symmetricstatepack(1-proj-3-tuple(v_665),2-proj-3-tuple(v_665),hash(3-proj-3-tuple(v_665),3-proj-3-tuple(v_656))) else fail-any) else fail-any)) in
        {145}let v_667: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_656)) && success?(1-proj-7-tuple(v_655))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_666) then (v_666,2-proj-3-tuple(v_664),3-proj-3-tuple(v_664)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {146}let v_668: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_667),2-proj-7-tuple(v_655),3-proj-7-tuple(v_655),4-proj-7-tuple(v_655),5-proj-7-tuple(v_655),6-proj-7-tuple(v_655),7-proj-7-tuple(v_655))) in
        {147}let (hs_669: handshakestate,plaintext_d: bitstring,valid_670: bool) = (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-7-tuple(v_655))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_657) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (v_657 && 3-proj-3-tuple(v_667)) then (if not-caught-fail(v_668) then (v_668,2-proj-3-tuple(v_667),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {148}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {149}event RecvEnd(valid_670)
    ) | (
        {151}event LeakS(phase0,alice);
        {152}out(pub, key_s(alice))
    ) | (
        {153}phase 1;
        {154}event LeakS(phase1,alice);
        {155}out(pub, key_s(alice))
    )
) | (
    {156}let s_671: keypair = keypairpack(empty,empty) in
    {157}out(pub, getpublickey(s_671));
    (
        {158}let e_672: keypair = keypairpack(empty,empty) in
        {159}let v_673: key = catch-fail(dhexp(key_s(charlie),g)) in
        {160}let rs_674: key = getpublickey((if not-caught-fail(v_673) then keypairpack(v_673,key_s(charlie)) else fail-any)) in
        {161}let re_675: key = empty in
        {162}let v_676: bitstring = catch-fail(hash(somename,empty)) in
        {163}let v_677: key = catch-fail(v_676) in
        {164}let v_678: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {165}let v_679: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then symmetricstatepack(v_678,v_677,v_676) else fail-any) else fail-any) else fail-any))) in
        {166}let v_680: symmetricstate = catch-fail((if success?((if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then symmetricstatepack(v_678,v_677,v_676) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_679),hash(3-proj-3-tuple(v_679),empty)) else fail-any) else fail-any)) in
        {167}let v_681: bitstring = catch-fail(symmetricstateunpack(v_680)) in
        {168}let v_682: symmetricstate = catch-fail((if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),rs_674)) else fail-any)) in
        {169}let hs_683: handshakestate = (if not-caught-fail(v_680) then (if not-caught-fail(v_682) then handshakestatepack(v_682,s_671,e_672,rs_674,re_675,empty,true) else fail-any) else fail-any) in
        {170}insert statestore(alice,charlie,sid,statepack_a(hs_683))
    ) | (
        {218}get statestore(=alice,=charlie,=sid,statepack_a(hs_684: handshakestate)) in
        {171}let v_685: bitstring = catch-fail(handshakestateunpack(hs_684)) in
        {172}let v_686: bitstring = catch-fail((empty,empty,empty)) in
        {173}let v_687: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {174}let v_688: keypair = catch-fail((if not-caught-fail(v_687) then keypairpack(v_687,key_e(alice,charlie,sid)) else fail-any)) in
        {175}let v_689: bitstring = catch-fail(getpublickey(v_688)) in
        {176}let v_690: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_685))) in
        {177}let v_691: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_685)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then symmetricstatepack(1-proj-3-tuple(v_690),2-proj-3-tuple(v_690),hash(3-proj-3-tuple(v_690),v_689)) else fail-any) else fail-any)) in
        {178}let v_692: bitstring = catch-fail(keypairunpack(v_688)) in
        {179}let v_693: bitstring = catch-fail(symmetricstateunpack(v_691)) in
        {180}let v_694: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_693),(if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {181}let v_695: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_693),(if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {182}let v_696: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_693),(if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {183}let v_697: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),4-proj-7-tuple(v_685)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_693))) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_694,v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_698: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),4-proj-7-tuple(v_685)) else fail-any) else fail-any)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_697)) then cipherstatepack(2-proj-3-tuple(v_697),minnonce) else fail-any),1-proj-3-tuple(v_697),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any)) in
        {185}let v_699: key = catch-fail(dhexp(key_s(alice),g)) in
        {186}let v_700: keypair = catch-fail((if not-caught-fail(v_699) then keypairpack(v_699,key_s(alice)) else fail-any)) in
        {187}let v_701: bitstring = catch-fail(symmetricstateunpack(v_698)) in
        {188}let v_702: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_701))) in
        {189}let v_703: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_702),2-proj-2-tuple(v_702),3-proj-3-tuple(v_701),getpublickey(v_700))) in
        {190}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_701))) in
        {191}let v_705: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_702))) && success?(1-proj-3-tuple(v_701))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then cipherstatepack(1-proj-2-tuple(v_704),increment_nonce(2-proj-2-tuple(v_702))) else fail-any) else fail-any)) in
        {192}let v_706: bitstring = catch-fail((if (success?(getpublickey(v_700)) && (success?(3-proj-3-tuple(v_701)) && success?(1-proj-3-tuple(v_701)))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_705) then (v_705,v_703) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_707: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_706),2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)))) in
        {194}let v_708: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_706)) && success?(symmetricstatepack(1-proj-2-tuple(v_706),2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),2-proj-2-tuple(v_706))) else fail-any) else fail-any)) in
        {195}let v_709: bitstring = catch-fail((if success?(getpublickey(v_700)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,2-proj-2-tuple(v_706)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let v_710: bitstring = catch-fail(keypairunpack(v_700)) in
        {197}let v_711: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_709))) in
        {198}let v_712: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_711),(if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {199}let v_713: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_711),(if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {200}let v_714: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_711),(if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {201}let v_715: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),4-proj-7-tuple(v_685)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_711))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (if not-caught-fail(v_714) then (v_712,v_713,v_714) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_716: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_685)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),4-proj-7-tuple(v_685)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_709))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_715)) then cipherstatepack(2-proj-3-tuple(v_715),minnonce) else fail-any),1-proj-3-tuple(v_715),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any)) in
        {203}let v_717: bitstring = catch-fail(symmetricstateunpack(v_716)) in
        {204}let v_718: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_717))) in
        {205}let v_719: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_718),2-proj-2-tuple(v_718),3-proj-3-tuple(v_717),msg_a(alice,charlie,sid))) in
        {206}let v_720: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_717))) in
        {207}let v_721: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_718))) && success?(1-proj-3-tuple(v_717))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then cipherstatepack(1-proj-2-tuple(v_720),increment_nonce(2-proj-2-tuple(v_718))) else fail-any) else fail-any)) in
        {208}let v_722: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_717)) && success?(1-proj-3-tuple(v_717))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_721) then (v_721,v_719) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_723: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_722),2-proj-3-tuple(v_717),3-proj-3-tuple(v_717)))) in
        {210}let v_724: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_722)) && success?(symmetricstatepack(1-proj-2-tuple(v_722),2-proj-3-tuple(v_717),3-proj-3-tuple(v_717)))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then symmetricstatepack(1-proj-3-tuple(v_723),2-proj-3-tuple(v_723),hash(3-proj-3-tuple(v_723),2-proj-2-tuple(v_722))) else fail-any) else fail-any)) in
        {211}let v_725: bitstring = catch-fail((if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then (if not-caught-fail(v_724) then (v_724,2-proj-2-tuple(v_722)) else fail-any) else fail-any) else fail-any)) in
        {212}let v_726: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_725),v_700,v_688,4-proj-7-tuple(v_685),5-proj-7-tuple(v_685),6-proj-7-tuple(v_685),7-proj-7-tuple(v_685))) in
        {213}let v_727: bitstring = catch-fail(concat3(v_689,2-proj-2-tuple(v_709),2-proj-2-tuple(v_725))) in
        {214}let (hs_728: handshakestate,message_a_729: bitstring) = (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-7-tuple(v_685))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (if not-caught-fail(v_691) then (if not-caught-fail(v_698) then (if not-caught-fail(v_700) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then (if not-caught-fail(v_716) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-2-tuple(v_725))))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {215}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {216}insert statestore(alice,charlie,sid,statepack_b(hs_728));
        {217}out(pub, message_a_729)
    ) | (
        {262}get statestore(=alice,=charlie,=sid,statepack_b(hs_730: handshakestate)) in
        {219}in(pub, message_b_731: bitstring);
        {220}let v_732: bitstring = catch-fail(handshakestateunpack(hs_730)) in
        {221}let v_733: bitstring = catch-fail(deconcat3(message_b_731)) in
        {222}let v_734: bool = catch-fail(true) in
        {223}let v_735: key = catch-fail(1-proj-3-tuple(v_733)) in
        {224}let v_736: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_732))) in
        {225}let v_737: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_732)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),v_735)) else fail-any) else fail-any)) in
        {226}let v_738: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_732))) in
        {227}let v_739: bitstring = catch-fail(symmetricstateunpack(v_737)) in
        {228}let v_740: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_739),(if success?(3-proj-7-tuple(v_732)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),v_735) else fail-any) else fail-any))) in
        {229}let v_741: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_739),(if success?(3-proj-7-tuple(v_732)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),v_735) else fail-any) else fail-any))) in
        {230}let v_742: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_739),(if success?(3-proj-7-tuple(v_732)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),v_735) else fail-any) else fail-any))) in
        {231}let v_743: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_732)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),v_735) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_739))) then (if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then (v_740,v_741,v_742) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_744: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_732)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then dhexp(2-proj-2-tuple(v_738),v_735) else fail-any) else fail-any)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_743)) then cipherstatepack(2-proj-3-tuple(v_743),minnonce) else fail-any),1-proj-3-tuple(v_743),3-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any)) in
        {233}let v_745: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_732))) in
        {234}let v_746: bitstring = catch-fail(symmetricstateunpack(v_744)) in
        {235}let v_747: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_746),(if success?(2-proj-7-tuple(v_732)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),v_735) else fail-any) else fail-any))) in
        {236}let v_748: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_746),(if success?(2-proj-7-tuple(v_732)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),v_735) else fail-any) else fail-any))) in
        {237}let v_749: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_746),(if success?(2-proj-7-tuple(v_732)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),v_735) else fail-any) else fail-any))) in
        {238}let v_750: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_732)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),v_735) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_746))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then (v_747,v_748,v_749) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_751: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_732)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then dhexp(2-proj-2-tuple(v_745),v_735) else fail-any) else fail-any)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_750)) then cipherstatepack(2-proj-3-tuple(v_750),minnonce) else fail-any),1-proj-3-tuple(v_750),3-proj-3-tuple(v_746)) else fail-any) else fail-any) else fail-any)) in
        {240}let v_752: bitstring = catch-fail(symmetricstateunpack(v_751)) in
        {241}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {242}let v_754: aead = catch-fail(decrypt(1-proj-2-tuple(v_753),2-proj-2-tuple(v_753),3-proj-3-tuple(v_752),3-proj-3-tuple(v_733))) in
        {243}let v_755: bitstring = catch-fail(aeadunpack(v_754)) in
        {244}let v_756: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {245}let v_757: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_753))) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then cipherstatepack(1-proj-2-tuple(v_756),increment_nonce(2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {246}let v_758: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_733)) && (success?(3-proj-3-tuple(v_752)) && success?(1-proj-3-tuple(v_752)))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_754) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if not-caught-fail(v_757) then (v_757,3-proj-3-tuple(v_755),1-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_759: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) in
        {248}let v_760: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_733)) && success?(symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack(1-proj-3-tuple(v_759),2-proj-3-tuple(v_759),hash(3-proj-3-tuple(v_759),3-proj-3-tuple(v_733))) else fail-any) else fail-any)) in
        {249}let v_761: bitstring = catch-fail((if success?(3-proj-3-tuple(v_733)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if not-caught-fail(v_760) then (v_760,2-proj-3-tuple(v_758),3-proj-3-tuple(v_758)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_762: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_761),2-proj-7-tuple(v_732),3-proj-7-tuple(v_732),4-proj-7-tuple(v_732),v_735,6-proj-7-tuple(v_732),7-proj-7-tuple(v_732))) in
        {251}let v_763: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_761))) in
        {252}let v_764: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_763),zero)) in
        {253}let v_765: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_763),zero)) in
        {254}let v_766: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_763),zero)) in
        {255}let v_767: bitstring = catch-fail((if success?(2-proj-3-tuple(v_763)) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (if not-caught-fail(v_766) then (v_764,v_765,v_766) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_768: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_767)) then cipherstatepack(1-proj-3-tuple(v_767),minnonce) else fail-any)) in
        {257}let v_769: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_767)) then cipherstatepack(2-proj-3-tuple(v_767),minnonce) else fail-any)) in
        {258}let v_770: bitstring = catch-fail((if success?(1-proj-3-tuple(v_761)) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_769) then (1-proj-3-tuple(v_761),v_768,v_769) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let (hs_771: handshakestate,plaintext_b_772: bitstring,valid_773: bool,cs1_774: cipherstate,cs2_775: cipherstate) = (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-7-tuple(v_732))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (if not-caught-fail(v_737) then (if not-caught-fail(v_744) then (if not-caught-fail(v_751) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (v_734 && 3-proj-3-tuple(v_761)) then (if not-caught-fail(v_762) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (v_762,2-proj-3-tuple(v_761),true,2-proj-3-tuple(v_770),3-proj-3-tuple(v_770)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {260}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_772);
        {261}insert statestore(alice,charlie,sid,statepack_c(hs_771,cs1_774,cs2_775))
    ) | (
        {263}!
        {282}get statestore(=alice,=charlie,=sid,statepack_c(hs_776: handshakestate,cs1_777: cipherstate,cs2_778: cipherstate)) in
        {264}let hs_779: handshakestate = handshakestatesetcs(hs_776,cs1_777) in
        {265}let v_780: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {266}let v_781: bitstring = catch-fail((empty,empty,empty)) in
        {267}let v_782: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_780))) in
        {268}let v_783: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_782))) in
        {269}let v_784: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_783),2-proj-2-tuple(v_783),3-proj-3-tuple(v_782),msg_c(alice,charlie,sid))) in
        {270}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_782))) in
        {271}let v_786: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_783))) && success?(1-proj-3-tuple(v_782))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then cipherstatepack(1-proj-2-tuple(v_785),increment_nonce(2-proj-2-tuple(v_783))) else fail-any) else fail-any)) in
        {272}let v_787: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-3-tuple(v_782))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_786) then (v_786,v_784) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_788: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_787),2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)))) in
        {274}let v_789: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_787)) && success?(symmetricstatepack(1-proj-2-tuple(v_787),2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack(1-proj-3-tuple(v_788),2-proj-3-tuple(v_788),hash(3-proj-3-tuple(v_788),2-proj-2-tuple(v_787))) else fail-any) else fail-any)) in
        {275}let v_790: bitstring = catch-fail((if success?(1-proj-7-tuple(v_780)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,2-proj-2-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {276}let v_791: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_790),2-proj-7-tuple(v_780),3-proj-7-tuple(v_780),4-proj-7-tuple(v_780),5-proj-7-tuple(v_780),6-proj-7-tuple(v_780),7-proj-7-tuple(v_780))) in
        {277}let v_792: bitstring = catch-fail(concat3(1-proj-3-tuple(v_781),2-proj-3-tuple(v_781),2-proj-2-tuple(v_790))) in
        {278}let (hs_793: handshakestate,message_c_794: bitstring) = (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-7-tuple(v_780))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (v_791,v_792) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {279}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {280}insert statestore(alice,charlie,sid,statepack_d(hs_793,handshakestategetcs(hs_793),cs2_778));
        {281}out(pub, message_c_794)
    ) | (
        {283}!
        {303}get statestore(=alice,=charlie,=sid,statepack_d(hs_795: handshakestate,cs1_796: cipherstate,cs2_797: cipherstate)) in
        {284}let hs_798: handshakestate = handshakestatesetcs(hs_795,cs2_797) in
        {285}in(pub, message_d_799: bitstring);
        {286}let v_800: bitstring = catch-fail(handshakestateunpack(hs_798)) in
        {287}let v_801: bitstring = catch-fail(deconcat3(message_d_799)) in
        {288}let v_802: bool = catch-fail(true) in
        {289}let v_803: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_800))) in
        {290}let v_804: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {291}let v_805: aead = catch-fail(decrypt(1-proj-2-tuple(v_804),2-proj-2-tuple(v_804),3-proj-3-tuple(v_803),3-proj-3-tuple(v_801))) in
        {292}let v_806: bitstring = catch-fail(aeadunpack(v_805)) in
        {293}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {294}let v_808: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_804))) && success?(1-proj-3-tuple(v_803))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then cipherstatepack(1-proj-2-tuple(v_807),increment_nonce(2-proj-2-tuple(v_804))) else fail-any) else fail-any)) in
        {295}let v_809: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && (success?(3-proj-3-tuple(v_803)) && success?(1-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then (if not-caught-fail(v_805) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_808) then (v_808,3-proj-3-tuple(v_806),1-proj-3-tuple(v_806)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_810: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) in
        {297}let v_811: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),3-proj-3-tuple(v_801))) else fail-any) else fail-any)) in
        {298}let v_812: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(1-proj-7-tuple(v_800))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {299}let v_813: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_812),2-proj-7-tuple(v_800),3-proj-7-tuple(v_800),4-proj-7-tuple(v_800),5-proj-7-tuple(v_800),6-proj-7-tuple(v_800),7-proj-7-tuple(v_800))) in
        {300}let (hs_814: handshakestate,plaintext_d_815: bitstring,valid_816: bool) = (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-7-tuple(v_800))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if not-caught-fail(v_802) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (v_802 && 3-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (v_813,2-proj-3-tuple(v_812),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {301}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_815);
        {302}event RecvEnd(valid_816)
    ) | (
        {304}event LeakS(phase0,alice);
        {305}out(pub, key_s(alice))
    ) | (
        {306}phase 1;
        {307}event LeakS(phase1,alice);
        {308}out(pub, key_s(alice))
    )
) | (
    {309}let v_817: key = catch-fail(dhexp(key_s(bob),g)) in
    {310}let s_818: keypair = (if not-caught-fail(v_817) then keypairpack(v_817,key_s(bob)) else fail-any) in
    {311}out(pub, getpublickey(s_818));
    (
        {312}let e_819: keypair = keypairpack(empty,empty) in
        {313}let rs_820: key = empty in
        {314}let re_821: key = empty in
        {315}let v_822: bitstring = catch-fail(hash(somename,empty)) in
        {316}let v_823: key = catch-fail(v_822) in
        {317}let v_824: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {318}let v_825: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then symmetricstatepack(v_824,v_823,v_822) else fail-any) else fail-any) else fail-any))) in
        {319}let v_826: symmetricstate = catch-fail((if success?((if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then symmetricstatepack(v_824,v_823,v_822) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then symmetricstatepack(1-proj-3-tuple(v_825),2-proj-3-tuple(v_825),hash(3-proj-3-tuple(v_825),empty)) else fail-any) else fail-any)) in
        {320}let v_827: bitstring = catch-fail(symmetricstateunpack(v_826)) in
        {321}let v_828: symmetricstate = catch-fail((if success?(getpublickey(s_818)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),getpublickey(s_818))) else fail-any) else fail-any)) in
        {322}let hs_829: handshakestate = (if not-caught-fail(v_826) then (if not-caught-fail(v_828) then handshakestatepack(v_828,s_818,e_819,rs_820,re_821,empty,false) else fail-any) else fail-any) in
        {323}insert statestore(bob,alice,sid,statepack_a(hs_829))
    ) | (
        {371}get statestore(=bob,=alice,=sid,statepack_a(hs_830: handshakestate)) in
        {324}in(pub, message_a_831: bitstring);
        {325}let v_832: bitstring = catch-fail(handshakestateunpack(hs_830)) in
        {326}let v_833: bitstring = catch-fail(deconcat3(message_a_831)) in
        {327}let v_834: bool = catch-fail(true) in
        {328}let v_835: key = catch-fail(1-proj-3-tuple(v_833)) in
        {329}let v_836: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_832))) in
        {330}let v_837: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_832)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),v_835)) else fail-any) else fail-any)) in
        {331}let v_838: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_832))) in
        {332}let v_839: bitstring = catch-fail(symmetricstateunpack(v_837)) in
        {333}let v_840: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_839),(if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then dhexp(2-proj-2-tuple(v_838),v_835) else fail-any) else fail-any))) in
        {334}let v_841: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_839),(if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then dhexp(2-proj-2-tuple(v_838),v_835) else fail-any) else fail-any))) in
        {335}let v_842: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_839),(if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then dhexp(2-proj-2-tuple(v_838),v_835) else fail-any) else fail-any))) in
        {336}let v_843: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then dhexp(2-proj-2-tuple(v_838),v_835) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_839))) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (v_840,v_841,v_842) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_844: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then dhexp(2-proj-2-tuple(v_838),v_835) else fail-any) else fail-any)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_843)) then cipherstatepack(2-proj-3-tuple(v_843),minnonce) else fail-any),1-proj-3-tuple(v_843),3-proj-3-tuple(v_839)) else fail-any) else fail-any) else fail-any)) in
        {338}let v_845: bitstring = catch-fail(symmetricstateunpack(v_844)) in
        {339}let v_846: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {340}let v_847: aead = catch-fail(decrypt(1-proj-2-tuple(v_846),2-proj-2-tuple(v_846),3-proj-3-tuple(v_845),2-proj-3-tuple(v_833))) in
        {341}let v_848: bitstring = catch-fail(aeadunpack(v_847)) in
        {342}let v_849: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {343}let v_850: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_846))) && success?(1-proj-3-tuple(v_845))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then cipherstatepack(1-proj-2-tuple(v_849),increment_nonce(2-proj-2-tuple(v_846))) else fail-any) else fail-any)) in
        {344}let v_851: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_833)) && (success?(3-proj-3-tuple(v_845)) && success?(1-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_847) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if not-caught-fail(v_850) then (v_850,3-proj-3-tuple(v_848),1-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_852: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) in
        {346}let v_853: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_833)) && success?(symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_852),hash(3-proj-3-tuple(v_852),2-proj-3-tuple(v_833))) else fail-any) else fail-any)) in
        {347}let v_854: bitstring = catch-fail((if success?(2-proj-3-tuple(v_833)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_853) then (v_853,2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_855: key = catch-fail(2-proj-3-tuple(v_854)) in
        {349}let v_856: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_832))) in
        {350}let v_857: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_854))) in
        {351}let v_858: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_857),(if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),v_855) else fail-any) else fail-any))) in
        {352}let v_859: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_857),(if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),v_855) else fail-any) else fail-any))) in
        {353}let v_860: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_857),(if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),v_855) else fail-any) else fail-any))) in
        {354}let v_861: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),v_855) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_857))) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (v_858,v_859,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_862: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_832)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),v_855) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_854))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_861)) then cipherstatepack(2-proj-3-tuple(v_861),minnonce) else fail-any),1-proj-3-tuple(v_861),3-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any)) in
        {356}let v_863: bitstring = catch-fail(symmetricstateunpack(v_862)) in
        {357}let v_864: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {358}let v_865: aead = catch-fail(decrypt(1-proj-2-tuple(v_864),2-proj-2-tuple(v_864),3-proj-3-tuple(v_863),3-proj-3-tuple(v_833))) in
        {359}let v_866: bitstring = catch-fail(aeadunpack(v_865)) in
        {360}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {361}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_864))) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_864))) else fail-any) else fail-any)) in
        {362}let v_869: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_833)) && (success?(3-proj-3-tuple(v_863)) && success?(1-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then (if not-caught-fail(v_865) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if not-caught-fail(v_868) then (v_868,3-proj-3-tuple(v_866),1-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) in
        {364}let v_871: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_833)) && success?(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),3-proj-3-tuple(v_833))) else fail-any) else fail-any)) in
        {365}let v_872: bitstring = catch-fail((if success?(3-proj-3-tuple(v_833)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_873: key = catch-fail(dhexp(key_s(alice),g)) in
        {367}let v_874: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_872),2-proj-7-tuple(v_832),3-proj-7-tuple(v_832),v_855,v_835,6-proj-7-tuple(v_832),7-proj-7-tuple(v_832))) in
        {368}let (hs_875: handshakestate,plaintext_a: bitstring,valid_876: bool) = (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-7-tuple(v_832))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (if not-caught-fail(v_837) then (if not-caught-fail(v_844) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_855) then (if not-caught-fail(v_862) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if ((3-proj-3-tuple(v_854) && 3-proj-3-tuple(v_872)) && (v_855 = getpublickey((if not-caught-fail(v_873) then keypairpack(v_873,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_874) then (v_874,2-proj-3-tuple(v_872),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {369}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {370}insert statestore(bob,alice,sid,statepack_b(hs_875))
    ) | (
        {416}get statestore(=bob,=alice,=sid,statepack_b(hs_877: handshakestate)) in
        {372}let v_878: bitstring = catch-fail(handshakestateunpack(hs_877)) in
        {373}let v_879: bitstring = catch-fail((empty,empty,empty)) in
        {374}let v_880: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {375}let v_881: keypair = catch-fail((if not-caught-fail(v_880) then keypairpack(v_880,key_e(bob,alice,sid)) else fail-any)) in
        {376}let v_882: bitstring = catch-fail(getpublickey(v_881)) in
        {377}let v_883: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_878))) in
        {378}let v_884: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_878)) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),v_882)) else fail-any) else fail-any)) in
        {379}let v_885: bitstring = catch-fail(keypairunpack(v_881)) in
        {380}let v_886: bitstring = catch-fail(symmetricstateunpack(v_884)) in
        {381}let v_887: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_886),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {382}let v_888: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_886),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {383}let v_889: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_886),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {384}let v_890: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),5-proj-7-tuple(v_878)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_886))) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (v_887,v_888,v_889) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {385}let v_891: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),5-proj-7-tuple(v_878)) else fail-any) else fail-any)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_890)) then cipherstatepack(2-proj-3-tuple(v_890),minnonce) else fail-any),1-proj-3-tuple(v_890),3-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any)) in
        {386}let v_892: bitstring = catch-fail(keypairunpack(v_881)) in
        {387}let v_893: bitstring = catch-fail(symmetricstateunpack(v_891)) in
        {388}let v_894: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_893),(if success?(4-proj-7-tuple(v_878)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),4-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {389}let v_895: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_893),(if success?(4-proj-7-tuple(v_878)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),4-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {390}let v_896: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_893),(if success?(4-proj-7-tuple(v_878)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),4-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {391}let v_897: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_878)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),4-proj-7-tuple(v_878)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_893))) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (v_894,v_895,v_896) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {392}let v_898: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_878)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),4-proj-7-tuple(v_878)) else fail-any) else fail-any)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_897)) then cipherstatepack(2-proj-3-tuple(v_897),minnonce) else fail-any),1-proj-3-tuple(v_897),3-proj-3-tuple(v_893)) else fail-any) else fail-any) else fail-any)) in
        {393}let v_899: bitstring = catch-fail(symmetricstateunpack(v_898)) in
        {394}let v_900: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_899))) in
        {395}let v_901: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_900),2-proj-2-tuple(v_900),3-proj-3-tuple(v_899),msg_b(bob,alice,sid))) in
        {396}let v_902: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_899))) in
        {397}let v_903: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_900))) && success?(1-proj-3-tuple(v_899))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then cipherstatepack(1-proj-2-tuple(v_902),increment_nonce(2-proj-2-tuple(v_900))) else fail-any) else fail-any)) in
        {398}let v_904: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_899)) && success?(1-proj-3-tuple(v_899))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_901) then (if not-caught-fail(v_903) then (v_903,v_901) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_905: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_904),2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)))) in
        {400}let v_906: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_904)) && success?(symmetricstatepack(1-proj-2-tuple(v_904),2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then symmetricstatepack(1-proj-3-tuple(v_905),2-proj-3-tuple(v_905),hash(3-proj-3-tuple(v_905),2-proj-2-tuple(v_904))) else fail-any) else fail-any)) in
        {401}let v_907: bitstring = catch-fail((if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then (if not-caught-fail(v_906) then (v_906,2-proj-2-tuple(v_904)) else fail-any) else fail-any) else fail-any)) in
        {402}let v_908: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_907),2-proj-7-tuple(v_878),v_881,4-proj-7-tuple(v_878),5-proj-7-tuple(v_878),6-proj-7-tuple(v_878),7-proj-7-tuple(v_878))) in
        {403}let v_909: bitstring = catch-fail(concat3(v_882,2-proj-3-tuple(v_879),2-proj-2-tuple(v_907))) in
        {404}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_907))) in
        {405}let v_911: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_910),zero)) in
        {406}let v_912: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_910),zero)) in
        {407}let v_913: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_910),zero)) in
        {408}let v_914: bitstring = catch-fail((if success?(2-proj-3-tuple(v_910)) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (v_911,v_912,v_913) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_915: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_914)) then cipherstatepack(1-proj-3-tuple(v_914),minnonce) else fail-any)) in
        {410}let v_916: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_914)) then cipherstatepack(2-proj-3-tuple(v_914),minnonce) else fail-any)) in
        {411}let v_917: bitstring = catch-fail((if success?(1-proj-2-tuple(v_907)) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_916) then (1-proj-2-tuple(v_907),v_915,v_916) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {412}let (hs_918: handshakestate,message_b_919: bitstring,cs1_920: cipherstate,cs2_921: cipherstate) = (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-7-tuple(v_878))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_884) then (if not-caught-fail(v_891) then (if not-caught-fail(v_898) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (v_908,v_909,2-proj-3-tuple(v_917),3-proj-3-tuple(v_917)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {413}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {414}insert statestore(bob,alice,sid,statepack_c(hs_918,cs1_920,cs2_921));
        {415}out(pub, message_b_919)
    ) | (
        {417}!
        {437}get statestore(=bob,=alice,=sid,statepack_c(hs_922: handshakestate,cs1_923: cipherstate,cs2_924: cipherstate)) in
        {418}let hs_925: handshakestate = handshakestatesetcs(hs_922,cs1_923) in
        {419}in(pub, message_c_926: bitstring);
        {420}let v_927: bitstring = catch-fail(handshakestateunpack(hs_925)) in
        {421}let v_928: bitstring = catch-fail(deconcat3(message_c_926)) in
        {422}let v_929: bool = catch-fail(true) in
        {423}let v_930: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_927))) in
        {424}let v_931: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {425}let v_932: aead = catch-fail(decrypt(1-proj-2-tuple(v_931),2-proj-2-tuple(v_931),3-proj-3-tuple(v_930),3-proj-3-tuple(v_928))) in
        {426}let v_933: bitstring = catch-fail(aeadunpack(v_932)) in
        {427}let v_934: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {428}let v_935: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_931))) && success?(1-proj-3-tuple(v_930))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then cipherstatepack(1-proj-2-tuple(v_934),increment_nonce(2-proj-2-tuple(v_931))) else fail-any) else fail-any)) in
        {429}let v_936: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_928)) && (success?(3-proj-3-tuple(v_930)) && success?(1-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then (if not-caught-fail(v_932) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if not-caught-fail(v_935) then (v_935,3-proj-3-tuple(v_933),1-proj-3-tuple(v_933)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {430}let v_937: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) in
        {431}let v_938: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_928)) && success?(symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then symmetricstatepack(1-proj-3-tuple(v_937),2-proj-3-tuple(v_937),hash(3-proj-3-tuple(v_937),3-proj-3-tuple(v_928))) else fail-any) else fail-any)) in
        {432}let v_939: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_928)) && success?(1-proj-7-tuple(v_927))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_938) then (v_938,2-proj-3-tuple(v_936),3-proj-3-tuple(v_936)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {433}let v_940: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_939),2-proj-7-tuple(v_927),3-proj-7-tuple(v_927),4-proj-7-tuple(v_927),5-proj-7-tuple(v_927),6-proj-7-tuple(v_927),7-proj-7-tuple(v_927))) in
        {434}let (hs_941: handshakestate,plaintext_c: bitstring,valid_942: bool) = (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-7-tuple(v_927))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if not-caught-fail(v_929) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if (v_929 && 3-proj-3-tuple(v_939)) then (if not-caught-fail(v_940) then (v_940,2-proj-3-tuple(v_939),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {435}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {436}insert statestore(bob,alice,sid,statepack_d(hs_941,handshakestategetcs(hs_941),cs2_924))
    ) | (
        {438}!
        {456}get statestore(=bob,=alice,=sid,statepack_d(hs_943: handshakestate,cs1_944: cipherstate,cs2_945: cipherstate)) in
        {439}let hs_946: handshakestate = handshakestatesetcs(hs_943,cs2_945) in
        {440}let v_947: bitstring = catch-fail(handshakestateunpack(hs_946)) in
        {441}let v_948: bitstring = catch-fail((empty,empty,empty)) in
        {442}let v_949: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_947))) in
        {443}let v_950: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_949))) in
        {444}let v_951: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_950),2-proj-2-tuple(v_950),3-proj-3-tuple(v_949),msg_d(bob,alice,sid))) in
        {445}let v_952: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_949))) in
        {446}let v_953: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_950))) && success?(1-proj-3-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then cipherstatepack(1-proj-2-tuple(v_952),increment_nonce(2-proj-2-tuple(v_950))) else fail-any) else fail-any)) in
        {447}let v_954: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_949)) && success?(1-proj-3-tuple(v_949))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_953) then (v_953,v_951) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let v_955: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_954),2-proj-3-tuple(v_949),3-proj-3-tuple(v_949)))) in
        {449}let v_956: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_954)) && success?(symmetricstatepack(1-proj-2-tuple(v_954),2-proj-3-tuple(v_949),3-proj-3-tuple(v_949)))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_955),hash(3-proj-3-tuple(v_955),2-proj-2-tuple(v_954))) else fail-any) else fail-any)) in
        {450}let v_957: bitstring = catch-fail((if success?(1-proj-7-tuple(v_947)) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then (if not-caught-fail(v_956) then (v_956,2-proj-2-tuple(v_954)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {451}let v_958: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_957),2-proj-7-tuple(v_947),3-proj-7-tuple(v_947),4-proj-7-tuple(v_947),5-proj-7-tuple(v_947),6-proj-7-tuple(v_947),7-proj-7-tuple(v_947))) in
        {452}let v_959: bitstring = catch-fail(concat3(1-proj-3-tuple(v_948),2-proj-3-tuple(v_948),2-proj-2-tuple(v_957))) in
        {453}let (hs_960: handshakestate,message_d_961: bitstring) = (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-7-tuple(v_947))))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (v_958,v_959) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {454}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {455}out(pub, message_d_961)
    ) | (
        {457}event LeakS(phase0,bob);
        {458}out(pub, key_s(bob))
    ) | (
        {459}phase 1;
        {460}event LeakS(phase1,bob);
        {461}out(pub, key_s(bob))
    )
) | (
    {462}let v_962: key = catch-fail(dhexp(key_s(bob),g)) in
    {463}let s_963: keypair = (if not-caught-fail(v_962) then keypairpack(v_962,key_s(bob)) else fail-any) in
    {464}out(pub, getpublickey(s_963));
    (
        {465}let e_964: keypair = keypairpack(empty,empty) in
        {466}let rs_965: key = empty in
        {467}let re_966: key = empty in
        {468}let v_967: bitstring = catch-fail(hash(somename,empty)) in
        {469}let v_968: key = catch-fail(v_967) in
        {470}let v_969: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {471}let v_970: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (if not-caught-fail(v_969) then symmetricstatepack(v_969,v_968,v_967) else fail-any) else fail-any) else fail-any))) in
        {472}let v_971: symmetricstate = catch-fail((if success?((if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (if not-caught-fail(v_969) then symmetricstatepack(v_969,v_968,v_967) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_970),hash(3-proj-3-tuple(v_970),empty)) else fail-any) else fail-any)) in
        {473}let v_972: bitstring = catch-fail(symmetricstateunpack(v_971)) in
        {474}let v_973: symmetricstate = catch-fail((if success?(getpublickey(s_963)) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_972),hash(3-proj-3-tuple(v_972),getpublickey(s_963))) else fail-any) else fail-any)) in
        {475}let hs_974: handshakestate = (if not-caught-fail(v_971) then (if not-caught-fail(v_973) then handshakestatepack(v_973,s_963,e_964,rs_965,re_966,empty,false) else fail-any) else fail-any) in
        {476}insert statestore(bob,charlie,sid,statepack_a(hs_974))
    ) | (
        {524}get statestore(=bob,=charlie,=sid,statepack_a(hs_975: handshakestate)) in
        {477}in(pub, message_a_976: bitstring);
        {478}let v_977: bitstring = catch-fail(handshakestateunpack(hs_975)) in
        {479}let v_978: bitstring = catch-fail(deconcat3(message_a_976)) in
        {480}let v_979: bool = catch-fail(true) in
        {481}let v_980: key = catch-fail(1-proj-3-tuple(v_978)) in
        {482}let v_981: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_977))) in
        {483}let v_982: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_977)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_981),hash(3-proj-3-tuple(v_981),v_980)) else fail-any) else fail-any)) in
        {484}let v_983: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_977))) in
        {485}let v_984: bitstring = catch-fail(symmetricstateunpack(v_982)) in
        {486}let v_985: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_984),(if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),v_980) else fail-any) else fail-any))) in
        {487}let v_986: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_984),(if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),v_980) else fail-any) else fail-any))) in
        {488}let v_987: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_984),(if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),v_980) else fail-any) else fail-any))) in
        {489}let v_988: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),v_980) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_984))) then (if not-caught-fail(v_985) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (v_985,v_986,v_987) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {490}let v_989: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then dhexp(2-proj-2-tuple(v_983),v_980) else fail-any) else fail-any)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_988)) then cipherstatepack(2-proj-3-tuple(v_988),minnonce) else fail-any),1-proj-3-tuple(v_988),3-proj-3-tuple(v_984)) else fail-any) else fail-any) else fail-any)) in
        {491}let v_990: bitstring = catch-fail(symmetricstateunpack(v_989)) in
        {492}let v_991: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {493}let v_992: aead = catch-fail(decrypt(1-proj-2-tuple(v_991),2-proj-2-tuple(v_991),3-proj-3-tuple(v_990),2-proj-3-tuple(v_978))) in
        {494}let v_993: bitstring = catch-fail(aeadunpack(v_992)) in
        {495}let v_994: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_990))) in
        {496}let v_995: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_991))) && success?(1-proj-3-tuple(v_990))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then cipherstatepack(1-proj-2-tuple(v_994),increment_nonce(2-proj-2-tuple(v_991))) else fail-any) else fail-any)) in
        {497}let v_996: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_978)) && (success?(3-proj-3-tuple(v_990)) && success?(1-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_992) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if not-caught-fail(v_995) then (v_995,3-proj-3-tuple(v_993),1-proj-3-tuple(v_993)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_997: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) in
        {499}let v_998: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_978)) && success?(symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_990),3-proj-3-tuple(v_990)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),2-proj-3-tuple(v_978))) else fail-any) else fail-any)) in
        {500}let v_999: bitstring = catch-fail((if success?(2-proj-3-tuple(v_978)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_998) then (v_998,2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_1000: key = catch-fail(2-proj-3-tuple(v_999)) in
        {502}let v_1001: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_977))) in
        {503}let v_1002: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_999))) in
        {504}let v_1003: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1002),(if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),v_1000) else fail-any) else fail-any))) in
        {505}let v_1004: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1002),(if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),v_1000) else fail-any) else fail-any))) in
        {506}let v_1005: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1002),(if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),v_1000) else fail-any) else fail-any))) in
        {507}let v_1006: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),v_1000) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1002))) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (v_1003,v_1004,v_1005) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1007: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_977)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then dhexp(2-proj-2-tuple(v_1001),v_1000) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1006)) then cipherstatepack(2-proj-3-tuple(v_1006),minnonce) else fail-any),1-proj-3-tuple(v_1006),3-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any)) in
        {509}let v_1008: bitstring = catch-fail(symmetricstateunpack(v_1007)) in
        {510}let v_1009: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1008))) in
        {511}let v_1010: aead = catch-fail(decrypt(1-proj-2-tuple(v_1009),2-proj-2-tuple(v_1009),3-proj-3-tuple(v_1008),3-proj-3-tuple(v_978))) in
        {512}let v_1011: bitstring = catch-fail(aeadunpack(v_1010)) in
        {513}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1008))) in
        {514}let v_1013: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1009))) && success?(1-proj-3-tuple(v_1008))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then cipherstatepack(1-proj-2-tuple(v_1012),increment_nonce(2-proj-2-tuple(v_1009))) else fail-any) else fail-any)) in
        {515}let v_1014: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_978)) && (success?(3-proj-3-tuple(v_1008)) && success?(1-proj-3-tuple(v_1008)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-2-tuple(v_1009))))) then (if not-caught-fail(v_1010) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if not-caught-fail(v_1013) then (v_1013,3-proj-3-tuple(v_1011),1-proj-3-tuple(v_1011)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {516}let v_1015: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1014),2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)))) in
        {517}let v_1016: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_978)) && success?(symmetricstatepack(1-proj-3-tuple(v_1014),2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1015),hash(3-proj-3-tuple(v_1015),3-proj-3-tuple(v_978))) else fail-any) else fail-any)) in
        {518}let v_1017: bitstring = catch-fail((if success?(3-proj-3-tuple(v_978)) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,2-proj-3-tuple(v_1014),3-proj-3-tuple(v_1014)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1018: key = catch-fail(dhexp(key_s(charlie),g)) in
        {520}let v_1019: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1017),2-proj-7-tuple(v_977),3-proj-7-tuple(v_977),v_1000,v_980,6-proj-7-tuple(v_977),7-proj-7-tuple(v_977))) in
        {521}let (hs_1020: handshakestate,plaintext_a_1021: bitstring,valid_1022: bool) = (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-7-tuple(v_977))))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then (if not-caught-fail(v_979) then (if not-caught-fail(v_980) then (if not-caught-fail(v_982) then (if not-caught-fail(v_989) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1007) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if ((3-proj-3-tuple(v_999) && 3-proj-3-tuple(v_1017)) && (v_1000 = getpublickey((if not-caught-fail(v_1018) then keypairpack(v_1018,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1019) then (v_1019,2-proj-3-tuple(v_1017),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {522}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1021);
        {523}insert statestore(bob,charlie,sid,statepack_b(hs_1020))
    ) | (
        {569}get statestore(=bob,=charlie,=sid,statepack_b(hs_1023: handshakestate)) in
        {525}let v_1024: bitstring = catch-fail(handshakestateunpack(hs_1023)) in
        {526}let v_1025: bitstring = catch-fail((empty,empty,empty)) in
        {527}let v_1026: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {528}let v_1027: keypair = catch-fail((if not-caught-fail(v_1026) then keypairpack(v_1026,key_e(bob,charlie,sid)) else fail-any)) in
        {529}let v_1028: bitstring = catch-fail(getpublickey(v_1027)) in
        {530}let v_1029: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1024))) in
        {531}let v_1030: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then symmetricstatepack(1-proj-3-tuple(v_1029),2-proj-3-tuple(v_1029),hash(3-proj-3-tuple(v_1029),v_1028)) else fail-any) else fail-any)) in
        {532}let v_1031: bitstring = catch-fail(keypairunpack(v_1027)) in
        {533}let v_1032: bitstring = catch-fail(symmetricstateunpack(v_1030)) in
        {534}let v_1033: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1032),(if success?(5-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then dhexp(2-proj-2-tuple(v_1031),5-proj-7-tuple(v_1024)) else fail-any) else fail-any))) in
        {535}let v_1034: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1032),(if success?(5-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then dhexp(2-proj-2-tuple(v_1031),5-proj-7-tuple(v_1024)) else fail-any) else fail-any))) in
        {536}let v_1035: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1032),(if success?(5-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then dhexp(2-proj-2-tuple(v_1031),5-proj-7-tuple(v_1024)) else fail-any) else fail-any))) in
        {537}let v_1036: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then dhexp(2-proj-2-tuple(v_1031),5-proj-7-tuple(v_1024)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1032))) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1035) then (v_1033,v_1034,v_1035) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let v_1037: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then dhexp(2-proj-2-tuple(v_1031),5-proj-7-tuple(v_1024)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1036)) then cipherstatepack(2-proj-3-tuple(v_1036),minnonce) else fail-any),1-proj-3-tuple(v_1036),3-proj-3-tuple(v_1032)) else fail-any) else fail-any) else fail-any)) in
        {539}let v_1038: bitstring = catch-fail(keypairunpack(v_1027)) in
        {540}let v_1039: bitstring = catch-fail(symmetricstateunpack(v_1037)) in
        {541}let v_1040: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1039),(if success?(4-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then dhexp(2-proj-2-tuple(v_1038),4-proj-7-tuple(v_1024)) else fail-any) else fail-any))) in
        {542}let v_1041: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1039),(if success?(4-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then dhexp(2-proj-2-tuple(v_1038),4-proj-7-tuple(v_1024)) else fail-any) else fail-any))) in
        {543}let v_1042: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1039),(if success?(4-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then dhexp(2-proj-2-tuple(v_1038),4-proj-7-tuple(v_1024)) else fail-any) else fail-any))) in
        {544}let v_1043: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then dhexp(2-proj-2-tuple(v_1038),4-proj-7-tuple(v_1024)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1039))) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1042) then (v_1040,v_1041,v_1042) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {545}let v_1044: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1024)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then dhexp(2-proj-2-tuple(v_1038),4-proj-7-tuple(v_1024)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1043)) then cipherstatepack(2-proj-3-tuple(v_1043),minnonce) else fail-any),1-proj-3-tuple(v_1043),3-proj-3-tuple(v_1039)) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1045: bitstring = catch-fail(symmetricstateunpack(v_1044)) in
        {547}let v_1046: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1045))) in
        {548}let v_1047: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1046),2-proj-2-tuple(v_1046),3-proj-3-tuple(v_1045),msg_b(bob,charlie,sid))) in
        {549}let v_1048: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1045))) in
        {550}let v_1049: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1046))) && success?(1-proj-3-tuple(v_1045))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-2-tuple(v_1048))))) then cipherstatepack(1-proj-2-tuple(v_1048),increment_nonce(2-proj-2-tuple(v_1046))) else fail-any) else fail-any)) in
        {551}let v_1050: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1045)) && success?(1-proj-3-tuple(v_1045))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-2-tuple(v_1046))))) then (if not-caught-fail(v_1047) then (if not-caught-fail(v_1049) then (v_1049,v_1047) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {552}let v_1051: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1050),2-proj-3-tuple(v_1045),3-proj-3-tuple(v_1045)))) in
        {553}let v_1052: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1050)) && success?(symmetricstatepack(1-proj-2-tuple(v_1050),2-proj-3-tuple(v_1045),3-proj-3-tuple(v_1045)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then symmetricstatepack(1-proj-3-tuple(v_1051),2-proj-3-tuple(v_1051),hash(3-proj-3-tuple(v_1051),2-proj-2-tuple(v_1050))) else fail-any) else fail-any)) in
        {554}let v_1053: bitstring = catch-fail((if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-2-tuple(v_1050))))) then (if not-caught-fail(v_1052) then (v_1052,2-proj-2-tuple(v_1050)) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1054: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1053),2-proj-7-tuple(v_1024),v_1027,4-proj-7-tuple(v_1024),5-proj-7-tuple(v_1024),6-proj-7-tuple(v_1024),7-proj-7-tuple(v_1024))) in
        {556}let v_1055: bitstring = catch-fail(concat3(v_1028,2-proj-3-tuple(v_1025),2-proj-2-tuple(v_1053))) in
        {557}let v_1056: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1053))) in
        {558}let v_1057: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1056),zero)) in
        {559}let v_1058: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1056),zero)) in
        {560}let v_1059: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1056),zero)) in
        {561}let v_1060: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1056)) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1058) then (if not-caught-fail(v_1059) then (v_1057,v_1058,v_1059) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {562}let v_1061: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1060)) then cipherstatepack(1-proj-3-tuple(v_1060),minnonce) else fail-any)) in
        {563}let v_1062: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1060)) then cipherstatepack(2-proj-3-tuple(v_1060),minnonce) else fail-any)) in
        {564}let v_1063: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1053)) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (1-proj-2-tuple(v_1053),v_1061,v_1062) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let (hs_1064: handshakestate,message_b_1065: bitstring,cs1_1066: cipherstate,cs2_1067: cipherstate) = (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-7-tuple(v_1024))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1037) then (if not-caught-fail(v_1044) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then (v_1054,v_1055,2-proj-3-tuple(v_1063),3-proj-3-tuple(v_1063)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {566}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {567}insert statestore(bob,charlie,sid,statepack_c(hs_1064,cs1_1066,cs2_1067));
        {568}out(pub, message_b_1065)
    ) | (
        {570}!
        {590}get statestore(=bob,=charlie,=sid,statepack_c(hs_1068: handshakestate,cs1_1069: cipherstate,cs2_1070: cipherstate)) in
        {571}let hs_1071: handshakestate = handshakestatesetcs(hs_1068,cs1_1069) in
        {572}in(pub, message_c_1072: bitstring);
        {573}let v_1073: bitstring = catch-fail(handshakestateunpack(hs_1071)) in
        {574}let v_1074: bitstring = catch-fail(deconcat3(message_c_1072)) in
        {575}let v_1075: bool = catch-fail(true) in
        {576}let v_1076: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1073))) in
        {577}let v_1077: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1076))) in
        {578}let v_1078: aead = catch-fail(decrypt(1-proj-2-tuple(v_1077),2-proj-2-tuple(v_1077),3-proj-3-tuple(v_1076),3-proj-3-tuple(v_1074))) in
        {579}let v_1079: bitstring = catch-fail(aeadunpack(v_1078)) in
        {580}let v_1080: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1076))) in
        {581}let v_1081: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1077))) && success?(1-proj-3-tuple(v_1076))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-2-tuple(v_1080))))) then cipherstatepack(1-proj-2-tuple(v_1080),increment_nonce(2-proj-2-tuple(v_1077))) else fail-any) else fail-any)) in
        {582}let v_1082: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1074)) && (success?(3-proj-3-tuple(v_1076)) && success?(1-proj-3-tuple(v_1076)))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-2-tuple(v_1077))))) then (if not-caught-fail(v_1078) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if not-caught-fail(v_1081) then (v_1081,3-proj-3-tuple(v_1079),1-proj-3-tuple(v_1079)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1083: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1082),2-proj-3-tuple(v_1076),3-proj-3-tuple(v_1076)))) in
        {584}let v_1084: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1074)) && success?(symmetricstatepack(1-proj-3-tuple(v_1082),2-proj-3-tuple(v_1076),3-proj-3-tuple(v_1076)))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1083),hash(3-proj-3-tuple(v_1083),3-proj-3-tuple(v_1074))) else fail-any) else fail-any)) in
        {585}let v_1085: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1074)) && success?(1-proj-7-tuple(v_1073))) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-3-tuple(v_1082))))) then (if not-caught-fail(v_1084) then (v_1084,2-proj-3-tuple(v_1082),3-proj-3-tuple(v_1082)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {586}let v_1086: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1085),2-proj-7-tuple(v_1073),3-proj-7-tuple(v_1073),4-proj-7-tuple(v_1073),5-proj-7-tuple(v_1073),6-proj-7-tuple(v_1073),7-proj-7-tuple(v_1073))) in
        {587}let (hs_1087: handshakestate,plaintext_c_1088: bitstring,valid_1089: bool) = (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-7-tuple(v_1073))))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if not-caught-fail(v_1075) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (if (v_1075 && 3-proj-3-tuple(v_1085)) then (if not-caught-fail(v_1086) then (v_1086,2-proj-3-tuple(v_1085),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {588}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1088);
        {589}insert statestore(bob,charlie,sid,statepack_d(hs_1087,handshakestategetcs(hs_1087),cs2_1070))
    ) | (
        {591}!
        {609}get statestore(=bob,=charlie,=sid,statepack_d(hs_1090: handshakestate,cs1_1091: cipherstate,cs2_1092: cipherstate)) in
        {592}let hs_1093: handshakestate = handshakestatesetcs(hs_1090,cs2_1092) in
        {593}let v_1094: bitstring = catch-fail(handshakestateunpack(hs_1093)) in
        {594}let v_1095: bitstring = catch-fail((empty,empty,empty)) in
        {595}let v_1096: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1094))) in
        {596}let v_1097: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1096))) in
        {597}let v_1098: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1097),2-proj-2-tuple(v_1097),3-proj-3-tuple(v_1096),msg_d(bob,charlie,sid))) in
        {598}let v_1099: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1096))) in
        {599}let v_1100: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1097))) && success?(1-proj-3-tuple(v_1096))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-2-tuple(v_1099))))) then cipherstatepack(1-proj-2-tuple(v_1099),increment_nonce(2-proj-2-tuple(v_1097))) else fail-any) else fail-any)) in
        {600}let v_1101: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1096)) && success?(1-proj-3-tuple(v_1096))) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1100) then (v_1100,v_1098) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {601}let v_1102: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1101),2-proj-3-tuple(v_1096),3-proj-3-tuple(v_1096)))) in
        {602}let v_1103: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1101)) && success?(symmetricstatepack(1-proj-2-tuple(v_1101),2-proj-3-tuple(v_1096),3-proj-3-tuple(v_1096)))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then symmetricstatepack(1-proj-3-tuple(v_1102),2-proj-3-tuple(v_1102),hash(3-proj-3-tuple(v_1102),2-proj-2-tuple(v_1101))) else fail-any) else fail-any)) in
        {603}let v_1104: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1094)) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-3-tuple(v_1096))))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then (if not-caught-fail(v_1103) then (v_1103,2-proj-2-tuple(v_1101)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {604}let v_1105: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1104),2-proj-7-tuple(v_1094),3-proj-7-tuple(v_1094),4-proj-7-tuple(v_1094),5-proj-7-tuple(v_1094),6-proj-7-tuple(v_1094),7-proj-7-tuple(v_1094))) in
        {605}let v_1106: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1095),2-proj-3-tuple(v_1095),2-proj-2-tuple(v_1104))) in
        {606}let (hs_1107: handshakestate,message_d_1108: bitstring) = (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-7-tuple(v_1094))))) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then (if not-caught-fail(v_1105) then (if not-caught-fail(v_1106) then (v_1105,v_1106) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {607}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {608}out(pub, message_d_1108)
    ) | (
        {610}event LeakS(phase0,bob);
        {611}out(pub, key_s(bob))
    ) | (
        {612}phase 1;
        {613}event LeakS(phase1,bob);
        {614}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 189 rules in the queue.
400 rules inserted. The rule base contains 397 rules. 65 rules in the queue.
600 rules inserted. The rule base contains 569 rules. 288 rules in the queue.
800 rules inserted. The rule base contains 769 rules. 756 rules in the queue.
1000 rules inserted. The rule base contains 953 rules. 670 rules in the queue.
1200 rules inserted. The rule base contains 1135 rules. 529 rules in the queue.
1400 rules inserted. The rule base contains 1316 rules. 390 rules in the queue.
1600 rules inserted. The rule base contains 1497 rules. 263 rules in the queue.
1800 rules inserted. The rule base contains 1679 rules. 531 rules in the queue.
2000 rules inserted. The rule base contains 1863 rules. 657 rules in the queue.
2200 rules inserted. The rule base contains 2063 rules. 778 rules in the queue.
2400 rules inserted. The rule base contains 2263 rules. 902 rules in the queue.
2600 rules inserted. The rule base contains 2432 rules. 870 rules in the queue.
2800 rules inserted. The rule base contains 2604 rules. 825 rules in the queue.
3000 rules inserted. The rule base contains 2774 rules. 780 rules in the queue.
3200 rules inserted. The rule base contains 2944 rules. 735 rules in the queue.
3400 rules inserted. The rule base contains 3118 rules. 728 rules in the queue.
3600 rules inserted. The rule base contains 3306 rules. 739 rules in the queue.
3800 rules inserted. The rule base contains 3498 rules. 753 rules in the queue.
4000 rules inserted. The rule base contains 3682 rules. 767 rules in the queue.
4200 rules inserted. The rule base contains 3769 rules. 745 rules in the queue.
4400 rules inserted. The rule base contains 3858 rules. 734 rules in the queue.
4600 rules inserted. The rule base contains 3966 rules. 733 rules in the queue.
4800 rules inserted. The rule base contains 4138 rules. 794 rules in the queue.
5000 rules inserted. The rule base contains 4317 rules. 857 rules in the queue.
5200 rules inserted. The rule base contains 4495 rules. 928 rules in the queue.
5400 rules inserted. The rule base contains 4617 rules. 944 rules in the queue.
5600 rules inserted. The rule base contains 4724 rules. 938 rules in the queue.
5800 rules inserted. The rule base contains 4839 rules. 918 rules in the queue.
6000 rules inserted. The rule base contains 4968 rules. 922 rules in the queue.
6200 rules inserted. The rule base contains 5124 rules. 954 rules in the queue.
6400 rules inserted. The rule base contains 5285 rules. 990 rules in the queue.
6600 rules inserted. The rule base contains 5442 rules. 1012 rules in the queue.
6800 rules inserted. The rule base contains 5604 rules. 1046 rules in the queue.
7000 rules inserted. The rule base contains 5667 rules. 1024 rules in the queue.
7200 rules inserted. The rule base contains 5729 rules. 994 rules in the queue.
7400 rules inserted. The rule base contains 5784 rules. 956 rules in the queue.
7600 rules inserted. The rule base contains 5789 rules. 916 rules in the queue.
7800 rules inserted. The rule base contains 5929 rules. 914 rules in the queue.
8000 rules inserted. The rule base contains 6072 rules. 894 rules in the queue.
8200 rules inserted. The rule base contains 6220 rules. 882 rules in the queue.
8400 rules inserted. The rule base contains 6352 rules. 859 rules in the queue.
8600 rules inserted. The rule base contains 6462 rules. 824 rules in the queue.
8800 rules inserted. The rule base contains 6599 rules. 804 rules in the queue.
9000 rules inserted. The rule base contains 6704 rules. 779 rules in the queue.
9200 rules inserted. The rule base contains 6826 rules. 738 rules in the queue.
9400 rules inserted. The rule base contains 6960 rules. 700 rules in the queue.
9600 rules inserted. The rule base contains 7033 rules. 633 rules in the queue.
9800 rules inserted. The rule base contains 7202 rules. 642 rules in the queue.
10000 rules inserted. The rule base contains 7383 rules. 668 rules in the queue.
10200 rules inserted. The rule base contains 7559 rules. 685 rules in the queue.
10400 rules inserted. The rule base contains 7736 rules. 683 rules in the queue.
10600 rules inserted. The rule base contains 7921 rules. 711 rules in the queue.
10800 rules inserted. The rule base contains 7900 rules. 740 rules in the queue.
11000 rules inserted. The rule base contains 8087 rules. 772 rules in the queue.
11200 rules inserted. The rule base contains 8273 rules. 811 rules in the queue.
11400 rules inserted. The rule base contains 8455 rules. 823 rules in the queue.
11600 rules inserted. The rule base contains 8590 rules. 844 rules in the queue.
11800 rules inserted. The rule base contains 8715 rules. 852 rules in the queue.
12000 rules inserted. The rule base contains 8867 rules. 836 rules in the queue.
12200 rules inserted. The rule base contains 9000 rules. 915 rules in the queue.
12400 rules inserted. The rule base contains 9142 rules. 1005 rules in the queue.
12600 rules inserted. The rule base contains 9296 rules. 984 rules in the queue.
12800 rules inserted. The rule base contains 9456 rules. 935 rules in the queue.
13000 rules inserted. The rule base contains 9612 rules. 952 rules in the queue.
13200 rules inserted. The rule base contains 9770 rules. 951 rules in the queue.
13400 rules inserted. The rule base contains 9923 rules. 923 rules in the queue.
13600 rules inserted. The rule base contains 10095 rules. 939 rules in the queue.
13800 rules inserted. The rule base contains 10201 rules. 938 rules in the queue.
14000 rules inserted. The rule base contains 10340 rules. 916 rules in the queue.
14200 rules inserted. The rule base contains 10466 rules. 898 rules in the queue.
14400 rules inserted. The rule base contains 10640 rules. 892 rules in the queue.
14600 rules inserted. The rule base contains 10793 rules. 875 rules in the queue.
14800 rules inserted. The rule base contains 10938 rules. 841 rules in the queue.
15000 rules inserted. The rule base contains 11071 rules. 778 rules in the queue.
15200 rules inserted. The rule base contains 11240 rules. 804 rules in the queue.
15400 rules inserted. The rule base contains 11371 rules. 796 rules in the queue.
15600 rules inserted. The rule base contains 11504 rules. 775 rules in the queue.
15800 rules inserted. The rule base contains 11623 rules. 763 rules in the queue.
16000 rules inserted. The rule base contains 11769 rules. 738 rules in the queue.
16200 rules inserted. The rule base contains 11901 rules. 709 rules in the queue.
16400 rules inserted. The rule base contains 12040 rules. 699 rules in the queue.
16600 rules inserted. The rule base contains 12195 rules. 693 rules in the queue.
16800 rules inserted. The rule base contains 12322 rules. 747 rules in the queue.
17000 rules inserted. The rule base contains 12472 rules. 805 rules in the queue.
17200 rules inserted. The rule base contains 12655 rules. 827 rules in the queue.
17400 rules inserted. The rule base contains 12828 rules. 870 rules in the queue.
17600 rules inserted. The rule base contains 12940 rules. 871 rules in the queue.
17800 rules inserted. The rule base contains 13086 rules. 913 rules in the queue.
18000 rules inserted. The rule base contains 13254 rules. 895 rules in the queue.
18200 rules inserted. The rule base contains 13410 rules. 947 rules in the queue.
18400 rules inserted. The rule base contains 13526 rules. 868 rules in the queue.
18600 rules inserted. The rule base contains 13679 rules. 857 rules in the queue.
18800 rules inserted. The rule base contains 13832 rules. 855 rules in the queue.
19000 rules inserted. The rule base contains 13965 rules. 862 rules in the queue.
19200 rules inserted. The rule base contains 14075 rules. 801 rules in the queue.
19400 rules inserted. The rule base contains 14208 rules. 787 rules in the queue.
19600 rules inserted. The rule base contains 14381 rules. 754 rules in the queue.
19800 rules inserted. The rule base contains 14497 rules. 761 rules in the queue.
20000 rules inserted. The rule base contains 14608 rules. 734 rules in the queue.
20200 rules inserted. The rule base contains 14749 rules. 685 rules in the queue.
20400 rules inserted. The rule base contains 14892 rules. 660 rules in the queue.
20600 rules inserted. The rule base contains 15003 rules. 605 rules in the queue.
20800 rules inserted. The rule base contains 15160 rules. 597 rules in the queue.
21000 rules inserted. The rule base contains 15292 rules. 615 rules in the queue.
21200 rules inserted. The rule base contains 15386 rules. 649 rules in the queue.
21400 rules inserted. The rule base contains 15514 rules. 596 rules in the queue.
21600 rules inserted. The rule base contains 15647 rules. 584 rules in the queue.
21800 rules inserted. The rule base contains 15770 rules. 548 rules in the queue.
22000 rules inserted. The rule base contains 15875 rules. 536 rules in the queue.
22200 rules inserted. The rule base contains 15931 rules. 468 rules in the queue.
22400 rules inserted. The rule base contains 16031 rules. 410 rules in the queue.
22600 rules inserted. The rule base contains 16158 rules. 298 rules in the queue.
22800 rules inserted. The rule base contains 16254 rules. 214 rules in the queue.
23000 rules inserted. The rule base contains 16313 rules. 127 rules in the queue.
23200 rules inserted. The rule base contains 16316 rules. 71 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[]),msg_a(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

7. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

8. By 1, the attacker may have the channel pub.
By 7, the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

9. By 8, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

10. By 8, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid[]),g).
attacker(dhexp(key_e(alice,bob,sid[]),g)).

11. The message dhexp(key_s(bob),g) may be sent on channel pub at output {311}.
mess(pub,dhexp(key_s(bob),g)).

12. By 1, the attacker may have the channel pub.
By 11, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

13. Using the function empty the attacker may obtain empty.
attacker(empty).

14. Using the function somename the attacker may obtain somename.
attacker(somename).

15. By 14, the attacker may know somename.
By 13, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

16. By 15, the attacker may know hash(somename,empty).
By 13, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

17. By 16, the attacker may know hash(hash(somename,empty),empty).
By 12, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 10, the attacker may know dhexp(key_e(alice,bob,sid[]),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g))).

19. By 18, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)).
By 9, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 9, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

23. By 10, the attacker may know dhexp(key_e(alice,bob,sid[]),g).
So the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid[]),g)).

24. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

25. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

26. The event LeakS(phase1,bob) may be executed at {460}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {461}.
mess_p1(pub,key_s(bob)).

27. By 25, the attacker may have the channel pub in phase 1.
By 26, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

28. By 27, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

29. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

30. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

31. By 30, the attacker may know somename in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

32. By 31, the attacker may know hash(somename,empty) in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

33. By 32, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 28, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

34. By 33, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 23, the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g))).

35. By 27, the attacker may know key_s(bob) in phase 1.
By 23, the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))).

36. By 31, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)))).

37. By 36, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 34, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)) in phase 1.
By 22, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

38. By 37, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

39. By 27, the attacker may know key_s(bob) in phase 1.
By 38, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

40. By 31, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)))).

41. By 40, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
By 39, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

42. By 41, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

43. By 42, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

7. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

8. By 1, the attacker may have the channel pub.
By 7, the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

9. By 8, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

10. By 8, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid[]),g).
attacker(dhexp(key_e(alice,bob,sid[]),g)).

11. The message dhexp(key_s(bob),g) may be sent on channel pub at output {311}.
mess(pub,dhexp(key_s(bob),g)).

12. By 1, the attacker may have the channel pub.
By 11, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

13. Using the function empty the attacker may obtain empty.
attacker(empty).

14. Using the function somename the attacker may obtain somename.
attacker(somename).

15. By 14, the attacker may know somename.
By 13, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

16. By 15, the attacker may know hash(somename,empty).
By 13, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

17. By 16, the attacker may know hash(hash(somename,empty),empty).
By 12, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 10, the attacker may know dhexp(key_e(alice,bob,sid[]),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g))).

19. By 18, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)).
By 9, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 9, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

23. By 10, the attacker may know dhexp(key_e(alice,bob,sid[]),g).
So the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid[]),g)).

24. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

25. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

26. The event LeakS(phase1,bob) may be executed at {460}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {461}.
mess_p1(pub,key_s(bob)).

27. By 25, the attacker may have the channel pub in phase 1.
By 26, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

28. By 27, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

29. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

30. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

31. By 30, the attacker may know somename in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

32. By 31, the attacker may know hash(somename,empty) in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

33. By 32, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 28, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

34. By 33, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 23, the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g))).

35. By 27, the attacker may know key_s(bob) in phase 1.
By 23, the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))).

36. By 31, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)))).

37. By 36, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 34, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)) in phase 1.
By 22, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

38. By 37, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

39. By 27, the attacker may know key_s(bob) in phase 1.
By 38, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

40. By 31, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)))).

41. By 40, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
By 39, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

42. By 41, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

43. By 42, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> attacker_p1(msg_a(alice,bob,sid[]))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

7. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

8. By 1, the attacker may have the channel pub.
By 7, the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

9. By 8, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

10. By 8, the attacker may know concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid[]),g).
attacker(dhexp(key_e(alice,bob,sid[]),g)).

11. The message dhexp(key_s(bob),g) may be sent on channel pub at output {311}.
mess(pub,dhexp(key_s(bob),g)).

12. By 1, the attacker may have the channel pub.
By 11, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

13. Using the function empty the attacker may obtain empty.
attacker(empty).

14. Using the function somename the attacker may obtain somename.
attacker(somename).

15. By 14, the attacker may know somename.
By 13, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

16. By 15, the attacker may know hash(somename,empty).
By 13, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

17. By 16, the attacker may know hash(hash(somename,empty),empty).
By 12, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 10, the attacker may know dhexp(key_e(alice,bob,sid[]),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g))).

19. By 18, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)).
By 9, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 9, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

23. By 10, the attacker may know dhexp(key_e(alice,bob,sid[]),g).
So the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid[]),g)).

24. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

25. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

26. The event LeakS(phase1,bob) may be executed at {460}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {461}.
mess_p1(pub,key_s(bob)).

27. By 25, the attacker may have the channel pub in phase 1.
By 26, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

28. By 27, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

29. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

30. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

31. By 30, the attacker may know somename in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

32. By 31, the attacker may know hash(somename,empty) in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

33. By 32, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 28, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

34. By 33, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 23, the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g))).

35. By 27, the attacker may know key_s(bob) in phase 1.
By 23, the attacker may know dhexp(key_e(alice,bob,sid[]),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))).

36. By 31, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)))).

37. By 36, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 34, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)) in phase 1.
By 22, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))).

38. By 37, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

39. By 27, the attacker may know key_s(bob) in phase 1.
By 38, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

40. By 31, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g)))).

41. By 40, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))) in phase 1.
By 39, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

42. By 41, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))).

43. By 42, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid[]) in phase 1.
attacker_p1(msg_a(alice,bob,sid[])).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[]),msg_b(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1211,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[]),msg_c(alice,bob,sid[])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1211,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[]),msg_d(bob,alice,sid[])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[]))) && begin(SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[]))) && begin(SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[]))) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the entry statestore(alice,bob,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {63}.
table(statestore(alice,bob,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,alice,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {323}.
table(statestore(bob,alice,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid[]),msg_a(alice,bob,sid[])) may be executed at {62}.
So the message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) may be sent on channel pub at output {64}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))).

5. The entry statestore(bob,alice,sid[],statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {371}.
The message concat3(dhexp(key_e(alice,bob,sid[]),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))) that may be sent on channel pub by 4 may be received at input {324}.
So the entry statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false))) may be inserted in a table at insert {370}.
table(statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false)))).

6. The entry statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false))) that may be in a table by 5 may be read at get {416}.
The event SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[])) may be executed at {413}.
So the message concat3(dhexp(key_e(bob,alice,sid[]),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))) may be sent on channel pub at output {415}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid[]),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))).

7. The entry statestore(alice,bob,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {109}.
The message concat3(dhexp(key_e(bob,alice,sid[]),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))) that may be sent on channel pub by 6 may be received at input {66}.
So the entry statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {108}.
table(statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 7 may be read at get {129}.
The event SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[])) may be executed at {126}.
So the entry statestore(alice,bob,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {127}.
table(statestore(alice,bob,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid[],statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false))) that may be in a table by 5 may be read at get {416}.
The event SendMsg(bob,alice,stagepack_b(sid[]),msg_b(bob,alice,sid[])) may be executed at {413}.
So the entry statestore(bob,alice,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid[]),g),key_e(bob,alice,sid[])),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {414}.
table(statestore(bob,alice,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid[]),g),key_e(bob,alice,sid[])),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 7 may be read at get {129}.
The event SendMsg(alice,bob,stagepack_c(sid[]),msg_c(alice,bob,sid[])) may be executed at {126}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))) may be sent on channel pub at output {128}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))).

11. The entry statestore(bob,alice,sid[],statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid[]),g),key_e(bob,alice,sid[])),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 9 may be read at get {437}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))) that may be sent on channel pub by 10 may be received at input {419}.
So the entry statestore(bob,alice,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid[]),g),key_e(bob,alice,sid[])),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {436}.
table(statestore(bob,alice,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid[]),g),key_e(bob,alice,sid[])),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid[]),g),key_e(bob,alice,sid[])),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid[]),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 11 may be read at get {456}.
The event SendMsg(bob,alice,stagepack_d(sid[]),msg_d(bob,alice,sid[])) may be executed at {454}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))),msg_d(bob,alice,sid[]))) may be sent on channel pub at output {455}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))),msg_d(bob,alice,sid[])))).

13. The entry statestore(alice,bob,sid[],statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[])))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid[]),g),key_e(alice,bob,sid[])),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid[]),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {150}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_e(bob,alice,sid[]),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob,sid[]),dhexp(key_e(bob,alice,sid[]),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid[]),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid[]),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid[]),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid[]))),dhexp(key_e(bob,alice,sid[]),g)),msg_b(bob,alice,sid[]))),msg_c(alice,bob,sid[]))),msg_d(bob,alice,sid[]))) that may be sent on channel pub by 12 may be received at input {132}.
So event RecvEnd(true) may be executed at {149}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
