File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IK1.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 273, character 6:
Warning: identifier s rebound.
File "IK1.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 274, characters 26-27:
Warning: identifier ns rebound.
File "IK1.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 275, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 276, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 283, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 299, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 307, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 319, characters 26-27:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 319, characters 40-45:
Warning: identifier valid1 rebound.
File "IK1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier rs rebound.
File "IK1.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 518, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 520, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 511, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 512, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 299, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 273, character 6:
Warning: identifier s rebound.
File "IK1.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 274, characters 26-27:
Warning: identifier ns rebound.
File "IK1.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 275, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 276, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 565, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 566, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 307, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 557, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 551, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 283, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "IK1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 545, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 319, characters 26-27:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 319, characters 40-45:
Warning: identifier valid1 rebound.
File "IK1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier rs rebound.
File "IK1.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_517: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_517));
    (
        {6}let e_518: keypair = keypairpack(empty,empty) in
        {7}let v_519: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {8}let rs_520: key = getpublickey((if not-caught-fail(v_519) then keypairpack(validkey(v_519),key_s(bob)) else fail-any)) in
        {9}let re_521: key = empty in
        {10}let v_522: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_523: key = catch-fail(v_522) in
        {12}let v_524: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_525: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then symmetricstatepack(v_524,v_523,v_522) else fail-any) else fail-any) else fail-any))) in
        {14}let v_526: symmetricstate = catch-fail((if success?((if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then symmetricstatepack(v_524,v_523,v_522) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_525),hash(3-proj-3-tuple(v_525),empty)) else fail-any) else fail-any)) in
        {15}let v_527: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {16}let v_528: symmetricstate = catch-fail((if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),rs_520)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_526) then (if not-caught-fail(v_528) then handshakestatepack(v_528,s_517,e_518,rs_520,re_521,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {52}get statestore(=alice,=bob,=sid,statepack_a(hs_529: handshakestate)) in
        {19}let v_530: bitstring = catch-fail(handshakestateunpack(hs_529)) in
        {20}let v_531: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_532: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_533: keypair = catch-fail((if not-caught-fail(v_532) then keypairpack(validkey(v_532),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_534: bitstring = catch-fail(getpublickey(v_533)) in
        {24}let v_535: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_530))) in
        {25}let v_536: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_530)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_535),hash(3-proj-3-tuple(v_535),v_534)) else fail-any) else fail-any)) in
        {26}let v_537: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {27}let v_538: keypair = catch-fail((if not-caught-fail(v_537) then keypairpack(validkey(v_537),key_s(alice)) else fail-any)) in
        {28}let v_539: bitstring = catch-fail(symmetricstateunpack(v_536)) in
        {29}let v_540: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_539))) in
        {30}let v_541: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_540),2-proj-2-tuple(v_540),3-proj-3-tuple(v_539),getpublickey(v_538))) in
        {31}let v_542: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_539))) in
        {32}let v_543: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_540))) && success?(1-proj-3-tuple(v_539))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then cipherstatepack(1-proj-2-tuple(v_542),increment_nonce(2-proj-2-tuple(v_540))) else fail-any) else fail-any)) in
        {33}let v_544: bitstring = catch-fail((if (success?(getpublickey(v_538)) && (success?(3-proj-3-tuple(v_539)) && success?(1-proj-3-tuple(v_539)))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then (if not-caught-fail(v_541) then (if not-caught-fail(v_543) then (v_543,v_541) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_545: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_544),2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)))) in
        {35}let v_546: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_544)) && success?(symmetricstatepack(1-proj-2-tuple(v_544),2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),2-proj-2-tuple(v_544))) else fail-any) else fail-any)) in
        {36}let v_547: bitstring = catch-fail((if success?(getpublickey(v_538)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then (if not-caught-fail(v_546) then (v_546,2-proj-2-tuple(v_544)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_548: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_547))) in
        {38}let v_549: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_548))) in
        {39}let v_550: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_549),2-proj-2-tuple(v_549),3-proj-3-tuple(v_548),msg_a(alice,bob,sid))) in
        {40}let v_551: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_548))) in
        {41}let v_552: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_549))) && success?(1-proj-3-tuple(v_548))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then cipherstatepack(1-proj-2-tuple(v_551),increment_nonce(2-proj-2-tuple(v_549))) else fail-any) else fail-any)) in
        {42}let v_553: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_548)) && success?(1-proj-3-tuple(v_548))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then (if not-caught-fail(v_550) then (if not-caught-fail(v_552) then (v_552,v_550) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_554: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_553),2-proj-3-tuple(v_548),3-proj-3-tuple(v_548)))) in
        {44}let v_555: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_553)) && success?(symmetricstatepack(1-proj-2-tuple(v_553),2-proj-3-tuple(v_548),3-proj-3-tuple(v_548)))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack(1-proj-3-tuple(v_554),2-proj-3-tuple(v_554),hash(3-proj-3-tuple(v_554),2-proj-2-tuple(v_553))) else fail-any) else fail-any)) in
        {45}let v_556: bitstring = catch-fail((if success?(1-proj-2-tuple(v_547)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then (if not-caught-fail(v_555) then (v_555,2-proj-2-tuple(v_553)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {46}let v_557: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_556),v_538,v_533,4-proj-7-tuple(v_530),5-proj-7-tuple(v_530),6-proj-7-tuple(v_530),7-proj-7-tuple(v_530))) in
        {47}let v_558: bitstring = catch-fail(concat3(v_534,2-proj-2-tuple(v_547),2-proj-2-tuple(v_556))) in
        {48}let (hs_559: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-7-tuple(v_530))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (if not-caught-fail(v_536) then (if not-caught-fail(v_538) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then (if not-caught-fail(v_557) then (if not-caught-fail(v_558) then (v_557,v_558) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {49}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {50}insert statestore(alice,bob,sid,statepack_b(hs_559));
        {51}out(pub, message_a)
    ) | (
        {103}get statestore(=alice,=bob,=sid,statepack_b(hs_560: handshakestate)) in
        {53}in(pub, message_b: bitstring);
        {54}let v_561: bitstring = catch-fail(handshakestateunpack(hs_560)) in
        {55}let v_562: bitstring = catch-fail(deconcat3(message_b)) in
        {56}let v_563: bool = catch-fail(true) in
        {57}let v_564: key = catch-fail(1-proj-3-tuple(v_562)) in
        {58}let v_565: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_561))) in
        {59}let v_566: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_561)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_565),hash(3-proj-3-tuple(v_565),v_564)) else fail-any) else fail-any)) in
        {60}let v_567: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_561))) in
        {61}let v_568: bitstring = catch-fail(symmetricstateunpack(v_566)) in
        {62}let v_569: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_568),(if success?(3-proj-7-tuple(v_561)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),v_564) else fail-any) else fail-any))) in
        {63}let v_570: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_568),(if success?(3-proj-7-tuple(v_561)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),v_564) else fail-any) else fail-any))) in
        {64}let v_571: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_568),(if success?(3-proj-7-tuple(v_561)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),v_564) else fail-any) else fail-any))) in
        {65}let v_572: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_561)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),v_564) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_568))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (v_569,v_570,v_571) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {66}let v_573: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_561)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),v_564) else fail-any) else fail-any)) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_572)) then cipherstatepack(2-proj-3-tuple(v_572),minnonce) else fail-any),1-proj-3-tuple(v_572),3-proj-3-tuple(v_568)) else fail-any) else fail-any) else fail-any)) in
        {67}let v_574: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_561))) in
        {68}let v_575: bitstring = catch-fail(symmetricstateunpack(v_573)) in
        {69}let v_576: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_575),(if success?(2-proj-7-tuple(v_561)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),v_564) else fail-any) else fail-any))) in
        {70}let v_577: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_575),(if success?(2-proj-7-tuple(v_561)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),v_564) else fail-any) else fail-any))) in
        {71}let v_578: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_575),(if success?(2-proj-7-tuple(v_561)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),v_564) else fail-any) else fail-any))) in
        {72}let v_579: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_561)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),v_564) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_575))) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (v_576,v_577,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_580: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_561)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then dhexp(2-proj-2-tuple(v_574),v_564) else fail-any) else fail-any)) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_579)) then cipherstatepack(2-proj-3-tuple(v_579),minnonce) else fail-any),1-proj-3-tuple(v_579),3-proj-3-tuple(v_575)) else fail-any) else fail-any) else fail-any)) in
        {74}let v_581: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_561))) in
        {75}let v_582: bitstring = catch-fail(symmetricstateunpack(v_580)) in
        {76}let v_583: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_582),(if (success?(4-proj-7-tuple(v_561)) && success?(3-proj-7-tuple(v_561))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),4-proj-7-tuple(v_561)) else fail-any) else fail-any))) in
        {77}let v_584: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_582),(if (success?(4-proj-7-tuple(v_561)) && success?(3-proj-7-tuple(v_561))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),4-proj-7-tuple(v_561)) else fail-any) else fail-any))) in
        {78}let v_585: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_582),(if (success?(4-proj-7-tuple(v_561)) && success?(3-proj-7-tuple(v_561))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),4-proj-7-tuple(v_561)) else fail-any) else fail-any))) in
        {79}let v_586: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_561)) && success?(3-proj-7-tuple(v_561))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),4-proj-7-tuple(v_561)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_582))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (v_583,v_584,v_585) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_587: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_561)) && success?(3-proj-7-tuple(v_561))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),4-proj-7-tuple(v_561)) else fail-any) else fail-any)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_586)) then cipherstatepack(2-proj-3-tuple(v_586),minnonce) else fail-any),1-proj-3-tuple(v_586),3-proj-3-tuple(v_582)) else fail-any) else fail-any) else fail-any)) in
        {81}let v_588: bitstring = catch-fail(symmetricstateunpack(v_587)) in
        {82}let v_589: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_588))) in
        {83}let v_590: aead = catch-fail(decrypt(1-proj-2-tuple(v_589),2-proj-2-tuple(v_589),3-proj-3-tuple(v_588),3-proj-3-tuple(v_562))) in
        {84}let v_591: bitstring = catch-fail(aeadunpack(v_590)) in
        {85}let v_592: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_588))) in
        {86}let v_593: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_589))) && success?(1-proj-3-tuple(v_588))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then cipherstatepack(1-proj-2-tuple(v_592),increment_nonce(2-proj-2-tuple(v_589))) else fail-any) else fail-any)) in
        {87}let v_594: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_562)) && (success?(3-proj-3-tuple(v_588)) && success?(1-proj-3-tuple(v_588)))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then (if not-caught-fail(v_590) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if not-caught-fail(v_593) then (v_593,3-proj-3-tuple(v_591),1-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_595: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)))) in
        {89}let v_596: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_562)) && success?(symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack(1-proj-3-tuple(v_595),2-proj-3-tuple(v_595),hash(3-proj-3-tuple(v_595),3-proj-3-tuple(v_562))) else fail-any) else fail-any)) in
        {90}let v_597: bitstring = catch-fail((if success?(3-proj-3-tuple(v_562)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if not-caught-fail(v_596) then (v_596,2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_598: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_597),2-proj-7-tuple(v_561),3-proj-7-tuple(v_561),4-proj-7-tuple(v_561),v_564,6-proj-7-tuple(v_561),7-proj-7-tuple(v_561))) in
        {92}let v_599: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_597))) in
        {93}let v_600: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_599),zero)) in
        {94}let v_601: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_599),zero)) in
        {95}let v_602: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_599),zero)) in
        {96}let v_603: bitstring = catch-fail((if success?(2-proj-3-tuple(v_599)) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_600,v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_604: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_603)) then cipherstatepack(1-proj-3-tuple(v_603),minnonce) else fail-any)) in
        {98}let v_605: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_603)) then cipherstatepack(2-proj-3-tuple(v_603),minnonce) else fail-any)) in
        {99}let v_606: bitstring = catch-fail((if success?(1-proj-3-tuple(v_597)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (1-proj-3-tuple(v_597),v_604,v_605) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let (hs_607: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-7-tuple(v_561))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then (if not-caught-fail(v_563) then (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then (if not-caught-fail(v_573) then (if not-caught-fail(v_580) then (if not-caught-fail(v_587) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (v_563 && 3-proj-3-tuple(v_597)) then (if not-caught-fail(v_598) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (v_598,2-proj-3-tuple(v_597),true,2-proj-3-tuple(v_606),3-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {101}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {102}insert statestore(alice,bob,sid,statepack_c(hs_607,cs1,cs2))
    ) | (
        {104}!
        {123}get statestore(=alice,=bob,=sid,statepack_c(hs_608: handshakestate,cs1_609: cipherstate,cs2_610: cipherstate)) in
        {105}let hs_611: handshakestate = handshakestatesetcs(hs_608,cs1_609) in
        {106}let v_612: bitstring = catch-fail(handshakestateunpack(hs_611)) in
        {107}let v_613: bitstring = catch-fail((empty,empty,empty)) in
        {108}let v_614: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_612))) in
        {109}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {110}let v_616: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_615),2-proj-2-tuple(v_615),3-proj-3-tuple(v_614),msg_c(alice,bob,sid))) in
        {111}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {112}let v_618: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_615))) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then cipherstatepack(1-proj-2-tuple(v_617),increment_nonce(2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {113}let v_619: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_614)) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_618) then (v_618,v_616) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_620: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) in
        {115}let v_621: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_619)) && success?(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {116}let v_622: bitstring = catch-fail((if success?(1-proj-7-tuple(v_612)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,2-proj-2-tuple(v_619)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let v_623: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_622),2-proj-7-tuple(v_612),3-proj-7-tuple(v_612),4-proj-7-tuple(v_612),5-proj-7-tuple(v_612),6-proj-7-tuple(v_612),7-proj-7-tuple(v_612))) in
        {118}let v_624: bitstring = catch-fail(concat3(1-proj-3-tuple(v_613),2-proj-3-tuple(v_613),2-proj-2-tuple(v_622))) in
        {119}let (hs_625: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-7-tuple(v_612))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (v_623,v_624) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {121}insert statestore(alice,bob,sid,statepack_d(hs_625,handshakestategetcs(hs_625),cs2_610));
        {122}out(pub, message_c)
    ) | (
        {124}!
        {144}get statestore(=alice,=bob,=sid,statepack_d(hs_626: handshakestate,cs1_627: cipherstate,cs2_628: cipherstate)) in
        {125}let hs_629: handshakestate = handshakestatesetcs(hs_626,cs2_628) in
        {126}in(pub, message_d: bitstring);
        {127}let v_630: bitstring = catch-fail(handshakestateunpack(hs_629)) in
        {128}let v_631: bitstring = catch-fail(deconcat3(message_d)) in
        {129}let v_632: bool = catch-fail(true) in
        {130}let v_633: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_630))) in
        {131}let v_634: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_633))) in
        {132}let v_635: aead = catch-fail(decrypt(1-proj-2-tuple(v_634),2-proj-2-tuple(v_634),3-proj-3-tuple(v_633),3-proj-3-tuple(v_631))) in
        {133}let v_636: bitstring = catch-fail(aeadunpack(v_635)) in
        {134}let v_637: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_633))) in
        {135}let v_638: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_634))) && success?(1-proj-3-tuple(v_633))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then cipherstatepack(1-proj-2-tuple(v_637),increment_nonce(2-proj-2-tuple(v_634))) else fail-any) else fail-any)) in
        {136}let v_639: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_631)) && (success?(3-proj-3-tuple(v_633)) && success?(1-proj-3-tuple(v_633)))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-2-tuple(v_634))))) then (if not-caught-fail(v_635) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_638) then (v_638,3-proj-3-tuple(v_636),1-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {137}let v_640: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_633),3-proj-3-tuple(v_633)))) in
        {138}let v_641: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_631)) && success?(symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_633),3-proj-3-tuple(v_633)))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_640),hash(3-proj-3-tuple(v_640),3-proj-3-tuple(v_631))) else fail-any) else fail-any)) in
        {139}let v_642: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_631)) && success?(1-proj-7-tuple(v_630))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if not-caught-fail(v_641) then (v_641,2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {140}let v_643: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_642),2-proj-7-tuple(v_630),3-proj-7-tuple(v_630),4-proj-7-tuple(v_630),5-proj-7-tuple(v_630),6-proj-7-tuple(v_630),7-proj-7-tuple(v_630))) in
        {141}let (hs_644: handshakestate,plaintext_d: bitstring,valid_645: bool) = (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-7-tuple(v_630))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if not-caught-fail(v_632) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (v_632 && 3-proj-3-tuple(v_642)) then (if not-caught-fail(v_643) then (v_643,2-proj-3-tuple(v_642),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {142}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {143}event RecvEnd(valid_645)
    ) | (
        {145}event LeakS(phase0,alice);
        {146}out(pub, key_s(alice))
    ) | (
        {147}phase 1;
        {148}event LeakS(phase1,alice);
        {149}out(pub, key_s(alice))
    )
) | (
    {150}let s_646: keypair = keypairpack(empty,empty) in
    {151}out(pub, getpublickey(s_646));
    (
        {152}let e_647: keypair = keypairpack(empty,empty) in
        {153}let v_648: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {154}let rs_649: key = getpublickey((if not-caught-fail(v_648) then keypairpack(validkey(v_648),key_s(charlie)) else fail-any)) in
        {155}let re_650: key = empty in
        {156}let v_651: bitstring = catch-fail(hash(somename,empty)) in
        {157}let v_652: key = catch-fail(v_651) in
        {158}let v_653: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {159}let v_654: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then symmetricstatepack(v_653,v_652,v_651) else fail-any) else fail-any) else fail-any))) in
        {160}let v_655: symmetricstate = catch-fail((if success?((if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then symmetricstatepack(v_653,v_652,v_651) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack(1-proj-3-tuple(v_654),2-proj-3-tuple(v_654),hash(3-proj-3-tuple(v_654),empty)) else fail-any) else fail-any)) in
        {161}let v_656: bitstring = catch-fail(symmetricstateunpack(v_655)) in
        {162}let v_657: symmetricstate = catch-fail((if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_656),hash(3-proj-3-tuple(v_656),rs_649)) else fail-any)) in
        {163}let hs_658: handshakestate = (if not-caught-fail(v_655) then (if not-caught-fail(v_657) then handshakestatepack(v_657,s_646,e_647,rs_649,re_650,empty,true) else fail-any) else fail-any) in
        {164}insert statestore(alice,charlie,sid,statepack_a(hs_658))
    ) | (
        {198}get statestore(=alice,=charlie,=sid,statepack_a(hs_659: handshakestate)) in
        {165}let v_660: bitstring = catch-fail(handshakestateunpack(hs_659)) in
        {166}let v_661: bitstring = catch-fail((empty,empty,empty)) in
        {167}let v_662: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {168}let v_663: keypair = catch-fail((if not-caught-fail(v_662) then keypairpack(validkey(v_662),key_e(alice,charlie,sid)) else fail-any)) in
        {169}let v_664: bitstring = catch-fail(getpublickey(v_663)) in
        {170}let v_665: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_660))) in
        {171}let v_666: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_660)) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then symmetricstatepack(1-proj-3-tuple(v_665),2-proj-3-tuple(v_665),hash(3-proj-3-tuple(v_665),v_664)) else fail-any) else fail-any)) in
        {172}let v_667: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {173}let v_668: keypair = catch-fail((if not-caught-fail(v_667) then keypairpack(validkey(v_667),key_s(alice)) else fail-any)) in
        {174}let v_669: bitstring = catch-fail(symmetricstateunpack(v_666)) in
        {175}let v_670: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {176}let v_671: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_670),2-proj-2-tuple(v_670),3-proj-3-tuple(v_669),getpublickey(v_668))) in
        {177}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {178}let v_673: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_670))) && success?(1-proj-3-tuple(v_669))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then cipherstatepack(1-proj-2-tuple(v_672),increment_nonce(2-proj-2-tuple(v_670))) else fail-any) else fail-any)) in
        {179}let v_674: bitstring = catch-fail((if (success?(getpublickey(v_668)) && (success?(3-proj-3-tuple(v_669)) && success?(1-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then (if not-caught-fail(v_671) then (if not-caught-fail(v_673) then (v_673,v_671) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_675: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_674),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) in
        {181}let v_676: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_674)) && success?(symmetricstatepack(1-proj-2-tuple(v_674),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),hash(3-proj-3-tuple(v_675),2-proj-2-tuple(v_674))) else fail-any) else fail-any)) in
        {182}let v_677: bitstring = catch-fail((if success?(getpublickey(v_668)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if not-caught-fail(v_676) then (v_676,2-proj-2-tuple(v_674)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_678: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_677))) in
        {184}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {185}let v_680: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_679),2-proj-2-tuple(v_679),3-proj-3-tuple(v_678),msg_a(alice,charlie,sid))) in
        {186}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {187}let v_682: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_679))) && success?(1-proj-3-tuple(v_678))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then cipherstatepack(1-proj-2-tuple(v_681),increment_nonce(2-proj-2-tuple(v_679))) else fail-any) else fail-any)) in
        {188}let v_683: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_678)) && success?(1-proj-3-tuple(v_678))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if not-caught-fail(v_680) then (if not-caught-fail(v_682) then (v_682,v_680) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_684: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_683),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) in
        {190}let v_685: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_683)) && success?(symmetricstatepack(1-proj-2-tuple(v_683),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),2-proj-2-tuple(v_683))) else fail-any) else fail-any)) in
        {191}let v_686: bitstring = catch-fail((if success?(1-proj-2-tuple(v_677)) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then (if not-caught-fail(v_685) then (v_685,2-proj-2-tuple(v_683)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_687: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_686),v_668,v_663,4-proj-7-tuple(v_660),5-proj-7-tuple(v_660),6-proj-7-tuple(v_660),7-proj-7-tuple(v_660))) in
        {193}let v_688: bitstring = catch-fail(concat3(v_664,2-proj-2-tuple(v_677),2-proj-2-tuple(v_686))) in
        {194}let (hs_689: handshakestate,message_a_690: bitstring) = (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-7-tuple(v_660))))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_666) then (if not-caught-fail(v_668) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (v_687,v_688) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {195}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {196}insert statestore(alice,charlie,sid,statepack_b(hs_689));
        {197}out(pub, message_a_690)
    ) | (
        {249}get statestore(=alice,=charlie,=sid,statepack_b(hs_691: handshakestate)) in
        {199}in(pub, message_b_692: bitstring);
        {200}let v_693: bitstring = catch-fail(handshakestateunpack(hs_691)) in
        {201}let v_694: bitstring = catch-fail(deconcat3(message_b_692)) in
        {202}let v_695: bool = catch-fail(true) in
        {203}let v_696: key = catch-fail(1-proj-3-tuple(v_694)) in
        {204}let v_697: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_693))) in
        {205}let v_698: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_693)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_697),hash(3-proj-3-tuple(v_697),v_696)) else fail-any) else fail-any)) in
        {206}let v_699: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_693))) in
        {207}let v_700: bitstring = catch-fail(symmetricstateunpack(v_698)) in
        {208}let v_701: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_700),(if success?(3-proj-7-tuple(v_693)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then dhexp(2-proj-2-tuple(v_699),v_696) else fail-any) else fail-any))) in
        {209}let v_702: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_700),(if success?(3-proj-7-tuple(v_693)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then dhexp(2-proj-2-tuple(v_699),v_696) else fail-any) else fail-any))) in
        {210}let v_703: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_700),(if success?(3-proj-7-tuple(v_693)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then dhexp(2-proj-2-tuple(v_699),v_696) else fail-any) else fail-any))) in
        {211}let v_704: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_693)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then dhexp(2-proj-2-tuple(v_699),v_696) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_700))) then (if not-caught-fail(v_701) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (v_701,v_702,v_703) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_705: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_693)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then dhexp(2-proj-2-tuple(v_699),v_696) else fail-any) else fail-any)) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_704)) then cipherstatepack(2-proj-3-tuple(v_704),minnonce) else fail-any),1-proj-3-tuple(v_704),3-proj-3-tuple(v_700)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_706: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_693))) in
        {214}let v_707: bitstring = catch-fail(symmetricstateunpack(v_705)) in
        {215}let v_708: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_707),(if success?(2-proj-7-tuple(v_693)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then dhexp(2-proj-2-tuple(v_706),v_696) else fail-any) else fail-any))) in
        {216}let v_709: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_707),(if success?(2-proj-7-tuple(v_693)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then dhexp(2-proj-2-tuple(v_706),v_696) else fail-any) else fail-any))) in
        {217}let v_710: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_707),(if success?(2-proj-7-tuple(v_693)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then dhexp(2-proj-2-tuple(v_706),v_696) else fail-any) else fail-any))) in
        {218}let v_711: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_693)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then dhexp(2-proj-2-tuple(v_706),v_696) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_707))) then (if not-caught-fail(v_708) then (if not-caught-fail(v_709) then (if not-caught-fail(v_710) then (v_708,v_709,v_710) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_712: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_693)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then dhexp(2-proj-2-tuple(v_706),v_696) else fail-any) else fail-any)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_711)) then cipherstatepack(2-proj-3-tuple(v_711),minnonce) else fail-any),1-proj-3-tuple(v_711),3-proj-3-tuple(v_707)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_713: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_693))) in
        {221}let v_714: bitstring = catch-fail(symmetricstateunpack(v_712)) in
        {222}let v_715: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_714),(if (success?(4-proj-7-tuple(v_693)) && success?(3-proj-7-tuple(v_693))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then dhexp(2-proj-2-tuple(v_713),4-proj-7-tuple(v_693)) else fail-any) else fail-any))) in
        {223}let v_716: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_714),(if (success?(4-proj-7-tuple(v_693)) && success?(3-proj-7-tuple(v_693))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then dhexp(2-proj-2-tuple(v_713),4-proj-7-tuple(v_693)) else fail-any) else fail-any))) in
        {224}let v_717: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_714),(if (success?(4-proj-7-tuple(v_693)) && success?(3-proj-7-tuple(v_693))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then dhexp(2-proj-2-tuple(v_713),4-proj-7-tuple(v_693)) else fail-any) else fail-any))) in
        {225}let v_718: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_693)) && success?(3-proj-7-tuple(v_693))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then dhexp(2-proj-2-tuple(v_713),4-proj-7-tuple(v_693)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_714))) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (v_715,v_716,v_717) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_719: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_693)) && success?(3-proj-7-tuple(v_693))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then dhexp(2-proj-2-tuple(v_713),4-proj-7-tuple(v_693)) else fail-any) else fail-any)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_718)) then cipherstatepack(2-proj-3-tuple(v_718),minnonce) else fail-any),1-proj-3-tuple(v_718),3-proj-3-tuple(v_714)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_720: bitstring = catch-fail(symmetricstateunpack(v_719)) in
        {228}let v_721: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_720))) in
        {229}let v_722: aead = catch-fail(decrypt(1-proj-2-tuple(v_721),2-proj-2-tuple(v_721),3-proj-3-tuple(v_720),3-proj-3-tuple(v_694))) in
        {230}let v_723: bitstring = catch-fail(aeadunpack(v_722)) in
        {231}let v_724: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_720))) in
        {232}let v_725: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_721))) && success?(1-proj-3-tuple(v_720))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then cipherstatepack(1-proj-2-tuple(v_724),increment_nonce(2-proj-2-tuple(v_721))) else fail-any) else fail-any)) in
        {233}let v_726: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_694)) && (success?(3-proj-3-tuple(v_720)) && success?(1-proj-3-tuple(v_720)))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_722) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (if not-caught-fail(v_725) then (v_725,3-proj-3-tuple(v_723),1-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {234}let v_727: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_726),2-proj-3-tuple(v_720),3-proj-3-tuple(v_720)))) in
        {235}let v_728: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_694)) && success?(symmetricstatepack(1-proj-3-tuple(v_726),2-proj-3-tuple(v_720),3-proj-3-tuple(v_720)))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then symmetricstatepack(1-proj-3-tuple(v_727),2-proj-3-tuple(v_727),hash(3-proj-3-tuple(v_727),3-proj-3-tuple(v_694))) else fail-any) else fail-any)) in
        {236}let v_729: bitstring = catch-fail((if success?(3-proj-3-tuple(v_694)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if not-caught-fail(v_728) then (v_728,2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_730: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_729),2-proj-7-tuple(v_693),3-proj-7-tuple(v_693),4-proj-7-tuple(v_693),v_696,6-proj-7-tuple(v_693),7-proj-7-tuple(v_693))) in
        {238}let v_731: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_729))) in
        {239}let v_732: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_731),zero)) in
        {240}let v_733: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_731),zero)) in
        {241}let v_734: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_731),zero)) in
        {242}let v_735: bitstring = catch-fail((if success?(2-proj-3-tuple(v_731)) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (v_732,v_733,v_734) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_736: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_735)) then cipherstatepack(1-proj-3-tuple(v_735),minnonce) else fail-any)) in
        {244}let v_737: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_735)) then cipherstatepack(2-proj-3-tuple(v_735),minnonce) else fail-any)) in
        {245}let v_738: bitstring = catch-fail((if success?(1-proj-3-tuple(v_729)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (1-proj-3-tuple(v_729),v_736,v_737) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let (hs_739: handshakestate,plaintext_b_740: bitstring,valid_741: bool,cs1_742: cipherstate,cs2_743: cipherstate) = (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-7-tuple(v_693))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (if not-caught-fail(v_698) then (if not-caught-fail(v_705) then (if not-caught-fail(v_712) then (if not-caught-fail(v_719) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if (v_695 && 3-proj-3-tuple(v_729)) then (if not-caught-fail(v_730) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (v_730,2-proj-3-tuple(v_729),true,2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {247}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_740);
        {248}insert statestore(alice,charlie,sid,statepack_c(hs_739,cs1_742,cs2_743))
    ) | (
        {250}!
        {269}get statestore(=alice,=charlie,=sid,statepack_c(hs_744: handshakestate,cs1_745: cipherstate,cs2_746: cipherstate)) in
        {251}let hs_747: handshakestate = handshakestatesetcs(hs_744,cs1_745) in
        {252}let v_748: bitstring = catch-fail(handshakestateunpack(hs_747)) in
        {253}let v_749: bitstring = catch-fail((empty,empty,empty)) in
        {254}let v_750: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_748))) in
        {255}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {256}let v_752: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_751),2-proj-2-tuple(v_751),3-proj-3-tuple(v_750),msg_c(alice,charlie,sid))) in
        {257}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {258}let v_754: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_751))) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then cipherstatepack(1-proj-2-tuple(v_753),increment_nonce(2-proj-2-tuple(v_751))) else fail-any) else fail-any)) in
        {259}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_750)) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_754) then (v_754,v_752) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_756: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_755),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) in
        {261}let v_757: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_755)) && success?(symmetricstatepack(1-proj-2-tuple(v_755),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {262}let v_758: bitstring = catch-fail((if success?(1-proj-7-tuple(v_748)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_757) then (v_757,2-proj-2-tuple(v_755)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_759: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_758),2-proj-7-tuple(v_748),3-proj-7-tuple(v_748),4-proj-7-tuple(v_748),5-proj-7-tuple(v_748),6-proj-7-tuple(v_748),7-proj-7-tuple(v_748))) in
        {264}let v_760: bitstring = catch-fail(concat3(1-proj-3-tuple(v_749),2-proj-3-tuple(v_749),2-proj-2-tuple(v_758))) in
        {265}let (hs_761: handshakestate,message_c_762: bitstring) = (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-7-tuple(v_748))))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (v_759,v_760) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {266}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {267}insert statestore(alice,charlie,sid,statepack_d(hs_761,handshakestategetcs(hs_761),cs2_746));
        {268}out(pub, message_c_762)
    ) | (
        {270}!
        {290}get statestore(=alice,=charlie,=sid,statepack_d(hs_763: handshakestate,cs1_764: cipherstate,cs2_765: cipherstate)) in
        {271}let hs_766: handshakestate = handshakestatesetcs(hs_763,cs2_765) in
        {272}in(pub, message_d_767: bitstring);
        {273}let v_768: bitstring = catch-fail(handshakestateunpack(hs_766)) in
        {274}let v_769: bitstring = catch-fail(deconcat3(message_d_767)) in
        {275}let v_770: bool = catch-fail(true) in
        {276}let v_771: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_768))) in
        {277}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {278}let v_773: aead = catch-fail(decrypt(1-proj-2-tuple(v_772),2-proj-2-tuple(v_772),3-proj-3-tuple(v_771),3-proj-3-tuple(v_769))) in
        {279}let v_774: bitstring = catch-fail(aeadunpack(v_773)) in
        {280}let v_775: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {281}let v_776: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_772))) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then cipherstatepack(1-proj-2-tuple(v_775),increment_nonce(2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {282}let v_777: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_769)) && (success?(3-proj-3-tuple(v_771)) && success?(1-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_773) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if not-caught-fail(v_776) then (v_776,3-proj-3-tuple(v_774),1-proj-3-tuple(v_774)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_778: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) in
        {284}let v_779: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_769)) && success?(symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then symmetricstatepack(1-proj-3-tuple(v_778),2-proj-3-tuple(v_778),hash(3-proj-3-tuple(v_778),3-proj-3-tuple(v_769))) else fail-any) else fail-any)) in
        {285}let v_780: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_769)) && success?(1-proj-7-tuple(v_768))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if not-caught-fail(v_779) then (v_779,2-proj-3-tuple(v_777),3-proj-3-tuple(v_777)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_781: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_780),2-proj-7-tuple(v_768),3-proj-7-tuple(v_768),4-proj-7-tuple(v_768),5-proj-7-tuple(v_768),6-proj-7-tuple(v_768),7-proj-7-tuple(v_768))) in
        {287}let (hs_782: handshakestate,plaintext_d_783: bitstring,valid_784: bool) = (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-7-tuple(v_768))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if (v_770 && 3-proj-3-tuple(v_780)) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_780),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {288}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_783);
        {289}event RecvEnd(valid_784)
    ) | (
        {291}event LeakS(phase0,alice);
        {292}out(pub, key_s(alice))
    ) | (
        {293}phase 1;
        {294}event LeakS(phase1,alice);
        {295}out(pub, key_s(alice))
    )
) | (
    {296}let v_785: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {297}let s_786: keypair = (if not-caught-fail(v_785) then keypairpack(validkey(v_785),key_s(bob)) else fail-any) in
    {298}out(pub, getpublickey(s_786));
    (
        {299}let e_787: keypair = keypairpack(empty,empty) in
        {300}let rs_788: key = empty in
        {301}let re_789: key = empty in
        {302}let v_790: bitstring = catch-fail(hash(somename,empty)) in
        {303}let v_791: key = catch-fail(v_790) in
        {304}let v_792: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {305}let v_793: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then symmetricstatepack(v_792,v_791,v_790) else fail-any) else fail-any) else fail-any))) in
        {306}let v_794: symmetricstate = catch-fail((if success?((if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then symmetricstatepack(v_792,v_791,v_790) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),empty)) else fail-any) else fail-any)) in
        {307}let v_795: bitstring = catch-fail(symmetricstateunpack(v_794)) in
        {308}let v_796: symmetricstate = catch-fail((if success?(getpublickey(s_786)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_795),hash(3-proj-3-tuple(v_795),getpublickey(s_786))) else fail-any) else fail-any)) in
        {309}let hs_797: handshakestate = (if not-caught-fail(v_794) then (if not-caught-fail(v_796) then handshakestatepack(v_796,s_786,e_787,rs_788,re_789,empty,false) else fail-any) else fail-any) in
        {310}insert statestore(bob,alice,sid,statepack_a(hs_797))
    ) | (
        {344}get statestore(=bob,=alice,=sid,statepack_a(hs_798: handshakestate)) in
        {311}in(pub, message_a_799: bitstring);
        {312}let v_800: bitstring = catch-fail(handshakestateunpack(hs_798)) in
        {313}let v_801: bitstring = catch-fail(deconcat3(message_a_799)) in
        {314}let v_802: bool = catch-fail(true) in
        {315}let v_803: key = catch-fail(1-proj-3-tuple(v_801)) in
        {316}let v_804: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_800))) in
        {317}let v_805: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_800)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then symmetricstatepack(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),hash(3-proj-3-tuple(v_804),v_803)) else fail-any) else fail-any)) in
        {318}let v_806: bitstring = catch-fail(symmetricstateunpack(v_805)) in
        {319}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_806))) in
        {320}let v_808: aead = catch-fail(decrypt(1-proj-2-tuple(v_807),2-proj-2-tuple(v_807),3-proj-3-tuple(v_806),2-proj-3-tuple(v_801))) in
        {321}let v_809: bitstring = catch-fail(aeadunpack(v_808)) in
        {322}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_806))) in
        {323}let v_811: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_807))) && success?(1-proj-3-tuple(v_806))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then cipherstatepack(1-proj-2-tuple(v_810),increment_nonce(2-proj-2-tuple(v_807))) else fail-any) else fail-any)) in
        {324}let v_812: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_801)) && (success?(3-proj-3-tuple(v_806)) && success?(1-proj-3-tuple(v_806)))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then (if not-caught-fail(v_808) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,3-proj-3-tuple(v_809),1-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_813: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_806),3-proj-3-tuple(v_806)))) in
        {326}let v_814: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_801)) && success?(symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_806),3-proj-3-tuple(v_806)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),hash(3-proj-3-tuple(v_813),2-proj-3-tuple(v_801))) else fail-any) else fail-any)) in
        {327}let v_815: bitstring = catch-fail((if success?(2-proj-3-tuple(v_801)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if not-caught-fail(v_814) then (v_814,2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {328}let v_816: key = catch-fail(2-proj-3-tuple(v_815)) in
        {329}let v_817: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_815))) in
        {330}let v_818: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_817))) in
        {331}let v_819: aead = catch-fail(decrypt(1-proj-2-tuple(v_818),2-proj-2-tuple(v_818),3-proj-3-tuple(v_817),3-proj-3-tuple(v_801))) in
        {332}let v_820: bitstring = catch-fail(aeadunpack(v_819)) in
        {333}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_817))) in
        {334}let v_822: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_818))) && success?(1-proj-3-tuple(v_817))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then cipherstatepack(1-proj-2-tuple(v_821),increment_nonce(2-proj-2-tuple(v_818))) else fail-any) else fail-any)) in
        {335}let v_823: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && (success?(3-proj-3-tuple(v_817)) && success?(1-proj-3-tuple(v_817)))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if not-caught-fail(v_822) then (v_822,3-proj-3-tuple(v_820),1-proj-3-tuple(v_820)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_824: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_823),2-proj-3-tuple(v_817),3-proj-3-tuple(v_817)))) in
        {337}let v_825: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(symmetricstatepack(1-proj-3-tuple(v_823),2-proj-3-tuple(v_817),3-proj-3-tuple(v_817)))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then symmetricstatepack(1-proj-3-tuple(v_824),2-proj-3-tuple(v_824),hash(3-proj-3-tuple(v_824),3-proj-3-tuple(v_801))) else fail-any) else fail-any)) in
        {338}let v_826: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_815))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (v_825,2-proj-3-tuple(v_823),3-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {339}let v_827: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {340}let v_828: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_826),2-proj-7-tuple(v_800),3-proj-7-tuple(v_800),v_816,v_803,6-proj-7-tuple(v_800),7-proj-7-tuple(v_800))) in
        {341}let (hs_829: handshakestate,plaintext_a: bitstring,valid_830: bool) = (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-7-tuple(v_800))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (if not-caught-fail(v_805) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_816) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if ((3-proj-3-tuple(v_815) && 3-proj-3-tuple(v_826)) && (v_816 = getpublickey((if not-caught-fail(v_827) then keypairpack(validkey(v_827),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_828) then (v_828,2-proj-3-tuple(v_826),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {342}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {343}insert statestore(bob,alice,sid,statepack_b(hs_829))
    ) | (
        {396}get statestore(=bob,=alice,=sid,statepack_b(hs_831: handshakestate)) in
        {345}let v_832: bitstring = catch-fail(handshakestateunpack(hs_831)) in
        {346}let v_833: bitstring = catch-fail((empty,empty,empty)) in
        {347}let v_834: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {348}let v_835: keypair = catch-fail((if not-caught-fail(v_834) then keypairpack(validkey(v_834),key_e(bob,alice,sid)) else fail-any)) in
        {349}let v_836: bitstring = catch-fail(getpublickey(v_835)) in
        {350}let v_837: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_832))) in
        {351}let v_838: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_832)) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack(1-proj-3-tuple(v_837),2-proj-3-tuple(v_837),hash(3-proj-3-tuple(v_837),v_836)) else fail-any) else fail-any)) in
        {352}let v_839: bitstring = catch-fail(keypairunpack(v_835)) in
        {353}let v_840: bitstring = catch-fail(symmetricstateunpack(v_838)) in
        {354}let v_841: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_840),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {355}let v_842: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_840),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {356}let v_843: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_840),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {357}let v_844: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_840))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (v_841,v_842,v_843) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_845: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then dhexp(2-proj-2-tuple(v_839),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_844)) then cipherstatepack(2-proj-3-tuple(v_844),minnonce) else fail-any),1-proj-3-tuple(v_844),3-proj-3-tuple(v_840)) else fail-any) else fail-any) else fail-any)) in
        {359}let v_846: bitstring = catch-fail(keypairunpack(v_835)) in
        {360}let v_847: bitstring = catch-fail(symmetricstateunpack(v_845)) in
        {361}let v_848: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_847),(if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {362}let v_849: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_847),(if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {363}let v_850: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_847),(if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {364}let v_851: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_847))) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (v_848,v_849,v_850) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let v_852: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_832)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then dhexp(2-proj-2-tuple(v_846),4-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_851)) then cipherstatepack(2-proj-3-tuple(v_851),minnonce) else fail-any),1-proj-3-tuple(v_851),3-proj-3-tuple(v_847)) else fail-any) else fail-any) else fail-any)) in
        {366}let v_853: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_832))) in
        {367}let v_854: bitstring = catch-fail(symmetricstateunpack(v_852)) in
        {368}let v_855: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_854),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then dhexp(2-proj-2-tuple(v_853),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {369}let v_856: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_854),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then dhexp(2-proj-2-tuple(v_853),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {370}let v_857: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_854),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then dhexp(2-proj-2-tuple(v_853),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {371}let v_858: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then dhexp(2-proj-2-tuple(v_853),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_854))) then (if not-caught-fail(v_855) then (if not-caught-fail(v_856) then (if not-caught-fail(v_857) then (v_855,v_856,v_857) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_859: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then dhexp(2-proj-2-tuple(v_853),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_858)) then cipherstatepack(2-proj-3-tuple(v_858),minnonce) else fail-any),1-proj-3-tuple(v_858),3-proj-3-tuple(v_854)) else fail-any) else fail-any) else fail-any)) in
        {373}let v_860: bitstring = catch-fail(symmetricstateunpack(v_859)) in
        {374}let v_861: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_860))) in
        {375}let v_862: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_861),2-proj-2-tuple(v_861),3-proj-3-tuple(v_860),msg_b(bob,alice,sid))) in
        {376}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_860))) in
        {377}let v_864: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_861))) && success?(1-proj-3-tuple(v_860))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then cipherstatepack(1-proj-2-tuple(v_863),increment_nonce(2-proj-2-tuple(v_861))) else fail-any) else fail-any)) in
        {378}let v_865: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_860)) && success?(1-proj-3-tuple(v_860))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then (if not-caught-fail(v_862) then (if not-caught-fail(v_864) then (v_864,v_862) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_866: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_865),2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)))) in
        {380}let v_867: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_865)) && success?(symmetricstatepack(1-proj-2-tuple(v_865),2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack(1-proj-3-tuple(v_866),2-proj-3-tuple(v_866),hash(3-proj-3-tuple(v_866),2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {381}let v_868: bitstring = catch-fail((if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,2-proj-2-tuple(v_865)) else fail-any) else fail-any) else fail-any)) in
        {382}let v_869: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_868),2-proj-7-tuple(v_832),v_835,4-proj-7-tuple(v_832),5-proj-7-tuple(v_832),6-proj-7-tuple(v_832),7-proj-7-tuple(v_832))) in
        {383}let v_870: bitstring = catch-fail(concat3(v_836,2-proj-3-tuple(v_833),2-proj-2-tuple(v_868))) in
        {384}let v_871: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_868))) in
        {385}let v_872: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_871),zero)) in
        {386}let v_873: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_871),zero)) in
        {387}let v_874: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_871),zero)) in
        {388}let v_875: bitstring = catch-fail((if success?(2-proj-3-tuple(v_871)) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (v_872,v_873,v_874) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_876: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_875)) then cipherstatepack(1-proj-3-tuple(v_875),minnonce) else fail-any)) in
        {390}let v_877: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_875)) then cipherstatepack(2-proj-3-tuple(v_875),minnonce) else fail-any)) in
        {391}let v_878: bitstring = catch-fail((if success?(1-proj-2-tuple(v_868)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (1-proj-2-tuple(v_868),v_876,v_877) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {392}let (hs_879: handshakestate,message_b_880: bitstring,cs1_881: cipherstate,cs2_882: cipherstate) = (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-7-tuple(v_832))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if not-caught-fail(v_835) then (if not-caught-fail(v_836) then (if not-caught-fail(v_838) then (if not-caught-fail(v_845) then (if not-caught-fail(v_852) then (if not-caught-fail(v_859) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (v_869,v_870,2-proj-3-tuple(v_878),3-proj-3-tuple(v_878)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {393}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {394}insert statestore(bob,alice,sid,statepack_c(hs_879,cs1_881,cs2_882));
        {395}out(pub, message_b_880)
    ) | (
        {397}!
        {417}get statestore(=bob,=alice,=sid,statepack_c(hs_883: handshakestate,cs1_884: cipherstate,cs2_885: cipherstate)) in
        {398}let hs_886: handshakestate = handshakestatesetcs(hs_883,cs1_884) in
        {399}in(pub, message_c_887: bitstring);
        {400}let v_888: bitstring = catch-fail(handshakestateunpack(hs_886)) in
        {401}let v_889: bitstring = catch-fail(deconcat3(message_c_887)) in
        {402}let v_890: bool = catch-fail(true) in
        {403}let v_891: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_888))) in
        {404}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {405}let v_893: aead = catch-fail(decrypt(1-proj-2-tuple(v_892),2-proj-2-tuple(v_892),3-proj-3-tuple(v_891),3-proj-3-tuple(v_889))) in
        {406}let v_894: bitstring = catch-fail(aeadunpack(v_893)) in
        {407}let v_895: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {408}let v_896: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_892))) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then cipherstatepack(1-proj-2-tuple(v_895),increment_nonce(2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {409}let v_897: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_889)) && (success?(3-proj-3-tuple(v_891)) && success?(1-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_893) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if not-caught-fail(v_896) then (v_896,3-proj-3-tuple(v_894),1-proj-3-tuple(v_894)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_898: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) in
        {411}let v_899: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_889)) && success?(symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_898),hash(3-proj-3-tuple(v_898),3-proj-3-tuple(v_889))) else fail-any) else fail-any)) in
        {412}let v_900: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_889)) && success?(1-proj-7-tuple(v_888))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if not-caught-fail(v_899) then (v_899,2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {413}let v_901: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_900),2-proj-7-tuple(v_888),3-proj-7-tuple(v_888),4-proj-7-tuple(v_888),5-proj-7-tuple(v_888),6-proj-7-tuple(v_888),7-proj-7-tuple(v_888))) in
        {414}let (hs_902: handshakestate,plaintext_c: bitstring,valid_903: bool) = (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-7-tuple(v_888))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if not-caught-fail(v_890) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (v_890 && 3-proj-3-tuple(v_900)) then (if not-caught-fail(v_901) then (v_901,2-proj-3-tuple(v_900),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {415}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {416}insert statestore(bob,alice,sid,statepack_d(hs_902,handshakestategetcs(hs_902),cs2_885))
    ) | (
        {418}!
        {436}get statestore(=bob,=alice,=sid,statepack_d(hs_904: handshakestate,cs1_905: cipherstate,cs2_906: cipherstate)) in
        {419}let hs_907: handshakestate = handshakestatesetcs(hs_904,cs2_906) in
        {420}let v_908: bitstring = catch-fail(handshakestateunpack(hs_907)) in
        {421}let v_909: bitstring = catch-fail((empty,empty,empty)) in
        {422}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_908))) in
        {423}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {424}let v_912: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),msg_d(bob,alice,sid))) in
        {425}let v_913: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {426}let v_914: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then cipherstatepack(1-proj-2-tuple(v_913),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {427}let v_915: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_914) then (v_914,v_912) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_916: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_915),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {429}let v_917: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_915)) && success?(symmetricstatepack(1-proj-2-tuple(v_915),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_916),hash(3-proj-3-tuple(v_916),2-proj-2-tuple(v_915))) else fail-any) else fail-any)) in
        {430}let v_918: bitstring = catch-fail((if success?(1-proj-7-tuple(v_908)) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then (if not-caught-fail(v_917) then (v_917,2-proj-2-tuple(v_915)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_919: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_918),2-proj-7-tuple(v_908),3-proj-7-tuple(v_908),4-proj-7-tuple(v_908),5-proj-7-tuple(v_908),6-proj-7-tuple(v_908),7-proj-7-tuple(v_908))) in
        {432}let v_920: bitstring = catch-fail(concat3(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),2-proj-2-tuple(v_918))) in
        {433}let (hs_921: handshakestate,message_d_922: bitstring) = (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-7-tuple(v_908))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-2-tuple(v_918))))) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (v_919,v_920) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {434}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {435}out(pub, message_d_922)
    ) | (
        {437}event LeakS(phase0,bob);
        {438}out(pub, key_s(bob))
    ) | (
        {439}phase 1;
        {440}event LeakS(phase1,bob);
        {441}out(pub, key_s(bob))
    )
) | (
    {442}let v_923: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {443}let s_924: keypair = (if not-caught-fail(v_923) then keypairpack(validkey(v_923),key_s(bob)) else fail-any) in
    {444}out(pub, getpublickey(s_924));
    (
        {445}let e_925: keypair = keypairpack(empty,empty) in
        {446}let rs_926: key = empty in
        {447}let re_927: key = empty in
        {448}let v_928: bitstring = catch-fail(hash(somename,empty)) in
        {449}let v_929: key = catch-fail(v_928) in
        {450}let v_930: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {451}let v_931: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_928) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then symmetricstatepack(v_930,v_929,v_928) else fail-any) else fail-any) else fail-any))) in
        {452}let v_932: symmetricstate = catch-fail((if success?((if not-caught-fail(v_928) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then symmetricstatepack(v_930,v_929,v_928) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then symmetricstatepack(1-proj-3-tuple(v_931),2-proj-3-tuple(v_931),hash(3-proj-3-tuple(v_931),empty)) else fail-any) else fail-any)) in
        {453}let v_933: bitstring = catch-fail(symmetricstateunpack(v_932)) in
        {454}let v_934: symmetricstate = catch-fail((if success?(getpublickey(s_924)) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_933),hash(3-proj-3-tuple(v_933),getpublickey(s_924))) else fail-any) else fail-any)) in
        {455}let hs_935: handshakestate = (if not-caught-fail(v_932) then (if not-caught-fail(v_934) then handshakestatepack(v_934,s_924,e_925,rs_926,re_927,empty,false) else fail-any) else fail-any) in
        {456}insert statestore(bob,charlie,sid,statepack_a(hs_935))
    ) | (
        {490}get statestore(=bob,=charlie,=sid,statepack_a(hs_936: handshakestate)) in
        {457}in(pub, message_a_937: bitstring);
        {458}let v_938: bitstring = catch-fail(handshakestateunpack(hs_936)) in
        {459}let v_939: bitstring = catch-fail(deconcat3(message_a_937)) in
        {460}let v_940: bool = catch-fail(true) in
        {461}let v_941: key = catch-fail(1-proj-3-tuple(v_939)) in
        {462}let v_942: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_938))) in
        {463}let v_943: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_938)) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then symmetricstatepack(1-proj-3-tuple(v_942),2-proj-3-tuple(v_942),hash(3-proj-3-tuple(v_942),v_941)) else fail-any) else fail-any)) in
        {464}let v_944: bitstring = catch-fail(symmetricstateunpack(v_943)) in
        {465}let v_945: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {466}let v_946: aead = catch-fail(decrypt(1-proj-2-tuple(v_945),2-proj-2-tuple(v_945),3-proj-3-tuple(v_944),2-proj-3-tuple(v_939))) in
        {467}let v_947: bitstring = catch-fail(aeadunpack(v_946)) in
        {468}let v_948: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {469}let v_949: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_945))) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then cipherstatepack(1-proj-2-tuple(v_948),increment_nonce(2-proj-2-tuple(v_945))) else fail-any) else fail-any)) in
        {470}let v_950: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_939)) && (success?(3-proj-3-tuple(v_944)) && success?(1-proj-3-tuple(v_944)))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then (if not-caught-fail(v_946) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then (if not-caught-fail(v_949) then (v_949,3-proj-3-tuple(v_947),1-proj-3-tuple(v_947)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_951: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) in
        {472}let v_952: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_939)) && success?(symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_951),hash(3-proj-3-tuple(v_951),2-proj-3-tuple(v_939))) else fail-any) else fail-any)) in
        {473}let v_953: bitstring = catch-fail((if success?(2-proj-3-tuple(v_939)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_952) then (v_952,2-proj-3-tuple(v_950),3-proj-3-tuple(v_950)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_954: key = catch-fail(2-proj-3-tuple(v_953)) in
        {475}let v_955: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_953))) in
        {476}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {477}let v_957: aead = catch-fail(decrypt(1-proj-2-tuple(v_956),2-proj-2-tuple(v_956),3-proj-3-tuple(v_955),3-proj-3-tuple(v_939))) in
        {478}let v_958: bitstring = catch-fail(aeadunpack(v_957)) in
        {479}let v_959: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {480}let v_960: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_956))) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then cipherstatepack(1-proj-2-tuple(v_959),increment_nonce(2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {481}let v_961: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_939)) && (success?(3-proj-3-tuple(v_955)) && success?(1-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_957) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_960) then (v_960,3-proj-3-tuple(v_958),1-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {482}let v_962: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) in
        {483}let v_963: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_939)) && success?(symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then symmetricstatepack(1-proj-3-tuple(v_962),2-proj-3-tuple(v_962),hash(3-proj-3-tuple(v_962),3-proj-3-tuple(v_939))) else fail-any) else fail-any)) in
        {484}let v_964: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_939)) && success?(1-proj-3-tuple(v_953))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_963) then (v_963,2-proj-3-tuple(v_961),3-proj-3-tuple(v_961)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_965: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {486}let v_966: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_964),2-proj-7-tuple(v_938),3-proj-7-tuple(v_938),v_954,v_941,6-proj-7-tuple(v_938),7-proj-7-tuple(v_938))) in
        {487}let (hs_967: handshakestate,plaintext_a_968: bitstring,valid_969: bool) = (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-7-tuple(v_938))))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_943) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if ((3-proj-3-tuple(v_953) && 3-proj-3-tuple(v_964)) && (v_954 = getpublickey((if not-caught-fail(v_965) then keypairpack(validkey(v_965),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_966) then (v_966,2-proj-3-tuple(v_964),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_968);
        {489}insert statestore(bob,charlie,sid,statepack_b(hs_967))
    ) | (
        {542}get statestore(=bob,=charlie,=sid,statepack_b(hs_970: handshakestate)) in
        {491}let v_971: bitstring = catch-fail(handshakestateunpack(hs_970)) in
        {492}let v_972: bitstring = catch-fail((empty,empty,empty)) in
        {493}let v_973: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {494}let v_974: keypair = catch-fail((if not-caught-fail(v_973) then keypairpack(validkey(v_973),key_e(bob,charlie,sid)) else fail-any)) in
        {495}let v_975: bitstring = catch-fail(getpublickey(v_974)) in
        {496}let v_976: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_971))) in
        {497}let v_977: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_971)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),v_975)) else fail-any) else fail-any)) in
        {498}let v_978: bitstring = catch-fail(keypairunpack(v_974)) in
        {499}let v_979: bitstring = catch-fail(symmetricstateunpack(v_977)) in
        {500}let v_980: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {501}let v_981: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {502}let v_982: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {503}let v_983: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_979))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (v_980,v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_984: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_983)) then cipherstatepack(2-proj-3-tuple(v_983),minnonce) else fail-any),1-proj-3-tuple(v_983),3-proj-3-tuple(v_979)) else fail-any) else fail-any) else fail-any)) in
        {505}let v_985: bitstring = catch-fail(keypairunpack(v_974)) in
        {506}let v_986: bitstring = catch-fail(symmetricstateunpack(v_984)) in
        {507}let v_987: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_986),(if success?(4-proj-7-tuple(v_971)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then dhexp(2-proj-2-tuple(v_985),4-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {508}let v_988: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_986),(if success?(4-proj-7-tuple(v_971)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then dhexp(2-proj-2-tuple(v_985),4-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {509}let v_989: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_986),(if success?(4-proj-7-tuple(v_971)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then dhexp(2-proj-2-tuple(v_985),4-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {510}let v_990: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_971)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then dhexp(2-proj-2-tuple(v_985),4-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_986))) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (if not-caught-fail(v_989) then (v_987,v_988,v_989) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {511}let v_991: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_971)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then dhexp(2-proj-2-tuple(v_985),4-proj-7-tuple(v_971)) else fail-any) else fail-any)) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_990)) then cipherstatepack(2-proj-3-tuple(v_990),minnonce) else fail-any),1-proj-3-tuple(v_990),3-proj-3-tuple(v_986)) else fail-any) else fail-any) else fail-any)) in
        {512}let v_992: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_971))) in
        {513}let v_993: bitstring = catch-fail(symmetricstateunpack(v_991)) in
        {514}let v_994: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_993),(if (success?(5-proj-7-tuple(v_971)) && success?(2-proj-7-tuple(v_971))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {515}let v_995: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_993),(if (success?(5-proj-7-tuple(v_971)) && success?(2-proj-7-tuple(v_971))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {516}let v_996: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_993),(if (success?(5-proj-7-tuple(v_971)) && success?(2-proj-7-tuple(v_971))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {517}let v_997: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_971)) && success?(2-proj-7-tuple(v_971))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_993))) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (v_994,v_995,v_996) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_998: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_971)) && success?(2-proj-7-tuple(v_971))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_997)) then cipherstatepack(2-proj-3-tuple(v_997),minnonce) else fail-any),1-proj-3-tuple(v_997),3-proj-3-tuple(v_993)) else fail-any) else fail-any) else fail-any)) in
        {519}let v_999: bitstring = catch-fail(symmetricstateunpack(v_998)) in
        {520}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {521}let v_1001: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1000),2-proj-2-tuple(v_1000),3-proj-3-tuple(v_999),msg_b(bob,charlie,sid))) in
        {522}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {523}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1000))) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_1000))) else fail-any) else fail-any)) in
        {524}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1003) then (v_1003,v_1001) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1004),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) in
        {526}let v_1006: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1004)) && success?(symmetricstatepack(1-proj-2-tuple(v_1004),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),2-proj-2-tuple(v_1004))) else fail-any) else fail-any)) in
        {527}let v_1007: bitstring = catch-fail((if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-2-tuple(v_1004)) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1007),2-proj-7-tuple(v_971),v_974,4-proj-7-tuple(v_971),5-proj-7-tuple(v_971),6-proj-7-tuple(v_971),7-proj-7-tuple(v_971))) in
        {529}let v_1009: bitstring = catch-fail(concat3(v_975,2-proj-3-tuple(v_972),2-proj-2-tuple(v_1007))) in
        {530}let v_1010: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1007))) in
        {531}let v_1011: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1010),zero)) in
        {532}let v_1012: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1010),zero)) in
        {533}let v_1013: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1010),zero)) in
        {534}let v_1014: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1010)) then (if not-caught-fail(v_1011) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (v_1011,v_1012,v_1013) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1015: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1014)) then cipherstatepack(1-proj-3-tuple(v_1014),minnonce) else fail-any)) in
        {536}let v_1016: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1014)) then cipherstatepack(2-proj-3-tuple(v_1014),minnonce) else fail-any)) in
        {537}let v_1017: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1007)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (1-proj-2-tuple(v_1007),v_1015,v_1016) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let (hs_1018: handshakestate,message_b_1019: bitstring,cs1_1020: cipherstate,cs2_1021: cipherstate) = (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-7-tuple(v_971))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_975) then (if not-caught-fail(v_977) then (if not-caught-fail(v_984) then (if not-caught-fail(v_991) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-2-tuple(v_1007))))) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1009) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (v_1008,v_1009,2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {539}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {540}insert statestore(bob,charlie,sid,statepack_c(hs_1018,cs1_1020,cs2_1021));
        {541}out(pub, message_b_1019)
    ) | (
        {543}!
        {563}get statestore(=bob,=charlie,=sid,statepack_c(hs_1022: handshakestate,cs1_1023: cipherstate,cs2_1024: cipherstate)) in
        {544}let hs_1025: handshakestate = handshakestatesetcs(hs_1022,cs1_1023) in
        {545}in(pub, message_c_1026: bitstring);
        {546}let v_1027: bitstring = catch-fail(handshakestateunpack(hs_1025)) in
        {547}let v_1028: bitstring = catch-fail(deconcat3(message_c_1026)) in
        {548}let v_1029: bool = catch-fail(true) in
        {549}let v_1030: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1027))) in
        {550}let v_1031: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {551}let v_1032: aead = catch-fail(decrypt(1-proj-2-tuple(v_1031),2-proj-2-tuple(v_1031),3-proj-3-tuple(v_1030),3-proj-3-tuple(v_1028))) in
        {552}let v_1033: bitstring = catch-fail(aeadunpack(v_1032)) in
        {553}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {554}let v_1035: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1031))) && success?(1-proj-3-tuple(v_1030))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then cipherstatepack(1-proj-2-tuple(v_1034),increment_nonce(2-proj-2-tuple(v_1031))) else fail-any) else fail-any)) in
        {555}let v_1036: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && (success?(3-proj-3-tuple(v_1030)) && success?(1-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if not-caught-fail(v_1035) then (v_1035,3-proj-3-tuple(v_1033),1-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {556}let v_1037: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) in
        {557}let v_1038: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack(1-proj-3-tuple(v_1037),2-proj-3-tuple(v_1037),hash(3-proj-3-tuple(v_1037),3-proj-3-tuple(v_1028))) else fail-any) else fail-any)) in
        {558}let v_1039: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(1-proj-7-tuple(v_1027))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,2-proj-3-tuple(v_1036),3-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1040: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1039),2-proj-7-tuple(v_1027),3-proj-7-tuple(v_1027),4-proj-7-tuple(v_1027),5-proj-7-tuple(v_1027),6-proj-7-tuple(v_1027),7-proj-7-tuple(v_1027))) in
        {560}let (hs_1041: handshakestate,plaintext_c_1042: bitstring,valid_1043: bool) = (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-7-tuple(v_1027))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (v_1029 && 3-proj-3-tuple(v_1039)) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1039),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {561}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1042);
        {562}insert statestore(bob,charlie,sid,statepack_d(hs_1041,handshakestategetcs(hs_1041),cs2_1024))
    ) | (
        {564}!
        {582}get statestore(=bob,=charlie,=sid,statepack_d(hs_1044: handshakestate,cs1_1045: cipherstate,cs2_1046: cipherstate)) in
        {565}let hs_1047: handshakestate = handshakestatesetcs(hs_1044,cs2_1046) in
        {566}let v_1048: bitstring = catch-fail(handshakestateunpack(hs_1047)) in
        {567}let v_1049: bitstring = catch-fail((empty,empty,empty)) in
        {568}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1048))) in
        {569}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {570}let v_1052: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1051),2-proj-2-tuple(v_1051),3-proj-3-tuple(v_1050),msg_d(bob,charlie,sid))) in
        {571}let v_1053: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {572}let v_1054: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1051))) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then cipherstatepack(1-proj-2-tuple(v_1053),increment_nonce(2-proj-2-tuple(v_1051))) else fail-any) else fail-any)) in
        {573}let v_1055: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1050)) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then (if not-caught-fail(v_1052) then (if not-caught-fail(v_1054) then (v_1054,v_1052) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1056: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1055),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) in
        {575}let v_1057: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1055)) && success?(symmetricstatepack(1-proj-2-tuple(v_1055),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1056),hash(3-proj-3-tuple(v_1056),2-proj-2-tuple(v_1055))) else fail-any) else fail-any)) in
        {576}let v_1058: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then (if not-caught-fail(v_1057) then (v_1057,2-proj-2-tuple(v_1055)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {577}let v_1059: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1058),2-proj-7-tuple(v_1048),3-proj-7-tuple(v_1048),4-proj-7-tuple(v_1048),5-proj-7-tuple(v_1048),6-proj-7-tuple(v_1048),7-proj-7-tuple(v_1048))) in
        {578}let v_1060: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1049),2-proj-3-tuple(v_1049),2-proj-2-tuple(v_1058))) in
        {579}let (hs_1061: handshakestate,message_d_1062: bitstring) = (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-7-tuple(v_1048))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then (if not-caught-fail(v_1059) then (if not-caught-fail(v_1060) then (v_1059,v_1060) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {581}out(pub, message_d_1062)
    ) | (
        {583}event LeakS(phase0,bob);
        {584}out(pub, key_s(bob))
    ) | (
        {585}phase 1;
        {586}event LeakS(phase1,bob);
        {587}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 207 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 26 rules in the queue.
600 rules inserted. The rule base contains 574 rules. 41 rules in the queue.
800 rules inserted. The rule base contains 747 rules. 97 rules in the queue.
1000 rules inserted. The rule base contains 888 rules. 112 rules in the queue.
1200 rules inserted. The rule base contains 1009 rules. 137 rules in the queue.
1400 rules inserted. The rule base contains 1114 rules. 159 rules in the queue.
1600 rules inserted. The rule base contains 1213 rules. 163 rules in the queue.
1800 rules inserted. The rule base contains 1348 rules. 174 rules in the queue.
2000 rules inserted. The rule base contains 1518 rules. 203 rules in the queue.
2200 rules inserted. The rule base contains 1698 rules. 214 rules in the queue.
2400 rules inserted. The rule base contains 1872 rules. 239 rules in the queue.
2600 rules inserted. The rule base contains 2021 rules. 268 rules in the queue.
2800 rules inserted. The rule base contains 2137 rules. 254 rules in the queue.
3000 rules inserted. The rule base contains 2272 rules. 249 rules in the queue.
3200 rules inserted. The rule base contains 2397 rules. 255 rules in the queue.
3400 rules inserted. The rule base contains 2532 rules. 245 rules in the queue.
3600 rules inserted. The rule base contains 2686 rules. 242 rules in the queue.
3800 rules inserted. The rule base contains 2830 rules. 244 rules in the queue.
4000 rules inserted. The rule base contains 2977 rules. 264 rules in the queue.
4200 rules inserted. The rule base contains 3092 rules. 267 rules in the queue.
4400 rules inserted. The rule base contains 3219 rules. 223 rules in the queue.
4600 rules inserted. The rule base contains 3351 rules. 209 rules in the queue.
4800 rules inserted. The rule base contains 3492 rules. 176 rules in the queue.
5000 rules inserted. The rule base contains 3600 rules. 154 rules in the queue.
5200 rules inserted. The rule base contains 3702 rules. 93 rules in the queue.
5400 rules inserted. The rule base contains 3706 rules. 12 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260060]),msg_a(alice,bob,sid[!1 = @sid_25046260060]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_25046260061]),msg_a(alice,bob,sid[!1 = @sid_25046260060])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260069]),msg_a(alice,bob,sid[!1 = @sid_25046260069]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_25046260070]),msg_a(alice,bob,sid[!1 = @sid_25046260069])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260079]),msg_a(alice,bob,sid[!1 = @sid_25046260079]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_25046260080]),msg_a(alice,bob,sid[!1 = @sid_25046260079])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260089]),msg_a(alice,bob,sid[!1 = @sid_25046260089]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_25046260090]),msg_a(alice,bob,sid[!1 = @sid_25046260089])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260098]),msg_a(alice,bob,sid[!1 = @sid_25046260098]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_25046260099]),msg_a(alice,bob,sid[!1 = @sid_25046260098])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260107]),msg_a(alice,bob,sid[!1 = @sid_25046260107]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_25046260107]))
Abbreviations:
sid_25046260184 = sid[!1 = @sid_25046260159]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_25046260184,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_25046260184,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_25046260184,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_25046260184),msg_a(alice,bob,sid_25046260184)) may be executed at {49}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))) may be sent on channel pub at output {51}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {298}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g))))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260184),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260184)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_25046260184).
attacker(msg_a(alice,bob,sid_25046260184)).

21. By 20, the attacker may know msg_a(alice,bob,sid_25046260184).
So the attacker may know msg_a(alice,bob,sid_25046260184) in phase 1.
attacker_p1(msg_a(alice,bob,sid_25046260184)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260187]),msg_a(alice,bob,sid[!1 = @sid_25046260187]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_25046260187]))
Abbreviations:
sid_25046260265 = sid[!1 = @sid_25046260240]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_25046260265,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_25046260265,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_25046260265,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_25046260265),msg_a(alice,bob,sid_25046260265)) may be executed at {49}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))) may be sent on channel pub at output {51}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {298}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g))))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260265),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260265)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_25046260265).
attacker(msg_a(alice,bob,sid_25046260265)).

21. By 20, the attacker may know msg_a(alice,bob,sid_25046260265).
So the attacker may know msg_a(alice,bob,sid_25046260265) in phase 1.
attacker_p1(msg_a(alice,bob,sid_25046260265)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260268]),msg_a(alice,bob,sid[!1 = @sid_25046260268]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_25046260268]))
Abbreviations:
sid_25046260347 = sid[!1 = @sid_25046260322]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_25046260347,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_25046260347,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_25046260347,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_25046260347),msg_a(alice,bob,sid_25046260347)) may be executed at {49}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))) may be sent on channel pub at output {51}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {298}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g))))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260347),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260347)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_25046260347).
attacker(msg_a(alice,bob,sid_25046260347)).

21. By 20, the attacker may know msg_a(alice,bob,sid_25046260347).
So the attacker may know msg_a(alice,bob,sid_25046260347) in phase 1.
attacker_p1(msg_a(alice,bob,sid_25046260347)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260350]),msg_a(alice,bob,sid[!1 = @sid_25046260350]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_25046260350]))
Abbreviations:
sid_25046260427 = sid[!1 = @sid_25046260402]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_25046260427,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_25046260427,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_25046260427,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_25046260427),msg_a(alice,bob,sid_25046260427)) may be executed at {49}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))) may be sent on channel pub at output {51}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {298}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g))))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260427),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260427)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_25046260427).
attacker(msg_a(alice,bob,sid_25046260427)).

21. By 20, the attacker may know msg_a(alice,bob,sid_25046260427).
So the attacker may know msg_a(alice,bob,sid_25046260427) in phase 1.
attacker_p1(msg_a(alice,bob,sid_25046260427)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260430]),msg_b(bob,alice,sid[!1 = @sid_25046260430]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260431]),msg_a(alice,bob,sid[!1 = @sid_25046260431]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_25046260431]),msg_b(bob,alice,sid[!1 = @sid_25046260430])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260439]),msg_b(bob,alice,sid[!1 = @sid_25046260439]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260440]),msg_a(alice,bob,sid[!1 = @sid_25046260440]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_25046260440]),msg_b(bob,alice,sid[!1 = @sid_25046260439])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260449]),msg_b(bob,alice,sid[!1 = @sid_25046260449]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260450]),msg_a(alice,bob,sid[!1 = @sid_25046260450]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_25046260450]),msg_b(bob,alice,sid[!1 = @sid_25046260449])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260459]),msg_b(bob,alice,sid[!1 = @sid_25046260459]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260460]),msg_a(alice,bob,sid[!1 = @sid_25046260460]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_25046260460]),msg_b(bob,alice,sid[!1 = @sid_25046260459])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260468]),msg_b(bob,alice,sid[!1 = @sid_25046260468]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260469]),msg_a(alice,bob,sid[!1 = @sid_25046260469]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_25046260469]),msg_b(bob,alice,sid[!1 = @sid_25046260468])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260492]),msg_c(alice,bob,sid[!1 = @sid_25046260492]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260493]),msg_b(bob,alice,sid[!1 = @sid_25046260493]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260492]),msg_a(alice,bob,sid[!1 = @sid_25046260492]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_25046260493]),msg_c(alice,bob,sid[!1 = @sid_25046260492])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260501]),msg_c(alice,bob,sid[!1 = @sid_25046260501]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260502]),msg_b(bob,alice,sid[!1 = @sid_25046260502]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260501]),msg_a(alice,bob,sid[!1 = @sid_25046260501]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_25046260502]),msg_c(alice,bob,sid[!1 = @sid_25046260501])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260511]),msg_c(alice,bob,sid[!1 = @sid_25046260511]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260512]),msg_b(bob,alice,sid[!1 = @sid_25046260512]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260511]),msg_a(alice,bob,sid[!1 = @sid_25046260511]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_25046260512]),msg_c(alice,bob,sid[!1 = @sid_25046260511])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260521]),msg_c(alice,bob,sid[!1 = @sid_25046260521]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260522]),msg_b(bob,alice,sid[!1 = @sid_25046260522]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260521]),msg_a(alice,bob,sid[!1 = @sid_25046260521]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_25046260522]),msg_c(alice,bob,sid[!1 = @sid_25046260521])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260530]),msg_c(alice,bob,sid[!1 = @sid_25046260530]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260531]),msg_b(bob,alice,sid[!1 = @sid_25046260531]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260530]),msg_a(alice,bob,sid[!1 = @sid_25046260530]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_25046260531]),msg_c(alice,bob,sid[!1 = @sid_25046260530])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_25046260554]),msg_d(bob,alice,sid[!1 = @sid_25046260554]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260555]),msg_c(alice,bob,sid[!1 = @sid_25046260555]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260554]),msg_b(bob,alice,sid[!1 = @sid_25046260554]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260555]),msg_a(alice,bob,sid[!1 = @sid_25046260555]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_25046260555]),msg_d(bob,alice,sid[!1 = @sid_25046260554])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_25046260563]),msg_d(bob,alice,sid[!1 = @sid_25046260563]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260564]),msg_c(alice,bob,sid[!1 = @sid_25046260564]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260563]),msg_b(bob,alice,sid[!1 = @sid_25046260563]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260564]),msg_a(alice,bob,sid[!1 = @sid_25046260564]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_25046260564]),msg_d(bob,alice,sid[!1 = @sid_25046260563])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_25046260573]),msg_d(bob,alice,sid[!1 = @sid_25046260573]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260574]),msg_c(alice,bob,sid[!1 = @sid_25046260574]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260573]),msg_b(bob,alice,sid[!1 = @sid_25046260573]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260574]),msg_a(alice,bob,sid[!1 = @sid_25046260574]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_25046260574]),msg_d(bob,alice,sid[!1 = @sid_25046260573])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_25046260583]),msg_d(bob,alice,sid[!1 = @sid_25046260583]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260584]),msg_c(alice,bob,sid[!1 = @sid_25046260584]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260583]),msg_b(bob,alice,sid[!1 = @sid_25046260583]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260584]),msg_a(alice,bob,sid[!1 = @sid_25046260584]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_25046260584]),msg_d(bob,alice,sid[!1 = @sid_25046260583])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_25046260592]),msg_d(bob,alice,sid[!1 = @sid_25046260592]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260593]),msg_c(alice,bob,sid[!1 = @sid_25046260593]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260592]),msg_b(bob,alice,sid[!1 = @sid_25046260592]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260593]),msg_a(alice,bob,sid[!1 = @sid_25046260593]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_25046260593]),msg_d(bob,alice,sid[!1 = @sid_25046260592])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_25046260614]),msg_d(bob,alice,sid[!1 = @sid_25046260614]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_25046260615]),msg_c(alice,bob,sid[!1 = @sid_25046260615]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_25046260614]),msg_b(bob,alice,sid[!1 = @sid_25046260614]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_25046260615]),msg_a(alice,bob,sid[!1 = @sid_25046260615]))) -> end(RecvEnd(true))
Abbreviations:
sid_25046260859 = sid[!1 = @sid_25046260802]
sid_25046260860 = sid[!1 = @sid_25046260848]

1. The entry statestore(alice,bob,sid_25046260860,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_25046260860,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_25046260860,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_25046260860),msg_a(alice,bob,sid_25046260860)) may be executed at {49}.
So the entry statestore(alice,bob,sid_25046260860,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_25046260860,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,alice,sid_25046260859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {310}.
table(statestore(bob,alice,sid_25046260859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_25046260860,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_25046260860),msg_a(alice,bob,sid_25046260860)) may be executed at {49}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))) may be sent on channel pub at output {51}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))).

5. The entry statestore(bob,alice,sid_25046260859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {344}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))) that may be sent on channel pub by 4 may be received at input {311}.
We have validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_25046260859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false))) may be inserted in a table at insert {343}.
table(statestore(bob,alice,sid_25046260859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false)))).

6. The entry statestore(bob,alice,sid_25046260859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false))) that may be in a table by 5 may be read at get {396}.
The event SendMsg(bob,alice,stagepack_b(sid_25046260859),msg_b(bob,alice,sid_25046260859)) may be executed at {393}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))) may be sent on channel pub at output {395}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))).

7. The entry statestore(alice,bob,sid_25046260860,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {103}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))) that may be sent on channel pub by 6 may be received at input {53}.
So the entry statestore(alice,bob,sid_25046260860,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {102}.
table(statestore(alice,bob,sid_25046260860,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_25046260860,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {123}.
The event SendMsg(alice,bob,stagepack_c(sid_25046260860),msg_c(alice,bob,sid_25046260860)) may be executed at {120}.
So the entry statestore(alice,bob,sid_25046260860,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {121}.
table(statestore(alice,bob,sid_25046260860,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_25046260859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false))) that may be in a table by 5 may be read at get {396}.
The event SendMsg(bob,alice,stagepack_b(sid_25046260859),msg_b(bob,alice,sid_25046260859)) may be executed at {393}.
So the entry statestore(bob,alice,sid_25046260859,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),key_e(bob,alice,sid_25046260859)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {394}.
table(statestore(bob,alice,sid_25046260859,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),key_e(bob,alice,sid_25046260859)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_25046260860,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {123}.
The event SendMsg(alice,bob,stagepack_c(sid_25046260860),msg_c(alice,bob,sid_25046260860)) may be executed at {120}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860))) may be sent on channel pub at output {122}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))).

11. The entry statestore(bob,alice,sid_25046260859,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),key_e(bob,alice,sid_25046260859)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 9 may be read at get {417}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860))) that may be sent on channel pub by 10 may be received at input {399}.
So the entry statestore(bob,alice,sid_25046260859,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),key_e(bob,alice,sid_25046260859)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {416}.
table(statestore(bob,alice,sid_25046260859,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),key_e(bob,alice,sid_25046260859)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_25046260859,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),key_e(bob,alice,sid_25046260859)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 11 may be read at get {436}.
The event SendMsg(bob,alice,stagepack_d(sid_25046260859),msg_d(bob,alice,sid_25046260859)) may be executed at {434}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860))),msg_d(bob,alice,sid_25046260859))) may be sent on channel pub at output {435}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860))),msg_d(bob,alice,sid_25046260859)))).

13. The entry statestore(alice,bob,sid_25046260860,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g)),key_e(alice,bob,sid_25046260860)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 8 may be read at get {144}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_25046260860),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_e(alice,bob,sid_25046260860),g))),dhexp_real(key_e(bob,alice,sid_25046260859),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_25046260860),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_25046260860),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_25046260860))),validkey(dhexp_real(key_e(bob,alice,sid_25046260859),g))),msg_b(bob,alice,sid_25046260859))),msg_c(alice,bob,sid_25046260860))),msg_d(bob,alice,sid_25046260859))) that may be sent on channel pub by 12 may be received at input {126}.
So event RecvEnd(true) may be executed at {143}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
