File "K.noise.active.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 219, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.active.pv", line 219, character 36:
Warning: identifier h rebound.
File "K.noise.active.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 250, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 255, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 256, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 262, character 6:
Warning: identifier e rebound.
File "K.noise.active.pv", line 263, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.active.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 268, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 268, characters 26-35:
Warning: identifier ciphertext rebound.
File "K.noise.active.pv", line 269, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 278, characters 6-7:
Warning: identifier re rebound.
File "K.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 285, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 358, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 262, character 6:
Warning: identifier e rebound.
File "K.noise.active.pv", line 263, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.active.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 268, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 268, characters 26-35:
Warning: identifier ciphertext rebound.
File "K.noise.active.pv", line 269, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 250, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 383, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 278, characters 6-7:
Warning: identifier re rebound.
File "K.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 285, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 209, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 255, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 256, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_358: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_359: keypair = (if not-caught-fail(v_358) then keypairpack(validkey(v_358),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_359));
    (
        {7}let e_360: keypair = keypairpack(empty,empty) in
        {8}let v_361: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_362: key = getpublickey((if not-caught-fail(v_361) then keypairpack(validkey(v_361),key_s(bob)) else fail-any)) in
        {10}let re_363: key = empty in
        {11}let v_364: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_365: key = catch-fail(v_364) in
        {13}let v_366: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_367: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_364) then (if not-caught-fail(v_365) then (if not-caught-fail(v_366) then symmetricstatepack(v_366,v_365,v_364) else fail-any) else fail-any) else fail-any))) in
        {15}let v_368: symmetricstate = catch-fail((if success?((if not-caught-fail(v_364) then (if not-caught-fail(v_365) then (if not-caught-fail(v_366) then symmetricstatepack(v_366,v_365,v_364) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_367) && success?(is-true(success?(1-proj-3-tuple(v_367))))) then symmetricstatepack(1-proj-3-tuple(v_367),2-proj-3-tuple(v_367),hash(3-proj-3-tuple(v_367),empty)) else fail-any) else fail-any)) in
        {16}let v_369: bitstring = catch-fail(symmetricstateunpack(v_368)) in
        {17}let v_370: symmetricstate = catch-fail((if success?(getpublickey(s_359)) then (if (not-caught-fail(v_369) && success?(is-true(success?(1-proj-3-tuple(v_369))))) then symmetricstatepack(1-proj-3-tuple(v_369),2-proj-3-tuple(v_369),hash(3-proj-3-tuple(v_369),getpublickey(s_359))) else fail-any) else fail-any)) in
        {18}let v_371: bitstring = catch-fail(symmetricstateunpack(v_370)) in
        {19}let v_372: symmetricstate = catch-fail((if (not-caught-fail(v_371) && success?(is-true(success?(1-proj-3-tuple(v_371))))) then symmetricstatepack(1-proj-3-tuple(v_371),2-proj-3-tuple(v_371),hash(3-proj-3-tuple(v_371),rs_362)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_368) then (if not-caught-fail(v_370) then (if not-caught-fail(v_372) then handshakestatepack(v_372,s_359,e_360,rs_362,re_363,empty,true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {65}get statestore(=alice,=bob,=sid,statepack_a(hs_373: handshakestate)) in
        {22}let v_374: bitstring = catch-fail(handshakestateunpack(hs_373)) in
        {23}let v_375: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_376: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {25}let v_377: keypair = catch-fail((if not-caught-fail(v_376) then keypairpack(validkey(v_376),key_e(alice,bob,sid)) else fail-any)) in
        {26}let v_378: bitstring = catch-fail(getpublickey(v_377)) in
        {27}let v_379: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_374))) in
        {28}let v_380: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_374)) then (if (not-caught-fail(v_379) && success?(is-true(success?(1-proj-3-tuple(v_379))))) then symmetricstatepack(1-proj-3-tuple(v_379),2-proj-3-tuple(v_379),hash(3-proj-3-tuple(v_379),v_378)) else fail-any) else fail-any)) in
        {29}let v_381: bitstring = catch-fail(keypairunpack(v_377)) in
        {30}let v_382: bitstring = catch-fail(symmetricstateunpack(v_380)) in
        {31}let v_383: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_382),(if success?(4-proj-7-tuple(v_374)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-2-tuple(v_381))))) then dhexp(2-proj-2-tuple(v_381),4-proj-7-tuple(v_374)) else fail-any) else fail-any))) in
        {32}let v_384: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_382),(if success?(4-proj-7-tuple(v_374)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-2-tuple(v_381))))) then dhexp(2-proj-2-tuple(v_381),4-proj-7-tuple(v_374)) else fail-any) else fail-any))) in
        {33}let v_385: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_382),(if success?(4-proj-7-tuple(v_374)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-2-tuple(v_381))))) then dhexp(2-proj-2-tuple(v_381),4-proj-7-tuple(v_374)) else fail-any) else fail-any))) in
        {34}let v_386: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_374)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-2-tuple(v_381))))) then dhexp(2-proj-2-tuple(v_381),4-proj-7-tuple(v_374)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_382))) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then (if not-caught-fail(v_385) then (v_383,v_384,v_385) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_387: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_374)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-2-tuple(v_381))))) then dhexp(2-proj-2-tuple(v_381),4-proj-7-tuple(v_374)) else fail-any) else fail-any)) then (if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-3-tuple(v_382))))) then (if (not-caught-fail(v_386) && success?(is-true(success?(1-proj-3-tuple(v_386))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_386)) then cipherstatepack(2-proj-3-tuple(v_386),minnonce) else fail-any),1-proj-3-tuple(v_386),3-proj-3-tuple(v_382)) else fail-any) else fail-any) else fail-any)) in
        {36}let v_388: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_374))) in
        {37}let v_389: bitstring = catch-fail(symmetricstateunpack(v_387)) in
        {38}let v_390: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_389),(if (success?(4-proj-7-tuple(v_374)) && success?(2-proj-7-tuple(v_374))) then (if (not-caught-fail(v_388) && success?(is-true(success?(1-proj-2-tuple(v_388))))) then dhexp(2-proj-2-tuple(v_388),4-proj-7-tuple(v_374)) else fail-any) else fail-any))) in
        {39}let v_391: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_389),(if (success?(4-proj-7-tuple(v_374)) && success?(2-proj-7-tuple(v_374))) then (if (not-caught-fail(v_388) && success?(is-true(success?(1-proj-2-tuple(v_388))))) then dhexp(2-proj-2-tuple(v_388),4-proj-7-tuple(v_374)) else fail-any) else fail-any))) in
        {40}let v_392: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_389),(if (success?(4-proj-7-tuple(v_374)) && success?(2-proj-7-tuple(v_374))) then (if (not-caught-fail(v_388) && success?(is-true(success?(1-proj-2-tuple(v_388))))) then dhexp(2-proj-2-tuple(v_388),4-proj-7-tuple(v_374)) else fail-any) else fail-any))) in
        {41}let v_393: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_374)) && success?(2-proj-7-tuple(v_374))) then (if (not-caught-fail(v_388) && success?(is-true(success?(1-proj-2-tuple(v_388))))) then dhexp(2-proj-2-tuple(v_388),4-proj-7-tuple(v_374)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_389))) then (if not-caught-fail(v_390) then (if not-caught-fail(v_391) then (if not-caught-fail(v_392) then (v_390,v_391,v_392) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_394: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_374)) && success?(2-proj-7-tuple(v_374))) then (if (not-caught-fail(v_388) && success?(is-true(success?(1-proj-2-tuple(v_388))))) then dhexp(2-proj-2-tuple(v_388),4-proj-7-tuple(v_374)) else fail-any) else fail-any)) then (if (not-caught-fail(v_389) && success?(is-true(success?(1-proj-3-tuple(v_389))))) then (if (not-caught-fail(v_393) && success?(is-true(success?(1-proj-3-tuple(v_393))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_393)) then cipherstatepack(2-proj-3-tuple(v_393),minnonce) else fail-any),1-proj-3-tuple(v_393),3-proj-3-tuple(v_389)) else fail-any) else fail-any) else fail-any)) in
        {43}let v_395: bitstring = catch-fail(symmetricstateunpack(v_394)) in
        {44}let v_396: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_395))) in
        {45}let v_397: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_396),2-proj-2-tuple(v_396),3-proj-3-tuple(v_395),msg_a(alice,bob,sid))) in
        {46}let v_398: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_395))) in
        {47}let v_399: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_396))) && success?(1-proj-3-tuple(v_395))) then (if (not-caught-fail(v_398) && success?(is-true(success?(1-proj-2-tuple(v_398))))) then cipherstatepack(1-proj-2-tuple(v_398),increment_nonce(2-proj-2-tuple(v_396))) else fail-any) else fail-any)) in
        {48}let v_400: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_395)) && success?(1-proj-3-tuple(v_395))) then (if (not-caught-fail(v_396) && success?(is-true(success?(1-proj-2-tuple(v_396))))) then (if not-caught-fail(v_397) then (if not-caught-fail(v_399) then (v_399,v_397) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_401: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_400),2-proj-3-tuple(v_395),3-proj-3-tuple(v_395)))) in
        {50}let v_402: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_400)) && success?(symmetricstatepack(1-proj-2-tuple(v_400),2-proj-3-tuple(v_395),3-proj-3-tuple(v_395)))) then (if (not-caught-fail(v_401) && success?(is-true(success?(1-proj-3-tuple(v_401))))) then symmetricstatepack(1-proj-3-tuple(v_401),2-proj-3-tuple(v_401),hash(3-proj-3-tuple(v_401),2-proj-2-tuple(v_400))) else fail-any) else fail-any)) in
        {51}let v_403: bitstring = catch-fail((if (not-caught-fail(v_395) && success?(is-true(success?(1-proj-3-tuple(v_395))))) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then (if not-caught-fail(v_402) then (v_402,2-proj-2-tuple(v_400)) else fail-any) else fail-any) else fail-any)) in
        {52}let v_404: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_403),2-proj-7-tuple(v_374),v_377,4-proj-7-tuple(v_374),5-proj-7-tuple(v_374),6-proj-7-tuple(v_374),7-proj-7-tuple(v_374))) in
        {53}let v_405: bitstring = catch-fail(concat3(v_378,2-proj-3-tuple(v_375),2-proj-2-tuple(v_403))) in
        {54}let v_406: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_403))) in
        {55}let v_407: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_406),zero)) in
        {56}let v_408: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_406),zero)) in
        {57}let v_409: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_406),zero)) in
        {58}let v_410: bitstring = catch-fail((if success?(2-proj-3-tuple(v_406)) then (if not-caught-fail(v_407) then (if not-caught-fail(v_408) then (if not-caught-fail(v_409) then (v_407,v_408,v_409) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {59}let v_411: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_410)) then cipherstatepack(1-proj-3-tuple(v_410),minnonce) else fail-any)) in
        {60}let v_412: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_410)) then cipherstatepack(2-proj-3-tuple(v_410),minnonce) else fail-any)) in
        {61}let v_413: bitstring = catch-fail((if success?(1-proj-2-tuple(v_403)) then (if (not-caught-fail(v_406) && success?(is-true(success?(1-proj-3-tuple(v_406))))) then (if (not-caught-fail(v_410) && success?(is-true(success?(1-proj-3-tuple(v_410))))) then (if not-caught-fail(v_411) then (if not-caught-fail(v_412) then (1-proj-2-tuple(v_403),v_411,v_412) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let (hs_414: handshakestate,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_374) && success?(is-true(success?(1-proj-7-tuple(v_374))))) then (if (not-caught-fail(v_375) && success?(is-true(success?(1-proj-3-tuple(v_375))))) then (if not-caught-fail(v_377) then (if not-caught-fail(v_378) then (if not-caught-fail(v_380) then (if not-caught-fail(v_387) then (if not-caught-fail(v_394) then (if (not-caught-fail(v_403) && success?(is-true(success?(1-proj-2-tuple(v_403))))) then (if not-caught-fail(v_404) then (if not-caught-fail(v_405) then (if (not-caught-fail(v_413) && success?(is-true(success?(1-proj-3-tuple(v_413))))) then (v_404,v_405,2-proj-3-tuple(v_413),3-proj-3-tuple(v_413)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {63}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {64}out(pub, message_a)
    ) | (
        {66}event LeakS(phase0,alice);
        {67}out(pub, key_s(alice))
    ) | (
        {68}phase 1;
        {69}event LeakS(phase1,alice);
        {70}out(pub, key_s(alice))
    )
) | (
    {71}let v_415: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {72}let s_416: keypair = (if not-caught-fail(v_415) then keypairpack(validkey(v_415),key_s(alice)) else fail-any) in
    {73}out(pub, getpublickey(s_416));
    (
        {74}let e_417: keypair = keypairpack(empty,empty) in
        {75}let v_418: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {76}let rs_419: key = getpublickey((if not-caught-fail(v_418) then keypairpack(validkey(v_418),key_s(charlie)) else fail-any)) in
        {77}let re_420: key = empty in
        {78}let v_421: bitstring = catch-fail(hash(somename,empty)) in
        {79}let v_422: key = catch-fail(v_421) in
        {80}let v_423: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {81}let v_424: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_421) then (if not-caught-fail(v_422) then (if not-caught-fail(v_423) then symmetricstatepack(v_423,v_422,v_421) else fail-any) else fail-any) else fail-any))) in
        {82}let v_425: symmetricstate = catch-fail((if success?((if not-caught-fail(v_421) then (if not-caught-fail(v_422) then (if not-caught-fail(v_423) then symmetricstatepack(v_423,v_422,v_421) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_424) && success?(is-true(success?(1-proj-3-tuple(v_424))))) then symmetricstatepack(1-proj-3-tuple(v_424),2-proj-3-tuple(v_424),hash(3-proj-3-tuple(v_424),empty)) else fail-any) else fail-any)) in
        {83}let v_426: bitstring = catch-fail(symmetricstateunpack(v_425)) in
        {84}let v_427: symmetricstate = catch-fail((if success?(getpublickey(s_416)) then (if (not-caught-fail(v_426) && success?(is-true(success?(1-proj-3-tuple(v_426))))) then symmetricstatepack(1-proj-3-tuple(v_426),2-proj-3-tuple(v_426),hash(3-proj-3-tuple(v_426),getpublickey(s_416))) else fail-any) else fail-any)) in
        {85}let v_428: bitstring = catch-fail(symmetricstateunpack(v_427)) in
        {86}let v_429: symmetricstate = catch-fail((if (not-caught-fail(v_428) && success?(is-true(success?(1-proj-3-tuple(v_428))))) then symmetricstatepack(1-proj-3-tuple(v_428),2-proj-3-tuple(v_428),hash(3-proj-3-tuple(v_428),rs_419)) else fail-any)) in
        {87}let hs_430: handshakestate = (if not-caught-fail(v_425) then (if not-caught-fail(v_427) then (if not-caught-fail(v_429) then handshakestatepack(v_429,s_416,e_417,rs_419,re_420,empty,true) else fail-any) else fail-any) else fail-any) in
        {88}insert statestore(alice,charlie,sid,statepack_a(hs_430))
    ) | (
        {132}get statestore(=alice,=charlie,=sid,statepack_a(hs_431: handshakestate)) in
        {89}let v_432: bitstring = catch-fail(handshakestateunpack(hs_431)) in
        {90}let v_433: bitstring = catch-fail((empty,empty,empty)) in
        {91}let v_434: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {92}let v_435: keypair = catch-fail((if not-caught-fail(v_434) then keypairpack(validkey(v_434),key_e(alice,charlie,sid)) else fail-any)) in
        {93}let v_436: bitstring = catch-fail(getpublickey(v_435)) in
        {94}let v_437: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_432))) in
        {95}let v_438: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_432)) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-3-tuple(v_437))))) then symmetricstatepack(1-proj-3-tuple(v_437),2-proj-3-tuple(v_437),hash(3-proj-3-tuple(v_437),v_436)) else fail-any) else fail-any)) in
        {96}let v_439: bitstring = catch-fail(keypairunpack(v_435)) in
        {97}let v_440: bitstring = catch-fail(symmetricstateunpack(v_438)) in
        {98}let v_441: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_440),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {99}let v_442: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_440),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {100}let v_443: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_440),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {101}let v_444: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_440))) then (if not-caught-fail(v_441) then (if not-caught-fail(v_442) then (if not-caught-fail(v_443) then (v_441,v_442,v_443) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_445: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) then (if (not-caught-fail(v_440) && success?(is-true(success?(1-proj-3-tuple(v_440))))) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_444)) then cipherstatepack(2-proj-3-tuple(v_444),minnonce) else fail-any),1-proj-3-tuple(v_444),3-proj-3-tuple(v_440)) else fail-any) else fail-any) else fail-any)) in
        {103}let v_446: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_432))) in
        {104}let v_447: bitstring = catch-fail(symmetricstateunpack(v_445)) in
        {105}let v_448: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_447),(if (success?(4-proj-7-tuple(v_432)) && success?(2-proj-7-tuple(v_432))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {106}let v_449: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_447),(if (success?(4-proj-7-tuple(v_432)) && success?(2-proj-7-tuple(v_432))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {107}let v_450: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_447),(if (success?(4-proj-7-tuple(v_432)) && success?(2-proj-7-tuple(v_432))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {108}let v_451: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_432)) && success?(2-proj-7-tuple(v_432))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_447))) then (if not-caught-fail(v_448) then (if not-caught-fail(v_449) then (if not-caught-fail(v_450) then (v_448,v_449,v_450) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {109}let v_452: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_432)) && success?(2-proj-7-tuple(v_432))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-3-tuple(v_451))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_451)) then cipherstatepack(2-proj-3-tuple(v_451),minnonce) else fail-any),1-proj-3-tuple(v_451),3-proj-3-tuple(v_447)) else fail-any) else fail-any) else fail-any)) in
        {110}let v_453: bitstring = catch-fail(symmetricstateunpack(v_452)) in
        {111}let v_454: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_453))) in
        {112}let v_455: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_454),2-proj-2-tuple(v_454),3-proj-3-tuple(v_453),msg_a(alice,charlie,sid))) in
        {113}let v_456: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_453))) in
        {114}let v_457: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_454))) && success?(1-proj-3-tuple(v_453))) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then cipherstatepack(1-proj-2-tuple(v_456),increment_nonce(2-proj-2-tuple(v_454))) else fail-any) else fail-any)) in
        {115}let v_458: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_453)) && success?(1-proj-3-tuple(v_453))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-2-tuple(v_454))))) then (if not-caught-fail(v_455) then (if not-caught-fail(v_457) then (v_457,v_455) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_459: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_458),2-proj-3-tuple(v_453),3-proj-3-tuple(v_453)))) in
        {117}let v_460: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_458)) && success?(symmetricstatepack(1-proj-2-tuple(v_458),2-proj-3-tuple(v_453),3-proj-3-tuple(v_453)))) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-3-tuple(v_459))))) then symmetricstatepack(1-proj-3-tuple(v_459),2-proj-3-tuple(v_459),hash(3-proj-3-tuple(v_459),2-proj-2-tuple(v_458))) else fail-any) else fail-any)) in
        {118}let v_461: bitstring = catch-fail((if (not-caught-fail(v_453) && success?(is-true(success?(1-proj-3-tuple(v_453))))) then (if (not-caught-fail(v_458) && success?(is-true(success?(1-proj-2-tuple(v_458))))) then (if not-caught-fail(v_460) then (v_460,2-proj-2-tuple(v_458)) else fail-any) else fail-any) else fail-any)) in
        {119}let v_462: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_461),2-proj-7-tuple(v_432),v_435,4-proj-7-tuple(v_432),5-proj-7-tuple(v_432),6-proj-7-tuple(v_432),7-proj-7-tuple(v_432))) in
        {120}let v_463: bitstring = catch-fail(concat3(v_436,2-proj-3-tuple(v_433),2-proj-2-tuple(v_461))) in
        {121}let v_464: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_461))) in
        {122}let v_465: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_464),zero)) in
        {123}let v_466: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_464),zero)) in
        {124}let v_467: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_464),zero)) in
        {125}let v_468: bitstring = catch-fail((if success?(2-proj-3-tuple(v_464)) then (if not-caught-fail(v_465) then (if not-caught-fail(v_466) then (if not-caught-fail(v_467) then (v_465,v_466,v_467) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_469: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_468)) then cipherstatepack(1-proj-3-tuple(v_468),minnonce) else fail-any)) in
        {127}let v_470: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_468)) then cipherstatepack(2-proj-3-tuple(v_468),minnonce) else fail-any)) in
        {128}let v_471: bitstring = catch-fail((if success?(1-proj-2-tuple(v_461)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-3-tuple(v_464))))) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-3-tuple(v_468))))) then (if not-caught-fail(v_469) then (if not-caught-fail(v_470) then (1-proj-2-tuple(v_461),v_469,v_470) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {129}let (hs_472: handshakestate,message_a_473: bitstring,cs1_474: cipherstate,cs2_475: cipherstate) = (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-7-tuple(v_432))))) then (if (not-caught-fail(v_433) && success?(is-true(success?(1-proj-3-tuple(v_433))))) then (if not-caught-fail(v_435) then (if not-caught-fail(v_436) then (if not-caught-fail(v_438) then (if not-caught-fail(v_445) then (if not-caught-fail(v_452) then (if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-2-tuple(v_461))))) then (if not-caught-fail(v_462) then (if not-caught-fail(v_463) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-3-tuple(v_471))))) then (v_462,v_463,2-proj-3-tuple(v_471),3-proj-3-tuple(v_471)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {131}out(pub, message_a_473)
    ) | (
        {133}event LeakS(phase0,alice);
        {134}out(pub, key_s(alice))
    ) | (
        {135}phase 1;
        {136}event LeakS(phase1,alice);
        {137}out(pub, key_s(alice))
    )
) | (
    {138}let v_476: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {139}let s_477: keypair = (if not-caught-fail(v_476) then keypairpack(validkey(v_476),key_s(bob)) else fail-any) in
    {140}out(pub, getpublickey(s_477));
    (
        {141}let e_478: keypair = keypairpack(empty,empty) in
        {142}let v_479: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {143}let rs_480: key = getpublickey((if not-caught-fail(v_479) then keypairpack(validkey(v_479),key_s(alice)) else fail-any)) in
        {144}let re_481: key = empty in
        {145}let v_482: bitstring = catch-fail(hash(somename,empty)) in
        {146}let v_483: key = catch-fail(v_482) in
        {147}let v_484: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {148}let v_485: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_482) then (if not-caught-fail(v_483) then (if not-caught-fail(v_484) then symmetricstatepack(v_484,v_483,v_482) else fail-any) else fail-any) else fail-any))) in
        {149}let v_486: symmetricstate = catch-fail((if success?((if not-caught-fail(v_482) then (if not-caught-fail(v_483) then (if not-caught-fail(v_484) then symmetricstatepack(v_484,v_483,v_482) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then symmetricstatepack(1-proj-3-tuple(v_485),2-proj-3-tuple(v_485),hash(3-proj-3-tuple(v_485),empty)) else fail-any) else fail-any)) in
        {150}let v_487: bitstring = catch-fail(symmetricstateunpack(v_486)) in
        {151}let v_488: symmetricstate = catch-fail((if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then symmetricstatepack(1-proj-3-tuple(v_487),2-proj-3-tuple(v_487),hash(3-proj-3-tuple(v_487),rs_480)) else fail-any)) in
        {152}let v_489: bitstring = catch-fail(symmetricstateunpack(v_488)) in
        {153}let v_490: symmetricstate = catch-fail((if success?(getpublickey(s_477)) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-3-tuple(v_489))))) then symmetricstatepack(1-proj-3-tuple(v_489),2-proj-3-tuple(v_489),hash(3-proj-3-tuple(v_489),getpublickey(s_477))) else fail-any) else fail-any)) in
        {154}let hs_491: handshakestate = (if not-caught-fail(v_486) then (if not-caught-fail(v_488) then (if not-caught-fail(v_490) then handshakestatepack(v_490,s_477,e_478,rs_480,re_481,empty,false) else fail-any) else fail-any) else fail-any) in
        {155}insert statestore(bob,alice,sid,statepack_a(hs_491))
    ) | (
        {199}get statestore(=bob,=alice,=sid,statepack_a(hs_492: handshakestate)) in
        {156}in(pub, message_a_493: bitstring);
        {157}let v_494: bitstring = catch-fail(handshakestateunpack(hs_492)) in
        {158}let v_495: bitstring = catch-fail(deconcat3(message_a_493)) in
        {159}let v_496: bool = catch-fail(true) in
        {160}let v_497: key = catch-fail(1-proj-3-tuple(v_495)) in
        {161}let v_498: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_494))) in
        {162}let v_499: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_494)) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then symmetricstatepack(1-proj-3-tuple(v_498),2-proj-3-tuple(v_498),hash(3-proj-3-tuple(v_498),v_497)) else fail-any) else fail-any)) in
        {163}let v_500: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_494))) in
        {164}let v_501: bitstring = catch-fail(symmetricstateunpack(v_499)) in
        {165}let v_502: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_501),(if success?(2-proj-7-tuple(v_494)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-2-tuple(v_500))))) then dhexp(2-proj-2-tuple(v_500),v_497) else fail-any) else fail-any))) in
        {166}let v_503: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_501),(if success?(2-proj-7-tuple(v_494)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-2-tuple(v_500))))) then dhexp(2-proj-2-tuple(v_500),v_497) else fail-any) else fail-any))) in
        {167}let v_504: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_501),(if success?(2-proj-7-tuple(v_494)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-2-tuple(v_500))))) then dhexp(2-proj-2-tuple(v_500),v_497) else fail-any) else fail-any))) in
        {168}let v_505: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_494)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-2-tuple(v_500))))) then dhexp(2-proj-2-tuple(v_500),v_497) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_501))) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then (if not-caught-fail(v_504) then (v_502,v_503,v_504) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_506: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_494)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-2-tuple(v_500))))) then dhexp(2-proj-2-tuple(v_500),v_497) else fail-any) else fail-any)) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-3-tuple(v_501))))) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-3-tuple(v_505))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_505)) then cipherstatepack(2-proj-3-tuple(v_505),minnonce) else fail-any),1-proj-3-tuple(v_505),3-proj-3-tuple(v_501)) else fail-any) else fail-any) else fail-any)) in
        {170}let v_507: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_494))) in
        {171}let v_508: bitstring = catch-fail(symmetricstateunpack(v_506)) in
        {172}let v_509: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_508),(if (success?(4-proj-7-tuple(v_494)) && success?(2-proj-7-tuple(v_494))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then dhexp(2-proj-2-tuple(v_507),4-proj-7-tuple(v_494)) else fail-any) else fail-any))) in
        {173}let v_510: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_508),(if (success?(4-proj-7-tuple(v_494)) && success?(2-proj-7-tuple(v_494))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then dhexp(2-proj-2-tuple(v_507),4-proj-7-tuple(v_494)) else fail-any) else fail-any))) in
        {174}let v_511: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_508),(if (success?(4-proj-7-tuple(v_494)) && success?(2-proj-7-tuple(v_494))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then dhexp(2-proj-2-tuple(v_507),4-proj-7-tuple(v_494)) else fail-any) else fail-any))) in
        {175}let v_512: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_494)) && success?(2-proj-7-tuple(v_494))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then dhexp(2-proj-2-tuple(v_507),4-proj-7-tuple(v_494)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_508))) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (if not-caught-fail(v_511) then (v_509,v_510,v_511) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_513: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_494)) && success?(2-proj-7-tuple(v_494))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then dhexp(2-proj-2-tuple(v_507),4-proj-7-tuple(v_494)) else fail-any) else fail-any)) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_512)) then cipherstatepack(2-proj-3-tuple(v_512),minnonce) else fail-any),1-proj-3-tuple(v_512),3-proj-3-tuple(v_508)) else fail-any) else fail-any) else fail-any)) in
        {177}let v_514: bitstring = catch-fail(symmetricstateunpack(v_513)) in
        {178}let v_515: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_514))) in
        {179}let v_516: aead = catch-fail(decrypt(1-proj-2-tuple(v_515),2-proj-2-tuple(v_515),3-proj-3-tuple(v_514),3-proj-3-tuple(v_495))) in
        {180}let v_517: bitstring = catch-fail(aeadunpack(v_516)) in
        {181}let v_518: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_514))) in
        {182}let v_519: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_515))) && success?(1-proj-3-tuple(v_514))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-2-tuple(v_518))))) then cipherstatepack(1-proj-2-tuple(v_518),increment_nonce(2-proj-2-tuple(v_515))) else fail-any) else fail-any)) in
        {183}let v_520: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_495)) && (success?(3-proj-3-tuple(v_514)) && success?(1-proj-3-tuple(v_514)))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then (if not-caught-fail(v_516) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then (if not-caught-fail(v_519) then (v_519,3-proj-3-tuple(v_517),1-proj-3-tuple(v_517)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_521: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_514),3-proj-3-tuple(v_514)))) in
        {185}let v_522: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_495)) && success?(symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_514),3-proj-3-tuple(v_514)))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then symmetricstatepack(1-proj-3-tuple(v_521),2-proj-3-tuple(v_521),hash(3-proj-3-tuple(v_521),3-proj-3-tuple(v_495))) else fail-any) else fail-any)) in
        {186}let v_523: bitstring = catch-fail((if success?(3-proj-3-tuple(v_495)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if not-caught-fail(v_522) then (v_522,2-proj-3-tuple(v_520),3-proj-3-tuple(v_520)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_524: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_523),2-proj-7-tuple(v_494),3-proj-7-tuple(v_494),4-proj-7-tuple(v_494),v_497,6-proj-7-tuple(v_494),7-proj-7-tuple(v_494))) in
        {188}let v_525: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_523))) in
        {189}let v_526: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_525),zero)) in
        {190}let v_527: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_525),zero)) in
        {191}let v_528: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_525),zero)) in
        {192}let v_529: bitstring = catch-fail((if success?(2-proj-3-tuple(v_525)) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then (if not-caught-fail(v_528) then (v_526,v_527,v_528) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_530: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_529)) then cipherstatepack(1-proj-3-tuple(v_529),minnonce) else fail-any)) in
        {194}let v_531: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_529)) then cipherstatepack(2-proj-3-tuple(v_529),minnonce) else fail-any)) in
        {195}let v_532: bitstring = catch-fail((if success?(1-proj-3-tuple(v_523)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then (1-proj-3-tuple(v_523),v_530,v_531) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let (hs_533: handshakestate,plaintext_a: bitstring,valid: bool,cs1_534: cipherstate,cs2_535: cipherstate) = (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-7-tuple(v_494))))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-3-tuple(v_495))))) then (if not-caught-fail(v_496) then (if not-caught-fail(v_497) then (if not-caught-fail(v_499) then (if not-caught-fail(v_506) then (if not-caught-fail(v_513) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if (v_496 && 3-proj-3-tuple(v_523)) then (if not-caught-fail(v_524) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (v_524,2-proj-3-tuple(v_523),true,2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {197}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {198}event RecvEnd(valid)
    ) | (
        {200}event LeakS(phase0,bob);
        {201}out(pub, key_s(bob))
    ) | (
        {202}phase 1;
        {203}event LeakS(phase1,bob);
        {204}out(pub, key_s(bob))
    )
) | (
    {205}let v_536: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {206}let s_537: keypair = (if not-caught-fail(v_536) then keypairpack(validkey(v_536),key_s(bob)) else fail-any) in
    {207}out(pub, getpublickey(s_537));
    (
        {208}let e_538: keypair = keypairpack(empty,empty) in
        {209}let v_539: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {210}let rs_540: key = getpublickey((if not-caught-fail(v_539) then keypairpack(validkey(v_539),key_s(charlie)) else fail-any)) in
        {211}let re_541: key = empty in
        {212}let v_542: bitstring = catch-fail(hash(somename,empty)) in
        {213}let v_543: key = catch-fail(v_542) in
        {214}let v_544: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {215}let v_545: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (if not-caught-fail(v_544) then symmetricstatepack(v_544,v_543,v_542) else fail-any) else fail-any) else fail-any))) in
        {216}let v_546: symmetricstate = catch-fail((if success?((if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (if not-caught-fail(v_544) then symmetricstatepack(v_544,v_543,v_542) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),empty)) else fail-any) else fail-any)) in
        {217}let v_547: bitstring = catch-fail(symmetricstateunpack(v_546)) in
        {218}let v_548: symmetricstate = catch-fail((if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),rs_540)) else fail-any)) in
        {219}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {220}let v_550: symmetricstate = catch-fail((if success?(getpublickey(s_537)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then symmetricstatepack(1-proj-3-tuple(v_549),2-proj-3-tuple(v_549),hash(3-proj-3-tuple(v_549),getpublickey(s_537))) else fail-any) else fail-any)) in
        {221}let hs_551: handshakestate = (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if not-caught-fail(v_550) then handshakestatepack(v_550,s_537,e_538,rs_540,re_541,empty,false) else fail-any) else fail-any) else fail-any) in
        {222}insert statestore(bob,charlie,sid,statepack_a(hs_551))
    ) | (
        {266}get statestore(=bob,=charlie,=sid,statepack_a(hs_552: handshakestate)) in
        {223}in(pub, message_a_553: bitstring);
        {224}let v_554: bitstring = catch-fail(handshakestateunpack(hs_552)) in
        {225}let v_555: bitstring = catch-fail(deconcat3(message_a_553)) in
        {226}let v_556: bool = catch-fail(true) in
        {227}let v_557: key = catch-fail(1-proj-3-tuple(v_555)) in
        {228}let v_558: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_554))) in
        {229}let v_559: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_554)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_558),hash(3-proj-3-tuple(v_558),v_557)) else fail-any) else fail-any)) in
        {230}let v_560: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_554))) in
        {231}let v_561: bitstring = catch-fail(symmetricstateunpack(v_559)) in
        {232}let v_562: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_561),(if success?(2-proj-7-tuple(v_554)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then dhexp(2-proj-2-tuple(v_560),v_557) else fail-any) else fail-any))) in
        {233}let v_563: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_561),(if success?(2-proj-7-tuple(v_554)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then dhexp(2-proj-2-tuple(v_560),v_557) else fail-any) else fail-any))) in
        {234}let v_564: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_561),(if success?(2-proj-7-tuple(v_554)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then dhexp(2-proj-2-tuple(v_560),v_557) else fail-any) else fail-any))) in
        {235}let v_565: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_554)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then dhexp(2-proj-2-tuple(v_560),v_557) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_561))) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (if not-caught-fail(v_564) then (v_562,v_563,v_564) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_566: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_554)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then dhexp(2-proj-2-tuple(v_560),v_557) else fail-any) else fail-any)) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_565)) then cipherstatepack(2-proj-3-tuple(v_565),minnonce) else fail-any),1-proj-3-tuple(v_565),3-proj-3-tuple(v_561)) else fail-any) else fail-any) else fail-any)) in
        {237}let v_567: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_554))) in
        {238}let v_568: bitstring = catch-fail(symmetricstateunpack(v_566)) in
        {239}let v_569: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_568),(if (success?(4-proj-7-tuple(v_554)) && success?(2-proj-7-tuple(v_554))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),4-proj-7-tuple(v_554)) else fail-any) else fail-any))) in
        {240}let v_570: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_568),(if (success?(4-proj-7-tuple(v_554)) && success?(2-proj-7-tuple(v_554))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),4-proj-7-tuple(v_554)) else fail-any) else fail-any))) in
        {241}let v_571: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_568),(if (success?(4-proj-7-tuple(v_554)) && success?(2-proj-7-tuple(v_554))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),4-proj-7-tuple(v_554)) else fail-any) else fail-any))) in
        {242}let v_572: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_554)) && success?(2-proj-7-tuple(v_554))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),4-proj-7-tuple(v_554)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_568))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (v_569,v_570,v_571) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_573: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_554)) && success?(2-proj-7-tuple(v_554))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then dhexp(2-proj-2-tuple(v_567),4-proj-7-tuple(v_554)) else fail-any) else fail-any)) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_572)) then cipherstatepack(2-proj-3-tuple(v_572),minnonce) else fail-any),1-proj-3-tuple(v_572),3-proj-3-tuple(v_568)) else fail-any) else fail-any) else fail-any)) in
        {244}let v_574: bitstring = catch-fail(symmetricstateunpack(v_573)) in
        {245}let v_575: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_574))) in
        {246}let v_576: aead = catch-fail(decrypt(1-proj-2-tuple(v_575),2-proj-2-tuple(v_575),3-proj-3-tuple(v_574),3-proj-3-tuple(v_555))) in
        {247}let v_577: bitstring = catch-fail(aeadunpack(v_576)) in
        {248}let v_578: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_574))) in
        {249}let v_579: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_575))) && success?(1-proj-3-tuple(v_574))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then cipherstatepack(1-proj-2-tuple(v_578),increment_nonce(2-proj-2-tuple(v_575))) else fail-any) else fail-any)) in
        {250}let v_580: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_555)) && (success?(3-proj-3-tuple(v_574)) && success?(1-proj-3-tuple(v_574)))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if not-caught-fail(v_576) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_579) then (v_579,3-proj-3-tuple(v_577),1-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_581: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_574),3-proj-3-tuple(v_574)))) in
        {252}let v_582: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_555)) && success?(symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_574),3-proj-3-tuple(v_574)))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),3-proj-3-tuple(v_555))) else fail-any) else fail-any)) in
        {253}let v_583: bitstring = catch-fail((if success?(3-proj-3-tuple(v_555)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if not-caught-fail(v_582) then (v_582,2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_584: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_583),2-proj-7-tuple(v_554),3-proj-7-tuple(v_554),4-proj-7-tuple(v_554),v_557,6-proj-7-tuple(v_554),7-proj-7-tuple(v_554))) in
        {255}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_583))) in
        {256}let v_586: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_585),zero)) in
        {257}let v_587: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_585),zero)) in
        {258}let v_588: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_585),zero)) in
        {259}let v_589: bitstring = catch-fail((if success?(2-proj-3-tuple(v_585)) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (v_586,v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_590: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_589)) then cipherstatepack(1-proj-3-tuple(v_589),minnonce) else fail-any)) in
        {261}let v_591: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_589)) then cipherstatepack(2-proj-3-tuple(v_589),minnonce) else fail-any)) in
        {262}let v_592: bitstring = catch-fail((if success?(1-proj-3-tuple(v_583)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (1-proj-3-tuple(v_583),v_590,v_591) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let (hs_593: handshakestate,plaintext_a_594: bitstring,valid_595: bool,cs1_596: cipherstate,cs2_597: cipherstate) = (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-7-tuple(v_554))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if not-caught-fail(v_556) then (if not-caught-fail(v_557) then (if not-caught-fail(v_559) then (if not-caught-fail(v_566) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (v_556 && 3-proj-3-tuple(v_583)) then (if not-caught-fail(v_584) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (v_584,2-proj-3-tuple(v_583),true,2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {264}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_594);
        {265}event RecvEnd(valid_595)
    ) | (
        {267}event LeakS(phase0,bob);
        {268}out(pub, key_s(bob))
    ) | (
        {269}phase 1;
        {270}event LeakS(phase1,bob);
        {271}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_707,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_707,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 62 rules in the queue.
400 rules inserted. The rule base contains 377 rules. 45 rules in the queue.
600 rules inserted. The rule base contains 577 rules. 88 rules in the queue.
800 rules inserted. The rule base contains 774 rules. 124 rules in the queue.
1000 rules inserted. The rule base contains 945 rules. 154 rules in the queue.
1200 rules inserted. The rule base contains 1073 rules. 138 rules in the queue.
1400 rules inserted. The rule base contains 940 rules. 82 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_654514589) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514590]),m_654514589))
Abbreviations:
sid_654514673 = sid[!1 = @sid_654514664]

1. The entry statestore(bob,alice,sid_654514673,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {155}.
table(statestore(bob,alice,sid_654514673,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_654514672).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

6. By 4, the attacker may have the channel pub.
By 5, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 4, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero)).

16. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

17. The event LeakS(phase0,bob) may be executed at {200}.
So the message key_s(bob) may be sent on channel pub at output {201}.
mess(pub,key_s(bob)).

18. By 4, the attacker may have the channel pub.
By 17, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

19. By 18, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).

20. By 11, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 19, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
By 16, the attacker may know minnonce.
By 15, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero).
By 2, the attacker may know m_654514672.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672)).

23. The attacker has some term b_654514658.
attacker(b_654514658).

24. By 3, the attacker may know zero.
By 23, the attacker may know b_654514658.
By 22, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672).
Using the function concat3 the attacker may obtain concat3(zero,b_654514658,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672)).
attacker(concat3(zero,b_654514658,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672))).

25. By 4, the attacker may have the channel pub.
By 24, the attacker may have the message concat3(zero,b_654514658,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_654514658,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672))).

26. The entry statestore(bob,alice,sid_654514673,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {199}.
The message concat3(zero,b_654514658,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514672)) that may be sent on channel pub by 25 may be received at input {156}.
So event RecvMsg(bob,alice,stagepack_a(sid_654514673),m_654514672) may be executed at {197}.
end(RecvMsg(bob,alice,stagepack_a(sid_654514673),m_654514672)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_707,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_654514676) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514677]),m_654514676))
goal reachable: begin(LeakS(phase0,alice)) && attacker(m_654514680) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514681]),m_654514680))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654514684]),msg_a(alice,bob,sid[!1 = @sid_654514684]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514685]),msg_a(alice,bob,sid[!1 = @sid_654514684])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_707,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_707,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_654514710) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514711]),m_654514710))
Abbreviations:
sid_654514795 = sid[!1 = @sid_654514786]

1. The entry statestore(bob,alice,sid_654514795,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {155}.
table(statestore(bob,alice,sid_654514795,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_654514794).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

6. By 4, the attacker may have the channel pub.
By 5, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 4, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero)).

16. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

17. The event LeakS(phase0,bob) may be executed at {200}.
So the message key_s(bob) may be sent on channel pub at output {201}.
mess(pub,key_s(bob)).

18. By 4, the attacker may have the channel pub.
By 17, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

19. By 18, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).

20. By 11, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 19, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
By 16, the attacker may know minnonce.
By 15, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero).
By 2, the attacker may know m_654514794.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794)).

23. The attacker has some term b_654514780.
attacker(b_654514780).

24. By 3, the attacker may know zero.
By 23, the attacker may know b_654514780.
By 22, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794).
Using the function concat3 the attacker may obtain concat3(zero,b_654514780,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794)).
attacker(concat3(zero,b_654514780,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794))).

25. By 4, the attacker may have the channel pub.
By 24, the attacker may have the message concat3(zero,b_654514780,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_654514780,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794))).

26. The entry statestore(bob,alice,sid_654514795,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {199}.
The message concat3(zero,b_654514780,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514794)) that may be sent on channel pub by 25 may be received at input {156}.
So event RecvMsg(bob,alice,stagepack_a(sid_654514795),m_654514794) may be executed at {197}.
end(RecvMsg(bob,alice,stagepack_a(sid_654514795),m_654514794)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_707,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_654514798) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514799]),m_654514798))
goal reachable: begin(LeakS(phase0,alice)) && attacker(m_654514802) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514803]),m_654514802))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654514806]),msg_a(alice,bob,sid[!1 = @sid_654514806]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514807]),msg_a(alice,bob,sid[!1 = @sid_654514806])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_654514831) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_654514832]),m_654514831))
Abbreviations:
sid_654514915 = sid[!1 = @sid_654514906]

1. The entry statestore(bob,alice,sid_654514915,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {155}.
table(statestore(bob,alice,sid_654514915,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_654514914).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

6. By 4, the attacker may have the channel pub.
By 5, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 4, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero)).

16. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

17. The event LeakS(phase0,bob) may be executed at {200}.
So the message key_s(bob) may be sent on channel pub at output {201}.
mess(pub,key_s(bob)).

18. By 4, the attacker may have the channel pub.
By 17, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

19. By 18, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).

20. By 11, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 19, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
By 16, the attacker may know minnonce.
By 15, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero).
By 2, the attacker may know m_654514914.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914)).

23. The attacker has some term b_654514900.
attacker(b_654514900).

24. By 3, the attacker may know zero.
By 23, the attacker may know b_654514900.
By 22, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914).
Using the function concat3 the attacker may obtain concat3(zero,b_654514900,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914)).
attacker(concat3(zero,b_654514900,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914))).

25. By 4, the attacker may have the channel pub.
By 24, the attacker may have the message concat3(zero,b_654514900,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_654514900,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914))).

26. The entry statestore(bob,alice,sid_654514915,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {199}.
The message concat3(zero,b_654514900,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),zero),m_654514914)) that may be sent on channel pub by 25 may be received at input {156}.
So event RecvMsg(bob,alice,stagepack_a(sid_654514915),m_654514914) may be executed at {197}.
end(RecvMsg(bob,alice,stagepack_a(sid_654514915),m_654514914)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654514917]),msg_a(alice,bob,sid[!1 = @sid_654514917]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_654514917]))
Abbreviations:
sid_654515019 = sid[!1 = @sid_654514994]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_654515019,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_654515019,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_654515019,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid_654515019),msg_a(alice,bob,sid_654515019)) may be executed at {63}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))) may be sent on channel pub at output {64}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {203}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {204}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515019),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515019),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515019),g))),msg_a(alice,bob,sid_654515019)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_654515019) in phase 1.
attacker_p1(msg_a(alice,bob,sid_654515019)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654515021]),msg_a(alice,bob,sid[!1 = @sid_654515021]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_654515021]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654515024]),msg_a(alice,bob,sid[!1 = @sid_654515024]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_654515024]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654515031]),msg_a(alice,bob,sid[!1 = @sid_654515031]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_654515031]))
Abbreviations:
sid_654515135 = sid[!1 = @sid_654515110]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_654515135,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_654515135,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_654515135,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid_654515135),msg_a(alice,bob,sid_654515135)) may be executed at {63}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))) may be sent on channel pub at output {64}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {203}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {204}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515135),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515135),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515135),g))),msg_a(alice,bob,sid_654515135)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_654515135) in phase 1.
attacker_p1(msg_a(alice,bob,sid_654515135)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_654515137]),msg_a(alice,bob,sid[!1 = @sid_654515137]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_654515137]))
Abbreviations:
sid_654515239 = sid[!1 = @sid_654515214]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_654515239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_654515239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_654515239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The event SendMsg(alice,bob,stagepack_a(sid_654515239),msg_a(alice,bob,sid_654515239)) may be executed at {63}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))) may be sent on channel pub at output {64}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {203}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {204}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_654515239),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_654515239),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_654515239),g))),msg_a(alice,bob,sid_654515239)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_654515239) in phase 1.
attacker_p1(msg_a(alice,bob,sid_654515239)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query not event(RecvEnd(true))
goal reachable: end(RecvEnd(true))
Abbreviations:
sid_654515290 = sid[!1 = @sid_654515283]

1. The entry statestore(bob,charlie,sid_654515290,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(charlie),g)),empty,empty,false))) may be inserted in a table at insert {222}.
table(statestore(bob,charlie,sid_654515290,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(charlie),g)),empty,empty,false)))).

2. The attacker has some term plaintext_a_654515282.
attacker(plaintext_a_654515282).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {140}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

6. By 4, the attacker may have the channel pub.
By 5, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function g the attacker may obtain g.
attacker(g).

8. The message key_s(charlie) may be sent on channel pub at output {1}.
mess(pub,key_s(charlie)).

9. By 4, the attacker may have the channel pub.
By 8, the message key_s(charlie) may be sent on this channel.
So the attacker may obtain the message key_s(charlie) by listening on this channel.
attacker(key_s(charlie)).

10. By 9, the attacker may know key_s(charlie).
By 7, the attacker may know g.
Using the function dhexp_real the attacker may obtain dhexp_real(key_s(charlie),g).
attacker(dhexp_real(key_s(charlie),g)).

11. By 10, the attacker may know dhexp_real(key_s(charlie),g).
Using the function validkey the attacker may obtain validkey(dhexp_real(key_s(charlie),g)).
attacker(validkey(dhexp_real(key_s(charlie),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(charlie),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. By 9, the attacker may know key_s(charlie).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))).

21. By 14, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

22. By 21, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 20, the attacker may know dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero).
By 2, the attacker may know plaintext_a_654515282.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282)).

24. The attacker has some term b_654515277.
attacker(b_654515277).

25. By 3, the attacker may know zero.
By 24, the attacker may know b_654515277.
By 23, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282).
Using the function concat3 the attacker may obtain concat3(zero,b_654515277,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282)).
attacker(concat3(zero,b_654515277,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282))).

26. By 4, the attacker may have the channel pub.
By 25, the attacker may have the message concat3(zero,b_654515277,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_654515277,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282))).

27. The entry statestore(bob,charlie,sid_654515290,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(charlie),g)),empty,empty,false))) that may be in a table by 1 may be read at get {266}.
The message concat3(zero,b_654515277,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),zero),plaintext_a_654515282)) that may be sent on channel pub by 26 may be received at input {223}.
So event RecvEnd(true) may be executed at {265}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
