File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "KX.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "KX.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "KX.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "KX.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "KX.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "KX.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 287, character 6:
Warning: identifier s rebound.
File "KX.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 288, characters 26-27:
Warning: identifier ns rebound.
File "KX.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 299, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 307, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 316, characters 6-7:
Warning: identifier re rebound.
File "KX.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 321, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 329, characters 6-7:
Warning: identifier re rebound.
File "KX.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 334, characters 26-27:
Warning: identifier ne rebound.
File "KX.noise.passive.pv", line 334, characters 40-45:
Warning: identifier valid1 rebound.
File "KX.noise.passive.pv", line 335, characters 6-7:
Warning: identifier rs rebound.
File "KX.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 517, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 519, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 510, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 511, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 299, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 504, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 329, characters 6-7:
Warning: identifier re rebound.
File "KX.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 334, characters 26-27:
Warning: identifier ne rebound.
File "KX.noise.passive.pv", line 334, characters 40-45:
Warning: identifier valid1 rebound.
File "KX.noise.passive.pv", line 335, characters 6-7:
Warning: identifier rs rebound.
File "KX.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 497, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "KX.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "KX.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 564, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 565, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 307, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 556, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 558, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 550, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "KX.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "KX.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 287, character 6:
Warning: identifier s rebound.
File "KX.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 288, characters 26-27:
Warning: identifier ns rebound.
File "KX.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "KX.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "KX.noise.passive.pv", line 544, characters 8-9:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 316, characters 6-7:
Warning: identifier re rebound.
File "KX.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "KX.noise.passive.pv", line 321, characters 7-8:
Warning: identifier hs rebound.
File "KX.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_517: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_518: keypair = (if not-caught-fail(v_517) then keypairpack(validkey(v_517),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_518));
    (
        {7}let e_519: keypair = keypairpack(empty,empty) in
        {8}let rs_520: key = empty in
        {9}let re_521: key = empty in
        {10}let v_522: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_523: key = catch-fail(v_522) in
        {12}let v_524: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_525: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then symmetricstatepack(v_524,v_523,v_522) else fail-any) else fail-any) else fail-any))) in
        {14}let v_526: symmetricstate = catch-fail((if success?((if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then symmetricstatepack(v_524,v_523,v_522) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_525),hash(3-proj-3-tuple(v_525),empty)) else fail-any) else fail-any)) in
        {15}let v_527: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {16}let v_528: symmetricstate = catch-fail((if success?(getpublickey(s_518)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),getpublickey(s_518))) else fail-any) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_526) then (if not-caught-fail(v_528) then handshakestatepack(v_528,s_518,e_519,rs_520,re_521,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {41}get statestore(=alice,=bob,=sid,statepack_a(hs_529: handshakestate)) in
        {19}let v_530: bitstring = catch-fail(handshakestateunpack(hs_529)) in
        {20}let v_531: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_532: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_533: keypair = catch-fail((if not-caught-fail(v_532) then keypairpack(validkey(v_532),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_534: bitstring = catch-fail(getpublickey(v_533)) in
        {24}let v_535: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_530))) in
        {25}let v_536: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_530)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_535),hash(3-proj-3-tuple(v_535),v_534)) else fail-any) else fail-any)) in
        {26}let v_537: bitstring = catch-fail(symmetricstateunpack(v_536)) in
        {27}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_537))) in
        {28}let v_539: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_538),2-proj-2-tuple(v_538),3-proj-3-tuple(v_537),msg_a(alice,bob,sid))) in
        {29}let v_540: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_537))) in
        {30}let v_541: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_538))) && success?(1-proj-3-tuple(v_537))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then cipherstatepack(1-proj-2-tuple(v_540),increment_nonce(2-proj-2-tuple(v_538))) else fail-any) else fail-any)) in
        {31}let v_542: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_537)) && success?(1-proj-3-tuple(v_537))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_541) then (v_541,v_539) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_543: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_542),2-proj-3-tuple(v_537),3-proj-3-tuple(v_537)))) in
        {33}let v_544: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_542)) && success?(symmetricstatepack(1-proj-2-tuple(v_542),2-proj-3-tuple(v_537),3-proj-3-tuple(v_537)))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_543),hash(3-proj-3-tuple(v_543),2-proj-2-tuple(v_542))) else fail-any) else fail-any)) in
        {34}let v_545: bitstring = catch-fail((if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then (if not-caught-fail(v_544) then (v_544,2-proj-2-tuple(v_542)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_546: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_545),2-proj-7-tuple(v_530),v_533,4-proj-7-tuple(v_530),5-proj-7-tuple(v_530),6-proj-7-tuple(v_530),7-proj-7-tuple(v_530))) in
        {36}let v_547: bitstring = catch-fail(concat3(v_534,2-proj-3-tuple(v_531),2-proj-2-tuple(v_545))) in
        {37}let (hs_548: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-7-tuple(v_530))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_546,v_547) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {38}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {39}insert statestore(alice,bob,sid,statepack_b(hs_548));
        {40}out(pub, message_a)
    ) | (
        {104}get statestore(=alice,=bob,=sid,statepack_b(hs_549: handshakestate)) in
        {42}in(pub, message_b: bitstring);
        {43}let v_550: bitstring = catch-fail(handshakestateunpack(hs_549)) in
        {44}let v_551: bitstring = catch-fail(deconcat3(message_b)) in
        {45}let v_552: bool = catch-fail(true) in
        {46}let v_553: key = catch-fail(1-proj-3-tuple(v_551)) in
        {47}let v_554: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_550))) in
        {48}let v_555: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_550)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack(1-proj-3-tuple(v_554),2-proj-3-tuple(v_554),hash(3-proj-3-tuple(v_554),v_553)) else fail-any) else fail-any)) in
        {49}let v_556: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_550))) in
        {50}let v_557: bitstring = catch-fail(symmetricstateunpack(v_555)) in
        {51}let v_558: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_557),(if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),v_553) else fail-any) else fail-any))) in
        {52}let v_559: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_557),(if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),v_553) else fail-any) else fail-any))) in
        {53}let v_560: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_557),(if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),v_553) else fail-any) else fail-any))) in
        {54}let v_561: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),v_553) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_557))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (v_558,v_559,v_560) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_562: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),v_553) else fail-any) else fail-any)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_561)) then cipherstatepack(2-proj-3-tuple(v_561),minnonce) else fail-any),1-proj-3-tuple(v_561),3-proj-3-tuple(v_557)) else fail-any) else fail-any) else fail-any)) in
        {56}let v_563: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_550))) in
        {57}let v_564: bitstring = catch-fail(symmetricstateunpack(v_562)) in
        {58}let v_565: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_564),(if success?(2-proj-7-tuple(v_550)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then dhexp(2-proj-2-tuple(v_563),v_553) else fail-any) else fail-any))) in
        {59}let v_566: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_564),(if success?(2-proj-7-tuple(v_550)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then dhexp(2-proj-2-tuple(v_563),v_553) else fail-any) else fail-any))) in
        {60}let v_567: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_564),(if success?(2-proj-7-tuple(v_550)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then dhexp(2-proj-2-tuple(v_563),v_553) else fail-any) else fail-any))) in
        {61}let v_568: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_550)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then dhexp(2-proj-2-tuple(v_563),v_553) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_564))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (v_565,v_566,v_567) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_569: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_550)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then dhexp(2-proj-2-tuple(v_563),v_553) else fail-any) else fail-any)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_568)) then cipherstatepack(2-proj-3-tuple(v_568),minnonce) else fail-any),1-proj-3-tuple(v_568),3-proj-3-tuple(v_564)) else fail-any) else fail-any) else fail-any)) in
        {63}let v_570: bitstring = catch-fail(symmetricstateunpack(v_569)) in
        {64}let v_571: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_570))) in
        {65}let v_572: aead = catch-fail(decrypt(1-proj-2-tuple(v_571),2-proj-2-tuple(v_571),3-proj-3-tuple(v_570),2-proj-3-tuple(v_551))) in
        {66}let v_573: bitstring = catch-fail(aeadunpack(v_572)) in
        {67}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_570))) in
        {68}let v_575: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_571))) && success?(1-proj-3-tuple(v_570))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then cipherstatepack(1-proj-2-tuple(v_574),increment_nonce(2-proj-2-tuple(v_571))) else fail-any) else fail-any)) in
        {69}let v_576: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_551)) && (success?(3-proj-3-tuple(v_570)) && success?(1-proj-3-tuple(v_570)))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then (if not-caught-fail(v_572) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if not-caught-fail(v_575) then (v_575,3-proj-3-tuple(v_573),1-proj-3-tuple(v_573)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_577: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_576),2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)))) in
        {71}let v_578: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_551)) && success?(symmetricstatepack(1-proj-3-tuple(v_576),2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),2-proj-3-tuple(v_551))) else fail-any) else fail-any)) in
        {72}let v_579: bitstring = catch-fail((if success?(2-proj-3-tuple(v_551)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if not-caught-fail(v_578) then (v_578,2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_580: key = catch-fail(2-proj-3-tuple(v_579)) in
        {74}let v_581: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_550))) in
        {75}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_579))) in
        {76}let v_583: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_582),(if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),v_580) else fail-any) else fail-any))) in
        {77}let v_584: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_582),(if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),v_580) else fail-any) else fail-any))) in
        {78}let v_585: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_582),(if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),v_580) else fail-any) else fail-any))) in
        {79}let v_586: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),v_580) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_582))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (v_583,v_584,v_585) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_587: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_550)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then dhexp(2-proj-2-tuple(v_581),v_580) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_579))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_586)) then cipherstatepack(2-proj-3-tuple(v_586),minnonce) else fail-any),1-proj-3-tuple(v_586),3-proj-3-tuple(v_582)) else fail-any) else fail-any) else fail-any)) in
        {81}let v_588: bitstring = catch-fail(symmetricstateunpack(v_587)) in
        {82}let v_589: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_588))) in
        {83}let v_590: aead = catch-fail(decrypt(1-proj-2-tuple(v_589),2-proj-2-tuple(v_589),3-proj-3-tuple(v_588),3-proj-3-tuple(v_551))) in
        {84}let v_591: bitstring = catch-fail(aeadunpack(v_590)) in
        {85}let v_592: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_588))) in
        {86}let v_593: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_589))) && success?(1-proj-3-tuple(v_588))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then cipherstatepack(1-proj-2-tuple(v_592),increment_nonce(2-proj-2-tuple(v_589))) else fail-any) else fail-any)) in
        {87}let v_594: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_551)) && (success?(3-proj-3-tuple(v_588)) && success?(1-proj-3-tuple(v_588)))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then (if not-caught-fail(v_590) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if not-caught-fail(v_593) then (v_593,3-proj-3-tuple(v_591),1-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_595: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)))) in
        {89}let v_596: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_551)) && success?(symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack(1-proj-3-tuple(v_595),2-proj-3-tuple(v_595),hash(3-proj-3-tuple(v_595),3-proj-3-tuple(v_551))) else fail-any) else fail-any)) in
        {90}let v_597: bitstring = catch-fail((if success?(3-proj-3-tuple(v_551)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if not-caught-fail(v_596) then (v_596,2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_598: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {92}let v_599: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_597),2-proj-7-tuple(v_550),3-proj-7-tuple(v_550),v_580,v_553,6-proj-7-tuple(v_550),7-proj-7-tuple(v_550))) in
        {93}let v_600: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_597))) in
        {94}let v_601: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_600),zero)) in
        {95}let v_602: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_600),zero)) in
        {96}let v_603: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_600),zero)) in
        {97}let v_604: bitstring = catch-fail((if success?(2-proj-3-tuple(v_600)) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (v_601,v_602,v_603) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_605: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_604)) then cipherstatepack(1-proj-3-tuple(v_604),minnonce) else fail-any)) in
        {99}let v_606: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_604)) then cipherstatepack(2-proj-3-tuple(v_604),minnonce) else fail-any)) in
        {100}let v_607: bitstring = catch-fail((if success?(1-proj-3-tuple(v_597)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then (1-proj-3-tuple(v_597),v_605,v_606) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let (hs_608: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-7-tuple(v_550))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_555) then (if not-caught-fail(v_562) then (if not-caught-fail(v_569) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_580) then (if not-caught-fail(v_587) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if ((3-proj-3-tuple(v_579) && 3-proj-3-tuple(v_597)) && (v_580 = getpublickey((if not-caught-fail(v_598) then keypairpack(validkey(v_598),key_s(bob)) else fail-any)))) then (if not-caught-fail(v_599) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (v_599,2-proj-3-tuple(v_597),true,2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {102}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {103}insert statestore(alice,bob,sid,statepack_c(hs_608,cs1,cs2))
    ) | (
        {105}!
        {124}get statestore(=alice,=bob,=sid,statepack_c(hs_609: handshakestate,cs1_610: cipherstate,cs2_611: cipherstate)) in
        {106}let hs_612: handshakestate = handshakestatesetcs(hs_609,cs1_610) in
        {107}let v_613: bitstring = catch-fail(handshakestateunpack(hs_612)) in
        {108}let v_614: bitstring = catch-fail((empty,empty,empty)) in
        {109}let v_615: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_613))) in
        {110}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {111}let v_617: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_616),2-proj-2-tuple(v_616),3-proj-3-tuple(v_615),msg_c(alice,bob,sid))) in
        {112}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {113}let v_619: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_616))) && success?(1-proj-3-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then cipherstatepack(1-proj-2-tuple(v_618),increment_nonce(2-proj-2-tuple(v_616))) else fail-any) else fail-any)) in
        {114}let v_620: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_615)) && success?(1-proj-3-tuple(v_615))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_619) then (v_619,v_617) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_621: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_620),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) in
        {116}let v_622: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_620)) && success?(symmetricstatepack(1-proj-2-tuple(v_620),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_621),hash(3-proj-3-tuple(v_621),2-proj-2-tuple(v_620))) else fail-any) else fail-any)) in
        {117}let v_623: bitstring = catch-fail((if success?(1-proj-7-tuple(v_613)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then (if not-caught-fail(v_622) then (v_622,2-proj-2-tuple(v_620)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_624: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_623),2-proj-7-tuple(v_613),3-proj-7-tuple(v_613),4-proj-7-tuple(v_613),5-proj-7-tuple(v_613),6-proj-7-tuple(v_613),7-proj-7-tuple(v_613))) in
        {119}let v_625: bitstring = catch-fail(concat3(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),2-proj-2-tuple(v_623))) in
        {120}let (hs_626: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-7-tuple(v_613))))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (v_624,v_625) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {121}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {122}insert statestore(alice,bob,sid,statepack_d(hs_626,handshakestategetcs(hs_626),cs2_611));
        {123}out(pub, message_c)
    ) | (
        {125}!
        {145}get statestore(=alice,=bob,=sid,statepack_d(hs_627: handshakestate,cs1_628: cipherstate,cs2_629: cipherstate)) in
        {126}let hs_630: handshakestate = handshakestatesetcs(hs_627,cs2_629) in
        {127}in(pub, message_d: bitstring);
        {128}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {129}let v_632: bitstring = catch-fail(deconcat3(message_d)) in
        {130}let v_633: bool = catch-fail(true) in
        {131}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {132}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {133}let v_636: aead = catch-fail(decrypt(1-proj-2-tuple(v_635),2-proj-2-tuple(v_635),3-proj-3-tuple(v_634),3-proj-3-tuple(v_632))) in
        {134}let v_637: bitstring = catch-fail(aeadunpack(v_636)) in
        {135}let v_638: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {136}let v_639: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_635))) && success?(1-proj-3-tuple(v_634))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then cipherstatepack(1-proj-2-tuple(v_638),increment_nonce(2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {137}let v_640: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && (success?(3-proj-3-tuple(v_634)) && success?(1-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_636) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,3-proj-3-tuple(v_637),1-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_641: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) in
        {139}let v_642: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),3-proj-3-tuple(v_632))) else fail-any) else fail-any)) in
        {140}let v_643: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(1-proj-7-tuple(v_631))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_642) then (v_642,2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_644: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_643),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {142}let (hs_645: handshakestate,plaintext_d: bitstring,valid_646: bool) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (v_633 && 3-proj-3-tuple(v_643)) then (if not-caught-fail(v_644) then (v_644,2-proj-3-tuple(v_643),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {143}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {144}event RecvEnd(valid_646)
    ) | (
        {146}event LeakS(phase0,alice);
        {147}out(pub, key_s(alice))
    ) | (
        {148}phase 1;
        {149}event LeakS(phase1,alice);
        {150}out(pub, key_s(alice))
    )
) | (
    {151}let v_647: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {152}let s_648: keypair = (if not-caught-fail(v_647) then keypairpack(validkey(v_647),key_s(alice)) else fail-any) in
    {153}out(pub, getpublickey(s_648));
    (
        {154}let e_649: keypair = keypairpack(empty,empty) in
        {155}let rs_650: key = empty in
        {156}let re_651: key = empty in
        {157}let v_652: bitstring = catch-fail(hash(somename,empty)) in
        {158}let v_653: key = catch-fail(v_652) in
        {159}let v_654: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {160}let v_655: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then symmetricstatepack(v_654,v_653,v_652) else fail-any) else fail-any) else fail-any))) in
        {161}let v_656: symmetricstate = catch-fail((if success?((if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then symmetricstatepack(v_654,v_653,v_652) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),empty)) else fail-any) else fail-any)) in
        {162}let v_657: bitstring = catch-fail(symmetricstateunpack(v_656)) in
        {163}let v_658: symmetricstate = catch-fail((if success?(getpublickey(s_648)) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),getpublickey(s_648))) else fail-any) else fail-any)) in
        {164}let hs_659: handshakestate = (if not-caught-fail(v_656) then (if not-caught-fail(v_658) then handshakestatepack(v_658,s_648,e_649,rs_650,re_651,empty,true) else fail-any) else fail-any) in
        {165}insert statestore(alice,charlie,sid,statepack_a(hs_659))
    ) | (
        {188}get statestore(=alice,=charlie,=sid,statepack_a(hs_660: handshakestate)) in
        {166}let v_661: bitstring = catch-fail(handshakestateunpack(hs_660)) in
        {167}let v_662: bitstring = catch-fail((empty,empty,empty)) in
        {168}let v_663: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {169}let v_664: keypair = catch-fail((if not-caught-fail(v_663) then keypairpack(validkey(v_663),key_e(alice,charlie,sid)) else fail-any)) in
        {170}let v_665: bitstring = catch-fail(getpublickey(v_664)) in
        {171}let v_666: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_661))) in
        {172}let v_667: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_661)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then symmetricstatepack(1-proj-3-tuple(v_666),2-proj-3-tuple(v_666),hash(3-proj-3-tuple(v_666),v_665)) else fail-any) else fail-any)) in
        {173}let v_668: bitstring = catch-fail(symmetricstateunpack(v_667)) in
        {174}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {175}let v_670: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_669),2-proj-2-tuple(v_669),3-proj-3-tuple(v_668),msg_a(alice,charlie,sid))) in
        {176}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {177}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_669))) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {178}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (v_672,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) in
        {180}let v_675: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_673)) && success?(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),2-proj-2-tuple(v_673))) else fail-any) else fail-any)) in
        {181}let v_676: bitstring = catch-fail((if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-2-tuple(v_673)) else fail-any) else fail-any) else fail-any)) in
        {182}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_676),2-proj-7-tuple(v_661),v_664,4-proj-7-tuple(v_661),5-proj-7-tuple(v_661),6-proj-7-tuple(v_661),7-proj-7-tuple(v_661))) in
        {183}let v_678: bitstring = catch-fail(concat3(v_665,2-proj-3-tuple(v_662),2-proj-2-tuple(v_676))) in
        {184}let (hs_679: handshakestate,message_a_680: bitstring) = (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-7-tuple(v_661))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (v_677,v_678) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {185}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {186}insert statestore(alice,charlie,sid,statepack_b(hs_679));
        {187}out(pub, message_a_680)
    ) | (
        {251}get statestore(=alice,=charlie,=sid,statepack_b(hs_681: handshakestate)) in
        {189}in(pub, message_b_682: bitstring);
        {190}let v_683: bitstring = catch-fail(handshakestateunpack(hs_681)) in
        {191}let v_684: bitstring = catch-fail(deconcat3(message_b_682)) in
        {192}let v_685: bool = catch-fail(true) in
        {193}let v_686: key = catch-fail(1-proj-3-tuple(v_684)) in
        {194}let v_687: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_683))) in
        {195}let v_688: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_683)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),hash(3-proj-3-tuple(v_687),v_686)) else fail-any) else fail-any)) in
        {196}let v_689: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_683))) in
        {197}let v_690: bitstring = catch-fail(symmetricstateunpack(v_688)) in
        {198}let v_691: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_690),(if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then dhexp(2-proj-2-tuple(v_689),v_686) else fail-any) else fail-any))) in
        {199}let v_692: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_690),(if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then dhexp(2-proj-2-tuple(v_689),v_686) else fail-any) else fail-any))) in
        {200}let v_693: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_690),(if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then dhexp(2-proj-2-tuple(v_689),v_686) else fail-any) else fail-any))) in
        {201}let v_694: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then dhexp(2-proj-2-tuple(v_689),v_686) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_690))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (v_691,v_692,v_693) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_695: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then dhexp(2-proj-2-tuple(v_689),v_686) else fail-any) else fail-any)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_694)) then cipherstatepack(2-proj-3-tuple(v_694),minnonce) else fail-any),1-proj-3-tuple(v_694),3-proj-3-tuple(v_690)) else fail-any) else fail-any) else fail-any)) in
        {203}let v_696: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_683))) in
        {204}let v_697: bitstring = catch-fail(symmetricstateunpack(v_695)) in
        {205}let v_698: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_697),(if success?(2-proj-7-tuple(v_683)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),v_686) else fail-any) else fail-any))) in
        {206}let v_699: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_697),(if success?(2-proj-7-tuple(v_683)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),v_686) else fail-any) else fail-any))) in
        {207}let v_700: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_697),(if success?(2-proj-7-tuple(v_683)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),v_686) else fail-any) else fail-any))) in
        {208}let v_701: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_683)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),v_686) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_697))) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (v_698,v_699,v_700) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_702: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_683)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),v_686) else fail-any) else fail-any)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_701)) then cipherstatepack(2-proj-3-tuple(v_701),minnonce) else fail-any),1-proj-3-tuple(v_701),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any)) in
        {210}let v_703: bitstring = catch-fail(symmetricstateunpack(v_702)) in
        {211}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {212}let v_705: aead = catch-fail(decrypt(1-proj-2-tuple(v_704),2-proj-2-tuple(v_704),3-proj-3-tuple(v_703),2-proj-3-tuple(v_684))) in
        {213}let v_706: bitstring = catch-fail(aeadunpack(v_705)) in
        {214}let v_707: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {215}let v_708: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_704))) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then cipherstatepack(1-proj-2-tuple(v_707),increment_nonce(2-proj-2-tuple(v_704))) else fail-any) else fail-any)) in
        {216}let v_709: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_684)) && (success?(3-proj-3-tuple(v_703)) && success?(1-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then (if not-caught-fail(v_705) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,3-proj-3-tuple(v_706),1-proj-3-tuple(v_706)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_710: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) in
        {218}let v_711: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_684)) && success?(symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then symmetricstatepack(1-proj-3-tuple(v_710),2-proj-3-tuple(v_710),hash(3-proj-3-tuple(v_710),2-proj-3-tuple(v_684))) else fail-any) else fail-any)) in
        {219}let v_712: bitstring = catch-fail((if success?(2-proj-3-tuple(v_684)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_711) then (v_711,2-proj-3-tuple(v_709),3-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_713: key = catch-fail(2-proj-3-tuple(v_712)) in
        {221}let v_714: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_683))) in
        {222}let v_715: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_712))) in
        {223}let v_716: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_715),(if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),v_713) else fail-any) else fail-any))) in
        {224}let v_717: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_715),(if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),v_713) else fail-any) else fail-any))) in
        {225}let v_718: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_715),(if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),v_713) else fail-any) else fail-any))) in
        {226}let v_719: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),v_713) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_715))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (v_716,v_717,v_718) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_720: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_683)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),v_713) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_712))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_719)) then cipherstatepack(2-proj-3-tuple(v_719),minnonce) else fail-any),1-proj-3-tuple(v_719),3-proj-3-tuple(v_715)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_721: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {229}let v_722: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_721))) in
        {230}let v_723: aead = catch-fail(decrypt(1-proj-2-tuple(v_722),2-proj-2-tuple(v_722),3-proj-3-tuple(v_721),3-proj-3-tuple(v_684))) in
        {231}let v_724: bitstring = catch-fail(aeadunpack(v_723)) in
        {232}let v_725: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_721))) in
        {233}let v_726: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_722))) && success?(1-proj-3-tuple(v_721))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-2-tuple(v_725))))) then cipherstatepack(1-proj-2-tuple(v_725),increment_nonce(2-proj-2-tuple(v_722))) else fail-any) else fail-any)) in
        {234}let v_727: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_684)) && (success?(3-proj-3-tuple(v_721)) && success?(1-proj-3-tuple(v_721)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then (if not-caught-fail(v_723) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if not-caught-fail(v_726) then (v_726,3-proj-3-tuple(v_724),1-proj-3-tuple(v_724)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_728: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_727),2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)))) in
        {236}let v_729: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_684)) && success?(symmetricstatepack(1-proj-3-tuple(v_727),2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_728),hash(3-proj-3-tuple(v_728),3-proj-3-tuple(v_684))) else fail-any) else fail-any)) in
        {237}let v_730: bitstring = catch-fail((if success?(3-proj-3-tuple(v_684)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if not-caught-fail(v_729) then (v_729,2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_731: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {239}let v_732: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_730),2-proj-7-tuple(v_683),3-proj-7-tuple(v_683),v_713,v_686,6-proj-7-tuple(v_683),7-proj-7-tuple(v_683))) in
        {240}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_730))) in
        {241}let v_734: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_733),zero)) in
        {242}let v_735: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_733),zero)) in
        {243}let v_736: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_733),zero)) in
        {244}let v_737: bitstring = catch-fail((if success?(2-proj-3-tuple(v_733)) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (v_734,v_735,v_736) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_738: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_737)) then cipherstatepack(1-proj-3-tuple(v_737),minnonce) else fail-any)) in
        {246}let v_739: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_737)) then cipherstatepack(2-proj-3-tuple(v_737),minnonce) else fail-any)) in
        {247}let v_740: bitstring = catch-fail((if success?(1-proj-3-tuple(v_730)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (1-proj-3-tuple(v_730),v_738,v_739) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let (hs_741: handshakestate,plaintext_b_742: bitstring,valid_743: bool,cs1_744: cipherstate,cs2_745: cipherstate) = (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-7-tuple(v_683))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (if not-caught-fail(v_688) then (if not-caught-fail(v_695) then (if not-caught-fail(v_702) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if not-caught-fail(v_713) then (if not-caught-fail(v_720) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if ((3-proj-3-tuple(v_712) && 3-proj-3-tuple(v_730)) && (v_713 = getpublickey((if not-caught-fail(v_731) then keypairpack(validkey(v_731),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (v_732,2-proj-3-tuple(v_730),true,2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {249}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_742);
        {250}insert statestore(alice,charlie,sid,statepack_c(hs_741,cs1_744,cs2_745))
    ) | (
        {252}!
        {271}get statestore(=alice,=charlie,=sid,statepack_c(hs_746: handshakestate,cs1_747: cipherstate,cs2_748: cipherstate)) in
        {253}let hs_749: handshakestate = handshakestatesetcs(hs_746,cs1_747) in
        {254}let v_750: bitstring = catch-fail(handshakestateunpack(hs_749)) in
        {255}let v_751: bitstring = catch-fail((empty,empty,empty)) in
        {256}let v_752: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_750))) in
        {257}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {258}let v_754: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_753),2-proj-2-tuple(v_753),3-proj-3-tuple(v_752),msg_c(alice,charlie,sid))) in
        {259}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {260}let v_756: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_753))) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then cipherstatepack(1-proj-2-tuple(v_755),increment_nonce(2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {261}let v_757: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_752)) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then (v_756,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_758: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) in
        {263}let v_759: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_757)) && success?(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_758),hash(3-proj-3-tuple(v_758),2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {264}let v_760: bitstring = catch-fail((if success?(1-proj-7-tuple(v_750)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_759) then (v_759,2-proj-2-tuple(v_757)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {265}let v_761: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_760),2-proj-7-tuple(v_750),3-proj-7-tuple(v_750),4-proj-7-tuple(v_750),5-proj-7-tuple(v_750),6-proj-7-tuple(v_750),7-proj-7-tuple(v_750))) in
        {266}let v_762: bitstring = catch-fail(concat3(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),2-proj-2-tuple(v_760))) in
        {267}let (hs_763: handshakestate,message_c_764: bitstring) = (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-7-tuple(v_750))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {268}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {269}insert statestore(alice,charlie,sid,statepack_d(hs_763,handshakestategetcs(hs_763),cs2_748));
        {270}out(pub, message_c_764)
    ) | (
        {272}!
        {292}get statestore(=alice,=charlie,=sid,statepack_d(hs_765: handshakestate,cs1_766: cipherstate,cs2_767: cipherstate)) in
        {273}let hs_768: handshakestate = handshakestatesetcs(hs_765,cs2_767) in
        {274}in(pub, message_d_769: bitstring);
        {275}let v_770: bitstring = catch-fail(handshakestateunpack(hs_768)) in
        {276}let v_771: bitstring = catch-fail(deconcat3(message_d_769)) in
        {277}let v_772: bool = catch-fail(true) in
        {278}let v_773: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_770))) in
        {279}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {280}let v_775: aead = catch-fail(decrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),3-proj-3-tuple(v_771))) in
        {281}let v_776: bitstring = catch-fail(aeadunpack(v_775)) in
        {282}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {283}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {284}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,3-proj-3-tuple(v_776),1-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {286}let v_781: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),3-proj-3-tuple(v_771))) else fail-any) else fail-any)) in
        {287}let v_782: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(1-proj-7-tuple(v_770))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_782),2-proj-7-tuple(v_770),3-proj-7-tuple(v_770),4-proj-7-tuple(v_770),5-proj-7-tuple(v_770),6-proj-7-tuple(v_770),7-proj-7-tuple(v_770))) in
        {289}let (hs_784: handshakestate,plaintext_d_785: bitstring,valid_786: bool) = (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-7-tuple(v_770))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (v_772 && 3-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (v_783,2-proj-3-tuple(v_782),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_785);
        {291}event RecvEnd(valid_786)
    ) | (
        {293}event LeakS(phase0,alice);
        {294}out(pub, key_s(alice))
    ) | (
        {295}phase 1;
        {296}event LeakS(phase1,alice);
        {297}out(pub, key_s(alice))
    )
) | (
    {298}let s_787: keypair = keypairpack(empty,empty) in
    {299}out(pub, getpublickey(s_787));
    (
        {300}let e_788: keypair = keypairpack(empty,empty) in
        {301}let v_789: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {302}let rs_790: key = getpublickey((if not-caught-fail(v_789) then keypairpack(validkey(v_789),key_s(alice)) else fail-any)) in
        {303}let re_791: key = empty in
        {304}let v_792: bitstring = catch-fail(hash(somename,empty)) in
        {305}let v_793: key = catch-fail(v_792) in
        {306}let v_794: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {307}let v_795: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then symmetricstatepack(v_794,v_793,v_792) else fail-any) else fail-any) else fail-any))) in
        {308}let v_796: symmetricstate = catch-fail((if success?((if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then symmetricstatepack(v_794,v_793,v_792) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_795),hash(3-proj-3-tuple(v_795),empty)) else fail-any) else fail-any)) in
        {309}let v_797: bitstring = catch-fail(symmetricstateunpack(v_796)) in
        {310}let v_798: symmetricstate = catch-fail((if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),rs_790)) else fail-any)) in
        {311}let hs_799: handshakestate = (if not-caught-fail(v_796) then (if not-caught-fail(v_798) then handshakestatepack(v_798,s_787,e_788,rs_790,re_791,empty,false) else fail-any) else fail-any) in
        {312}insert statestore(bob,alice,sid,statepack_a(hs_799))
    ) | (
        {334}get statestore(=bob,=alice,=sid,statepack_a(hs_800: handshakestate)) in
        {313}in(pub, message_a_801: bitstring);
        {314}let v_802: bitstring = catch-fail(handshakestateunpack(hs_800)) in
        {315}let v_803: bitstring = catch-fail(deconcat3(message_a_801)) in
        {316}let v_804: bool = catch-fail(true) in
        {317}let v_805: key = catch-fail(1-proj-3-tuple(v_803)) in
        {318}let v_806: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_802))) in
        {319}let v_807: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_802)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack(1-proj-3-tuple(v_806),2-proj-3-tuple(v_806),hash(3-proj-3-tuple(v_806),v_805)) else fail-any) else fail-any)) in
        {320}let v_808: bitstring = catch-fail(symmetricstateunpack(v_807)) in
        {321}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {322}let v_810: aead = catch-fail(decrypt(1-proj-2-tuple(v_809),2-proj-2-tuple(v_809),3-proj-3-tuple(v_808),3-proj-3-tuple(v_803))) in
        {323}let v_811: bitstring = catch-fail(aeadunpack(v_810)) in
        {324}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {325}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_809))) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {326}let v_814: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_803)) && (success?(3-proj-3-tuple(v_808)) && success?(1-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,3-proj-3-tuple(v_811),1-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {327}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) in
        {328}let v_816: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_803)) && success?(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),3-proj-3-tuple(v_803))) else fail-any) else fail-any)) in
        {329}let v_817: bitstring = catch-fail((if success?(3-proj-3-tuple(v_803)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {330}let v_818: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_817),2-proj-7-tuple(v_802),3-proj-7-tuple(v_802),4-proj-7-tuple(v_802),v_805,6-proj-7-tuple(v_802),7-proj-7-tuple(v_802))) in
        {331}let (hs_819: handshakestate,plaintext_a: bitstring,valid_820: bool) = (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-7-tuple(v_802))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (v_804 && 3-proj-3-tuple(v_817)) then (if not-caught-fail(v_818) then (v_818,2-proj-3-tuple(v_817),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {332}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {333}insert statestore(bob,alice,sid,statepack_b(hs_819))
    ) | (
        {397}get statestore(=bob,=alice,=sid,statepack_b(hs_821: handshakestate)) in
        {335}let v_822: bitstring = catch-fail(handshakestateunpack(hs_821)) in
        {336}let v_823: bitstring = catch-fail((empty,empty,empty)) in
        {337}let v_824: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {338}let v_825: keypair = catch-fail((if not-caught-fail(v_824) then keypairpack(validkey(v_824),key_e(bob,alice,sid)) else fail-any)) in
        {339}let v_826: bitstring = catch-fail(getpublickey(v_825)) in
        {340}let v_827: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_822))) in
        {341}let v_828: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_822)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),v_826)) else fail-any) else fail-any)) in
        {342}let v_829: bitstring = catch-fail(keypairunpack(v_825)) in
        {343}let v_830: bitstring = catch-fail(symmetricstateunpack(v_828)) in
        {344}let v_831: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_830),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then dhexp(2-proj-2-tuple(v_829),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {345}let v_832: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_830),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then dhexp(2-proj-2-tuple(v_829),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {346}let v_833: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_830),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then dhexp(2-proj-2-tuple(v_829),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {347}let v_834: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then dhexp(2-proj-2-tuple(v_829),5-proj-7-tuple(v_822)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_830))) then (if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (v_831,v_832,v_833) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_835: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then dhexp(2-proj-2-tuple(v_829),5-proj-7-tuple(v_822)) else fail-any) else fail-any)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_834)) then cipherstatepack(2-proj-3-tuple(v_834),minnonce) else fail-any),1-proj-3-tuple(v_834),3-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any)) in
        {349}let v_836: bitstring = catch-fail(keypairunpack(v_825)) in
        {350}let v_837: bitstring = catch-fail(symmetricstateunpack(v_835)) in
        {351}let v_838: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_837),(if success?(4-proj-7-tuple(v_822)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then dhexp(2-proj-2-tuple(v_836),4-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {352}let v_839: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_837),(if success?(4-proj-7-tuple(v_822)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then dhexp(2-proj-2-tuple(v_836),4-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {353}let v_840: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_837),(if success?(4-proj-7-tuple(v_822)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then dhexp(2-proj-2-tuple(v_836),4-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {354}let v_841: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_822)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then dhexp(2-proj-2-tuple(v_836),4-proj-7-tuple(v_822)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_837))) then (if not-caught-fail(v_838) then (if not-caught-fail(v_839) then (if not-caught-fail(v_840) then (v_838,v_839,v_840) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_842: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_822)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then dhexp(2-proj-2-tuple(v_836),4-proj-7-tuple(v_822)) else fail-any) else fail-any)) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_841)) then cipherstatepack(2-proj-3-tuple(v_841),minnonce) else fail-any),1-proj-3-tuple(v_841),3-proj-3-tuple(v_837)) else fail-any) else fail-any) else fail-any)) in
        {356}let v_843: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {357}let v_844: keypair = catch-fail((if not-caught-fail(v_843) then keypairpack(validkey(v_843),key_s(bob)) else fail-any)) in
        {358}let v_845: bitstring = catch-fail(symmetricstateunpack(v_842)) in
        {359}let v_846: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {360}let v_847: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_846),2-proj-2-tuple(v_846),3-proj-3-tuple(v_845),getpublickey(v_844))) in
        {361}let v_848: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {362}let v_849: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_846))) && success?(1-proj-3-tuple(v_845))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then cipherstatepack(1-proj-2-tuple(v_848),increment_nonce(2-proj-2-tuple(v_846))) else fail-any) else fail-any)) in
        {363}let v_850: bitstring = catch-fail((if (success?(getpublickey(v_844)) && (success?(3-proj-3-tuple(v_845)) && success?(1-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_847) then (if not-caught-fail(v_849) then (v_849,v_847) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let v_851: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_850),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) in
        {365}let v_852: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_850)) && success?(symmetricstatepack(1-proj-2-tuple(v_850),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_851),hash(3-proj-3-tuple(v_851),2-proj-2-tuple(v_850))) else fail-any) else fail-any)) in
        {366}let v_853: bitstring = catch-fail((if success?(getpublickey(v_844)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_852) then (v_852,2-proj-2-tuple(v_850)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_854: bitstring = catch-fail(keypairunpack(v_844)) in
        {368}let v_855: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_853))) in
        {369}let v_856: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_855),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then dhexp(2-proj-2-tuple(v_854),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {370}let v_857: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_855),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then dhexp(2-proj-2-tuple(v_854),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {371}let v_858: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_855),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then dhexp(2-proj-2-tuple(v_854),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {372}let v_859: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then dhexp(2-proj-2-tuple(v_854),5-proj-7-tuple(v_822)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_855))) then (if not-caught-fail(v_856) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (v_856,v_857,v_858) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {373}let v_860: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then dhexp(2-proj-2-tuple(v_854),5-proj-7-tuple(v_822)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_853))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_859)) then cipherstatepack(2-proj-3-tuple(v_859),minnonce) else fail-any),1-proj-3-tuple(v_859),3-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any)) in
        {374}let v_861: bitstring = catch-fail(symmetricstateunpack(v_860)) in
        {375}let v_862: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_861))) in
        {376}let v_863: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_862),2-proj-2-tuple(v_862),3-proj-3-tuple(v_861),msg_b(bob,alice,sid))) in
        {377}let v_864: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_861))) in
        {378}let v_865: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_862))) && success?(1-proj-3-tuple(v_861))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then cipherstatepack(1-proj-2-tuple(v_864),increment_nonce(2-proj-2-tuple(v_862))) else fail-any) else fail-any)) in
        {379}let v_866: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_861)) && success?(1-proj-3-tuple(v_861))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-2-tuple(v_862))))) then (if not-caught-fail(v_863) then (if not-caught-fail(v_865) then (v_865,v_863) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_867: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_866),2-proj-3-tuple(v_861),3-proj-3-tuple(v_861)))) in
        {381}let v_868: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_866)) && success?(symmetricstatepack(1-proj-2-tuple(v_866),2-proj-3-tuple(v_861),3-proj-3-tuple(v_861)))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then symmetricstatepack(1-proj-3-tuple(v_867),2-proj-3-tuple(v_867),hash(3-proj-3-tuple(v_867),2-proj-2-tuple(v_866))) else fail-any) else fail-any)) in
        {382}let v_869: bitstring = catch-fail((if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then (if not-caught-fail(v_868) then (v_868,2-proj-2-tuple(v_866)) else fail-any) else fail-any) else fail-any)) in
        {383}let v_870: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_869),v_844,v_825,4-proj-7-tuple(v_822),5-proj-7-tuple(v_822),6-proj-7-tuple(v_822),7-proj-7-tuple(v_822))) in
        {384}let v_871: bitstring = catch-fail(concat3(v_826,2-proj-2-tuple(v_853),2-proj-2-tuple(v_869))) in
        {385}let v_872: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_869))) in
        {386}let v_873: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_872),zero)) in
        {387}let v_874: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_872),zero)) in
        {388}let v_875: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_872),zero)) in
        {389}let v_876: bitstring = catch-fail((if success?(2-proj-3-tuple(v_872)) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (v_873,v_874,v_875) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_877: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_876)) then cipherstatepack(1-proj-3-tuple(v_876),minnonce) else fail-any)) in
        {391}let v_878: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_876)) then cipherstatepack(2-proj-3-tuple(v_876),minnonce) else fail-any)) in
        {392}let v_879: bitstring = catch-fail((if success?(1-proj-2-tuple(v_869)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (1-proj-2-tuple(v_869),v_877,v_878) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let (hs_880: handshakestate,message_b_881: bitstring,cs1_882: cipherstate,cs2_883: cipherstate) = (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-7-tuple(v_822))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (if not-caught-fail(v_828) then (if not-caught-fail(v_835) then (if not-caught-fail(v_842) then (if not-caught-fail(v_844) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_860) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (v_870,v_871,2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {394}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {395}insert statestore(bob,alice,sid,statepack_c(hs_880,cs1_882,cs2_883));
        {396}out(pub, message_b_881)
    ) | (
        {398}!
        {418}get statestore(=bob,=alice,=sid,statepack_c(hs_884: handshakestate,cs1_885: cipherstate,cs2_886: cipherstate)) in
        {399}let hs_887: handshakestate = handshakestatesetcs(hs_884,cs1_885) in
        {400}in(pub, message_c_888: bitstring);
        {401}let v_889: bitstring = catch-fail(handshakestateunpack(hs_887)) in
        {402}let v_890: bitstring = catch-fail(deconcat3(message_c_888)) in
        {403}let v_891: bool = catch-fail(true) in
        {404}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_889))) in
        {405}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {406}let v_894: aead = catch-fail(decrypt(1-proj-2-tuple(v_893),2-proj-2-tuple(v_893),3-proj-3-tuple(v_892),3-proj-3-tuple(v_890))) in
        {407}let v_895: bitstring = catch-fail(aeadunpack(v_894)) in
        {408}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {409}let v_897: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_893))) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then cipherstatepack(1-proj-2-tuple(v_896),increment_nonce(2-proj-2-tuple(v_893))) else fail-any) else fail-any)) in
        {410}let v_898: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_890)) && (success?(3-proj-3-tuple(v_892)) && success?(1-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,3-proj-3-tuple(v_895),1-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_899: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) in
        {412}let v_900: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_890)) && success?(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),3-proj-3-tuple(v_890))) else fail-any) else fail-any)) in
        {413}let v_901: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_890)) && success?(1-proj-7-tuple(v_889))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_900) then (v_900,2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_902: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_901),2-proj-7-tuple(v_889),3-proj-7-tuple(v_889),4-proj-7-tuple(v_889),5-proj-7-tuple(v_889),6-proj-7-tuple(v_889),7-proj-7-tuple(v_889))) in
        {415}let (hs_903: handshakestate,plaintext_c: bitstring,valid_904: bool) = (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-7-tuple(v_889))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (v_891 && 3-proj-3-tuple(v_901)) then (if not-caught-fail(v_902) then (v_902,2-proj-3-tuple(v_901),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {416}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {417}insert statestore(bob,alice,sid,statepack_d(hs_903,handshakestategetcs(hs_903),cs2_886))
    ) | (
        {419}!
        {437}get statestore(=bob,=alice,=sid,statepack_d(hs_905: handshakestate,cs1_906: cipherstate,cs2_907: cipherstate)) in
        {420}let hs_908: handshakestate = handshakestatesetcs(hs_905,cs2_907) in
        {421}let v_909: bitstring = catch-fail(handshakestateunpack(hs_908)) in
        {422}let v_910: bitstring = catch-fail((empty,empty,empty)) in
        {423}let v_911: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_909))) in
        {424}let v_912: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_911))) in
        {425}let v_913: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_912),2-proj-2-tuple(v_912),3-proj-3-tuple(v_911),msg_d(bob,alice,sid))) in
        {426}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_911))) in
        {427}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_912))) && success?(1-proj-3-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_912))) else fail-any) else fail-any)) in
        {428}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_911)) && success?(1-proj-3-tuple(v_911))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-2-tuple(v_912))))) then (if not-caught-fail(v_913) then (if not-caught-fail(v_915) then (v_915,v_913) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_916),2-proj-3-tuple(v_911),3-proj-3-tuple(v_911)))) in
        {430}let v_918: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_916)) && success?(symmetricstatepack(1-proj-2-tuple(v_916),2-proj-3-tuple(v_911),3-proj-3-tuple(v_911)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),2-proj-2-tuple(v_916))) else fail-any) else fail-any)) in
        {431}let v_919: bitstring = catch-fail((if success?(1-proj-7-tuple(v_909)) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-2-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {432}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_919),2-proj-7-tuple(v_909),3-proj-7-tuple(v_909),4-proj-7-tuple(v_909),5-proj-7-tuple(v_909),6-proj-7-tuple(v_909),7-proj-7-tuple(v_909))) in
        {433}let v_921: bitstring = catch-fail(concat3(1-proj-3-tuple(v_910),2-proj-3-tuple(v_910),2-proj-2-tuple(v_919))) in
        {434}let (hs_922: handshakestate,message_d_923: bitstring) = (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-7-tuple(v_909))))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then (if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (v_920,v_921) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {435}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {436}out(pub, message_d_923)
    ) | (
        {438}event LeakS(phase0,bob);
        {439}out(pub, key_s(bob))
    ) | (
        {440}phase 1;
        {441}event LeakS(phase1,bob);
        {442}out(pub, key_s(bob))
    )
) | (
    {443}let s_924: keypair = keypairpack(empty,empty) in
    {444}out(pub, getpublickey(s_924));
    (
        {445}let e_925: keypair = keypairpack(empty,empty) in
        {446}let v_926: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {447}let rs_927: key = getpublickey((if not-caught-fail(v_926) then keypairpack(validkey(v_926),key_s(charlie)) else fail-any)) in
        {448}let re_928: key = empty in
        {449}let v_929: bitstring = catch-fail(hash(somename,empty)) in
        {450}let v_930: key = catch-fail(v_929) in
        {451}let v_931: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {452}let v_932: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then symmetricstatepack(v_931,v_930,v_929) else fail-any) else fail-any) else fail-any))) in
        {453}let v_933: symmetricstate = catch-fail((if success?((if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then symmetricstatepack(v_931,v_930,v_929) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then symmetricstatepack(1-proj-3-tuple(v_932),2-proj-3-tuple(v_932),hash(3-proj-3-tuple(v_932),empty)) else fail-any) else fail-any)) in
        {454}let v_934: bitstring = catch-fail(symmetricstateunpack(v_933)) in
        {455}let v_935: symmetricstate = catch-fail((if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_934),hash(3-proj-3-tuple(v_934),rs_927)) else fail-any)) in
        {456}let hs_936: handshakestate = (if not-caught-fail(v_933) then (if not-caught-fail(v_935) then handshakestatepack(v_935,s_924,e_925,rs_927,re_928,empty,false) else fail-any) else fail-any) in
        {457}insert statestore(bob,charlie,sid,statepack_a(hs_936))
    ) | (
        {479}get statestore(=bob,=charlie,=sid,statepack_a(hs_937: handshakestate)) in
        {458}in(pub, message_a_938: bitstring);
        {459}let v_939: bitstring = catch-fail(handshakestateunpack(hs_937)) in
        {460}let v_940: bitstring = catch-fail(deconcat3(message_a_938)) in
        {461}let v_941: bool = catch-fail(true) in
        {462}let v_942: key = catch-fail(1-proj-3-tuple(v_940)) in
        {463}let v_943: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_939))) in
        {464}let v_944: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_939)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),hash(3-proj-3-tuple(v_943),v_942)) else fail-any) else fail-any)) in
        {465}let v_945: bitstring = catch-fail(symmetricstateunpack(v_944)) in
        {466}let v_946: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_945))) in
        {467}let v_947: aead = catch-fail(decrypt(1-proj-2-tuple(v_946),2-proj-2-tuple(v_946),3-proj-3-tuple(v_945),3-proj-3-tuple(v_940))) in
        {468}let v_948: bitstring = catch-fail(aeadunpack(v_947)) in
        {469}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_945))) in
        {470}let v_950: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_946))) && success?(1-proj-3-tuple(v_945))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then cipherstatepack(1-proj-2-tuple(v_949),increment_nonce(2-proj-2-tuple(v_946))) else fail-any) else fail-any)) in
        {471}let v_951: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_940)) && (success?(3-proj-3-tuple(v_945)) && success?(1-proj-3-tuple(v_945)))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then (if not-caught-fail(v_947) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if not-caught-fail(v_950) then (v_950,3-proj-3-tuple(v_948),1-proj-3-tuple(v_948)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {472}let v_952: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)))) in
        {473}let v_953: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_940)) && success?(symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),3-proj-3-tuple(v_940))) else fail-any) else fail-any)) in
        {474}let v_954: bitstring = catch-fail((if success?(3-proj-3-tuple(v_940)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let v_955: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_954),2-proj-7-tuple(v_939),3-proj-7-tuple(v_939),4-proj-7-tuple(v_939),v_942,6-proj-7-tuple(v_939),7-proj-7-tuple(v_939))) in
        {476}let (hs_956: handshakestate,plaintext_a_957: bitstring,valid_958: bool) = (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-7-tuple(v_939))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (if not-caught-fail(v_944) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if (v_941 && 3-proj-3-tuple(v_954)) then (if not-caught-fail(v_955) then (v_955,2-proj-3-tuple(v_954),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {477}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_957);
        {478}insert statestore(bob,charlie,sid,statepack_b(hs_956))
    ) | (
        {542}get statestore(=bob,=charlie,=sid,statepack_b(hs_959: handshakestate)) in
        {480}let v_960: bitstring = catch-fail(handshakestateunpack(hs_959)) in
        {481}let v_961: bitstring = catch-fail((empty,empty,empty)) in
        {482}let v_962: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {483}let v_963: keypair = catch-fail((if not-caught-fail(v_962) then keypairpack(validkey(v_962),key_e(bob,charlie,sid)) else fail-any)) in
        {484}let v_964: bitstring = catch-fail(getpublickey(v_963)) in
        {485}let v_965: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_960))) in
        {486}let v_966: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_960)) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then symmetricstatepack(1-proj-3-tuple(v_965),2-proj-3-tuple(v_965),hash(3-proj-3-tuple(v_965),v_964)) else fail-any) else fail-any)) in
        {487}let v_967: bitstring = catch-fail(keypairunpack(v_963)) in
        {488}let v_968: bitstring = catch-fail(symmetricstateunpack(v_966)) in
        {489}let v_969: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_968),(if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then dhexp(2-proj-2-tuple(v_967),5-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {490}let v_970: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_968),(if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then dhexp(2-proj-2-tuple(v_967),5-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {491}let v_971: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_968),(if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then dhexp(2-proj-2-tuple(v_967),5-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {492}let v_972: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then dhexp(2-proj-2-tuple(v_967),5-proj-7-tuple(v_960)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_968))) then (if not-caught-fail(v_969) then (if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (v_969,v_970,v_971) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {493}let v_973: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then dhexp(2-proj-2-tuple(v_967),5-proj-7-tuple(v_960)) else fail-any) else fail-any)) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_972)) then cipherstatepack(2-proj-3-tuple(v_972),minnonce) else fail-any),1-proj-3-tuple(v_972),3-proj-3-tuple(v_968)) else fail-any) else fail-any) else fail-any)) in
        {494}let v_974: bitstring = catch-fail(keypairunpack(v_963)) in
        {495}let v_975: bitstring = catch-fail(symmetricstateunpack(v_973)) in
        {496}let v_976: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_975),(if success?(4-proj-7-tuple(v_960)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then dhexp(2-proj-2-tuple(v_974),4-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {497}let v_977: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_975),(if success?(4-proj-7-tuple(v_960)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then dhexp(2-proj-2-tuple(v_974),4-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {498}let v_978: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_975),(if success?(4-proj-7-tuple(v_960)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then dhexp(2-proj-2-tuple(v_974),4-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {499}let v_979: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_960)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then dhexp(2-proj-2-tuple(v_974),4-proj-7-tuple(v_960)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_975))) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then (v_976,v_977,v_978) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {500}let v_980: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_960)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then dhexp(2-proj-2-tuple(v_974),4-proj-7-tuple(v_960)) else fail-any) else fail-any)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_979)) then cipherstatepack(2-proj-3-tuple(v_979),minnonce) else fail-any),1-proj-3-tuple(v_979),3-proj-3-tuple(v_975)) else fail-any) else fail-any) else fail-any)) in
        {501}let v_981: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {502}let v_982: keypair = catch-fail((if not-caught-fail(v_981) then keypairpack(validkey(v_981),key_s(bob)) else fail-any)) in
        {503}let v_983: bitstring = catch-fail(symmetricstateunpack(v_980)) in
        {504}let v_984: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {505}let v_985: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_984),2-proj-2-tuple(v_984),3-proj-3-tuple(v_983),getpublickey(v_982))) in
        {506}let v_986: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {507}let v_987: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_984))) && success?(1-proj-3-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then cipherstatepack(1-proj-2-tuple(v_986),increment_nonce(2-proj-2-tuple(v_984))) else fail-any) else fail-any)) in
        {508}let v_988: bitstring = catch-fail((if (success?(getpublickey(v_982)) && (success?(3-proj-3-tuple(v_983)) && success?(1-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then (if not-caught-fail(v_985) then (if not-caught-fail(v_987) then (v_987,v_985) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_989: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_988),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) in
        {510}let v_990: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_988)) && success?(symmetricstatepack(1-proj-2-tuple(v_988),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_989),hash(3-proj-3-tuple(v_989),2-proj-2-tuple(v_988))) else fail-any) else fail-any)) in
        {511}let v_991: bitstring = catch-fail((if success?(getpublickey(v_982)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then (if not-caught-fail(v_990) then (v_990,2-proj-2-tuple(v_988)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_992: bitstring = catch-fail(keypairunpack(v_982)) in
        {513}let v_993: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_991))) in
        {514}let v_994: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_993),(if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {515}let v_995: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_993),(if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {516}let v_996: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_993),(if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_960)) else fail-any) else fail-any))) in
        {517}let v_997: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_960)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_993))) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (v_994,v_995,v_996) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_998: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_960)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),5-proj-7-tuple(v_960)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_991))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_997)) then cipherstatepack(2-proj-3-tuple(v_997),minnonce) else fail-any),1-proj-3-tuple(v_997),3-proj-3-tuple(v_993)) else fail-any) else fail-any) else fail-any)) in
        {519}let v_999: bitstring = catch-fail(symmetricstateunpack(v_998)) in
        {520}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {521}let v_1001: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1000),2-proj-2-tuple(v_1000),3-proj-3-tuple(v_999),msg_b(bob,charlie,sid))) in
        {522}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {523}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1000))) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_1000))) else fail-any) else fail-any)) in
        {524}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1003) then (v_1003,v_1001) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1004),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) in
        {526}let v_1006: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1004)) && success?(symmetricstatepack(1-proj-2-tuple(v_1004),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),2-proj-2-tuple(v_1004))) else fail-any) else fail-any)) in
        {527}let v_1007: bitstring = catch-fail((if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-2-tuple(v_1004)) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1007),v_982,v_963,4-proj-7-tuple(v_960),5-proj-7-tuple(v_960),6-proj-7-tuple(v_960),7-proj-7-tuple(v_960))) in
        {529}let v_1009: bitstring = catch-fail(concat3(v_964,2-proj-2-tuple(v_991),2-proj-2-tuple(v_1007))) in
        {530}let v_1010: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1007))) in
        {531}let v_1011: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1010),zero)) in
        {532}let v_1012: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1010),zero)) in
        {533}let v_1013: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1010),zero)) in
        {534}let v_1014: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1010)) then (if not-caught-fail(v_1011) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (v_1011,v_1012,v_1013) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1015: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1014)) then cipherstatepack(1-proj-3-tuple(v_1014),minnonce) else fail-any)) in
        {536}let v_1016: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1014)) then cipherstatepack(2-proj-3-tuple(v_1014),minnonce) else fail-any)) in
        {537}let v_1017: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1007)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (1-proj-2-tuple(v_1007),v_1015,v_1016) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let (hs_1018: handshakestate,message_b_1019: bitstring,cs1_1020: cipherstate,cs2_1021: cipherstate) = (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-7-tuple(v_960))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (if not-caught-fail(v_966) then (if not-caught-fail(v_973) then (if not-caught-fail(v_980) then (if not-caught-fail(v_982) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-2-tuple(v_1007))))) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1009) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (v_1008,v_1009,2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {539}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {540}insert statestore(bob,charlie,sid,statepack_c(hs_1018,cs1_1020,cs2_1021));
        {541}out(pub, message_b_1019)
    ) | (
        {543}!
        {563}get statestore(=bob,=charlie,=sid,statepack_c(hs_1022: handshakestate,cs1_1023: cipherstate,cs2_1024: cipherstate)) in
        {544}let hs_1025: handshakestate = handshakestatesetcs(hs_1022,cs1_1023) in
        {545}in(pub, message_c_1026: bitstring);
        {546}let v_1027: bitstring = catch-fail(handshakestateunpack(hs_1025)) in
        {547}let v_1028: bitstring = catch-fail(deconcat3(message_c_1026)) in
        {548}let v_1029: bool = catch-fail(true) in
        {549}let v_1030: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1027))) in
        {550}let v_1031: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {551}let v_1032: aead = catch-fail(decrypt(1-proj-2-tuple(v_1031),2-proj-2-tuple(v_1031),3-proj-3-tuple(v_1030),3-proj-3-tuple(v_1028))) in
        {552}let v_1033: bitstring = catch-fail(aeadunpack(v_1032)) in
        {553}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {554}let v_1035: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1031))) && success?(1-proj-3-tuple(v_1030))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then cipherstatepack(1-proj-2-tuple(v_1034),increment_nonce(2-proj-2-tuple(v_1031))) else fail-any) else fail-any)) in
        {555}let v_1036: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && (success?(3-proj-3-tuple(v_1030)) && success?(1-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if not-caught-fail(v_1035) then (v_1035,3-proj-3-tuple(v_1033),1-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {556}let v_1037: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) in
        {557}let v_1038: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack(1-proj-3-tuple(v_1037),2-proj-3-tuple(v_1037),hash(3-proj-3-tuple(v_1037),3-proj-3-tuple(v_1028))) else fail-any) else fail-any)) in
        {558}let v_1039: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(1-proj-7-tuple(v_1027))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,2-proj-3-tuple(v_1036),3-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1040: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1039),2-proj-7-tuple(v_1027),3-proj-7-tuple(v_1027),4-proj-7-tuple(v_1027),5-proj-7-tuple(v_1027),6-proj-7-tuple(v_1027),7-proj-7-tuple(v_1027))) in
        {560}let (hs_1041: handshakestate,plaintext_c_1042: bitstring,valid_1043: bool) = (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-7-tuple(v_1027))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (v_1029 && 3-proj-3-tuple(v_1039)) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1039),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {561}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1042);
        {562}insert statestore(bob,charlie,sid,statepack_d(hs_1041,handshakestategetcs(hs_1041),cs2_1024))
    ) | (
        {564}!
        {582}get statestore(=bob,=charlie,=sid,statepack_d(hs_1044: handshakestate,cs1_1045: cipherstate,cs2_1046: cipherstate)) in
        {565}let hs_1047: handshakestate = handshakestatesetcs(hs_1044,cs2_1046) in
        {566}let v_1048: bitstring = catch-fail(handshakestateunpack(hs_1047)) in
        {567}let v_1049: bitstring = catch-fail((empty,empty,empty)) in
        {568}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1048))) in
        {569}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {570}let v_1052: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1051),2-proj-2-tuple(v_1051),3-proj-3-tuple(v_1050),msg_d(bob,charlie,sid))) in
        {571}let v_1053: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {572}let v_1054: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1051))) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then cipherstatepack(1-proj-2-tuple(v_1053),increment_nonce(2-proj-2-tuple(v_1051))) else fail-any) else fail-any)) in
        {573}let v_1055: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1050)) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then (if not-caught-fail(v_1052) then (if not-caught-fail(v_1054) then (v_1054,v_1052) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1056: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1055),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) in
        {575}let v_1057: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1055)) && success?(symmetricstatepack(1-proj-2-tuple(v_1055),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1056),hash(3-proj-3-tuple(v_1056),2-proj-2-tuple(v_1055))) else fail-any) else fail-any)) in
        {576}let v_1058: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then (if not-caught-fail(v_1057) then (v_1057,2-proj-2-tuple(v_1055)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {577}let v_1059: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1058),2-proj-7-tuple(v_1048),3-proj-7-tuple(v_1048),4-proj-7-tuple(v_1048),5-proj-7-tuple(v_1048),6-proj-7-tuple(v_1048),7-proj-7-tuple(v_1048))) in
        {578}let v_1060: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1049),2-proj-3-tuple(v_1049),2-proj-2-tuple(v_1058))) in
        {579}let (hs_1061: handshakestate,message_d_1062: bitstring) = (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-7-tuple(v_1048))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then (if not-caught-fail(v_1059) then (if not-caught-fail(v_1060) then (v_1059,v_1060) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {581}out(pub, message_d_1062)
    ) | (
        {583}event LeakS(phase0,bob);
        {584}out(pub, key_s(bob))
    ) | (
        {585}phase 1;
        {586}event LeakS(phase1,bob);
        {587}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 291 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 109 rules in the queue.
600 rules inserted. The rule base contains 587 rules. 235 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 178 rules in the queue.
1000 rules inserted. The rule base contains 945 rules. 140 rules in the queue.
1200 rules inserted. The rule base contains 1143 rules. 276 rules in the queue.
1400 rules inserted. The rule base contains 1307 rules. 268 rules in the queue.
1600 rules inserted. The rule base contains 1437 rules. 212 rules in the queue.
1800 rules inserted. The rule base contains 1563 rules. 204 rules in the queue.
2000 rules inserted. The rule base contains 1711 rules. 271 rules in the queue.
2200 rules inserted. The rule base contains 1860 rules. 301 rules in the queue.
2400 rules inserted. The rule base contains 2009 rules. 331 rules in the queue.
2600 rules inserted. The rule base contains 2163 rules. 383 rules in the queue.
2800 rules inserted. The rule base contains 2260 rules. 398 rules in the queue.
3000 rules inserted. The rule base contains 2380 rules. 400 rules in the queue.
3200 rules inserted. The rule base contains 2521 rules. 376 rules in the queue.
3400 rules inserted. The rule base contains 2700 rules. 398 rules in the queue.
3600 rules inserted. The rule base contains 2877 rules. 427 rules in the queue.
3800 rules inserted. The rule base contains 3051 rules. 437 rules in the queue.
4000 rules inserted. The rule base contains 3173 rules. 419 rules in the queue.
4200 rules inserted. The rule base contains 3328 rules. 423 rules in the queue.
4400 rules inserted. The rule base contains 3486 rules. 428 rules in the queue.
4600 rules inserted. The rule base contains 3647 rules. 432 rules in the queue.
4800 rules inserted. The rule base contains 3815 rules. 442 rules in the queue.
5000 rules inserted. The rule base contains 3966 rules. 474 rules in the queue.
5200 rules inserted. The rule base contains 4087 rules. 487 rules in the queue.
5400 rules inserted. The rule base contains 4210 rules. 485 rules in the queue.
5600 rules inserted. The rule base contains 4333 rules. 490 rules in the queue.
5800 rules inserted. The rule base contains 4451 rules. 519 rules in the queue.
6000 rules inserted. The rule base contains 4548 rules. 519 rules in the queue.
6200 rules inserted. The rule base contains 4644 rules. 500 rules in the queue.
6400 rules inserted. The rule base contains 4760 rules. 481 rules in the queue.
6600 rules inserted. The rule base contains 4814 rules. 427 rules in the queue.
6800 rules inserted. The rule base contains 4937 rules. 402 rules in the queue.
7000 rules inserted. The rule base contains 5044 rules. 371 rules in the queue.
7200 rules inserted. The rule base contains 5163 rules. 332 rules in the queue.
7400 rules inserted. The rule base contains 5292 rules. 298 rules in the queue.
7600 rules inserted. The rule base contains 5408 rules. 336 rules in the queue.
7800 rules inserted. The rule base contains 5493 rules. 367 rules in the queue.
8000 rules inserted. The rule base contains 5618 rules. 327 rules in the queue.
8200 rules inserted. The rule base contains 5714 rules. 320 rules in the queue.
8400 rules inserted. The rule base contains 5839 rules. 303 rules in the queue.
8600 rules inserted. The rule base contains 5974 rules. 278 rules in the queue.
8800 rules inserted. The rule base contains 6091 rules. 226 rules in the queue.
9000 rules inserted. The rule base contains 6209 rules. 220 rules in the queue.
9200 rules inserted. The rule base contains 6313 rules. 192 rules in the queue.
9400 rules inserted. The rule base contains 6417 rules. 149 rules in the queue.
9600 rules inserted. The rule base contains 6470 rules. 66 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19491519475]),msg_a(alice,charlie,sid[!1 = @sid_19491519475]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519476]),msg_a(alice,charlie,sid[!1 = @sid_19491519475])))
Abbreviations:
sid_19491519511 = sid[!1 = @sid_19491519501]
sid_19491519512 = sid[!1 = @sid_19491519483]

1. The entry statestore(bob,alice,sid_19491519511,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {312}.
table(statestore(bob,alice,sid_19491519511,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_19491519512,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,sid_19491519512,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_19491519512,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {188}.
The event SendMsg(alice,charlie,stagepack_a(sid_19491519512),msg_a(alice,charlie,sid_19491519512)) may be executed at {185}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g))),msg_a(alice,charlie,sid_19491519512))) may be sent on channel pub at output {187}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g))),msg_a(alice,charlie,sid_19491519512)))).

4. The entry statestore(bob,alice,sid_19491519511,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {334}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g))),msg_a(alice,charlie,sid_19491519512))) that may be sent on channel pub by 3 may be received at input {313}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_19491519512),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_19491519511),msg_a(alice,charlie,sid_19491519512)) may be executed at {332}.
end(RecvMsg(bob,alice,stagepack_a(sid_19491519511),msg_a(alice,charlie,sid_19491519512))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519515]),msg_a(alice,bob,sid[!1 = @sid_19491519515]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519516]),msg_a(alice,bob,sid[!1 = @sid_19491519515])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19491519519]),msg_a(alice,charlie,sid[!1 = @sid_19491519519]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519520]),msg_a(alice,charlie,sid[!1 = @sid_19491519519])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519529]),msg_a(alice,bob,sid[!1 = @sid_19491519529]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519530]),msg_a(alice,bob,sid[!1 = @sid_19491519529])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19491519533]),msg_a(alice,charlie,sid[!1 = @sid_19491519533]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519534]),msg_a(alice,charlie,sid[!1 = @sid_19491519533])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19491519547]),msg_a(alice,charlie,sid[!1 = @sid_19491519547]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519548]),msg_a(alice,charlie,sid[!1 = @sid_19491519547])))
Abbreviations:
sid_19491519583 = sid[!1 = @sid_19491519573]
sid_19491519584 = sid[!1 = @sid_19491519555]

1. The entry statestore(bob,alice,sid_19491519583,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {312}.
table(statestore(bob,alice,sid_19491519583,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_19491519584,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,sid_19491519584,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_19491519584,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {188}.
The event SendMsg(alice,charlie,stagepack_a(sid_19491519584),msg_a(alice,charlie,sid_19491519584)) may be executed at {185}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g))),msg_a(alice,charlie,sid_19491519584))) may be sent on channel pub at output {187}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g))),msg_a(alice,charlie,sid_19491519584)))).

4. The entry statestore(bob,alice,sid_19491519583,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {334}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g))),msg_a(alice,charlie,sid_19491519584))) that may be sent on channel pub by 3 may be received at input {313}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_19491519584),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_19491519583),msg_a(alice,charlie,sid_19491519584)) may be executed at {332}.
end(RecvMsg(bob,alice,stagepack_a(sid_19491519583),msg_a(alice,charlie,sid_19491519584))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19491519591]),msg_a(alice,charlie,sid[!1 = @sid_19491519591]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19491519592]),msg_a(alice,charlie,sid[!1 = @sid_19491519591])))
Abbreviations:
sid_19491519627 = sid[!1 = @sid_19491519617]
sid_19491519628 = sid[!1 = @sid_19491519599]

1. The entry statestore(bob,alice,sid_19491519627,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {312}.
table(statestore(bob,alice,sid_19491519627,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_19491519628,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,sid_19491519628,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_19491519628,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {188}.
The event SendMsg(alice,charlie,stagepack_a(sid_19491519628),msg_a(alice,charlie,sid_19491519628)) may be executed at {185}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g))),msg_a(alice,charlie,sid_19491519628))) may be sent on channel pub at output {187}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g))),msg_a(alice,charlie,sid_19491519628)))).

4. The entry statestore(bob,alice,sid_19491519627,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {334}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g))),msg_a(alice,charlie,sid_19491519628))) that may be sent on channel pub by 3 may be received at input {313}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_19491519628),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_19491519627),msg_a(alice,charlie,sid_19491519628)) may be executed at {332}.
end(RecvMsg(bob,alice,stagepack_a(sid_19491519627),msg_a(alice,charlie,sid_19491519628))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519631]),msg_a(alice,bob,sid[!1 = @sid_19491519631]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19491519631]))
Abbreviations:
sid_19491519688 = sid[!1 = @sid_19491519663]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19491519688,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_19491519688,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19491519688,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_19491519688),msg_a(alice,bob,sid_19491519688)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519688),g))),msg_a(alice,bob,sid_19491519688)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19491519688).
attacker(msg_a(alice,bob,sid_19491519688)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19491519688).
So the attacker may know msg_a(alice,bob,sid_19491519688) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19491519688)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519691]),msg_a(alice,bob,sid[!1 = @sid_19491519691]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19491519691]))
Abbreviations:
sid_19491519749 = sid[!1 = @sid_19491519724]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19491519749,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_19491519749,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19491519749,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_19491519749),msg_a(alice,bob,sid_19491519749)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519749),g))),msg_a(alice,bob,sid_19491519749)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19491519749).
attacker(msg_a(alice,bob,sid_19491519749)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19491519749).
So the attacker may know msg_a(alice,bob,sid_19491519749) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19491519749)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519752]),msg_a(alice,bob,sid[!1 = @sid_19491519752]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19491519752]))
Abbreviations:
sid_19491519811 = sid[!1 = @sid_19491519786]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19491519811,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_19491519811,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19491519811,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_19491519811),msg_a(alice,bob,sid_19491519811)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519811),g))),msg_a(alice,bob,sid_19491519811)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19491519811).
attacker(msg_a(alice,bob,sid_19491519811)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19491519811).
So the attacker may know msg_a(alice,bob,sid_19491519811) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19491519811)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519814]),msg_a(alice,bob,sid[!1 = @sid_19491519814]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19491519814]))
Abbreviations:
sid_19491519871 = sid[!1 = @sid_19491519846]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19491519871,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_19491519871,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19491519871,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_19491519871),msg_a(alice,bob,sid_19491519871)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))).

7. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

8. By 1, the attacker may have the channel pub.
By 7, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491519871),g))),msg_a(alice,bob,sid_19491519871)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19491519871).
attacker(msg_a(alice,bob,sid_19491519871)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19491519871).
So the attacker may know msg_a(alice,bob,sid_19491519871) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19491519871)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519874]),msg_b(bob,alice,sid[!1 = @sid_19491519874]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519875]),msg_a(alice,bob,sid[!1 = @sid_19491519875]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19491519875]),msg_b(bob,alice,sid[!1 = @sid_19491519874])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519883]),msg_b(bob,alice,sid[!1 = @sid_19491519883]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519884]),msg_a(alice,bob,sid[!1 = @sid_19491519884]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19491519884]),msg_b(bob,alice,sid[!1 = @sid_19491519883])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519893]),msg_b(bob,alice,sid[!1 = @sid_19491519893]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519894]),msg_a(alice,bob,sid[!1 = @sid_19491519894]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19491519894]),msg_b(bob,alice,sid[!1 = @sid_19491519893])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519903]),msg_b(bob,alice,sid[!1 = @sid_19491519903]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519904]),msg_a(alice,bob,sid[!1 = @sid_19491519904]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19491519904]),msg_b(bob,alice,sid[!1 = @sid_19491519903])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519912]),msg_b(bob,alice,sid[!1 = @sid_19491519912]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519913]),msg_a(alice,bob,sid[!1 = @sid_19491519913]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19491519913]),msg_b(bob,alice,sid[!1 = @sid_19491519912])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491519936]),msg_c(alice,bob,sid[!1 = @sid_19491519936]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519937]),msg_b(bob,alice,sid[!1 = @sid_19491519937]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519936]),msg_a(alice,bob,sid[!1 = @sid_19491519936]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19491519937]),msg_c(alice,bob,sid[!1 = @sid_19491519936])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491519945]),msg_c(alice,bob,sid[!1 = @sid_19491519945]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519946]),msg_b(bob,alice,sid[!1 = @sid_19491519946]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519945]),msg_a(alice,bob,sid[!1 = @sid_19491519945]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19491519946]),msg_c(alice,bob,sid[!1 = @sid_19491519945])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491519955]),msg_c(alice,bob,sid[!1 = @sid_19491519955]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519956]),msg_b(bob,alice,sid[!1 = @sid_19491519956]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519955]),msg_a(alice,bob,sid[!1 = @sid_19491519955]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19491519956]),msg_c(alice,bob,sid[!1 = @sid_19491519955])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1172,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491519965]),msg_c(alice,bob,sid[!1 = @sid_19491519965]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519966]),msg_b(bob,alice,sid[!1 = @sid_19491519966]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519965]),msg_a(alice,bob,sid[!1 = @sid_19491519965]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19491519966]),msg_c(alice,bob,sid[!1 = @sid_19491519965])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491519974]),msg_c(alice,bob,sid[!1 = @sid_19491519974]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519975]),msg_b(bob,alice,sid[!1 = @sid_19491519975]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519974]),msg_a(alice,bob,sid[!1 = @sid_19491519974]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19491519975]),msg_c(alice,bob,sid[!1 = @sid_19491519974])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19491519998]),msg_d(bob,alice,sid[!1 = @sid_19491519998]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491519999]),msg_c(alice,bob,sid[!1 = @sid_19491519999]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491519998]),msg_b(bob,alice,sid[!1 = @sid_19491519998]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491519999]),msg_a(alice,bob,sid[!1 = @sid_19491519999]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19491519999]),msg_d(bob,alice,sid[!1 = @sid_19491519998])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19491520007]),msg_d(bob,alice,sid[!1 = @sid_19491520007]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491520008]),msg_c(alice,bob,sid[!1 = @sid_19491520008]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491520007]),msg_b(bob,alice,sid[!1 = @sid_19491520007]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491520008]),msg_a(alice,bob,sid[!1 = @sid_19491520008]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19491520008]),msg_d(bob,alice,sid[!1 = @sid_19491520007])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19491520017]),msg_d(bob,alice,sid[!1 = @sid_19491520017]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491520018]),msg_c(alice,bob,sid[!1 = @sid_19491520018]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491520017]),msg_b(bob,alice,sid[!1 = @sid_19491520017]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491520018]),msg_a(alice,bob,sid[!1 = @sid_19491520018]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19491520018]),msg_d(bob,alice,sid[!1 = @sid_19491520017])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1172,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19491520027]),msg_d(bob,alice,sid[!1 = @sid_19491520027]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491520028]),msg_c(alice,bob,sid[!1 = @sid_19491520028]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491520027]),msg_b(bob,alice,sid[!1 = @sid_19491520027]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491520028]),msg_a(alice,bob,sid[!1 = @sid_19491520028]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19491520028]),msg_d(bob,alice,sid[!1 = @sid_19491520027])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19491520036]),msg_d(bob,alice,sid[!1 = @sid_19491520036]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491520037]),msg_c(alice,bob,sid[!1 = @sid_19491520037]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491520036]),msg_b(bob,alice,sid[!1 = @sid_19491520036]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491520037]),msg_a(alice,bob,sid[!1 = @sid_19491520037]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19491520037]),msg_d(bob,alice,sid[!1 = @sid_19491520036])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19491520058]),msg_d(bob,alice,sid[!1 = @sid_19491520058]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19491520059]),msg_c(alice,bob,sid[!1 = @sid_19491520059]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19491520058]),msg_b(bob,alice,sid[!1 = @sid_19491520058]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19491520059]),msg_a(alice,bob,sid[!1 = @sid_19491520059]))) -> end(RecvEnd(true))
Abbreviations:
sid_19491520301 = sid[!1 = @sid_19491520246]
sid_19491520302 = sid[!1 = @sid_19491520290]

1. The entry statestore(alice,bob,sid_19491520302,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_19491520302,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_19491520302,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_19491520302),msg_a(alice,bob,sid_19491520302)) may be executed at {38}.
So the entry statestore(alice,bob,sid_19491520302,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),empty,empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_19491520302,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,sid_19491520301,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {312}.
table(statestore(bob,alice,sid_19491520301,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

4. The entry statestore(alice,bob,sid_19491520302,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_19491520302),msg_a(alice,bob,sid_19491520302)) may be executed at {38}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))) may be sent on channel pub at output {40}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))).

5. The entry statestore(bob,alice,sid_19491520301,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 3 may be read at get {334}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))) that may be sent on channel pub by 4 may be received at input {313}.
We have validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_19491520301,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false))) may be inserted in a table at insert {333}.
table(statestore(bob,alice,sid_19491520301,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false)))).

6. The entry statestore(bob,alice,sid_19491520301,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false))) that may be in a table by 5 may be read at get {397}.
The event SendMsg(bob,alice,stagepack_b(sid_19491520301),msg_b(bob,alice,sid_19491520301)) may be executed at {394}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))) may be sent on channel pub at output {396}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))).

7. The entry statestore(alice,bob,sid_19491520302,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {104}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))) that may be sent on channel pub by 6 may be received at input {42}.
So the entry statestore(alice,bob,sid_19491520302,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {103}.
table(statestore(alice,bob,sid_19491520302,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_19491520302,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {124}.
The event SendMsg(alice,bob,stagepack_c(sid_19491520302),msg_c(alice,bob,sid_19491520302)) may be executed at {121}.
So the entry statestore(alice,bob,sid_19491520302,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {122}.
table(statestore(alice,bob,sid_19491520302,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_19491520301,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false))) that may be in a table by 5 may be read at get {397}.
The event SendMsg(bob,alice,stagepack_b(sid_19491520301),msg_b(bob,alice,sid_19491520301)) may be executed at {394}.
So the entry statestore(bob,alice,sid_19491520301,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),key_e(bob,alice,sid_19491520301)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {395}.
table(statestore(bob,alice,sid_19491520301,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),key_e(bob,alice,sid_19491520301)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_19491520302,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {124}.
The event SendMsg(alice,bob,stagepack_c(sid_19491520302),msg_c(alice,bob,sid_19491520302)) may be executed at {121}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302))) may be sent on channel pub at output {123}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))).

11. The entry statestore(bob,alice,sid_19491520301,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),key_e(bob,alice,sid_19491520301)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 9 may be read at get {418}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302))) that may be sent on channel pub by 10 may be received at input {400}.
So the entry statestore(bob,alice,sid_19491520301,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),key_e(bob,alice,sid_19491520301)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {417}.
table(statestore(bob,alice,sid_19491520301,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),key_e(bob,alice,sid_19491520301)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_19491520301,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),key_e(bob,alice,sid_19491520301)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 11 may be read at get {437}.
The event SendMsg(bob,alice,stagepack_d(sid_19491520301),msg_d(bob,alice,sid_19491520301)) may be executed at {435}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302))),msg_d(bob,alice,sid_19491520301))) may be sent on channel pub at output {436}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302))),msg_d(bob,alice,sid_19491520301)))).

13. The entry statestore(alice,bob,sid_19491520302,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g)),key_e(alice,bob,sid_19491520302)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 8 may be read at get {145}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19491520302),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19491520302),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_e(alice,bob,sid_19491520302),g))),dhexp_real(key_e(bob,alice,sid_19491520301),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(alice,bob,sid_19491520302),g))),msg_a(alice,bob,sid_19491520302))),validkey(dhexp_real(key_e(bob,alice,sid_19491520301),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19491520301))),msg_c(alice,bob,sid_19491520302))),msg_d(bob,alice,sid_19491520301))) that may be sent on channel pub by 12 may be received at input {127}.
So event RecvEnd(true) may be executed at {144}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
