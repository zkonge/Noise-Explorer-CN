File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IX.noise.passive.pv", line 267, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 271, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 272, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 272, characters 26-27:
Warning: identifier ns rebound.
File "IX.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 287, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 288, characters 26-27:
Warning: identifier ns rebound.
File "IX.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 299, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 307, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 316, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 319, characters 26-27:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 319, characters 40-45:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 320, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 336, characters 26-27:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 336, characters 40-45:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 337, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 517, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 519, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 510, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 511, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 299, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 504, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 336, characters 26-27:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 336, characters 40-45:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 337, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 341, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 497, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 267, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 271, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 272, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 272, characters 26-27:
Warning: identifier ns rebound.
File "IX.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 273, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 274, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 564, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 565, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 307, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 556, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 558, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 550, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 281, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 287, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 288, characters 26-27:
Warning: identifier ns rebound.
File "IX.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, characters 26-35:
Warning: identifier ciphertext rebound.
File "IX.noise.passive.pv", line 291, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 544, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 316, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 319, characters 26-27:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 319, characters 40-45:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 320, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_536: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_536));
    (
        {6}let e_537: keypair = keypairpack(empty,empty) in
        {7}let rs_538: key = empty in
        {8}let re_539: key = empty in
        {9}let v_540: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_541: key = catch-fail(v_540) in
        {11}let v_542: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_543: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then symmetricstatepack(v_542,v_541,v_540) else fail-any) else fail-any) else fail-any))) in
        {13}let v_544: symmetricstate = catch-fail((if success?((if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then symmetricstatepack(v_542,v_541,v_540) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_543),hash(3-proj-3-tuple(v_543),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_544) then handshakestatepack(v_544,s_536,e_537,rs_538,re_539,empty,true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {49}get statestore(=alice,=bob,=sid,statepack_a(hs_545: handshakestate)) in
        {16}let v_546: bitstring = catch-fail(handshakestateunpack(hs_545)) in
        {17}let v_547: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_548: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {19}let v_549: keypair = catch-fail((if not-caught-fail(v_548) then keypairpack(validkey(v_548),key_e(alice,bob,sid)) else fail-any)) in
        {20}let v_550: bitstring = catch-fail(getpublickey(v_549)) in
        {21}let v_551: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_546))) in
        {22}let v_552: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_546)) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then symmetricstatepack(1-proj-3-tuple(v_551),2-proj-3-tuple(v_551),hash(3-proj-3-tuple(v_551),v_550)) else fail-any) else fail-any)) in
        {23}let v_553: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {24}let v_554: keypair = catch-fail((if not-caught-fail(v_553) then keypairpack(validkey(v_553),key_s(alice)) else fail-any)) in
        {25}let v_555: bitstring = catch-fail(symmetricstateunpack(v_552)) in
        {26}let v_556: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {27}let v_557: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_556),2-proj-2-tuple(v_556),3-proj-3-tuple(v_555),getpublickey(v_554))) in
        {28}let v_558: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {29}let v_559: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_556))) && success?(1-proj-3-tuple(v_555))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then cipherstatepack(1-proj-2-tuple(v_558),increment_nonce(2-proj-2-tuple(v_556))) else fail-any) else fail-any)) in
        {30}let v_560: bitstring = catch-fail((if (success?(getpublickey(v_554)) && (success?(3-proj-3-tuple(v_555)) && success?(1-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then (if not-caught-fail(v_557) then (if not-caught-fail(v_559) then (v_559,v_557) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_561: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_560),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) in
        {32}let v_562: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_560)) && success?(symmetricstatepack(1-proj-2-tuple(v_560),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_561),hash(3-proj-3-tuple(v_561),2-proj-2-tuple(v_560))) else fail-any) else fail-any)) in
        {33}let v_563: bitstring = catch-fail((if success?(getpublickey(v_554)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_562) then (v_562,2-proj-2-tuple(v_560)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_564: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_563))) in
        {35}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {36}let v_566: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),msg_a(alice,bob,sid))) in
        {37}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {38}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {39}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (v_568,v_566) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {41}let v_571: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_569)) && success?(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),2-proj-2-tuple(v_569))) else fail-any) else fail-any)) in
        {42}let v_572: bitstring = catch-fail((if success?(1-proj-2-tuple(v_563)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-2-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_572),v_554,v_549,4-proj-7-tuple(v_546),5-proj-7-tuple(v_546),6-proj-7-tuple(v_546),7-proj-7-tuple(v_546))) in
        {44}let v_574: bitstring = catch-fail(concat3(v_550,2-proj-2-tuple(v_563),2-proj-2-tuple(v_572))) in
        {45}let (hs_575: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-7-tuple(v_546))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (if not-caught-fail(v_552) then (if not-caught-fail(v_554) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then (v_573,v_574) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {46}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {47}insert statestore(alice,bob,sid,statepack_b(hs_575));
        {48}out(pub, message_a)
    ) | (
        {112}get statestore(=alice,=bob,=sid,statepack_b(hs_576: handshakestate)) in
        {50}in(pub, message_b: bitstring);
        {51}let v_577: bitstring = catch-fail(handshakestateunpack(hs_576)) in
        {52}let v_578: bitstring = catch-fail(deconcat3(message_b)) in
        {53}let v_579: bool = catch-fail(true) in
        {54}let v_580: key = catch-fail(1-proj-3-tuple(v_578)) in
        {55}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_577))) in
        {56}let v_582: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_577)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),v_580)) else fail-any) else fail-any)) in
        {57}let v_583: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_577))) in
        {58}let v_584: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {59}let v_585: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {60}let v_586: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {61}let v_587: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {62}let v_588: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_584))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (v_585,v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_589: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_588)) then cipherstatepack(2-proj-3-tuple(v_588),minnonce) else fail-any),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_590: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_577))) in
        {65}let v_591: bitstring = catch-fail(symmetricstateunpack(v_589)) in
        {66}let v_592: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_591),(if success?(2-proj-7-tuple(v_577)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_580) else fail-any) else fail-any))) in
        {67}let v_593: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_591),(if success?(2-proj-7-tuple(v_577)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_580) else fail-any) else fail-any))) in
        {68}let v_594: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_591),(if success?(2-proj-7-tuple(v_577)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_580) else fail-any) else fail-any))) in
        {69}let v_595: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_577)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_580) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_591))) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (v_592,v_593,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_596: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_577)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_580) else fail-any) else fail-any)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_595)) then cipherstatepack(2-proj-3-tuple(v_595),minnonce) else fail-any),1-proj-3-tuple(v_595),3-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any)) in
        {71}let v_597: bitstring = catch-fail(symmetricstateunpack(v_596)) in
        {72}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_597))) in
        {73}let v_599: aead = catch-fail(decrypt(1-proj-2-tuple(v_598),2-proj-2-tuple(v_598),3-proj-3-tuple(v_597),2-proj-3-tuple(v_578))) in
        {74}let v_600: bitstring = catch-fail(aeadunpack(v_599)) in
        {75}let v_601: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_597))) in
        {76}let v_602: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_598))) && success?(1-proj-3-tuple(v_597))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then cipherstatepack(1-proj-2-tuple(v_601),increment_nonce(2-proj-2-tuple(v_598))) else fail-any) else fail-any)) in
        {77}let v_603: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_578)) && (success?(3-proj-3-tuple(v_597)) && success?(1-proj-3-tuple(v_597)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then (if not-caught-fail(v_599) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,3-proj-3-tuple(v_600),1-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_604: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)))) in
        {79}let v_605: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_578)) && success?(symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_604),hash(3-proj-3-tuple(v_604),2-proj-3-tuple(v_578))) else fail-any) else fail-any)) in
        {80}let v_606: bitstring = catch-fail((if success?(2-proj-3-tuple(v_578)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_605) then (v_605,2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_607: key = catch-fail(2-proj-3-tuple(v_606)) in
        {82}let v_608: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_577))) in
        {83}let v_609: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_606))) in
        {84}let v_610: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_609),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_607) else fail-any) else fail-any))) in
        {85}let v_611: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_609),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_607) else fail-any) else fail-any))) in
        {86}let v_612: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_609),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_607) else fail-any) else fail-any))) in
        {87}let v_613: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_607) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_609))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_610,v_611,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_614: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_607) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_606))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_613)) then cipherstatepack(2-proj-3-tuple(v_613),minnonce) else fail-any),1-proj-3-tuple(v_613),3-proj-3-tuple(v_609)) else fail-any) else fail-any) else fail-any)) in
        {89}let v_615: bitstring = catch-fail(symmetricstateunpack(v_614)) in
        {90}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {91}let v_617: aead = catch-fail(decrypt(1-proj-2-tuple(v_616),2-proj-2-tuple(v_616),3-proj-3-tuple(v_615),3-proj-3-tuple(v_578))) in
        {92}let v_618: bitstring = catch-fail(aeadunpack(v_617)) in
        {93}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {94}let v_620: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_616))) && success?(1-proj-3-tuple(v_615))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then cipherstatepack(1-proj-2-tuple(v_619),increment_nonce(2-proj-2-tuple(v_616))) else fail-any) else fail-any)) in
        {95}let v_621: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_578)) && (success?(3-proj-3-tuple(v_615)) && success?(1-proj-3-tuple(v_615)))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_617) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if not-caught-fail(v_620) then (v_620,3-proj-3-tuple(v_618),1-proj-3-tuple(v_618)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_622: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) in
        {97}let v_623: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_578)) && success?(symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_622),hash(3-proj-3-tuple(v_622),3-proj-3-tuple(v_578))) else fail-any) else fail-any)) in
        {98}let v_624: bitstring = catch-fail((if success?(3-proj-3-tuple(v_578)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if not-caught-fail(v_623) then (v_623,2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_625: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {100}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_624),2-proj-7-tuple(v_577),3-proj-7-tuple(v_577),v_607,v_580,6-proj-7-tuple(v_577),7-proj-7-tuple(v_577))) in
        {101}let v_627: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_624))) in
        {102}let v_628: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_627),zero)) in
        {103}let v_629: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_627),zero)) in
        {104}let v_630: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_627),zero)) in
        {105}let v_631: bitstring = catch-fail((if success?(2-proj-3-tuple(v_627)) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (v_628,v_629,v_630) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let v_632: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_631)) then cipherstatepack(1-proj-3-tuple(v_631),minnonce) else fail-any)) in
        {107}let v_633: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_631)) then cipherstatepack(2-proj-3-tuple(v_631),minnonce) else fail-any)) in
        {108}let v_634: bitstring = catch-fail((if success?(1-proj-3-tuple(v_624)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if not-caught-fail(v_632) then (if not-caught-fail(v_633) then (1-proj-3-tuple(v_624),v_632,v_633) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {109}let (hs_635: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-7-tuple(v_577))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_582) then (if not-caught-fail(v_589) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_614) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if ((3-proj-3-tuple(v_606) && 3-proj-3-tuple(v_624)) && (v_607 = getpublickey((if not-caught-fail(v_625) then keypairpack(validkey(v_625),key_s(bob)) else fail-any)))) then (if not-caught-fail(v_626) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (v_626,2-proj-3-tuple(v_624),true,2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {111}insert statestore(alice,bob,sid,statepack_c(hs_635,cs1,cs2))
    ) | (
        {113}!
        {132}get statestore(=alice,=bob,=sid,statepack_c(hs_636: handshakestate,cs1_637: cipherstate,cs2_638: cipherstate)) in
        {114}let hs_639: handshakestate = handshakestatesetcs(hs_636,cs1_637) in
        {115}let v_640: bitstring = catch-fail(handshakestateunpack(hs_639)) in
        {116}let v_641: bitstring = catch-fail((empty,empty,empty)) in
        {117}let v_642: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_640))) in
        {118}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {119}let v_644: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_643),2-proj-2-tuple(v_643),3-proj-3-tuple(v_642),msg_c(alice,bob,sid))) in
        {120}let v_645: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {121}let v_646: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_643))) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then cipherstatepack(1-proj-2-tuple(v_645),increment_nonce(2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {122}let v_647: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_642)) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_646) then (v_646,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_648: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) in
        {124}let v_649: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_647)) && success?(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),2-proj-2-tuple(v_647))) else fail-any) else fail-any)) in
        {125}let v_650: bitstring = catch-fail((if success?(1-proj-7-tuple(v_640)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then (if not-caught-fail(v_649) then (v_649,2-proj-2-tuple(v_647)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_651: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_650),2-proj-7-tuple(v_640),3-proj-7-tuple(v_640),4-proj-7-tuple(v_640),5-proj-7-tuple(v_640),6-proj-7-tuple(v_640),7-proj-7-tuple(v_640))) in
        {127}let v_652: bitstring = catch-fail(concat3(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),2-proj-2-tuple(v_650))) in
        {128}let (hs_653: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-7-tuple(v_640))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (v_651,v_652) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {129}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {130}insert statestore(alice,bob,sid,statepack_d(hs_653,handshakestategetcs(hs_653),cs2_638));
        {131}out(pub, message_c)
    ) | (
        {133}!
        {153}get statestore(=alice,=bob,=sid,statepack_d(hs_654: handshakestate,cs1_655: cipherstate,cs2_656: cipherstate)) in
        {134}let hs_657: handshakestate = handshakestatesetcs(hs_654,cs2_656) in
        {135}in(pub, message_d: bitstring);
        {136}let v_658: bitstring = catch-fail(handshakestateunpack(hs_657)) in
        {137}let v_659: bitstring = catch-fail(deconcat3(message_d)) in
        {138}let v_660: bool = catch-fail(true) in
        {139}let v_661: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_658))) in
        {140}let v_662: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {141}let v_663: aead = catch-fail(decrypt(1-proj-2-tuple(v_662),2-proj-2-tuple(v_662),3-proj-3-tuple(v_661),3-proj-3-tuple(v_659))) in
        {142}let v_664: bitstring = catch-fail(aeadunpack(v_663)) in
        {143}let v_665: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {144}let v_666: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_662))) && success?(1-proj-3-tuple(v_661))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then cipherstatepack(1-proj-2-tuple(v_665),increment_nonce(2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {145}let v_667: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_659)) && (success?(3-proj-3-tuple(v_661)) && success?(1-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_663) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_666) then (v_666,3-proj-3-tuple(v_664),1-proj-3-tuple(v_664)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {146}let v_668: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) in
        {147}let v_669: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_659)) && success?(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_668),hash(3-proj-3-tuple(v_668),3-proj-3-tuple(v_659))) else fail-any) else fail-any)) in
        {148}let v_670: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_659)) && success?(1-proj-7-tuple(v_658))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_669) then (v_669,2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {149}let v_671: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_670),2-proj-7-tuple(v_658),3-proj-7-tuple(v_658),4-proj-7-tuple(v_658),5-proj-7-tuple(v_658),6-proj-7-tuple(v_658),7-proj-7-tuple(v_658))) in
        {150}let (hs_672: handshakestate,plaintext_d: bitstring,valid_673: bool) = (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-7-tuple(v_658))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (v_660 && 3-proj-3-tuple(v_670)) then (if not-caught-fail(v_671) then (v_671,2-proj-3-tuple(v_670),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {151}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {152}event RecvEnd(valid_673)
    ) | (
        {154}event LeakS(phase0,alice);
        {155}out(pub, key_s(alice))
    ) | (
        {156}phase 1;
        {157}event LeakS(phase1,alice);
        {158}out(pub, key_s(alice))
    )
) | (
    {159}let s_674: keypair = keypairpack(empty,empty) in
    {160}out(pub, getpublickey(s_674));
    (
        {161}let e_675: keypair = keypairpack(empty,empty) in
        {162}let rs_676: key = empty in
        {163}let re_677: key = empty in
        {164}let v_678: bitstring = catch-fail(hash(somename,empty)) in
        {165}let v_679: key = catch-fail(v_678) in
        {166}let v_680: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {167}let v_681: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then symmetricstatepack(v_680,v_679,v_678) else fail-any) else fail-any) else fail-any))) in
        {168}let v_682: symmetricstate = catch-fail((if success?((if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then symmetricstatepack(v_680,v_679,v_678) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),empty)) else fail-any) else fail-any)) in
        {169}let hs_683: handshakestate = (if not-caught-fail(v_682) then handshakestatepack(v_682,s_674,e_675,rs_676,re_677,empty,true) else fail-any) in
        {170}insert statestore(alice,charlie,sid,statepack_a(hs_683))
    ) | (
        {204}get statestore(=alice,=charlie,=sid,statepack_a(hs_684: handshakestate)) in
        {171}let v_685: bitstring = catch-fail(handshakestateunpack(hs_684)) in
        {172}let v_686: bitstring = catch-fail((empty,empty,empty)) in
        {173}let v_687: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {174}let v_688: keypair = catch-fail((if not-caught-fail(v_687) then keypairpack(validkey(v_687),key_e(alice,charlie,sid)) else fail-any)) in
        {175}let v_689: bitstring = catch-fail(getpublickey(v_688)) in
        {176}let v_690: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_685))) in
        {177}let v_691: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_685)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then symmetricstatepack(1-proj-3-tuple(v_690),2-proj-3-tuple(v_690),hash(3-proj-3-tuple(v_690),v_689)) else fail-any) else fail-any)) in
        {178}let v_692: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {179}let v_693: keypair = catch-fail((if not-caught-fail(v_692) then keypairpack(validkey(v_692),key_s(alice)) else fail-any)) in
        {180}let v_694: bitstring = catch-fail(symmetricstateunpack(v_691)) in
        {181}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {182}let v_696: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_695),2-proj-2-tuple(v_695),3-proj-3-tuple(v_694),getpublickey(v_693))) in
        {183}let v_697: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {184}let v_698: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_695))) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then cipherstatepack(1-proj-2-tuple(v_697),increment_nonce(2-proj-2-tuple(v_695))) else fail-any) else fail-any)) in
        {185}let v_699: bitstring = catch-fail((if (success?(getpublickey(v_693)) && (success?(3-proj-3-tuple(v_694)) && success?(1-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_698) then (v_698,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {186}let v_700: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) in
        {187}let v_701: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_699)) && success?(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),2-proj-2-tuple(v_699))) else fail-any) else fail-any)) in
        {188}let v_702: bitstring = catch-fail((if success?(getpublickey(v_693)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then (if not-caught-fail(v_701) then (v_701,2-proj-2-tuple(v_699)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_703: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_702))) in
        {190}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {191}let v_705: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_704),2-proj-2-tuple(v_704),3-proj-3-tuple(v_703),msg_a(alice,charlie,sid))) in
        {192}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {193}let v_707: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_704))) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then cipherstatepack(1-proj-2-tuple(v_706),increment_nonce(2-proj-2-tuple(v_704))) else fail-any) else fail-any)) in
        {194}let v_708: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then (if not-caught-fail(v_705) then (if not-caught-fail(v_707) then (v_707,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {195}let v_709: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_708),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) in
        {196}let v_710: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_708)) && success?(symmetricstatepack(1-proj-2-tuple(v_708),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),2-proj-2-tuple(v_708))) else fail-any) else fail-any)) in
        {197}let v_711: bitstring = catch-fail((if success?(1-proj-2-tuple(v_702)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,2-proj-2-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_712: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_711),v_693,v_688,4-proj-7-tuple(v_685),5-proj-7-tuple(v_685),6-proj-7-tuple(v_685),7-proj-7-tuple(v_685))) in
        {199}let v_713: bitstring = catch-fail(concat3(v_689,2-proj-2-tuple(v_702),2-proj-2-tuple(v_711))) in
        {200}let (hs_714: handshakestate,message_a_715: bitstring) = (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-7-tuple(v_685))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (if not-caught-fail(v_691) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (v_712,v_713) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {201}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {202}insert statestore(alice,charlie,sid,statepack_b(hs_714));
        {203}out(pub, message_a_715)
    ) | (
        {267}get statestore(=alice,=charlie,=sid,statepack_b(hs_716: handshakestate)) in
        {205}in(pub, message_b_717: bitstring);
        {206}let v_718: bitstring = catch-fail(handshakestateunpack(hs_716)) in
        {207}let v_719: bitstring = catch-fail(deconcat3(message_b_717)) in
        {208}let v_720: bool = catch-fail(true) in
        {209}let v_721: key = catch-fail(1-proj-3-tuple(v_719)) in
        {210}let v_722: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_718))) in
        {211}let v_723: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_718)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),v_721)) else fail-any) else fail-any)) in
        {212}let v_724: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_718))) in
        {213}let v_725: bitstring = catch-fail(symmetricstateunpack(v_723)) in
        {214}let v_726: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_725),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_721) else fail-any) else fail-any))) in
        {215}let v_727: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_725),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_721) else fail-any) else fail-any))) in
        {216}let v_728: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_725),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_721) else fail-any) else fail-any))) in
        {217}let v_729: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_721) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_725))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (if not-caught-fail(v_728) then (v_726,v_727,v_728) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_730: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_721) else fail-any) else fail-any)) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_729)) then cipherstatepack(2-proj-3-tuple(v_729),minnonce) else fail-any),1-proj-3-tuple(v_729),3-proj-3-tuple(v_725)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_731: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_718))) in
        {220}let v_732: bitstring = catch-fail(symmetricstateunpack(v_730)) in
        {221}let v_733: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_732),(if success?(2-proj-7-tuple(v_718)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_721) else fail-any) else fail-any))) in
        {222}let v_734: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_732),(if success?(2-proj-7-tuple(v_718)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_721) else fail-any) else fail-any))) in
        {223}let v_735: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_732),(if success?(2-proj-7-tuple(v_718)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_721) else fail-any) else fail-any))) in
        {224}let v_736: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_718)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_721) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_732))) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (v_733,v_734,v_735) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_737: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_718)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_721) else fail-any) else fail-any)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_736)) then cipherstatepack(2-proj-3-tuple(v_736),minnonce) else fail-any),1-proj-3-tuple(v_736),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any)) in
        {226}let v_738: bitstring = catch-fail(symmetricstateunpack(v_737)) in
        {227}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_738))) in
        {228}let v_740: aead = catch-fail(decrypt(1-proj-2-tuple(v_739),2-proj-2-tuple(v_739),3-proj-3-tuple(v_738),2-proj-3-tuple(v_719))) in
        {229}let v_741: bitstring = catch-fail(aeadunpack(v_740)) in
        {230}let v_742: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_738))) in
        {231}let v_743: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_739))) && success?(1-proj-3-tuple(v_738))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then cipherstatepack(1-proj-2-tuple(v_742),increment_nonce(2-proj-2-tuple(v_739))) else fail-any) else fail-any)) in
        {232}let v_744: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_719)) && (success?(3-proj-3-tuple(v_738)) && success?(1-proj-3-tuple(v_738)))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then (if not-caught-fail(v_740) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (v_743,3-proj-3-tuple(v_741),1-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_745: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)))) in
        {234}let v_746: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_719)) && success?(symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),2-proj-3-tuple(v_719))) else fail-any) else fail-any)) in
        {235}let v_747: bitstring = catch-fail((if success?(2-proj-3-tuple(v_719)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_746) then (v_746,2-proj-3-tuple(v_744),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_748: key = catch-fail(2-proj-3-tuple(v_747)) in
        {237}let v_749: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_718))) in
        {238}let v_750: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_747))) in
        {239}let v_751: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_750),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),v_748) else fail-any) else fail-any))) in
        {240}let v_752: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_750),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),v_748) else fail-any) else fail-any))) in
        {241}let v_753: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_750),(if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),v_748) else fail-any) else fail-any))) in
        {242}let v_754: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),v_748) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_750))) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (v_751,v_752,v_753) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_755: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_718)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),v_748) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_747))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_754)) then cipherstatepack(2-proj-3-tuple(v_754),minnonce) else fail-any),1-proj-3-tuple(v_754),3-proj-3-tuple(v_750)) else fail-any) else fail-any) else fail-any)) in
        {244}let v_756: bitstring = catch-fail(symmetricstateunpack(v_755)) in
        {245}let v_757: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_756))) in
        {246}let v_758: aead = catch-fail(decrypt(1-proj-2-tuple(v_757),2-proj-2-tuple(v_757),3-proj-3-tuple(v_756),3-proj-3-tuple(v_719))) in
        {247}let v_759: bitstring = catch-fail(aeadunpack(v_758)) in
        {248}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_756))) in
        {249}let v_761: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_757))) && success?(1-proj-3-tuple(v_756))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then cipherstatepack(1-proj-2-tuple(v_760),increment_nonce(2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {250}let v_762: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_719)) && (success?(3-proj-3-tuple(v_756)) && success?(1-proj-3-tuple(v_756)))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_758) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if not-caught-fail(v_761) then (v_761,3-proj-3-tuple(v_759),1-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_763: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)))) in
        {252}let v_764: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_719)) && success?(symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),3-proj-3-tuple(v_719))) else fail-any) else fail-any)) in
        {253}let v_765: bitstring = catch-fail((if success?(3-proj-3-tuple(v_719)) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,2-proj-3-tuple(v_762),3-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_766: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {255}let v_767: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_765),2-proj-7-tuple(v_718),3-proj-7-tuple(v_718),v_748,v_721,6-proj-7-tuple(v_718),7-proj-7-tuple(v_718))) in
        {256}let v_768: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_765))) in
        {257}let v_769: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_768),zero)) in
        {258}let v_770: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_768),zero)) in
        {259}let v_771: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_768),zero)) in
        {260}let v_772: bitstring = catch-fail((if success?(2-proj-3-tuple(v_768)) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (v_769,v_770,v_771) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_773: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_772)) then cipherstatepack(1-proj-3-tuple(v_772),minnonce) else fail-any)) in
        {262}let v_774: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_772)) then cipherstatepack(2-proj-3-tuple(v_772),minnonce) else fail-any)) in
        {263}let v_775: bitstring = catch-fail((if success?(1-proj-3-tuple(v_765)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (1-proj-3-tuple(v_765),v_773,v_774) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let (hs_776: handshakestate,plaintext_b_777: bitstring,valid_778: bool,cs1_779: cipherstate,cs2_780: cipherstate) = (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-7-tuple(v_718))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (if not-caught-fail(v_723) then (if not-caught-fail(v_730) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if not-caught-fail(v_748) then (if not-caught-fail(v_755) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if ((3-proj-3-tuple(v_747) && 3-proj-3-tuple(v_765)) && (v_748 = getpublickey((if not-caught-fail(v_766) then keypairpack(validkey(v_766),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (v_767,2-proj-3-tuple(v_765),true,2-proj-3-tuple(v_775),3-proj-3-tuple(v_775)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {265}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_777);
        {266}insert statestore(alice,charlie,sid,statepack_c(hs_776,cs1_779,cs2_780))
    ) | (
        {268}!
        {287}get statestore(=alice,=charlie,=sid,statepack_c(hs_781: handshakestate,cs1_782: cipherstate,cs2_783: cipherstate)) in
        {269}let hs_784: handshakestate = handshakestatesetcs(hs_781,cs1_782) in
        {270}let v_785: bitstring = catch-fail(handshakestateunpack(hs_784)) in
        {271}let v_786: bitstring = catch-fail((empty,empty,empty)) in
        {272}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_785))) in
        {273}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {274}let v_789: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_788),2-proj-2-tuple(v_788),3-proj-3-tuple(v_787),msg_c(alice,charlie,sid))) in
        {275}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {276}let v_791: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_788))) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then cipherstatepack(1-proj-2-tuple(v_790),increment_nonce(2-proj-2-tuple(v_788))) else fail-any) else fail-any)) in
        {277}let v_792: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then (if not-caught-fail(v_789) then (if not-caught-fail(v_791) then (v_791,v_789) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {278}let v_793: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_792),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) in
        {279}let v_794: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_792)) && success?(symmetricstatepack(1-proj-2-tuple(v_792),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {280}let v_795: bitstring = catch-fail((if success?(1-proj-7-tuple(v_785)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_794) then (v_794,2-proj-2-tuple(v_792)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {281}let v_796: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_795),2-proj-7-tuple(v_785),3-proj-7-tuple(v_785),4-proj-7-tuple(v_785),5-proj-7-tuple(v_785),6-proj-7-tuple(v_785),7-proj-7-tuple(v_785))) in
        {282}let v_797: bitstring = catch-fail(concat3(1-proj-3-tuple(v_786),2-proj-3-tuple(v_786),2-proj-2-tuple(v_795))) in
        {283}let (hs_798: handshakestate,message_c_799: bitstring) = (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-7-tuple(v_785))))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (v_796,v_797) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {284}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {285}insert statestore(alice,charlie,sid,statepack_d(hs_798,handshakestategetcs(hs_798),cs2_783));
        {286}out(pub, message_c_799)
    ) | (
        {288}!
        {308}get statestore(=alice,=charlie,=sid,statepack_d(hs_800: handshakestate,cs1_801: cipherstate,cs2_802: cipherstate)) in
        {289}let hs_803: handshakestate = handshakestatesetcs(hs_800,cs2_802) in
        {290}in(pub, message_d_804: bitstring);
        {291}let v_805: bitstring = catch-fail(handshakestateunpack(hs_803)) in
        {292}let v_806: bitstring = catch-fail(deconcat3(message_d_804)) in
        {293}let v_807: bool = catch-fail(true) in
        {294}let v_808: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_805))) in
        {295}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {296}let v_810: aead = catch-fail(decrypt(1-proj-2-tuple(v_809),2-proj-2-tuple(v_809),3-proj-3-tuple(v_808),3-proj-3-tuple(v_806))) in
        {297}let v_811: bitstring = catch-fail(aeadunpack(v_810)) in
        {298}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {299}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_809))) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {300}let v_814: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_806)) && (success?(3-proj-3-tuple(v_808)) && success?(1-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,3-proj-3-tuple(v_811),1-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) in
        {302}let v_816: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_806)) && success?(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),3-proj-3-tuple(v_806))) else fail-any) else fail-any)) in
        {303}let v_817: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_806)) && success?(1-proj-7-tuple(v_805))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_818: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_817),2-proj-7-tuple(v_805),3-proj-7-tuple(v_805),4-proj-7-tuple(v_805),5-proj-7-tuple(v_805),6-proj-7-tuple(v_805),7-proj-7-tuple(v_805))) in
        {305}let (hs_819: handshakestate,plaintext_d_820: bitstring,valid_821: bool) = (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-7-tuple(v_805))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (v_807 && 3-proj-3-tuple(v_817)) then (if not-caught-fail(v_818) then (v_818,2-proj-3-tuple(v_817),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_820);
        {307}event RecvEnd(valid_821)
    ) | (
        {309}event LeakS(phase0,alice);
        {310}out(pub, key_s(alice))
    ) | (
        {311}phase 1;
        {312}event LeakS(phase1,alice);
        {313}out(pub, key_s(alice))
    )
) | (
    {314}let s_822: keypair = keypairpack(empty,empty) in
    {315}out(pub, getpublickey(s_822));
    (
        {316}let e_823: keypair = keypairpack(empty,empty) in
        {317}let rs_824: key = empty in
        {318}let re_825: key = empty in
        {319}let v_826: bitstring = catch-fail(hash(somename,empty)) in
        {320}let v_827: key = catch-fail(v_826) in
        {321}let v_828: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {322}let v_829: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_828) then symmetricstatepack(v_828,v_827,v_826) else fail-any) else fail-any) else fail-any))) in
        {323}let v_830: symmetricstate = catch-fail((if success?((if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_828) then symmetricstatepack(v_828,v_827,v_826) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then symmetricstatepack(1-proj-3-tuple(v_829),2-proj-3-tuple(v_829),hash(3-proj-3-tuple(v_829),empty)) else fail-any) else fail-any)) in
        {324}let hs_831: handshakestate = (if not-caught-fail(v_830) then handshakestatepack(v_830,s_822,e_823,rs_824,re_825,empty,false) else fail-any) in
        {325}insert statestore(bob,alice,sid,statepack_a(hs_831))
    ) | (
        {359}get statestore(=bob,=alice,=sid,statepack_a(hs_832: handshakestate)) in
        {326}in(pub, message_a_833: bitstring);
        {327}let v_834: bitstring = catch-fail(handshakestateunpack(hs_832)) in
        {328}let v_835: bitstring = catch-fail(deconcat3(message_a_833)) in
        {329}let v_836: bool = catch-fail(true) in
        {330}let v_837: key = catch-fail(1-proj-3-tuple(v_835)) in
        {331}let v_838: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_834))) in
        {332}let v_839: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_834)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_838),hash(3-proj-3-tuple(v_838),v_837)) else fail-any) else fail-any)) in
        {333}let v_840: bitstring = catch-fail(symmetricstateunpack(v_839)) in
        {334}let v_841: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_840))) in
        {335}let v_842: aead = catch-fail(decrypt(1-proj-2-tuple(v_841),2-proj-2-tuple(v_841),3-proj-3-tuple(v_840),2-proj-3-tuple(v_835))) in
        {336}let v_843: bitstring = catch-fail(aeadunpack(v_842)) in
        {337}let v_844: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_840))) in
        {338}let v_845: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_841))) && success?(1-proj-3-tuple(v_840))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then cipherstatepack(1-proj-2-tuple(v_844),increment_nonce(2-proj-2-tuple(v_841))) else fail-any) else fail-any)) in
        {339}let v_846: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_835)) && (success?(3-proj-3-tuple(v_840)) && success?(1-proj-3-tuple(v_840)))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then (if not-caught-fail(v_842) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if not-caught-fail(v_845) then (v_845,3-proj-3-tuple(v_843),1-proj-3-tuple(v_843)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_847: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_846),2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)))) in
        {341}let v_848: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_835)) && success?(symmetricstatepack(1-proj-3-tuple(v_846),2-proj-3-tuple(v_840),3-proj-3-tuple(v_840)))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then symmetricstatepack(1-proj-3-tuple(v_847),2-proj-3-tuple(v_847),hash(3-proj-3-tuple(v_847),2-proj-3-tuple(v_835))) else fail-any) else fail-any)) in
        {342}let v_849: bitstring = catch-fail((if success?(2-proj-3-tuple(v_835)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (if not-caught-fail(v_848) then (v_848,2-proj-3-tuple(v_846),3-proj-3-tuple(v_846)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_850: key = catch-fail(2-proj-3-tuple(v_849)) in
        {344}let v_851: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_849))) in
        {345}let v_852: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {346}let v_853: aead = catch-fail(decrypt(1-proj-2-tuple(v_852),2-proj-2-tuple(v_852),3-proj-3-tuple(v_851),3-proj-3-tuple(v_835))) in
        {347}let v_854: bitstring = catch-fail(aeadunpack(v_853)) in
        {348}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {349}let v_856: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_852))) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then cipherstatepack(1-proj-2-tuple(v_855),increment_nonce(2-proj-2-tuple(v_852))) else fail-any) else fail-any)) in
        {350}let v_857: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_835)) && (success?(3-proj-3-tuple(v_851)) && success?(1-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_856) then (v_856,3-proj-3-tuple(v_854),1-proj-3-tuple(v_854)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_858: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) in
        {352}let v_859: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_835)) && success?(symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_858),hash(3-proj-3-tuple(v_858),3-proj-3-tuple(v_835))) else fail-any) else fail-any)) in
        {353}let v_860: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_835)) && success?(1-proj-3-tuple(v_849))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_859) then (v_859,2-proj-3-tuple(v_857),3-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {354}let v_861: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {355}let v_862: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_860),2-proj-7-tuple(v_834),3-proj-7-tuple(v_834),v_850,v_837,6-proj-7-tuple(v_834),7-proj-7-tuple(v_834))) in
        {356}let (hs_863: handshakestate,plaintext_a: bitstring,valid_864: bool) = (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-7-tuple(v_834))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (if not-caught-fail(v_839) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if not-caught-fail(v_850) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if ((3-proj-3-tuple(v_849) && 3-proj-3-tuple(v_860)) && (v_850 = getpublickey((if not-caught-fail(v_861) then keypairpack(validkey(v_861),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_860),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {357}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {358}insert statestore(bob,alice,sid,statepack_b(hs_863))
    ) | (
        {422}get statestore(=bob,=alice,=sid,statepack_b(hs_865: handshakestate)) in
        {360}let v_866: bitstring = catch-fail(handshakestateunpack(hs_865)) in
        {361}let v_867: bitstring = catch-fail((empty,empty,empty)) in
        {362}let v_868: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {363}let v_869: keypair = catch-fail((if not-caught-fail(v_868) then keypairpack(validkey(v_868),key_e(bob,alice,sid)) else fail-any)) in
        {364}let v_870: bitstring = catch-fail(getpublickey(v_869)) in
        {365}let v_871: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_866))) in
        {366}let v_872: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_866)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_871),hash(3-proj-3-tuple(v_871),v_870)) else fail-any) else fail-any)) in
        {367}let v_873: bitstring = catch-fail(keypairunpack(v_869)) in
        {368}let v_874: bitstring = catch-fail(symmetricstateunpack(v_872)) in
        {369}let v_875: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_874),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {370}let v_876: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_874),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {371}let v_877: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_874),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {372}let v_878: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_874))) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (v_875,v_876,v_877) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {373}let v_879: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_878)) then cipherstatepack(2-proj-3-tuple(v_878),minnonce) else fail-any),1-proj-3-tuple(v_878),3-proj-3-tuple(v_874)) else fail-any) else fail-any) else fail-any)) in
        {374}let v_880: bitstring = catch-fail(keypairunpack(v_869)) in
        {375}let v_881: bitstring = catch-fail(symmetricstateunpack(v_879)) in
        {376}let v_882: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_881),(if success?(4-proj-7-tuple(v_866)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),4-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {377}let v_883: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_881),(if success?(4-proj-7-tuple(v_866)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),4-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {378}let v_884: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_881),(if success?(4-proj-7-tuple(v_866)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),4-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {379}let v_885: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_866)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),4-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_881))) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (v_882,v_883,v_884) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_886: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_866)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then dhexp(2-proj-2-tuple(v_880),4-proj-7-tuple(v_866)) else fail-any) else fail-any)) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_885)) then cipherstatepack(2-proj-3-tuple(v_885),minnonce) else fail-any),1-proj-3-tuple(v_885),3-proj-3-tuple(v_881)) else fail-any) else fail-any) else fail-any)) in
        {381}let v_887: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {382}let v_888: keypair = catch-fail((if not-caught-fail(v_887) then keypairpack(validkey(v_887),key_s(bob)) else fail-any)) in
        {383}let v_889: bitstring = catch-fail(symmetricstateunpack(v_886)) in
        {384}let v_890: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {385}let v_891: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_890),2-proj-2-tuple(v_890),3-proj-3-tuple(v_889),getpublickey(v_888))) in
        {386}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {387}let v_893: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_890))) && success?(1-proj-3-tuple(v_889))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then cipherstatepack(1-proj-2-tuple(v_892),increment_nonce(2-proj-2-tuple(v_890))) else fail-any) else fail-any)) in
        {388}let v_894: bitstring = catch-fail((if (success?(getpublickey(v_888)) && (success?(3-proj-3-tuple(v_889)) && success?(1-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then (if not-caught-fail(v_891) then (if not-caught-fail(v_893) then (v_893,v_891) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_895: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_894),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) in
        {390}let v_896: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_894)) && success?(symmetricstatepack(1-proj-2-tuple(v_894),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_895),hash(3-proj-3-tuple(v_895),2-proj-2-tuple(v_894))) else fail-any) else fail-any)) in
        {391}let v_897: bitstring = catch-fail((if success?(getpublickey(v_888)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then (if not-caught-fail(v_896) then (v_896,2-proj-2-tuple(v_894)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {392}let v_898: bitstring = catch-fail(keypairunpack(v_888)) in
        {393}let v_899: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_897))) in
        {394}let v_900: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {395}let v_901: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {396}let v_902: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {397}let v_903: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_899))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (if not-caught-fail(v_902) then (v_900,v_901,v_902) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {398}let v_904: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_897))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_903)) then cipherstatepack(2-proj-3-tuple(v_903),minnonce) else fail-any),1-proj-3-tuple(v_903),3-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any)) in
        {399}let v_905: bitstring = catch-fail(symmetricstateunpack(v_904)) in
        {400}let v_906: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_905))) in
        {401}let v_907: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_906),2-proj-2-tuple(v_906),3-proj-3-tuple(v_905),msg_b(bob,alice,sid))) in
        {402}let v_908: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_905))) in
        {403}let v_909: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_906))) && success?(1-proj-3-tuple(v_905))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-2-tuple(v_908))))) then cipherstatepack(1-proj-2-tuple(v_908),increment_nonce(2-proj-2-tuple(v_906))) else fail-any) else fail-any)) in
        {404}let v_910: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_905)) && success?(1-proj-3-tuple(v_905))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then (if not-caught-fail(v_907) then (if not-caught-fail(v_909) then (v_909,v_907) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {405}let v_911: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_910),2-proj-3-tuple(v_905),3-proj-3-tuple(v_905)))) in
        {406}let v_912: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_910)) && success?(symmetricstatepack(1-proj-2-tuple(v_910),2-proj-3-tuple(v_905),3-proj-3-tuple(v_905)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_911),hash(3-proj-3-tuple(v_911),2-proj-2-tuple(v_910))) else fail-any) else fail-any)) in
        {407}let v_913: bitstring = catch-fail((if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then (if not-caught-fail(v_912) then (v_912,2-proj-2-tuple(v_910)) else fail-any) else fail-any) else fail-any)) in
        {408}let v_914: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_913),v_888,v_869,4-proj-7-tuple(v_866),5-proj-7-tuple(v_866),6-proj-7-tuple(v_866),7-proj-7-tuple(v_866))) in
        {409}let v_915: bitstring = catch-fail(concat3(v_870,2-proj-2-tuple(v_897),2-proj-2-tuple(v_913))) in
        {410}let v_916: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_913))) in
        {411}let v_917: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_916),zero)) in
        {412}let v_918: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_916),zero)) in
        {413}let v_919: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_916),zero)) in
        {414}let v_920: bitstring = catch-fail((if success?(2-proj-3-tuple(v_916)) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (v_917,v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_921: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_920)) then cipherstatepack(1-proj-3-tuple(v_920),minnonce) else fail-any)) in
        {416}let v_922: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_920)) then cipherstatepack(2-proj-3-tuple(v_920),minnonce) else fail-any)) in
        {417}let v_923: bitstring = catch-fail((if success?(1-proj-2-tuple(v_913)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then (if not-caught-fail(v_921) then (if not-caught-fail(v_922) then (1-proj-2-tuple(v_913),v_921,v_922) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let (hs_924: handshakestate,message_b_925: bitstring,cs1_926: cipherstate,cs2_927: cipherstate) = (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-7-tuple(v_866))))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_872) then (if not-caught-fail(v_879) then (if not-caught-fail(v_886) then (if not-caught-fail(v_888) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then (if not-caught-fail(v_904) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then (if not-caught-fail(v_914) then (if not-caught-fail(v_915) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (v_914,v_915,2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {419}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {420}insert statestore(bob,alice,sid,statepack_c(hs_924,cs1_926,cs2_927));
        {421}out(pub, message_b_925)
    ) | (
        {423}!
        {443}get statestore(=bob,=alice,=sid,statepack_c(hs_928: handshakestate,cs1_929: cipherstate,cs2_930: cipherstate)) in
        {424}let hs_931: handshakestate = handshakestatesetcs(hs_928,cs1_929) in
        {425}in(pub, message_c_932: bitstring);
        {426}let v_933: bitstring = catch-fail(handshakestateunpack(hs_931)) in
        {427}let v_934: bitstring = catch-fail(deconcat3(message_c_932)) in
        {428}let v_935: bool = catch-fail(true) in
        {429}let v_936: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_933))) in
        {430}let v_937: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_936))) in
        {431}let v_938: aead = catch-fail(decrypt(1-proj-2-tuple(v_937),2-proj-2-tuple(v_937),3-proj-3-tuple(v_936),3-proj-3-tuple(v_934))) in
        {432}let v_939: bitstring = catch-fail(aeadunpack(v_938)) in
        {433}let v_940: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_936))) in
        {434}let v_941: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_937))) && success?(1-proj-3-tuple(v_936))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then cipherstatepack(1-proj-2-tuple(v_940),increment_nonce(2-proj-2-tuple(v_937))) else fail-any) else fail-any)) in
        {435}let v_942: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_934)) && (success?(3-proj-3-tuple(v_936)) && success?(1-proj-3-tuple(v_936)))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then (if not-caught-fail(v_938) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if not-caught-fail(v_941) then (v_941,3-proj-3-tuple(v_939),1-proj-3-tuple(v_939)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_943: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_942),2-proj-3-tuple(v_936),3-proj-3-tuple(v_936)))) in
        {437}let v_944: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_934)) && success?(symmetricstatepack(1-proj-3-tuple(v_942),2-proj-3-tuple(v_936),3-proj-3-tuple(v_936)))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),hash(3-proj-3-tuple(v_943),3-proj-3-tuple(v_934))) else fail-any) else fail-any)) in
        {438}let v_945: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_934)) && success?(1-proj-7-tuple(v_933))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if not-caught-fail(v_944) then (v_944,2-proj-3-tuple(v_942),3-proj-3-tuple(v_942)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_946: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_945),2-proj-7-tuple(v_933),3-proj-7-tuple(v_933),4-proj-7-tuple(v_933),5-proj-7-tuple(v_933),6-proj-7-tuple(v_933),7-proj-7-tuple(v_933))) in
        {440}let (hs_947: handshakestate,plaintext_c: bitstring,valid_948: bool) = (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-7-tuple(v_933))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if not-caught-fail(v_935) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (v_935 && 3-proj-3-tuple(v_945)) then (if not-caught-fail(v_946) then (v_946,2-proj-3-tuple(v_945),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {441}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {442}insert statestore(bob,alice,sid,statepack_d(hs_947,handshakestategetcs(hs_947),cs2_930))
    ) | (
        {444}!
        {462}get statestore(=bob,=alice,=sid,statepack_d(hs_949: handshakestate,cs1_950: cipherstate,cs2_951: cipherstate)) in
        {445}let hs_952: handshakestate = handshakestatesetcs(hs_949,cs2_951) in
        {446}let v_953: bitstring = catch-fail(handshakestateunpack(hs_952)) in
        {447}let v_954: bitstring = catch-fail((empty,empty,empty)) in
        {448}let v_955: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_953))) in
        {449}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {450}let v_957: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_956),2-proj-2-tuple(v_956),3-proj-3-tuple(v_955),msg_d(bob,alice,sid))) in
        {451}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {452}let v_959: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_956))) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then cipherstatepack(1-proj-2-tuple(v_958),increment_nonce(2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {453}let v_960: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_955)) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_957) then (if not-caught-fail(v_959) then (v_959,v_957) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {454}let v_961: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_960),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) in
        {455}let v_962: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_960)) && success?(symmetricstatepack(1-proj-2-tuple(v_960),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_961),hash(3-proj-3-tuple(v_961),2-proj-2-tuple(v_960))) else fail-any) else fail-any)) in
        {456}let v_963: bitstring = catch-fail((if success?(1-proj-7-tuple(v_953)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-2-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,2-proj-2-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_964: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_963),2-proj-7-tuple(v_953),3-proj-7-tuple(v_953),4-proj-7-tuple(v_953),5-proj-7-tuple(v_953),6-proj-7-tuple(v_953),7-proj-7-tuple(v_953))) in
        {458}let v_965: bitstring = catch-fail(concat3(1-proj-3-tuple(v_954),2-proj-3-tuple(v_954),2-proj-2-tuple(v_963))) in
        {459}let (hs_966: handshakestate,message_d_967: bitstring) = (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-7-tuple(v_953))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {460}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {461}out(pub, message_d_967)
    ) | (
        {463}event LeakS(phase0,bob);
        {464}out(pub, key_s(bob))
    ) | (
        {465}phase 1;
        {466}event LeakS(phase1,bob);
        {467}out(pub, key_s(bob))
    )
) | (
    {468}let s_968: keypair = keypairpack(empty,empty) in
    {469}out(pub, getpublickey(s_968));
    (
        {470}let e_969: keypair = keypairpack(empty,empty) in
        {471}let rs_970: key = empty in
        {472}let re_971: key = empty in
        {473}let v_972: bitstring = catch-fail(hash(somename,empty)) in
        {474}let v_973: key = catch-fail(v_972) in
        {475}let v_974: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {476}let v_975: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then symmetricstatepack(v_974,v_973,v_972) else fail-any) else fail-any) else fail-any))) in
        {477}let v_976: symmetricstate = catch-fail((if success?((if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then symmetricstatepack(v_974,v_973,v_972) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then symmetricstatepack(1-proj-3-tuple(v_975),2-proj-3-tuple(v_975),hash(3-proj-3-tuple(v_975),empty)) else fail-any) else fail-any)) in
        {478}let hs_977: handshakestate = (if not-caught-fail(v_976) then handshakestatepack(v_976,s_968,e_969,rs_970,re_971,empty,false) else fail-any) in
        {479}insert statestore(bob,charlie,sid,statepack_a(hs_977))
    ) | (
        {513}get statestore(=bob,=charlie,=sid,statepack_a(hs_978: handshakestate)) in
        {480}in(pub, message_a_979: bitstring);
        {481}let v_980: bitstring = catch-fail(handshakestateunpack(hs_978)) in
        {482}let v_981: bitstring = catch-fail(deconcat3(message_a_979)) in
        {483}let v_982: bool = catch-fail(true) in
        {484}let v_983: key = catch-fail(1-proj-3-tuple(v_981)) in
        {485}let v_984: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_980))) in
        {486}let v_985: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_980)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then symmetricstatepack(1-proj-3-tuple(v_984),2-proj-3-tuple(v_984),hash(3-proj-3-tuple(v_984),v_983)) else fail-any) else fail-any)) in
        {487}let v_986: bitstring = catch-fail(symmetricstateunpack(v_985)) in
        {488}let v_987: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_986))) in
        {489}let v_988: aead = catch-fail(decrypt(1-proj-2-tuple(v_987),2-proj-2-tuple(v_987),3-proj-3-tuple(v_986),2-proj-3-tuple(v_981))) in
        {490}let v_989: bitstring = catch-fail(aeadunpack(v_988)) in
        {491}let v_990: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_986))) in
        {492}let v_991: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_987))) && success?(1-proj-3-tuple(v_986))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then cipherstatepack(1-proj-2-tuple(v_990),increment_nonce(2-proj-2-tuple(v_987))) else fail-any) else fail-any)) in
        {493}let v_992: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_981)) && (success?(3-proj-3-tuple(v_986)) && success?(1-proj-3-tuple(v_986)))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then (if not-caught-fail(v_988) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if not-caught-fail(v_991) then (v_991,3-proj-3-tuple(v_989),1-proj-3-tuple(v_989)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_993: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_992),2-proj-3-tuple(v_986),3-proj-3-tuple(v_986)))) in
        {495}let v_994: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_981)) && success?(symmetricstatepack(1-proj-3-tuple(v_992),2-proj-3-tuple(v_986),3-proj-3-tuple(v_986)))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack(1-proj-3-tuple(v_993),2-proj-3-tuple(v_993),hash(3-proj-3-tuple(v_993),2-proj-3-tuple(v_981))) else fail-any) else fail-any)) in
        {496}let v_995: bitstring = catch-fail((if success?(2-proj-3-tuple(v_981)) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then (if not-caught-fail(v_994) then (v_994,2-proj-3-tuple(v_992),3-proj-3-tuple(v_992)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_996: key = catch-fail(2-proj-3-tuple(v_995)) in
        {498}let v_997: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_995))) in
        {499}let v_998: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_997))) in
        {500}let v_999: aead = catch-fail(decrypt(1-proj-2-tuple(v_998),2-proj-2-tuple(v_998),3-proj-3-tuple(v_997),3-proj-3-tuple(v_981))) in
        {501}let v_1000: bitstring = catch-fail(aeadunpack(v_999)) in
        {502}let v_1001: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_997))) in
        {503}let v_1002: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_998))) && success?(1-proj-3-tuple(v_997))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then cipherstatepack(1-proj-2-tuple(v_1001),increment_nonce(2-proj-2-tuple(v_998))) else fail-any) else fail-any)) in
        {504}let v_1003: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_981)) && (success?(3-proj-3-tuple(v_997)) && success?(1-proj-3-tuple(v_997)))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-2-tuple(v_998))))) then (if not-caught-fail(v_999) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then (if not-caught-fail(v_1002) then (v_1002,3-proj-3-tuple(v_1000),1-proj-3-tuple(v_1000)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {505}let v_1004: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1003),2-proj-3-tuple(v_997),3-proj-3-tuple(v_997)))) in
        {506}let v_1005: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_981)) && success?(symmetricstatepack(1-proj-3-tuple(v_1003),2-proj-3-tuple(v_997),3-proj-3-tuple(v_997)))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_1004),hash(3-proj-3-tuple(v_1004),3-proj-3-tuple(v_981))) else fail-any) else fail-any)) in
        {507}let v_1006: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_981)) && success?(1-proj-3-tuple(v_995))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if not-caught-fail(v_1005) then (v_1005,2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1007: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {509}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1006),2-proj-7-tuple(v_980),3-proj-7-tuple(v_980),v_996,v_983,6-proj-7-tuple(v_980),7-proj-7-tuple(v_980))) in
        {510}let (hs_1009: handshakestate,plaintext_a_1010: bitstring,valid_1011: bool) = (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-7-tuple(v_980))))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if not-caught-fail(v_982) then (if not-caught-fail(v_983) then (if not-caught-fail(v_985) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if not-caught-fail(v_996) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if ((3-proj-3-tuple(v_995) && 3-proj-3-tuple(v_1006)) && (v_996 = getpublickey((if not-caught-fail(v_1007) then keypairpack(validkey(v_1007),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1008) then (v_1008,2-proj-3-tuple(v_1006),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {511}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1010);
        {512}insert statestore(bob,charlie,sid,statepack_b(hs_1009))
    ) | (
        {576}get statestore(=bob,=charlie,=sid,statepack_b(hs_1012: handshakestate)) in
        {514}let v_1013: bitstring = catch-fail(handshakestateunpack(hs_1012)) in
        {515}let v_1014: bitstring = catch-fail((empty,empty,empty)) in
        {516}let v_1015: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {517}let v_1016: keypair = catch-fail((if not-caught-fail(v_1015) then keypairpack(validkey(v_1015),key_e(bob,charlie,sid)) else fail-any)) in
        {518}let v_1017: bitstring = catch-fail(getpublickey(v_1016)) in
        {519}let v_1018: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1013))) in
        {520}let v_1019: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then symmetricstatepack(1-proj-3-tuple(v_1018),2-proj-3-tuple(v_1018),hash(3-proj-3-tuple(v_1018),v_1017)) else fail-any) else fail-any)) in
        {521}let v_1020: bitstring = catch-fail(keypairunpack(v_1016)) in
        {522}let v_1021: bitstring = catch-fail(symmetricstateunpack(v_1019)) in
        {523}let v_1022: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1021),(if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then dhexp(2-proj-2-tuple(v_1020),5-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {524}let v_1023: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1021),(if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then dhexp(2-proj-2-tuple(v_1020),5-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {525}let v_1024: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1021),(if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then dhexp(2-proj-2-tuple(v_1020),5-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {526}let v_1025: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then dhexp(2-proj-2-tuple(v_1020),5-proj-7-tuple(v_1013)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1021))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1023) then (if not-caught-fail(v_1024) then (v_1022,v_1023,v_1024) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_1026: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then dhexp(2-proj-2-tuple(v_1020),5-proj-7-tuple(v_1013)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1025)) then cipherstatepack(2-proj-3-tuple(v_1025),minnonce) else fail-any),1-proj-3-tuple(v_1025),3-proj-3-tuple(v_1021)) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1027: bitstring = catch-fail(keypairunpack(v_1016)) in
        {529}let v_1028: bitstring = catch-fail(symmetricstateunpack(v_1026)) in
        {530}let v_1029: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1028),(if success?(4-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then dhexp(2-proj-2-tuple(v_1027),4-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {531}let v_1030: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1028),(if success?(4-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then dhexp(2-proj-2-tuple(v_1027),4-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {532}let v_1031: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1028),(if success?(4-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then dhexp(2-proj-2-tuple(v_1027),4-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {533}let v_1032: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then dhexp(2-proj-2-tuple(v_1027),4-proj-7-tuple(v_1013)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1028))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1031) then (v_1029,v_1030,v_1031) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {534}let v_1033: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then dhexp(2-proj-2-tuple(v_1027),4-proj-7-tuple(v_1013)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1032)) then cipherstatepack(2-proj-3-tuple(v_1032),minnonce) else fail-any),1-proj-3-tuple(v_1032),3-proj-3-tuple(v_1028)) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1034: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {536}let v_1035: keypair = catch-fail((if not-caught-fail(v_1034) then keypairpack(validkey(v_1034),key_s(bob)) else fail-any)) in
        {537}let v_1036: bitstring = catch-fail(symmetricstateunpack(v_1033)) in
        {538}let v_1037: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1036))) in
        {539}let v_1038: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1037),2-proj-2-tuple(v_1037),3-proj-3-tuple(v_1036),getpublickey(v_1035))) in
        {540}let v_1039: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1036))) in
        {541}let v_1040: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1037))) && success?(1-proj-3-tuple(v_1036))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then cipherstatepack(1-proj-2-tuple(v_1039),increment_nonce(2-proj-2-tuple(v_1037))) else fail-any) else fail-any)) in
        {542}let v_1041: bitstring = catch-fail((if (success?(getpublickey(v_1035)) && (success?(3-proj-3-tuple(v_1036)) && success?(1-proj-3-tuple(v_1036)))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-2-tuple(v_1037))))) then (if not-caught-fail(v_1038) then (if not-caught-fail(v_1040) then (v_1040,v_1038) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1042: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1041),2-proj-3-tuple(v_1036),3-proj-3-tuple(v_1036)))) in
        {544}let v_1043: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1041)) && success?(symmetricstatepack(1-proj-2-tuple(v_1041),2-proj-3-tuple(v_1036),3-proj-3-tuple(v_1036)))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then symmetricstatepack(1-proj-3-tuple(v_1042),2-proj-3-tuple(v_1042),hash(3-proj-3-tuple(v_1042),2-proj-2-tuple(v_1041))) else fail-any) else fail-any)) in
        {545}let v_1044: bitstring = catch-fail((if success?(getpublickey(v_1035)) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-2-tuple(v_1041))))) then (if not-caught-fail(v_1043) then (v_1043,2-proj-2-tuple(v_1041)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1045: bitstring = catch-fail(keypairunpack(v_1035)) in
        {547}let v_1046: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1044))) in
        {548}let v_1047: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1046),(if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then dhexp(2-proj-2-tuple(v_1045),5-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {549}let v_1048: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1046),(if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then dhexp(2-proj-2-tuple(v_1045),5-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {550}let v_1049: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1046),(if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then dhexp(2-proj-2-tuple(v_1045),5-proj-7-tuple(v_1013)) else fail-any) else fail-any))) in
        {551}let v_1050: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then dhexp(2-proj-2-tuple(v_1045),5-proj-7-tuple(v_1013)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1046))) then (if not-caught-fail(v_1047) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (v_1047,v_1048,v_1049) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {552}let v_1051: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1013)) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then dhexp(2-proj-2-tuple(v_1045),5-proj-7-tuple(v_1013)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1044))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1050)) then cipherstatepack(2-proj-3-tuple(v_1050),minnonce) else fail-any),1-proj-3-tuple(v_1050),3-proj-3-tuple(v_1046)) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1052: bitstring = catch-fail(symmetricstateunpack(v_1051)) in
        {554}let v_1053: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1052))) in
        {555}let v_1054: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1053),2-proj-2-tuple(v_1053),3-proj-3-tuple(v_1052),msg_b(bob,charlie,sid))) in
        {556}let v_1055: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1052))) in
        {557}let v_1056: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1053))) && success?(1-proj-3-tuple(v_1052))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then cipherstatepack(1-proj-2-tuple(v_1055),increment_nonce(2-proj-2-tuple(v_1053))) else fail-any) else fail-any)) in
        {558}let v_1057: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && success?(1-proj-3-tuple(v_1052))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1056) then (v_1056,v_1054) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1058: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1057),2-proj-3-tuple(v_1052),3-proj-3-tuple(v_1052)))) in
        {560}let v_1059: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1057)) && success?(symmetricstatepack(1-proj-2-tuple(v_1057),2-proj-3-tuple(v_1052),3-proj-3-tuple(v_1052)))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then symmetricstatepack(1-proj-3-tuple(v_1058),2-proj-3-tuple(v_1058),hash(3-proj-3-tuple(v_1058),2-proj-2-tuple(v_1057))) else fail-any) else fail-any)) in
        {561}let v_1060: bitstring = catch-fail((if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then (if not-caught-fail(v_1059) then (v_1059,2-proj-2-tuple(v_1057)) else fail-any) else fail-any) else fail-any)) in
        {562}let v_1061: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1060),v_1035,v_1016,4-proj-7-tuple(v_1013),5-proj-7-tuple(v_1013),6-proj-7-tuple(v_1013),7-proj-7-tuple(v_1013))) in
        {563}let v_1062: bitstring = catch-fail(concat3(v_1017,2-proj-2-tuple(v_1044),2-proj-2-tuple(v_1060))) in
        {564}let v_1063: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1060))) in
        {565}let v_1064: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1063),zero)) in
        {566}let v_1065: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1063),zero)) in
        {567}let v_1066: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1063),zero)) in
        {568}let v_1067: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1063)) then (if not-caught-fail(v_1064) then (if not-caught-fail(v_1065) then (if not-caught-fail(v_1066) then (v_1064,v_1065,v_1066) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {569}let v_1068: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1067)) then cipherstatepack(1-proj-3-tuple(v_1067),minnonce) else fail-any)) in
        {570}let v_1069: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1067)) then cipherstatepack(2-proj-3-tuple(v_1067),minnonce) else fail-any)) in
        {571}let v_1070: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1060)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1069) then (1-proj-2-tuple(v_1060),v_1068,v_1069) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {572}let (hs_1071: handshakestate,message_b_1072: bitstring,cs1_1073: cipherstate,cs2_1074: cipherstate) = (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-7-tuple(v_1013))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1035) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then (if not-caught-fail(v_1051) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (v_1061,v_1062,2-proj-3-tuple(v_1070),3-proj-3-tuple(v_1070)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {573}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {574}insert statestore(bob,charlie,sid,statepack_c(hs_1071,cs1_1073,cs2_1074));
        {575}out(pub, message_b_1072)
    ) | (
        {577}!
        {597}get statestore(=bob,=charlie,=sid,statepack_c(hs_1075: handshakestate,cs1_1076: cipherstate,cs2_1077: cipherstate)) in
        {578}let hs_1078: handshakestate = handshakestatesetcs(hs_1075,cs1_1076) in
        {579}in(pub, message_c_1079: bitstring);
        {580}let v_1080: bitstring = catch-fail(handshakestateunpack(hs_1078)) in
        {581}let v_1081: bitstring = catch-fail(deconcat3(message_c_1079)) in
        {582}let v_1082: bool = catch-fail(true) in
        {583}let v_1083: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1080))) in
        {584}let v_1084: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1083))) in
        {585}let v_1085: aead = catch-fail(decrypt(1-proj-2-tuple(v_1084),2-proj-2-tuple(v_1084),3-proj-3-tuple(v_1083),3-proj-3-tuple(v_1081))) in
        {586}let v_1086: bitstring = catch-fail(aeadunpack(v_1085)) in
        {587}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1083))) in
        {588}let v_1088: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1084))) && success?(1-proj-3-tuple(v_1083))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then cipherstatepack(1-proj-2-tuple(v_1087),increment_nonce(2-proj-2-tuple(v_1084))) else fail-any) else fail-any)) in
        {589}let v_1089: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1081)) && (success?(3-proj-3-tuple(v_1083)) && success?(1-proj-3-tuple(v_1083)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-2-tuple(v_1084))))) then (if not-caught-fail(v_1085) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if not-caught-fail(v_1088) then (v_1088,3-proj-3-tuple(v_1086),1-proj-3-tuple(v_1086)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {590}let v_1090: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1089),2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)))) in
        {591}let v_1091: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1081)) && success?(symmetricstatepack(1-proj-3-tuple(v_1089),2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then symmetricstatepack(1-proj-3-tuple(v_1090),2-proj-3-tuple(v_1090),hash(3-proj-3-tuple(v_1090),3-proj-3-tuple(v_1081))) else fail-any) else fail-any)) in
        {592}let v_1092: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1081)) && success?(1-proj-7-tuple(v_1080))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,2-proj-3-tuple(v_1089),3-proj-3-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1093: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1092),2-proj-7-tuple(v_1080),3-proj-7-tuple(v_1080),4-proj-7-tuple(v_1080),5-proj-7-tuple(v_1080),6-proj-7-tuple(v_1080),7-proj-7-tuple(v_1080))) in
        {594}let (hs_1094: handshakestate,plaintext_c_1095: bitstring,valid_1096: bool) = (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-7-tuple(v_1080))))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then (if not-caught-fail(v_1082) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then (if (v_1082 && 3-proj-3-tuple(v_1092)) then (if not-caught-fail(v_1093) then (v_1093,2-proj-3-tuple(v_1092),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {595}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1095);
        {596}insert statestore(bob,charlie,sid,statepack_d(hs_1094,handshakestategetcs(hs_1094),cs2_1077))
    ) | (
        {598}!
        {616}get statestore(=bob,=charlie,=sid,statepack_d(hs_1097: handshakestate,cs1_1098: cipherstate,cs2_1099: cipherstate)) in
        {599}let hs_1100: handshakestate = handshakestatesetcs(hs_1097,cs2_1099) in
        {600}let v_1101: bitstring = catch-fail(handshakestateunpack(hs_1100)) in
        {601}let v_1102: bitstring = catch-fail((empty,empty,empty)) in
        {602}let v_1103: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1101))) in
        {603}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {604}let v_1105: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1104),2-proj-2-tuple(v_1104),3-proj-3-tuple(v_1103),msg_d(bob,charlie,sid))) in
        {605}let v_1106: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {606}let v_1107: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1104))) && success?(1-proj-3-tuple(v_1103))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then cipherstatepack(1-proj-2-tuple(v_1106),increment_nonce(2-proj-2-tuple(v_1104))) else fail-any) else fail-any)) in
        {607}let v_1108: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1103)) && success?(1-proj-3-tuple(v_1103))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then (if not-caught-fail(v_1105) then (if not-caught-fail(v_1107) then (v_1107,v_1105) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1109: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1108),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) in
        {609}let v_1110: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1108)) && success?(symmetricstatepack(1-proj-2-tuple(v_1108),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1109),hash(3-proj-3-tuple(v_1109),2-proj-2-tuple(v_1108))) else fail-any) else fail-any)) in
        {610}let v_1111: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1101)) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then (if not-caught-fail(v_1110) then (v_1110,2-proj-2-tuple(v_1108)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {611}let v_1112: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1111),2-proj-7-tuple(v_1101),3-proj-7-tuple(v_1101),4-proj-7-tuple(v_1101),5-proj-7-tuple(v_1101),6-proj-7-tuple(v_1101),7-proj-7-tuple(v_1101))) in
        {612}let v_1113: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1102),2-proj-3-tuple(v_1102),2-proj-2-tuple(v_1111))) in
        {613}let (hs_1114: handshakestate,message_d_1115: bitstring) = (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-7-tuple(v_1101))))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-2-tuple(v_1111))))) then (if not-caught-fail(v_1112) then (if not-caught-fail(v_1113) then (v_1112,v_1113) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {614}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {615}out(pub, message_d_1115)
    ) | (
        {617}event LeakS(phase0,bob);
        {618}out(pub, key_s(bob))
    ) | (
        {619}phase 1;
        {620}event LeakS(phase1,bob);
        {621}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 290 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 105 rules in the queue.
600 rules inserted. The rule base contains 584 rules. 227 rules in the queue.
800 rules inserted. The rule base contains 763 rules. 218 rules in the queue.
1000 rules inserted. The rule base contains 938 rules. 148 rules in the queue.
1200 rules inserted. The rule base contains 1122 rules. 274 rules in the queue.
1400 rules inserted. The rule base contains 1289 rules. 258 rules in the queue.
1600 rules inserted. The rule base contains 1439 rules. 247 rules in the queue.
1800 rules inserted. The rule base contains 1541 rules. 206 rules in the queue.
2000 rules inserted. The rule base contains 1677 rules. 249 rules in the queue.
2200 rules inserted. The rule base contains 1811 rules. 270 rules in the queue.
2400 rules inserted. The rule base contains 1934 rules. 294 rules in the queue.
2600 rules inserted. The rule base contains 2041 rules. 315 rules in the queue.
2800 rules inserted. The rule base contains 2134 rules. 328 rules in the queue.
3000 rules inserted. The rule base contains 2277 rules. 305 rules in the queue.
3200 rules inserted. The rule base contains 2441 rules. 330 rules in the queue.
3400 rules inserted. The rule base contains 2616 rules. 370 rules in the queue.
3600 rules inserted. The rule base contains 2723 rules. 351 rules in the queue.
3800 rules inserted. The rule base contains 2877 rules. 373 rules in the queue.
4000 rules inserted. The rule base contains 3021 rules. 395 rules in the queue.
4200 rules inserted. The rule base contains 3139 rules. 393 rules in the queue.
4400 rules inserted. The rule base contains 3248 rules. 378 rules in the queue.
4600 rules inserted. The rule base contains 3391 rules. 375 rules in the queue.
4800 rules inserted. The rule base contains 3551 rules. 375 rules in the queue.
5000 rules inserted. The rule base contains 3710 rules. 387 rules in the queue.
5200 rules inserted. The rule base contains 3868 rules. 403 rules in the queue.
5400 rules inserted. The rule base contains 4024 rules. 406 rules in the queue.
5600 rules inserted. The rule base contains 4141 rules. 427 rules in the queue.
5800 rules inserted. The rule base contains 4237 rules. 418 rules in the queue.
6000 rules inserted. The rule base contains 4356 rules. 400 rules in the queue.
6200 rules inserted. The rule base contains 4462 rules. 390 rules in the queue.
6400 rules inserted. The rule base contains 4564 rules. 359 rules in the queue.
6600 rules inserted. The rule base contains 4690 rules. 322 rules in the queue.
6800 rules inserted. The rule base contains 4810 rules. 282 rules in the queue.
7000 rules inserted. The rule base contains 4948 rules. 305 rules in the queue.
7200 rules inserted. The rule base contains 5032 rules. 294 rules in the queue.
7400 rules inserted. The rule base contains 5143 rules. 288 rules in the queue.
7600 rules inserted. The rule base contains 5237 rules. 269 rules in the queue.
7800 rules inserted. The rule base contains 5346 rules. 220 rules in the queue.
8000 rules inserted. The rule base contains 5466 rules. 177 rules in the queue.
8200 rules inserted. The rule base contains 5597 rules. 179 rules in the queue.
8400 rules inserted. The rule base contains 5711 rules. 157 rules in the queue.
8600 rules inserted. The rule base contains 5783 rules. 82 rules in the queue.
8800 rules inserted. The rule base contains 5803 rules. 16 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19507495987]),msg_a(alice,charlie,sid[!1 = @sid_19507495987]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507495988]),msg_a(alice,charlie,sid[!1 = @sid_19507495987])))
Abbreviations:
sid_19507496026 = sid[!1 = @sid_19507496016]
sid_19507496027 = sid[!1 = @sid_19507496000]

1. The entry statestore(bob,alice,sid_19507496026,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {325}.
table(statestore(bob,alice,sid_19507496026,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_19507496027,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_19507496027,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_19507496027,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {204}.
The event SendMsg(alice,charlie,stagepack_a(sid_19507496027),msg_a(alice,charlie,sid_19507496027)) may be executed at {201}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496027))) may be sent on channel pub at output {203}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496027)))).

4. The entry statestore(bob,alice,sid_19507496026,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {359}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496027))) that may be sent on channel pub by 3 may be received at input {326}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_19507496027),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_19507496026),msg_a(alice,charlie,sid_19507496027)) may be executed at {357}.
end(RecvMsg(bob,alice,stagepack_a(sid_19507496026),msg_a(alice,charlie,sid_19507496027))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19507496030]),msg_a(alice,charlie,sid[!1 = @sid_19507496030]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507496031]),msg_a(alice,charlie,sid[!1 = @sid_19507496030])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496034]),msg_a(alice,bob,sid[!1 = @sid_19507496034]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507496035]),msg_a(alice,bob,sid[!1 = @sid_19507496034])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19507496044]),msg_a(alice,charlie,sid[!1 = @sid_19507496044]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507496045]),msg_a(alice,charlie,sid[!1 = @sid_19507496044])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496048]),msg_a(alice,bob,sid[!1 = @sid_19507496048]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507496049]),msg_a(alice,bob,sid[!1 = @sid_19507496048])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19507496058]),msg_a(alice,charlie,sid[!1 = @sid_19507496058]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507496059]),msg_a(alice,charlie,sid[!1 = @sid_19507496058])))
Abbreviations:
sid_19507496097 = sid[!1 = @sid_19507496087]
sid_19507496098 = sid[!1 = @sid_19507496071]

1. The entry statestore(bob,alice,sid_19507496097,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {325}.
table(statestore(bob,alice,sid_19507496097,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_19507496098,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_19507496098,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_19507496098,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {204}.
The event SendMsg(alice,charlie,stagepack_a(sid_19507496098),msg_a(alice,charlie,sid_19507496098)) may be executed at {201}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496098))) may be sent on channel pub at output {203}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496098)))).

4. The entry statestore(bob,alice,sid_19507496097,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {359}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496098))) that may be sent on channel pub by 3 may be received at input {326}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_19507496098),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_19507496097),msg_a(alice,charlie,sid_19507496098)) may be executed at {357}.
end(RecvMsg(bob,alice,stagepack_a(sid_19507496097),msg_a(alice,charlie,sid_19507496098))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_19507496101]),msg_a(alice,charlie,sid[!1 = @sid_19507496101]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_19507496102]),msg_a(alice,charlie,sid[!1 = @sid_19507496101])))
Abbreviations:
sid_19507496140 = sid[!1 = @sid_19507496130]
sid_19507496141 = sid[!1 = @sid_19507496114]

1. The entry statestore(bob,alice,sid_19507496140,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {325}.
table(statestore(bob,alice,sid_19507496140,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_19507496141,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_19507496141,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_19507496141,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {204}.
The event SendMsg(alice,charlie,stagepack_a(sid_19507496141),msg_a(alice,charlie,sid_19507496141)) may be executed at {201}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496141))) may be sent on channel pub at output {203}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496141)))).

4. The entry statestore(bob,alice,sid_19507496140,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {359}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,charlie,sid_19507496141))) that may be sent on channel pub by 3 may be received at input {326}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_19507496141),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_19507496140),msg_a(alice,charlie,sid_19507496141)) may be executed at {357}.
end(RecvMsg(bob,alice,stagepack_a(sid_19507496140),msg_a(alice,charlie,sid_19507496141))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496144]),msg_a(alice,bob,sid[!1 = @sid_19507496144]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19507496144]))
Abbreviations:
sid_19507496216 = sid[!1 = @sid_19507496191]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19507496216,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_19507496216,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19507496216,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_19507496216),msg_a(alice,bob,sid_19507496216)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496216),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496216)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19507496216).
attacker(msg_a(alice,bob,sid_19507496216)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19507496216).
So the attacker may know msg_a(alice,bob,sid_19507496216) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19507496216)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496219]),msg_a(alice,bob,sid[!1 = @sid_19507496219]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19507496219]))
Abbreviations:
sid_19507496292 = sid[!1 = @sid_19507496267]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19507496292,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_19507496292,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19507496292,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_19507496292),msg_a(alice,bob,sid_19507496292)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496292),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496292)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19507496292).
attacker(msg_a(alice,bob,sid_19507496292)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19507496292).
So the attacker may know msg_a(alice,bob,sid_19507496292) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19507496292)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496295]),msg_a(alice,bob,sid[!1 = @sid_19507496295]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19507496295]))
Abbreviations:
sid_19507496369 = sid[!1 = @sid_19507496344]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19507496369,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_19507496369,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19507496369,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_19507496369),msg_a(alice,bob,sid_19507496369)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496369),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496369)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19507496369).
attacker(msg_a(alice,bob,sid_19507496369)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19507496369).
So the attacker may know msg_a(alice,bob,sid_19507496369) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19507496369)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496372]),msg_a(alice,bob,sid[!1 = @sid_19507496372]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_19507496372]))
Abbreviations:
sid_19507496444 = sid[!1 = @sid_19507496419]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_19507496444,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_19507496444,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_19507496444,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_19507496444),msg_a(alice,bob,sid_19507496444)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g))))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496444),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496444)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_19507496444).
attacker(msg_a(alice,bob,sid_19507496444)).

18. By 17, the attacker may know msg_a(alice,bob,sid_19507496444).
So the attacker may know msg_a(alice,bob,sid_19507496444) in phase 1.
attacker_p1(msg_a(alice,bob,sid_19507496444)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496447]),msg_b(bob,alice,sid[!1 = @sid_19507496447]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496448]),msg_a(alice,bob,sid[!1 = @sid_19507496448]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19507496448]),msg_b(bob,alice,sid[!1 = @sid_19507496447])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496456]),msg_b(bob,alice,sid[!1 = @sid_19507496456]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496457]),msg_a(alice,bob,sid[!1 = @sid_19507496457]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19507496457]),msg_b(bob,alice,sid[!1 = @sid_19507496456])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496466]),msg_b(bob,alice,sid[!1 = @sid_19507496466]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496467]),msg_a(alice,bob,sid[!1 = @sid_19507496467]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19507496467]),msg_b(bob,alice,sid[!1 = @sid_19507496466])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496476]),msg_b(bob,alice,sid[!1 = @sid_19507496476]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496477]),msg_a(alice,bob,sid[!1 = @sid_19507496477]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19507496477]),msg_b(bob,alice,sid[!1 = @sid_19507496476])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496485]),msg_b(bob,alice,sid[!1 = @sid_19507496485]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496486]),msg_a(alice,bob,sid[!1 = @sid_19507496486]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_19507496486]),msg_b(bob,alice,sid[!1 = @sid_19507496485])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496509]),msg_c(alice,bob,sid[!1 = @sid_19507496509]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496510]),msg_b(bob,alice,sid[!1 = @sid_19507496510]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496509]),msg_a(alice,bob,sid[!1 = @sid_19507496509]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19507496510]),msg_c(alice,bob,sid[!1 = @sid_19507496509])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496518]),msg_c(alice,bob,sid[!1 = @sid_19507496518]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496519]),msg_b(bob,alice,sid[!1 = @sid_19507496519]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496518]),msg_a(alice,bob,sid[!1 = @sid_19507496518]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19507496519]),msg_c(alice,bob,sid[!1 = @sid_19507496518])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496528]),msg_c(alice,bob,sid[!1 = @sid_19507496528]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496529]),msg_b(bob,alice,sid[!1 = @sid_19507496529]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496528]),msg_a(alice,bob,sid[!1 = @sid_19507496528]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19507496529]),msg_c(alice,bob,sid[!1 = @sid_19507496528])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1225,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496538]),msg_c(alice,bob,sid[!1 = @sid_19507496538]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496539]),msg_b(bob,alice,sid[!1 = @sid_19507496539]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496538]),msg_a(alice,bob,sid[!1 = @sid_19507496538]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19507496539]),msg_c(alice,bob,sid[!1 = @sid_19507496538])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496547]),msg_c(alice,bob,sid[!1 = @sid_19507496547]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496548]),msg_b(bob,alice,sid[!1 = @sid_19507496548]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496547]),msg_a(alice,bob,sid[!1 = @sid_19507496547]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_19507496548]),msg_c(alice,bob,sid[!1 = @sid_19507496547])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19507496571]),msg_d(bob,alice,sid[!1 = @sid_19507496571]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496572]),msg_c(alice,bob,sid[!1 = @sid_19507496572]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496571]),msg_b(bob,alice,sid[!1 = @sid_19507496571]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496572]),msg_a(alice,bob,sid[!1 = @sid_19507496572]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19507496572]),msg_d(bob,alice,sid[!1 = @sid_19507496571])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19507496580]),msg_d(bob,alice,sid[!1 = @sid_19507496580]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496581]),msg_c(alice,bob,sid[!1 = @sid_19507496581]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496580]),msg_b(bob,alice,sid[!1 = @sid_19507496580]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496581]),msg_a(alice,bob,sid[!1 = @sid_19507496581]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19507496581]),msg_d(bob,alice,sid[!1 = @sid_19507496580])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19507496590]),msg_d(bob,alice,sid[!1 = @sid_19507496590]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496591]),msg_c(alice,bob,sid[!1 = @sid_19507496591]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496590]),msg_b(bob,alice,sid[!1 = @sid_19507496590]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496591]),msg_a(alice,bob,sid[!1 = @sid_19507496591]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19507496591]),msg_d(bob,alice,sid[!1 = @sid_19507496590])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1225,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19507496600]),msg_d(bob,alice,sid[!1 = @sid_19507496600]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496601]),msg_c(alice,bob,sid[!1 = @sid_19507496601]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496600]),msg_b(bob,alice,sid[!1 = @sid_19507496600]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496601]),msg_a(alice,bob,sid[!1 = @sid_19507496601]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19507496601]),msg_d(bob,alice,sid[!1 = @sid_19507496600])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19507496609]),msg_d(bob,alice,sid[!1 = @sid_19507496609]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496610]),msg_c(alice,bob,sid[!1 = @sid_19507496610]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496609]),msg_b(bob,alice,sid[!1 = @sid_19507496609]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496610]),msg_a(alice,bob,sid[!1 = @sid_19507496610]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_19507496610]),msg_d(bob,alice,sid[!1 = @sid_19507496609])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_19507496631]),msg_d(bob,alice,sid[!1 = @sid_19507496631]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_19507496632]),msg_c(alice,bob,sid[!1 = @sid_19507496632]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_19507496631]),msg_b(bob,alice,sid[!1 = @sid_19507496631]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_19507496632]),msg_a(alice,bob,sid[!1 = @sid_19507496632]))) -> end(RecvEnd(true))
Abbreviations:
sid_19507496871 = sid[!1 = @sid_19507496816]
sid_19507496872 = sid[!1 = @sid_19507496860]

1. The entry statestore(alice,bob,sid_19507496872,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_19507496872,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_19507496872,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_19507496872),msg_a(alice,bob,sid_19507496872)) may be executed at {46}.
So the entry statestore(alice,bob,sid_19507496872,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),empty,empty,empty,true))) may be inserted in a table at insert {47}.
table(statestore(alice,bob,sid_19507496872,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,sid_19507496871,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {325}.
table(statestore(bob,alice,sid_19507496871,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_19507496872,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_19507496872),msg_a(alice,bob,sid_19507496872)) may be executed at {46}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))) may be sent on channel pub at output {48}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))).

5. The entry statestore(bob,alice,sid_19507496871,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {359}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))) that may be sent on channel pub by 4 may be received at input {326}.
We have validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_19507496871,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false))) may be inserted in a table at insert {358}.
table(statestore(bob,alice,sid_19507496871,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false)))).

6. The entry statestore(bob,alice,sid_19507496871,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false))) that may be in a table by 5 may be read at get {422}.
The event SendMsg(bob,alice,stagepack_b(sid_19507496871),msg_b(bob,alice,sid_19507496871)) may be executed at {419}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))) may be sent on channel pub at output {421}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))).

7. The entry statestore(alice,bob,sid_19507496872,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {112}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))) that may be sent on channel pub by 6 may be received at input {50}.
So the entry statestore(alice,bob,sid_19507496872,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {111}.
table(statestore(alice,bob,sid_19507496872,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_19507496872,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {132}.
The event SendMsg(alice,bob,stagepack_c(sid_19507496872),msg_c(alice,bob,sid_19507496872)) may be executed at {129}.
So the entry statestore(alice,bob,sid_19507496872,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {130}.
table(statestore(alice,bob,sid_19507496872,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_19507496871,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false))) that may be in a table by 5 may be read at get {422}.
The event SendMsg(bob,alice,stagepack_b(sid_19507496871),msg_b(bob,alice,sid_19507496871)) may be executed at {419}.
So the entry statestore(bob,alice,sid_19507496871,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),key_e(bob,alice,sid_19507496871)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {420}.
table(statestore(bob,alice,sid_19507496871,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),key_e(bob,alice,sid_19507496871)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_19507496872,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {132}.
The event SendMsg(alice,bob,stagepack_c(sid_19507496872),msg_c(alice,bob,sid_19507496872)) may be executed at {129}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872))) may be sent on channel pub at output {131}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))).

11. The entry statestore(bob,alice,sid_19507496871,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),key_e(bob,alice,sid_19507496871)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 9 may be read at get {443}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872))) that may be sent on channel pub by 10 may be received at input {425}.
So the entry statestore(bob,alice,sid_19507496871,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),key_e(bob,alice,sid_19507496871)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {442}.
table(statestore(bob,alice,sid_19507496871,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),key_e(bob,alice,sid_19507496871)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_19507496871,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),key_e(bob,alice,sid_19507496871)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 11 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_d(sid_19507496871),msg_d(bob,alice,sid_19507496871)) may be executed at {460}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872))),msg_d(bob,alice,sid_19507496871))) may be sent on channel pub at output {461}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872))),msg_d(bob,alice,sid_19507496871)))).

13. The entry statestore(alice,bob,sid_19507496872,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g)),key_e(alice,bob,sid_19507496872)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 8 may be read at get {153}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_19507496872),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_19507496872),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_e(alice,bob,sid_19507496872),g))),dhexp_real(key_e(bob,alice,sid_19507496871),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_19507496872),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_19507496872))),validkey(dhexp_real(key_e(bob,alice,sid_19507496871),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_19507496871))),msg_c(alice,bob,sid_19507496872))),msg_d(bob,alice,sid_19507496871))) that may be sent on channel pub by 12 may be received at input {135}.
So event RecvEnd(true) may be executed at {152}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
