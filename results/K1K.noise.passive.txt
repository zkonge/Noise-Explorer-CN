File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 230, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 231, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 231, character 36:
Warning: identifier h rebound.
File "K1K.noise.passive.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 274, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 279, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 310, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 318, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 333, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 345, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 347, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 369, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 318, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 558, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 369, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 301, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 546, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 345, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 347, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 539, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 274, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 279, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 618, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 620, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 611, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 612, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 310, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 605, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 598, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 292, characters 26-35:
Warning: identifier ciphertext rebound.
File "K1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 592, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 333, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 221, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Completing equations...
Completed equations:
dhexp_real(b_65,dhexp_real(a_64,g)) = dhexp_real(a_64,dhexp_real(b_65,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_535: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_536: keypair = (if not-caught-fail(v_535) then keypairpack(validkey(v_535),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_536));
    (
        {7}let e_537: keypair = keypairpack(empty,empty) in
        {8}let v_538: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_539: key = getpublickey((if not-caught-fail(v_538) then keypairpack(validkey(v_538),key_s(bob)) else fail-any)) in
        {10}let re_540: key = empty in
        {11}let v_541: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_542: key = catch-fail(v_541) in
        {13}let v_543: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_544: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_541) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then symmetricstatepack(v_543,v_542,v_541) else fail-any) else fail-any) else fail-any))) in
        {15}let v_545: symmetricstate = catch-fail((if success?((if not-caught-fail(v_541) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then symmetricstatepack(v_543,v_542,v_541) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then symmetricstatepack(1-proj-3-tuple(v_544),2-proj-3-tuple(v_544),hash(3-proj-3-tuple(v_544),empty)) else fail-any) else fail-any)) in
        {16}let v_546: bitstring = catch-fail(symmetricstateunpack(v_545)) in
        {17}let v_547: symmetricstate = catch-fail((if success?(getpublickey(s_536)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_546),hash(3-proj-3-tuple(v_546),getpublickey(s_536))) else fail-any) else fail-any)) in
        {18}let v_548: bitstring = catch-fail(symmetricstateunpack(v_547)) in
        {19}let v_549: symmetricstate = catch-fail((if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack(1-proj-3-tuple(v_548),2-proj-3-tuple(v_548),hash(3-proj-3-tuple(v_548),rs_539)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_545) then (if not-caught-fail(v_547) then (if not-caught-fail(v_549) then handshakestatepack(v_549,s_536,e_537,rs_539,re_540,empty,true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {51}get statestore(=alice,=bob,=sid,statepack_a(hs_550: handshakestate)) in
        {22}let v_551: bitstring = catch-fail(handshakestateunpack(hs_550)) in
        {23}let v_552: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_553: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {25}let v_554: keypair = catch-fail((if not-caught-fail(v_553) then keypairpack(validkey(v_553),key_e(alice,bob,sid)) else fail-any)) in
        {26}let v_555: bitstring = catch-fail(getpublickey(v_554)) in
        {27}let v_556: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_551))) in
        {28}let v_557: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_551)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),v_555)) else fail-any) else fail-any)) in
        {29}let v_558: bitstring = catch-fail(keypairunpack(v_554)) in
        {30}let v_559: bitstring = catch-fail(symmetricstateunpack(v_557)) in
        {31}let v_560: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_559),(if success?(4-proj-7-tuple(v_551)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then dhexp(2-proj-2-tuple(v_558),4-proj-7-tuple(v_551)) else fail-any) else fail-any))) in
        {32}let v_561: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_559),(if success?(4-proj-7-tuple(v_551)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then dhexp(2-proj-2-tuple(v_558),4-proj-7-tuple(v_551)) else fail-any) else fail-any))) in
        {33}let v_562: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_559),(if success?(4-proj-7-tuple(v_551)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then dhexp(2-proj-2-tuple(v_558),4-proj-7-tuple(v_551)) else fail-any) else fail-any))) in
        {34}let v_563: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_551)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then dhexp(2-proj-2-tuple(v_558),4-proj-7-tuple(v_551)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_559))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (v_560,v_561,v_562) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_564: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_551)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then dhexp(2-proj-2-tuple(v_558),4-proj-7-tuple(v_551)) else fail-any) else fail-any)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_563)) then cipherstatepack(2-proj-3-tuple(v_563),minnonce) else fail-any),1-proj-3-tuple(v_563),3-proj-3-tuple(v_559)) else fail-any) else fail-any) else fail-any)) in
        {36}let v_565: bitstring = catch-fail(symmetricstateunpack(v_564)) in
        {37}let v_566: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_565))) in
        {38}let v_567: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_566),2-proj-2-tuple(v_566),3-proj-3-tuple(v_565),msg_a(alice,bob,sid))) in
        {39}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_565))) in
        {40}let v_569: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_566))) && success?(1-proj-3-tuple(v_565))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then cipherstatepack(1-proj-2-tuple(v_568),increment_nonce(2-proj-2-tuple(v_566))) else fail-any) else fail-any)) in
        {41}let v_570: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_565)) && success?(1-proj-3-tuple(v_565))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then (if not-caught-fail(v_567) then (if not-caught-fail(v_569) then (v_569,v_567) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_571: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_570),2-proj-3-tuple(v_565),3-proj-3-tuple(v_565)))) in
        {43}let v_572: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_570)) && success?(symmetricstatepack(1-proj-2-tuple(v_570),2-proj-3-tuple(v_565),3-proj-3-tuple(v_565)))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),2-proj-2-tuple(v_570))) else fail-any) else fail-any)) in
        {44}let v_573: bitstring = catch-fail((if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then (if not-caught-fail(v_572) then (v_572,2-proj-2-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {45}let v_574: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_573),2-proj-7-tuple(v_551),v_554,4-proj-7-tuple(v_551),5-proj-7-tuple(v_551),6-proj-7-tuple(v_551),7-proj-7-tuple(v_551))) in
        {46}let v_575: bitstring = catch-fail(concat3(v_555,2-proj-3-tuple(v_552),2-proj-2-tuple(v_573))) in
        {47}let (hs_576: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-7-tuple(v_551))))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (if not-caught-fail(v_557) then (if not-caught-fail(v_564) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then (if not-caught-fail(v_574) then (if not-caught-fail(v_575) then (v_574,v_575) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {48}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {49}insert statestore(alice,bob,sid,statepack_b(hs_576));
        {50}out(pub, message_a)
    ) | (
        {80}get statestore(=alice,=bob,=sid,statepack_b(hs_577: handshakestate)) in
        {52}in(pub, message_b: bitstring);
        {53}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {54}let v_579: bitstring = catch-fail(deconcat3(message_b)) in
        {55}let v_580: bool = catch-fail(true) in
        {56}let v_581: key = catch-fail(1-proj-3-tuple(v_579)) in
        {57}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {58}let v_583: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_578)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),v_581)) else fail-any) else fail-any)) in
        {59}let v_584: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_578))) in
        {60}let v_585: bitstring = catch-fail(symmetricstateunpack(v_583)) in
        {61}let v_586: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_585),(if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_581) else fail-any) else fail-any))) in
        {62}let v_587: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_585),(if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_581) else fail-any) else fail-any))) in
        {63}let v_588: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_585),(if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_581) else fail-any) else fail-any))) in
        {64}let v_589: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_581) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_585))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (v_586,v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_590: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_581) else fail-any) else fail-any)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_589)) then cipherstatepack(2-proj-3-tuple(v_589),minnonce) else fail-any),1-proj-3-tuple(v_589),3-proj-3-tuple(v_585)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_591: bitstring = catch-fail(symmetricstateunpack(v_590)) in
        {67}let v_592: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_591))) in
        {68}let v_593: aead = catch-fail(decrypt(1-proj-2-tuple(v_592),2-proj-2-tuple(v_592),3-proj-3-tuple(v_591),3-proj-3-tuple(v_579))) in
        {69}let v_594: bitstring = catch-fail(aeadunpack(v_593)) in
        {70}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_591))) in
        {71}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_592))) && success?(1-proj-3-tuple(v_591))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_592))) else fail-any) else fail-any)) in
        {72}let v_597: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_579)) && (success?(3-proj-3-tuple(v_591)) && success?(1-proj-3-tuple(v_591)))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if not-caught-fail(v_596) then (v_596,3-proj-3-tuple(v_594),1-proj-3-tuple(v_594)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_591),3-proj-3-tuple(v_591)))) in
        {74}let v_599: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_579)) && success?(symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_591),3-proj-3-tuple(v_591)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),3-proj-3-tuple(v_579))) else fail-any) else fail-any)) in
        {75}let v_600: bitstring = catch-fail((if success?(3-proj-3-tuple(v_579)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_601: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_600),2-proj-7-tuple(v_578),3-proj-7-tuple(v_578),4-proj-7-tuple(v_578),v_581,6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {77}let (hs_602: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (if not-caught-fail(v_583) then (if not-caught-fail(v_590) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if (v_580 && 3-proj-3-tuple(v_600)) then (if not-caught-fail(v_601) then (v_601,2-proj-3-tuple(v_600),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {78}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {79}insert statestore(alice,bob,sid,statepack_c(hs_602))
    ) | (
        {113}get statestore(=alice,=bob,=sid,statepack_c(hs_603: handshakestate)) in
        {81}let v_604: bitstring = catch-fail(handshakestateunpack(hs_603)) in
        {82}let v_605: bitstring = catch-fail((empty,empty,empty)) in
        {83}let v_606: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_604))) in
        {84}let v_607: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_604))) in
        {85}let v_608: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_607),(if (success?(5-proj-7-tuple(v_604)) && success?(2-proj-7-tuple(v_604))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),5-proj-7-tuple(v_604)) else fail-any) else fail-any))) in
        {86}let v_609: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_607),(if (success?(5-proj-7-tuple(v_604)) && success?(2-proj-7-tuple(v_604))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),5-proj-7-tuple(v_604)) else fail-any) else fail-any))) in
        {87}let v_610: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_607),(if (success?(5-proj-7-tuple(v_604)) && success?(2-proj-7-tuple(v_604))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),5-proj-7-tuple(v_604)) else fail-any) else fail-any))) in
        {88}let v_611: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_604)) && success?(2-proj-7-tuple(v_604))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),5-proj-7-tuple(v_604)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_607))) then (if not-caught-fail(v_608) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (v_608,v_609,v_610) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_612: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_604)) && success?(2-proj-7-tuple(v_604))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then dhexp(2-proj-2-tuple(v_606),5-proj-7-tuple(v_604)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_604))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_611)) then cipherstatepack(2-proj-3-tuple(v_611),minnonce) else fail-any),1-proj-3-tuple(v_611),3-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any)) in
        {90}let v_613: bitstring = catch-fail(symmetricstateunpack(v_612)) in
        {91}let v_614: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {92}let v_615: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_614),2-proj-2-tuple(v_614),3-proj-3-tuple(v_613),msg_c(alice,bob,sid))) in
        {93}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {94}let v_617: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_614))) && success?(1-proj-3-tuple(v_613))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then cipherstatepack(1-proj-2-tuple(v_616),increment_nonce(2-proj-2-tuple(v_614))) else fail-any) else fail-any)) in
        {95}let v_618: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_613)) && success?(1-proj-3-tuple(v_613))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_617) then (v_617,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_619: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_618),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) in
        {97}let v_620: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_618)) && success?(symmetricstatepack(1-proj-2-tuple(v_618),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_619),hash(3-proj-3-tuple(v_619),2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {98}let v_621: bitstring = catch-fail((if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_620) then (v_620,2-proj-2-tuple(v_618)) else fail-any) else fail-any) else fail-any)) in
        {99}let v_622: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_621),2-proj-7-tuple(v_604),3-proj-7-tuple(v_604),4-proj-7-tuple(v_604),5-proj-7-tuple(v_604),6-proj-7-tuple(v_604),7-proj-7-tuple(v_604))) in
        {100}let v_623: bitstring = catch-fail(concat3(1-proj-3-tuple(v_605),2-proj-3-tuple(v_605),2-proj-2-tuple(v_621))) in
        {101}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_621))) in
        {102}let v_625: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_624),zero)) in
        {103}let v_626: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_624),zero)) in
        {104}let v_627: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_624),zero)) in
        {105}let v_628: bitstring = catch-fail((if success?(2-proj-3-tuple(v_624)) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_625,v_626,v_627) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let v_629: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_628)) then cipherstatepack(1-proj-3-tuple(v_628),minnonce) else fail-any)) in
        {107}let v_630: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_628)) then cipherstatepack(2-proj-3-tuple(v_628),minnonce) else fail-any)) in
        {108}let v_631: bitstring = catch-fail((if success?(1-proj-2-tuple(v_621)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (1-proj-2-tuple(v_621),v_629,v_630) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {109}let (hs_632: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-7-tuple(v_604))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_612) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (v_622,v_623,2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {111}insert statestore(alice,bob,sid,statepack_d(hs_632,cs1,cs2));
        {112}out(pub, message_c)
    ) | (
        {114}!
        {134}get statestore(=alice,=bob,=sid,statepack_d(hs_633: handshakestate,cs1_634: cipherstate,cs2_635: cipherstate)) in
        {115}let hs_636: handshakestate = handshakestatesetcs(hs_633,cs2_635) in
        {116}in(pub, message_d: bitstring);
        {117}let v_637: bitstring = catch-fail(handshakestateunpack(hs_636)) in
        {118}let v_638: bitstring = catch-fail(deconcat3(message_d)) in
        {119}let v_639: bool = catch-fail(true) in
        {120}let v_640: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_637))) in
        {121}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {122}let v_642: aead = catch-fail(decrypt(1-proj-2-tuple(v_641),2-proj-2-tuple(v_641),3-proj-3-tuple(v_640),3-proj-3-tuple(v_638))) in
        {123}let v_643: bitstring = catch-fail(aeadunpack(v_642)) in
        {124}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {125}let v_645: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_641))) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then cipherstatepack(1-proj-2-tuple(v_644),increment_nonce(2-proj-2-tuple(v_641))) else fail-any) else fail-any)) in
        {126}let v_646: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_638)) && (success?(3-proj-3-tuple(v_640)) && success?(1-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if not-caught-fail(v_645) then (v_645,3-proj-3-tuple(v_643),1-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) in
        {128}let v_648: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_638)) && success?(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),3-proj-3-tuple(v_638))) else fail-any) else fail-any)) in
        {129}let v_649: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_638)) && success?(1-proj-7-tuple(v_637))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,2-proj-3-tuple(v_646),3-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {130}let v_650: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_649),2-proj-7-tuple(v_637),3-proj-7-tuple(v_637),4-proj-7-tuple(v_637),5-proj-7-tuple(v_637),6-proj-7-tuple(v_637),7-proj-7-tuple(v_637))) in
        {131}let (hs_651: handshakestate,plaintext_d: bitstring,valid_652: bool) = (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-7-tuple(v_637))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_639) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (v_639 && 3-proj-3-tuple(v_649)) then (if not-caught-fail(v_650) then (v_650,2-proj-3-tuple(v_649),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {132}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {133}insert statestore(alice,bob,sid,statepack_e(hs_651,cs1_634,handshakestategetcs(hs_651)))
    ) | (
        {135}!
        {153}get statestore(=alice,=bob,=sid,statepack_e(hs_653: handshakestate,cs1_654: cipherstate,cs2_655: cipherstate)) in
        {136}let hs_656: handshakestate = handshakestatesetcs(hs_653,cs1_654) in
        {137}let v_657: bitstring = catch-fail(handshakestateunpack(hs_656)) in
        {138}let v_658: bitstring = catch-fail((empty,empty,empty)) in
        {139}let v_659: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_657))) in
        {140}let v_660: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_659))) in
        {141}let v_661: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_660),2-proj-2-tuple(v_660),3-proj-3-tuple(v_659),msg_e(alice,bob,sid))) in
        {142}let v_662: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_659))) in
        {143}let v_663: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_660))) && success?(1-proj-3-tuple(v_659))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then cipherstatepack(1-proj-2-tuple(v_662),increment_nonce(2-proj-2-tuple(v_660))) else fail-any) else fail-any)) in
        {144}let v_664: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_659)) && success?(1-proj-3-tuple(v_659))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_663) then (v_663,v_661) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {145}let v_665: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_664),2-proj-3-tuple(v_659),3-proj-3-tuple(v_659)))) in
        {146}let v_666: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_664)) && success?(symmetricstatepack(1-proj-2-tuple(v_664),2-proj-3-tuple(v_659),3-proj-3-tuple(v_659)))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then symmetricstatepack(1-proj-3-tuple(v_665),2-proj-3-tuple(v_665),hash(3-proj-3-tuple(v_665),2-proj-2-tuple(v_664))) else fail-any) else fail-any)) in
        {147}let v_667: bitstring = catch-fail((if success?(1-proj-7-tuple(v_657)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then (if not-caught-fail(v_666) then (v_666,2-proj-2-tuple(v_664)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let v_668: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_667),2-proj-7-tuple(v_657),3-proj-7-tuple(v_657),4-proj-7-tuple(v_657),5-proj-7-tuple(v_657),6-proj-7-tuple(v_657),7-proj-7-tuple(v_657))) in
        {149}let v_669: bitstring = catch-fail(concat3(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),2-proj-2-tuple(v_667))) in
        {150}let (hs_670: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-7-tuple(v_657))))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (v_668,v_669) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {151}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {152}out(pub, message_e)
    ) | (
        {154}event LeakS(phase0,alice);
        {155}out(pub, key_s(alice))
    ) | (
        {156}phase 1;
        {157}event LeakS(phase1,alice);
        {158}out(pub, key_s(alice))
    )
) | (
    {159}let v_671: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {160}let s_672: keypair = (if not-caught-fail(v_671) then keypairpack(validkey(v_671),key_s(alice)) else fail-any) in
    {161}out(pub, getpublickey(s_672));
    (
        {162}let e_673: keypair = keypairpack(empty,empty) in
        {163}let v_674: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {164}let rs_675: key = getpublickey((if not-caught-fail(v_674) then keypairpack(validkey(v_674),key_s(charlie)) else fail-any)) in
        {165}let re_676: key = empty in
        {166}let v_677: bitstring = catch-fail(hash(somename,empty)) in
        {167}let v_678: key = catch-fail(v_677) in
        {168}let v_679: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {169}let v_680: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then symmetricstatepack(v_679,v_678,v_677) else fail-any) else fail-any) else fail-any))) in
        {170}let v_681: symmetricstate = catch-fail((if success?((if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then symmetricstatepack(v_679,v_678,v_677) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),hash(3-proj-3-tuple(v_680),empty)) else fail-any) else fail-any)) in
        {171}let v_682: bitstring = catch-fail(symmetricstateunpack(v_681)) in
        {172}let v_683: symmetricstate = catch-fail((if success?(getpublickey(s_672)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),getpublickey(s_672))) else fail-any) else fail-any)) in
        {173}let v_684: bitstring = catch-fail(symmetricstateunpack(v_683)) in
        {174}let v_685: symmetricstate = catch-fail((if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),rs_675)) else fail-any)) in
        {175}let hs_686: handshakestate = (if not-caught-fail(v_681) then (if not-caught-fail(v_683) then (if not-caught-fail(v_685) then handshakestatepack(v_685,s_672,e_673,rs_675,re_676,empty,true) else fail-any) else fail-any) else fail-any) in
        {176}insert statestore(alice,charlie,sid,statepack_a(hs_686))
    ) | (
        {206}get statestore(=alice,=charlie,=sid,statepack_a(hs_687: handshakestate)) in
        {177}let v_688: bitstring = catch-fail(handshakestateunpack(hs_687)) in
        {178}let v_689: bitstring = catch-fail((empty,empty,empty)) in
        {179}let v_690: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {180}let v_691: keypair = catch-fail((if not-caught-fail(v_690) then keypairpack(validkey(v_690),key_e(alice,charlie,sid)) else fail-any)) in
        {181}let v_692: bitstring = catch-fail(getpublickey(v_691)) in
        {182}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_688))) in
        {183}let v_694: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_688)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_693),hash(3-proj-3-tuple(v_693),v_692)) else fail-any) else fail-any)) in
        {184}let v_695: bitstring = catch-fail(keypairunpack(v_691)) in
        {185}let v_696: bitstring = catch-fail(symmetricstateunpack(v_694)) in
        {186}let v_697: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_696),(if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),4-proj-7-tuple(v_688)) else fail-any) else fail-any))) in
        {187}let v_698: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_696),(if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),4-proj-7-tuple(v_688)) else fail-any) else fail-any))) in
        {188}let v_699: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_696),(if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),4-proj-7-tuple(v_688)) else fail-any) else fail-any))) in
        {189}let v_700: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),4-proj-7-tuple(v_688)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_696))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (v_697,v_698,v_699) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_701: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),4-proj-7-tuple(v_688)) else fail-any) else fail-any)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_700)) then cipherstatepack(2-proj-3-tuple(v_700),minnonce) else fail-any),1-proj-3-tuple(v_700),3-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any)) in
        {191}let v_702: bitstring = catch-fail(symmetricstateunpack(v_701)) in
        {192}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {193}let v_704: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_703),2-proj-2-tuple(v_703),3-proj-3-tuple(v_702),msg_a(alice,charlie,sid))) in
        {194}let v_705: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {195}let v_706: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_703))) && success?(1-proj-3-tuple(v_702))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then cipherstatepack(1-proj-2-tuple(v_705),increment_nonce(2-proj-2-tuple(v_703))) else fail-any) else fail-any)) in
        {196}let v_707: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_702)) && success?(1-proj-3-tuple(v_702))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then (if not-caught-fail(v_704) then (if not-caught-fail(v_706) then (v_706,v_704) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_708: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_707),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) in
        {198}let v_709: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_707)) && success?(symmetricstatepack(1-proj-2-tuple(v_707),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_708),hash(3-proj-3-tuple(v_708),2-proj-2-tuple(v_707))) else fail-any) else fail-any)) in
        {199}let v_710: bitstring = catch-fail((if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then (if not-caught-fail(v_709) then (v_709,2-proj-2-tuple(v_707)) else fail-any) else fail-any) else fail-any)) in
        {200}let v_711: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_710),2-proj-7-tuple(v_688),v_691,4-proj-7-tuple(v_688),5-proj-7-tuple(v_688),6-proj-7-tuple(v_688),7-proj-7-tuple(v_688))) in
        {201}let v_712: bitstring = catch-fail(concat3(v_692,2-proj-3-tuple(v_689),2-proj-2-tuple(v_710))) in
        {202}let (hs_713: handshakestate,message_a_714: bitstring) = (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-7-tuple(v_688))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_694) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then (v_711,v_712) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {203}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {204}insert statestore(alice,charlie,sid,statepack_b(hs_713));
        {205}out(pub, message_a_714)
    ) | (
        {235}get statestore(=alice,=charlie,=sid,statepack_b(hs_715: handshakestate)) in
        {207}in(pub, message_b_716: bitstring);
        {208}let v_717: bitstring = catch-fail(handshakestateunpack(hs_715)) in
        {209}let v_718: bitstring = catch-fail(deconcat3(message_b_716)) in
        {210}let v_719: bool = catch-fail(true) in
        {211}let v_720: key = catch-fail(1-proj-3-tuple(v_718)) in
        {212}let v_721: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_717))) in
        {213}let v_722: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_717)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_721),hash(3-proj-3-tuple(v_721),v_720)) else fail-any) else fail-any)) in
        {214}let v_723: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_717))) in
        {215}let v_724: bitstring = catch-fail(symmetricstateunpack(v_722)) in
        {216}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),(if success?(3-proj-7-tuple(v_717)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_720) else fail-any) else fail-any))) in
        {217}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),(if success?(3-proj-7-tuple(v_717)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_720) else fail-any) else fail-any))) in
        {218}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),(if success?(3-proj-7-tuple(v_717)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_720) else fail-any) else fail-any))) in
        {219}let v_728: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_717)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_720) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_724))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_729: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_717)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_720) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_728)) then cipherstatepack(2-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)) else fail-any) else fail-any) else fail-any)) in
        {221}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {222}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {223}let v_732: aead = catch-fail(decrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),3-proj-3-tuple(v_718))) in
        {224}let v_733: bitstring = catch-fail(aeadunpack(v_732)) in
        {225}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {226}let v_735: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then cipherstatepack(1-proj-2-tuple(v_734),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {227}let v_736: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_718)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,3-proj-3-tuple(v_733),1-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_737: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {229}let v_738: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_718)) && success?(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),3-proj-3-tuple(v_718))) else fail-any) else fail-any)) in
        {230}let v_739: bitstring = catch-fail((if success?(3-proj-3-tuple(v_718)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_740: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_739),2-proj-7-tuple(v_717),3-proj-7-tuple(v_717),4-proj-7-tuple(v_717),v_720,6-proj-7-tuple(v_717),7-proj-7-tuple(v_717))) in
        {232}let (hs_741: handshakestate,plaintext_b_742: bitstring,valid_743: bool) = (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-7-tuple(v_717))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (if not-caught-fail(v_722) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if (v_719 && 3-proj-3-tuple(v_739)) then (if not-caught-fail(v_740) then (v_740,2-proj-3-tuple(v_739),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {233}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_742);
        {234}insert statestore(alice,charlie,sid,statepack_c(hs_741))
    ) | (
        {268}get statestore(=alice,=charlie,=sid,statepack_c(hs_744: handshakestate)) in
        {236}let v_745: bitstring = catch-fail(handshakestateunpack(hs_744)) in
        {237}let v_746: bitstring = catch-fail((empty,empty,empty)) in
        {238}let v_747: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_745))) in
        {239}let v_748: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_745))) in
        {240}let v_749: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_748),(if (success?(5-proj-7-tuple(v_745)) && success?(2-proj-7-tuple(v_745))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {241}let v_750: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_748),(if (success?(5-proj-7-tuple(v_745)) && success?(2-proj-7-tuple(v_745))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {242}let v_751: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_748),(if (success?(5-proj-7-tuple(v_745)) && success?(2-proj-7-tuple(v_745))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {243}let v_752: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_745)) && success?(2-proj-7-tuple(v_745))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_745)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_748))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (v_749,v_750,v_751) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_753: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_745)) && success?(2-proj-7-tuple(v_745))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_745)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_745))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_752)) then cipherstatepack(2-proj-3-tuple(v_752),minnonce) else fail-any),1-proj-3-tuple(v_752),3-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_754: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {246}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {247}let v_756: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_755),2-proj-2-tuple(v_755),3-proj-3-tuple(v_754),msg_c(alice,charlie,sid))) in
        {248}let v_757: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {249}let v_758: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_755))) && success?(1-proj-3-tuple(v_754))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then cipherstatepack(1-proj-2-tuple(v_757),increment_nonce(2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {250}let v_759: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_754)) && success?(1-proj-3-tuple(v_754))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_758) then (v_758,v_756) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_760: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_759),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) in
        {252}let v_761: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_759)) && success?(symmetricstatepack(1-proj-2-tuple(v_759),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_760),hash(3-proj-3-tuple(v_760),2-proj-2-tuple(v_759))) else fail-any) else fail-any)) in
        {253}let v_762: bitstring = catch-fail((if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then (if not-caught-fail(v_761) then (v_761,2-proj-2-tuple(v_759)) else fail-any) else fail-any) else fail-any)) in
        {254}let v_763: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_762),2-proj-7-tuple(v_745),3-proj-7-tuple(v_745),4-proj-7-tuple(v_745),5-proj-7-tuple(v_745),6-proj-7-tuple(v_745),7-proj-7-tuple(v_745))) in
        {255}let v_764: bitstring = catch-fail(concat3(1-proj-3-tuple(v_746),2-proj-3-tuple(v_746),2-proj-2-tuple(v_762))) in
        {256}let v_765: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_762))) in
        {257}let v_766: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_765),zero)) in
        {258}let v_767: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_765),zero)) in
        {259}let v_768: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_765),zero)) in
        {260}let v_769: bitstring = catch-fail((if success?(2-proj-3-tuple(v_765)) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_768) then (v_766,v_767,v_768) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_770: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_769)) then cipherstatepack(1-proj-3-tuple(v_769),minnonce) else fail-any)) in
        {262}let v_771: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_769)) then cipherstatepack(2-proj-3-tuple(v_769),minnonce) else fail-any)) in
        {263}let v_772: bitstring = catch-fail((if success?(1-proj-2-tuple(v_762)) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (1-proj-2-tuple(v_762),v_770,v_771) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let (hs_773: handshakestate,message_c_774: bitstring,cs1_775: cipherstate,cs2_776: cipherstate) = (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-7-tuple(v_745))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_753) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (v_763,v_764,2-proj-3-tuple(v_772),3-proj-3-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {265}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {266}insert statestore(alice,charlie,sid,statepack_d(hs_773,cs1_775,cs2_776));
        {267}out(pub, message_c_774)
    ) | (
        {269}!
        {289}get statestore(=alice,=charlie,=sid,statepack_d(hs_777: handshakestate,cs1_778: cipherstate,cs2_779: cipherstate)) in
        {270}let hs_780: handshakestate = handshakestatesetcs(hs_777,cs2_779) in
        {271}in(pub, message_d_781: bitstring);
        {272}let v_782: bitstring = catch-fail(handshakestateunpack(hs_780)) in
        {273}let v_783: bitstring = catch-fail(deconcat3(message_d_781)) in
        {274}let v_784: bool = catch-fail(true) in
        {275}let v_785: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_782))) in
        {276}let v_786: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_785))) in
        {277}let v_787: aead = catch-fail(decrypt(1-proj-2-tuple(v_786),2-proj-2-tuple(v_786),3-proj-3-tuple(v_785),3-proj-3-tuple(v_783))) in
        {278}let v_788: bitstring = catch-fail(aeadunpack(v_787)) in
        {279}let v_789: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_785))) in
        {280}let v_790: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_786))) && success?(1-proj-3-tuple(v_785))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then cipherstatepack(1-proj-2-tuple(v_789),increment_nonce(2-proj-2-tuple(v_786))) else fail-any) else fail-any)) in
        {281}let v_791: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_783)) && (success?(3-proj-3-tuple(v_785)) && success?(1-proj-3-tuple(v_785)))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then (if not-caught-fail(v_787) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_790) then (v_790,3-proj-3-tuple(v_788),1-proj-3-tuple(v_788)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {282}let v_792: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)))) in
        {283}let v_793: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_783)) && success?(symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_792),hash(3-proj-3-tuple(v_792),3-proj-3-tuple(v_783))) else fail-any) else fail-any)) in
        {284}let v_794: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_783)) && success?(1-proj-7-tuple(v_782))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_793) then (v_793,2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_795: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_794),2-proj-7-tuple(v_782),3-proj-7-tuple(v_782),4-proj-7-tuple(v_782),5-proj-7-tuple(v_782),6-proj-7-tuple(v_782),7-proj-7-tuple(v_782))) in
        {286}let (hs_796: handshakestate,plaintext_d_797: bitstring,valid_798: bool) = (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-7-tuple(v_782))))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if not-caught-fail(v_784) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (if (v_784 && 3-proj-3-tuple(v_794)) then (if not-caught-fail(v_795) then (v_795,2-proj-3-tuple(v_794),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {287}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_797);
        {288}insert statestore(alice,charlie,sid,statepack_e(hs_796,cs1_778,handshakestategetcs(hs_796)))
    ) | (
        {290}!
        {308}get statestore(=alice,=charlie,=sid,statepack_e(hs_799: handshakestate,cs1_800: cipherstate,cs2_801: cipherstate)) in
        {291}let hs_802: handshakestate = handshakestatesetcs(hs_799,cs1_800) in
        {292}let v_803: bitstring = catch-fail(handshakestateunpack(hs_802)) in
        {293}let v_804: bitstring = catch-fail((empty,empty,empty)) in
        {294}let v_805: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_803))) in
        {295}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {296}let v_807: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_806),2-proj-2-tuple(v_806),3-proj-3-tuple(v_805),msg_e(alice,charlie,sid))) in
        {297}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {298}let v_809: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_806))) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then cipherstatepack(1-proj-2-tuple(v_808),increment_nonce(2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
        {299}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_805)) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_809) then (v_809,v_807) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_811: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) in
        {301}let v_812: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_810)) && success?(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_811),hash(3-proj-3-tuple(v_811),2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {302}let v_813: bitstring = catch-fail((if success?(1-proj-7-tuple(v_803)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,2-proj-2-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_814: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_813),2-proj-7-tuple(v_803),3-proj-7-tuple(v_803),4-proj-7-tuple(v_803),5-proj-7-tuple(v_803),6-proj-7-tuple(v_803),7-proj-7-tuple(v_803))) in
        {304}let v_815: bitstring = catch-fail(concat3(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),2-proj-2-tuple(v_813))) in
        {305}let (hs_816: handshakestate,message_e_817: bitstring) = (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-7-tuple(v_803))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {307}out(pub, message_e_817)
    ) | (
        {309}event LeakS(phase0,alice);
        {310}out(pub, key_s(alice))
    ) | (
        {311}phase 1;
        {312}event LeakS(phase1,alice);
        {313}out(pub, key_s(alice))
    )
) | (
    {314}let v_818: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {315}let s_819: keypair = (if not-caught-fail(v_818) then keypairpack(validkey(v_818),key_s(bob)) else fail-any) in
    {316}out(pub, getpublickey(s_819));
    (
        {317}let e_820: keypair = keypairpack(empty,empty) in
        {318}let v_821: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {319}let rs_822: key = getpublickey((if not-caught-fail(v_821) then keypairpack(validkey(v_821),key_s(alice)) else fail-any)) in
        {320}let re_823: key = empty in
        {321}let v_824: bitstring = catch-fail(hash(somename,empty)) in
        {322}let v_825: key = catch-fail(v_824) in
        {323}let v_826: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {324}let v_827: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then symmetricstatepack(v_826,v_825,v_824) else fail-any) else fail-any) else fail-any))) in
        {325}let v_828: symmetricstate = catch-fail((if success?((if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then symmetricstatepack(v_826,v_825,v_824) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),empty)) else fail-any) else fail-any)) in
        {326}let v_829: bitstring = catch-fail(symmetricstateunpack(v_828)) in
        {327}let v_830: symmetricstate = catch-fail((if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then symmetricstatepack(1-proj-3-tuple(v_829),2-proj-3-tuple(v_829),hash(3-proj-3-tuple(v_829),rs_822)) else fail-any)) in
        {328}let v_831: bitstring = catch-fail(symmetricstateunpack(v_830)) in
        {329}let v_832: symmetricstate = catch-fail((if success?(getpublickey(s_819)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then symmetricstatepack(1-proj-3-tuple(v_831),2-proj-3-tuple(v_831),hash(3-proj-3-tuple(v_831),getpublickey(s_819))) else fail-any) else fail-any)) in
        {330}let hs_833: handshakestate = (if not-caught-fail(v_828) then (if not-caught-fail(v_830) then (if not-caught-fail(v_832) then handshakestatepack(v_832,s_819,e_820,rs_822,re_823,empty,false) else fail-any) else fail-any) else fail-any) in
        {331}insert statestore(bob,alice,sid,statepack_a(hs_833))
    ) | (
        {360}get statestore(=bob,=alice,=sid,statepack_a(hs_834: handshakestate)) in
        {332}in(pub, message_a_835: bitstring);
        {333}let v_836: bitstring = catch-fail(handshakestateunpack(hs_834)) in
        {334}let v_837: bitstring = catch-fail(deconcat3(message_a_835)) in
        {335}let v_838: bool = catch-fail(true) in
        {336}let v_839: key = catch-fail(1-proj-3-tuple(v_837)) in
        {337}let v_840: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_836))) in
        {338}let v_841: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_836)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then symmetricstatepack(1-proj-3-tuple(v_840),2-proj-3-tuple(v_840),hash(3-proj-3-tuple(v_840),v_839)) else fail-any) else fail-any)) in
        {339}let v_842: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_836))) in
        {340}let v_843: bitstring = catch-fail(symmetricstateunpack(v_841)) in
        {341}let v_844: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_843),(if success?(2-proj-7-tuple(v_836)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then dhexp(2-proj-2-tuple(v_842),v_839) else fail-any) else fail-any))) in
        {342}let v_845: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_843),(if success?(2-proj-7-tuple(v_836)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then dhexp(2-proj-2-tuple(v_842),v_839) else fail-any) else fail-any))) in
        {343}let v_846: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_843),(if success?(2-proj-7-tuple(v_836)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then dhexp(2-proj-2-tuple(v_842),v_839) else fail-any) else fail-any))) in
        {344}let v_847: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_836)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then dhexp(2-proj-2-tuple(v_842),v_839) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_843))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (if not-caught-fail(v_846) then (v_844,v_845,v_846) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_848: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_836)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then dhexp(2-proj-2-tuple(v_842),v_839) else fail-any) else fail-any)) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_847)) then cipherstatepack(2-proj-3-tuple(v_847),minnonce) else fail-any),1-proj-3-tuple(v_847),3-proj-3-tuple(v_843)) else fail-any) else fail-any) else fail-any)) in
        {346}let v_849: bitstring = catch-fail(symmetricstateunpack(v_848)) in
        {347}let v_850: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_849))) in
        {348}let v_851: aead = catch-fail(decrypt(1-proj-2-tuple(v_850),2-proj-2-tuple(v_850),3-proj-3-tuple(v_849),3-proj-3-tuple(v_837))) in
        {349}let v_852: bitstring = catch-fail(aeadunpack(v_851)) in
        {350}let v_853: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_849))) in
        {351}let v_854: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_850))) && success?(1-proj-3-tuple(v_849))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then cipherstatepack(1-proj-2-tuple(v_853),increment_nonce(2-proj-2-tuple(v_850))) else fail-any) else fail-any)) in
        {352}let v_855: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_837)) && (success?(3-proj-3-tuple(v_849)) && success?(1-proj-3-tuple(v_849)))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if not-caught-fail(v_854) then (v_854,3-proj-3-tuple(v_852),1-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_856: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_855),2-proj-3-tuple(v_849),3-proj-3-tuple(v_849)))) in
        {354}let v_857: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_837)) && success?(symmetricstatepack(1-proj-3-tuple(v_855),2-proj-3-tuple(v_849),3-proj-3-tuple(v_849)))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack(1-proj-3-tuple(v_856),2-proj-3-tuple(v_856),hash(3-proj-3-tuple(v_856),3-proj-3-tuple(v_837))) else fail-any) else fail-any)) in
        {355}let v_858: bitstring = catch-fail((if success?(3-proj-3-tuple(v_837)) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if not-caught-fail(v_857) then (v_857,2-proj-3-tuple(v_855),3-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_859: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_858),2-proj-7-tuple(v_836),3-proj-7-tuple(v_836),4-proj-7-tuple(v_836),v_839,6-proj-7-tuple(v_836),7-proj-7-tuple(v_836))) in
        {357}let (hs_860: handshakestate,plaintext_a: bitstring,valid_861: bool) = (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-7-tuple(v_836))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if not-caught-fail(v_838) then (if not-caught-fail(v_839) then (if not-caught-fail(v_841) then (if not-caught-fail(v_848) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (v_838 && 3-proj-3-tuple(v_858)) then (if not-caught-fail(v_859) then (v_859,2-proj-3-tuple(v_858),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {359}insert statestore(bob,alice,sid,statepack_b(hs_860))
    ) | (
        {390}get statestore(=bob,=alice,=sid,statepack_b(hs_862: handshakestate)) in
        {361}let v_863: bitstring = catch-fail(handshakestateunpack(hs_862)) in
        {362}let v_864: bitstring = catch-fail((empty,empty,empty)) in
        {363}let v_865: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {364}let v_866: keypair = catch-fail((if not-caught-fail(v_865) then keypairpack(validkey(v_865),key_e(bob,alice,sid)) else fail-any)) in
        {365}let v_867: bitstring = catch-fail(getpublickey(v_866)) in
        {366}let v_868: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_863))) in
        {367}let v_869: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_863)) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then symmetricstatepack(1-proj-3-tuple(v_868),2-proj-3-tuple(v_868),hash(3-proj-3-tuple(v_868),v_867)) else fail-any) else fail-any)) in
        {368}let v_870: bitstring = catch-fail(keypairunpack(v_866)) in
        {369}let v_871: bitstring = catch-fail(symmetricstateunpack(v_869)) in
        {370}let v_872: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_871),(if success?(5-proj-7-tuple(v_863)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then dhexp(2-proj-2-tuple(v_870),5-proj-7-tuple(v_863)) else fail-any) else fail-any))) in
        {371}let v_873: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_871),(if success?(5-proj-7-tuple(v_863)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then dhexp(2-proj-2-tuple(v_870),5-proj-7-tuple(v_863)) else fail-any) else fail-any))) in
        {372}let v_874: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_871),(if success?(5-proj-7-tuple(v_863)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then dhexp(2-proj-2-tuple(v_870),5-proj-7-tuple(v_863)) else fail-any) else fail-any))) in
        {373}let v_875: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_863)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then dhexp(2-proj-2-tuple(v_870),5-proj-7-tuple(v_863)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_871))) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (v_872,v_873,v_874) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_876: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_863)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then dhexp(2-proj-2-tuple(v_870),5-proj-7-tuple(v_863)) else fail-any) else fail-any)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_875)) then cipherstatepack(2-proj-3-tuple(v_875),minnonce) else fail-any),1-proj-3-tuple(v_875),3-proj-3-tuple(v_871)) else fail-any) else fail-any) else fail-any)) in
        {375}let v_877: bitstring = catch-fail(symmetricstateunpack(v_876)) in
        {376}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {377}let v_879: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_878),2-proj-2-tuple(v_878),3-proj-3-tuple(v_877),msg_b(bob,alice,sid))) in
        {378}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {379}let v_881: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_878))) && success?(1-proj-3-tuple(v_877))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then cipherstatepack(1-proj-2-tuple(v_880),increment_nonce(2-proj-2-tuple(v_878))) else fail-any) else fail-any)) in
        {380}let v_882: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_877)) && success?(1-proj-3-tuple(v_877))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then (if not-caught-fail(v_879) then (if not-caught-fail(v_881) then (v_881,v_879) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_883: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_882),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) in
        {382}let v_884: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_882)) && success?(symmetricstatepack(1-proj-2-tuple(v_882),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),2-proj-2-tuple(v_882))) else fail-any) else fail-any)) in
        {383}let v_885: bitstring = catch-fail((if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then (if not-caught-fail(v_884) then (v_884,2-proj-2-tuple(v_882)) else fail-any) else fail-any) else fail-any)) in
        {384}let v_886: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_885),2-proj-7-tuple(v_863),v_866,4-proj-7-tuple(v_863),5-proj-7-tuple(v_863),6-proj-7-tuple(v_863),7-proj-7-tuple(v_863))) in
        {385}let v_887: bitstring = catch-fail(concat3(v_867,2-proj-3-tuple(v_864),2-proj-2-tuple(v_885))) in
        {386}let (hs_888: handshakestate,message_b_889: bitstring) = (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-7-tuple(v_863))))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_867) then (if not-caught-fail(v_869) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_887) then (v_886,v_887) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {387}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {388}insert statestore(bob,alice,sid,statepack_c(hs_888));
        {389}out(pub, message_b_889)
    ) | (
        {424}get statestore(=bob,=alice,=sid,statepack_c(hs_890: handshakestate)) in
        {391}in(pub, message_c_891: bitstring);
        {392}let v_892: bitstring = catch-fail(handshakestateunpack(hs_890)) in
        {393}let v_893: bitstring = catch-fail(deconcat3(message_c_891)) in
        {394}let v_894: bool = catch-fail(true) in
        {395}let v_895: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_892))) in
        {396}let v_896: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_892))) in
        {397}let v_897: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_896),(if (success?(4-proj-7-tuple(v_892)) && success?(3-proj-7-tuple(v_892))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),4-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {398}let v_898: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_896),(if (success?(4-proj-7-tuple(v_892)) && success?(3-proj-7-tuple(v_892))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),4-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {399}let v_899: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_896),(if (success?(4-proj-7-tuple(v_892)) && success?(3-proj-7-tuple(v_892))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),4-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {400}let v_900: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_892)) && success?(3-proj-7-tuple(v_892))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),4-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_896))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then (v_897,v_898,v_899) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_901: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_892)) && success?(3-proj-7-tuple(v_892))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),4-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_892))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_900)) then cipherstatepack(2-proj-3-tuple(v_900),minnonce) else fail-any),1-proj-3-tuple(v_900),3-proj-3-tuple(v_896)) else fail-any) else fail-any) else fail-any)) in
        {402}let v_902: bitstring = catch-fail(symmetricstateunpack(v_901)) in
        {403}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {404}let v_904: aead = catch-fail(decrypt(1-proj-2-tuple(v_903),2-proj-2-tuple(v_903),3-proj-3-tuple(v_902),3-proj-3-tuple(v_893))) in
        {405}let v_905: bitstring = catch-fail(aeadunpack(v_904)) in
        {406}let v_906: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {407}let v_907: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_903))) && success?(1-proj-3-tuple(v_902))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then cipherstatepack(1-proj-2-tuple(v_906),increment_nonce(2-proj-2-tuple(v_903))) else fail-any) else fail-any)) in
        {408}let v_908: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_893)) && (success?(3-proj-3-tuple(v_902)) && success?(1-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,3-proj-3-tuple(v_905),1-proj-3-tuple(v_905)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_909: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) in
        {410}let v_910: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_893)) && success?(symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),hash(3-proj-3-tuple(v_909),3-proj-3-tuple(v_893))) else fail-any) else fail-any)) in
        {411}let v_911: bitstring = catch-fail((if success?(3-proj-3-tuple(v_893)) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (v_910,2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {412}let v_912: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_911),2-proj-7-tuple(v_892),3-proj-7-tuple(v_892),4-proj-7-tuple(v_892),5-proj-7-tuple(v_892),6-proj-7-tuple(v_892),7-proj-7-tuple(v_892))) in
        {413}let v_913: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_911))) in
        {414}let v_914: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_913),zero)) in
        {415}let v_915: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_913),zero)) in
        {416}let v_916: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_913),zero)) in
        {417}let v_917: bitstring = catch-fail((if success?(2-proj-3-tuple(v_913)) then (if not-caught-fail(v_914) then (if not-caught-fail(v_915) then (if not-caught-fail(v_916) then (v_914,v_915,v_916) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_918: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_917)) then cipherstatepack(1-proj-3-tuple(v_917),minnonce) else fail-any)) in
        {419}let v_919: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_917)) then cipherstatepack(2-proj-3-tuple(v_917),minnonce) else fail-any)) in
        {420}let v_920: bitstring = catch-fail((if success?(1-proj-3-tuple(v_911)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (1-proj-3-tuple(v_911),v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let (hs_921: handshakestate,plaintext_c: bitstring,valid_922: bool,cs1_923: cipherstate,cs2_924: cipherstate) = (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-7-tuple(v_892))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if not-caught-fail(v_894) then (if not-caught-fail(v_901) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if (v_894 && 3-proj-3-tuple(v_911)) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then (v_912,2-proj-3-tuple(v_911),true,2-proj-3-tuple(v_920),3-proj-3-tuple(v_920)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {422}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {423}insert statestore(bob,alice,sid,statepack_d(hs_921,cs1_923,cs2_924))
    ) | (
        {425}!
        {444}get statestore(=bob,=alice,=sid,statepack_d(hs_925: handshakestate,cs1_926: cipherstate,cs2_927: cipherstate)) in
        {426}let hs_928: handshakestate = handshakestatesetcs(hs_925,cs2_927) in
        {427}let v_929: bitstring = catch-fail(handshakestateunpack(hs_928)) in
        {428}let v_930: bitstring = catch-fail((empty,empty,empty)) in
        {429}let v_931: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_929))) in
        {430}let v_932: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_931))) in
        {431}let v_933: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_932),2-proj-2-tuple(v_932),3-proj-3-tuple(v_931),msg_d(bob,alice,sid))) in
        {432}let v_934: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_931))) in
        {433}let v_935: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_932))) && success?(1-proj-3-tuple(v_931))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then cipherstatepack(1-proj-2-tuple(v_934),increment_nonce(2-proj-2-tuple(v_932))) else fail-any) else fail-any)) in
        {434}let v_936: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_931)) && success?(1-proj-3-tuple(v_931))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then (if not-caught-fail(v_933) then (if not-caught-fail(v_935) then (v_935,v_933) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {435}let v_937: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_936),2-proj-3-tuple(v_931),3-proj-3-tuple(v_931)))) in
        {436}let v_938: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_936)) && success?(symmetricstatepack(1-proj-2-tuple(v_936),2-proj-3-tuple(v_931),3-proj-3-tuple(v_931)))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then symmetricstatepack(1-proj-3-tuple(v_937),2-proj-3-tuple(v_937),hash(3-proj-3-tuple(v_937),2-proj-2-tuple(v_936))) else fail-any) else fail-any)) in
        {437}let v_939: bitstring = catch-fail((if success?(1-proj-7-tuple(v_929)) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-2-tuple(v_936))))) then (if not-caught-fail(v_938) then (v_938,2-proj-2-tuple(v_936)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_940: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_939),2-proj-7-tuple(v_929),3-proj-7-tuple(v_929),4-proj-7-tuple(v_929),5-proj-7-tuple(v_929),6-proj-7-tuple(v_929),7-proj-7-tuple(v_929))) in
        {439}let v_941: bitstring = catch-fail(concat3(1-proj-3-tuple(v_930),2-proj-3-tuple(v_930),2-proj-2-tuple(v_939))) in
        {440}let (hs_942: handshakestate,message_d_943: bitstring) = (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-7-tuple(v_929))))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (v_940,v_941) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {441}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {442}insert statestore(bob,alice,sid,statepack_e(hs_942,cs1_926,handshakestategetcs(hs_942)));
        {443}out(pub, message_d_943)
    ) | (
        {445}!
        {465}get statestore(=bob,=alice,=sid,statepack_e(hs_944: handshakestate,cs1_945: cipherstate,cs2_946: cipherstate)) in
        {446}let hs_947: handshakestate = handshakestatesetcs(hs_944,cs1_945) in
        {447}in(pub, message_e_948: bitstring);
        {448}let v_949: bitstring = catch-fail(handshakestateunpack(hs_947)) in
        {449}let v_950: bitstring = catch-fail(deconcat3(message_e_948)) in
        {450}let v_951: bool = catch-fail(true) in
        {451}let v_952: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
        {452}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
        {453}let v_954: aead = catch-fail(decrypt(1-proj-2-tuple(v_953),2-proj-2-tuple(v_953),3-proj-3-tuple(v_952),3-proj-3-tuple(v_950))) in
        {454}let v_955: bitstring = catch-fail(aeadunpack(v_954)) in
        {455}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
        {456}let v_957: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_953))) && success?(1-proj-3-tuple(v_952))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then cipherstatepack(1-proj-2-tuple(v_956),increment_nonce(2-proj-2-tuple(v_953))) else fail-any) else fail-any)) in
        {457}let v_958: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && (success?(3-proj-3-tuple(v_952)) && success?(1-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_957) then (v_957,3-proj-3-tuple(v_955),1-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let v_959: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) in
        {459}let v_960: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then symmetricstatepack(1-proj-3-tuple(v_959),2-proj-3-tuple(v_959),hash(3-proj-3-tuple(v_959),3-proj-3-tuple(v_950))) else fail-any) else fail-any)) in
        {460}let v_961: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(1-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_960) then (v_960,2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {461}let v_962: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_961),2-proj-7-tuple(v_949),3-proj-7-tuple(v_949),4-proj-7-tuple(v_949),5-proj-7-tuple(v_949),6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
        {462}let (hs_963: handshakestate,plaintext_e: bitstring,valid_964: bool) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_951) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if (v_951 && 3-proj-3-tuple(v_961)) then (if not-caught-fail(v_962) then (v_962,2-proj-3-tuple(v_961),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {464}event RecvEnd(valid_964)
    ) | (
        {466}event LeakS(phase0,bob);
        {467}out(pub, key_s(bob))
    ) | (
        {468}phase 1;
        {469}event LeakS(phase1,bob);
        {470}out(pub, key_s(bob))
    )
) | (
    {471}let v_965: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {472}let s_966: keypair = (if not-caught-fail(v_965) then keypairpack(validkey(v_965),key_s(bob)) else fail-any) in
    {473}out(pub, getpublickey(s_966));
    (
        {474}let e_967: keypair = keypairpack(empty,empty) in
        {475}let v_968: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {476}let rs_969: key = getpublickey((if not-caught-fail(v_968) then keypairpack(validkey(v_968),key_s(charlie)) else fail-any)) in
        {477}let re_970: key = empty in
        {478}let v_971: bitstring = catch-fail(hash(somename,empty)) in
        {479}let v_972: key = catch-fail(v_971) in
        {480}let v_973: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {481}let v_974: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_971) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then symmetricstatepack(v_973,v_972,v_971) else fail-any) else fail-any) else fail-any))) in
        {482}let v_975: symmetricstate = catch-fail((if success?((if not-caught-fail(v_971) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then symmetricstatepack(v_973,v_972,v_971) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then symmetricstatepack(1-proj-3-tuple(v_974),2-proj-3-tuple(v_974),hash(3-proj-3-tuple(v_974),empty)) else fail-any) else fail-any)) in
        {483}let v_976: bitstring = catch-fail(symmetricstateunpack(v_975)) in
        {484}let v_977: symmetricstate = catch-fail((if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),rs_969)) else fail-any)) in
        {485}let v_978: bitstring = catch-fail(symmetricstateunpack(v_977)) in
        {486}let v_979: symmetricstate = catch-fail((if success?(getpublickey(s_966)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_978),hash(3-proj-3-tuple(v_978),getpublickey(s_966))) else fail-any) else fail-any)) in
        {487}let hs_980: handshakestate = (if not-caught-fail(v_975) then (if not-caught-fail(v_977) then (if not-caught-fail(v_979) then handshakestatepack(v_979,s_966,e_967,rs_969,re_970,empty,false) else fail-any) else fail-any) else fail-any) in
        {488}insert statestore(bob,charlie,sid,statepack_a(hs_980))
    ) | (
        {517}get statestore(=bob,=charlie,=sid,statepack_a(hs_981: handshakestate)) in
        {489}in(pub, message_a_982: bitstring);
        {490}let v_983: bitstring = catch-fail(handshakestateunpack(hs_981)) in
        {491}let v_984: bitstring = catch-fail(deconcat3(message_a_982)) in
        {492}let v_985: bool = catch-fail(true) in
        {493}let v_986: key = catch-fail(1-proj-3-tuple(v_984)) in
        {494}let v_987: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_983))) in
        {495}let v_988: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_983)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then symmetricstatepack(1-proj-3-tuple(v_987),2-proj-3-tuple(v_987),hash(3-proj-3-tuple(v_987),v_986)) else fail-any) else fail-any)) in
        {496}let v_989: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_983))) in
        {497}let v_990: bitstring = catch-fail(symmetricstateunpack(v_988)) in
        {498}let v_991: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_990),(if success?(2-proj-7-tuple(v_983)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then dhexp(2-proj-2-tuple(v_989),v_986) else fail-any) else fail-any))) in
        {499}let v_992: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_990),(if success?(2-proj-7-tuple(v_983)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then dhexp(2-proj-2-tuple(v_989),v_986) else fail-any) else fail-any))) in
        {500}let v_993: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_990),(if success?(2-proj-7-tuple(v_983)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then dhexp(2-proj-2-tuple(v_989),v_986) else fail-any) else fail-any))) in
        {501}let v_994: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_983)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then dhexp(2-proj-2-tuple(v_989),v_986) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_990))) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (if not-caught-fail(v_993) then (v_991,v_992,v_993) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_995: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_983)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then dhexp(2-proj-2-tuple(v_989),v_986) else fail-any) else fail-any)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_994)) then cipherstatepack(2-proj-3-tuple(v_994),minnonce) else fail-any),1-proj-3-tuple(v_994),3-proj-3-tuple(v_990)) else fail-any) else fail-any) else fail-any)) in
        {503}let v_996: bitstring = catch-fail(symmetricstateunpack(v_995)) in
        {504}let v_997: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {505}let v_998: aead = catch-fail(decrypt(1-proj-2-tuple(v_997),2-proj-2-tuple(v_997),3-proj-3-tuple(v_996),3-proj-3-tuple(v_984))) in
        {506}let v_999: bitstring = catch-fail(aeadunpack(v_998)) in
        {507}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {508}let v_1001: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_997))) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then cipherstatepack(1-proj-2-tuple(v_1000),increment_nonce(2-proj-2-tuple(v_997))) else fail-any) else fail-any)) in
        {509}let v_1002: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_984)) && (success?(3-proj-3-tuple(v_996)) && success?(1-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1001) then (v_1001,3-proj-3-tuple(v_999),1-proj-3-tuple(v_999)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {510}let v_1003: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) in
        {511}let v_1004: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_984)) && success?(symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then symmetricstatepack(1-proj-3-tuple(v_1003),2-proj-3-tuple(v_1003),hash(3-proj-3-tuple(v_1003),3-proj-3-tuple(v_984))) else fail-any) else fail-any)) in
        {512}let v_1005: bitstring = catch-fail((if success?(3-proj-3-tuple(v_984)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if not-caught-fail(v_1004) then (v_1004,2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {513}let v_1006: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1005),2-proj-7-tuple(v_983),3-proj-7-tuple(v_983),4-proj-7-tuple(v_983),v_986,6-proj-7-tuple(v_983),7-proj-7-tuple(v_983))) in
        {514}let (hs_1007: handshakestate,plaintext_a_1008: bitstring,valid_1009: bool) = (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-7-tuple(v_983))))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then (if not-caught-fail(v_985) then (if not-caught-fail(v_986) then (if not-caught-fail(v_988) then (if not-caught-fail(v_995) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if (v_985 && 3-proj-3-tuple(v_1005)) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1005),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {515}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1008);
        {516}insert statestore(bob,charlie,sid,statepack_b(hs_1007))
    ) | (
        {547}get statestore(=bob,=charlie,=sid,statepack_b(hs_1010: handshakestate)) in
        {518}let v_1011: bitstring = catch-fail(handshakestateunpack(hs_1010)) in
        {519}let v_1012: bitstring = catch-fail((empty,empty,empty)) in
        {520}let v_1013: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {521}let v_1014: keypair = catch-fail((if not-caught-fail(v_1013) then keypairpack(validkey(v_1013),key_e(bob,charlie,sid)) else fail-any)) in
        {522}let v_1015: bitstring = catch-fail(getpublickey(v_1014)) in
        {523}let v_1016: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1011))) in
        {524}let v_1017: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1011)) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then symmetricstatepack(1-proj-3-tuple(v_1016),2-proj-3-tuple(v_1016),hash(3-proj-3-tuple(v_1016),v_1015)) else fail-any) else fail-any)) in
        {525}let v_1018: bitstring = catch-fail(keypairunpack(v_1014)) in
        {526}let v_1019: bitstring = catch-fail(symmetricstateunpack(v_1017)) in
        {527}let v_1020: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1019),(if success?(5-proj-7-tuple(v_1011)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then dhexp(2-proj-2-tuple(v_1018),5-proj-7-tuple(v_1011)) else fail-any) else fail-any))) in
        {528}let v_1021: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1019),(if success?(5-proj-7-tuple(v_1011)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then dhexp(2-proj-2-tuple(v_1018),5-proj-7-tuple(v_1011)) else fail-any) else fail-any))) in
        {529}let v_1022: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1019),(if success?(5-proj-7-tuple(v_1011)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then dhexp(2-proj-2-tuple(v_1018),5-proj-7-tuple(v_1011)) else fail-any) else fail-any))) in
        {530}let v_1023: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1011)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then dhexp(2-proj-2-tuple(v_1018),5-proj-7-tuple(v_1011)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1019))) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1022) then (v_1020,v_1021,v_1022) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {531}let v_1024: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1011)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then dhexp(2-proj-2-tuple(v_1018),5-proj-7-tuple(v_1011)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1023)) then cipherstatepack(2-proj-3-tuple(v_1023),minnonce) else fail-any),1-proj-3-tuple(v_1023),3-proj-3-tuple(v_1019)) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1025: bitstring = catch-fail(symmetricstateunpack(v_1024)) in
        {533}let v_1026: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1025))) in
        {534}let v_1027: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1026),2-proj-2-tuple(v_1026),3-proj-3-tuple(v_1025),msg_b(bob,charlie,sid))) in
        {535}let v_1028: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1025))) in
        {536}let v_1029: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1026))) && success?(1-proj-3-tuple(v_1025))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then cipherstatepack(1-proj-2-tuple(v_1028),increment_nonce(2-proj-2-tuple(v_1026))) else fail-any) else fail-any)) in
        {537}let v_1030: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1025)) && success?(1-proj-3-tuple(v_1025))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1029) then (v_1029,v_1027) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let v_1031: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1030),2-proj-3-tuple(v_1025),3-proj-3-tuple(v_1025)))) in
        {539}let v_1032: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1030)) && success?(symmetricstatepack(1-proj-2-tuple(v_1030),2-proj-3-tuple(v_1025),3-proj-3-tuple(v_1025)))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack(1-proj-3-tuple(v_1031),2-proj-3-tuple(v_1031),hash(3-proj-3-tuple(v_1031),2-proj-2-tuple(v_1030))) else fail-any) else fail-any)) in
        {540}let v_1033: bitstring = catch-fail((if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then (if not-caught-fail(v_1032) then (v_1032,2-proj-2-tuple(v_1030)) else fail-any) else fail-any) else fail-any)) in
        {541}let v_1034: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1033),2-proj-7-tuple(v_1011),v_1014,4-proj-7-tuple(v_1011),5-proj-7-tuple(v_1011),6-proj-7-tuple(v_1011),7-proj-7-tuple(v_1011))) in
        {542}let v_1035: bitstring = catch-fail(concat3(v_1015,2-proj-3-tuple(v_1012),2-proj-2-tuple(v_1033))) in
        {543}let (hs_1036: handshakestate,message_b_1037: bitstring) = (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-7-tuple(v_1011))))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-3-tuple(v_1012))))) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1024) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1035) then (v_1034,v_1035) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {544}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {545}insert statestore(bob,charlie,sid,statepack_c(hs_1036));
        {546}out(pub, message_b_1037)
    ) | (
        {581}get statestore(=bob,=charlie,=sid,statepack_c(hs_1038: handshakestate)) in
        {548}in(pub, message_c_1039: bitstring);
        {549}let v_1040: bitstring = catch-fail(handshakestateunpack(hs_1038)) in
        {550}let v_1041: bitstring = catch-fail(deconcat3(message_c_1039)) in
        {551}let v_1042: bool = catch-fail(true) in
        {552}let v_1043: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1040))) in
        {553}let v_1044: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1040))) in
        {554}let v_1045: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1044),(if (success?(4-proj-7-tuple(v_1040)) && success?(3-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then dhexp(2-proj-2-tuple(v_1043),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {555}let v_1046: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1044),(if (success?(4-proj-7-tuple(v_1040)) && success?(3-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then dhexp(2-proj-2-tuple(v_1043),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {556}let v_1047: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1044),(if (success?(4-proj-7-tuple(v_1040)) && success?(3-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then dhexp(2-proj-2-tuple(v_1043),4-proj-7-tuple(v_1040)) else fail-any) else fail-any))) in
        {557}let v_1048: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1040)) && success?(3-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then dhexp(2-proj-2-tuple(v_1043),4-proj-7-tuple(v_1040)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1044))) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1046) then (if not-caught-fail(v_1047) then (v_1045,v_1046,v_1047) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1049: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1040)) && success?(3-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then dhexp(2-proj-2-tuple(v_1043),4-proj-7-tuple(v_1040)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1040))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1048)) then cipherstatepack(2-proj-3-tuple(v_1048),minnonce) else fail-any),1-proj-3-tuple(v_1048),3-proj-3-tuple(v_1044)) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1050: bitstring = catch-fail(symmetricstateunpack(v_1049)) in
        {560}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {561}let v_1052: aead = catch-fail(decrypt(1-proj-2-tuple(v_1051),2-proj-2-tuple(v_1051),3-proj-3-tuple(v_1050),3-proj-3-tuple(v_1041))) in
        {562}let v_1053: bitstring = catch-fail(aeadunpack(v_1052)) in
        {563}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {564}let v_1055: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1051))) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then cipherstatepack(1-proj-2-tuple(v_1054),increment_nonce(2-proj-2-tuple(v_1051))) else fail-any) else fail-any)) in
        {565}let v_1056: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && (success?(3-proj-3-tuple(v_1050)) && success?(1-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then (if not-caught-fail(v_1052) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,3-proj-3-tuple(v_1053),1-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1057: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) in
        {567}let v_1058: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1041)) && success?(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack(1-proj-3-tuple(v_1057),2-proj-3-tuple(v_1057),hash(3-proj-3-tuple(v_1057),3-proj-3-tuple(v_1041))) else fail-any) else fail-any)) in
        {568}let v_1059: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1041)) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1058) then (v_1058,2-proj-3-tuple(v_1056),3-proj-3-tuple(v_1056)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {569}let v_1060: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1059),2-proj-7-tuple(v_1040),3-proj-7-tuple(v_1040),4-proj-7-tuple(v_1040),5-proj-7-tuple(v_1040),6-proj-7-tuple(v_1040),7-proj-7-tuple(v_1040))) in
        {570}let v_1061: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1059))) in
        {571}let v_1062: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1061),zero)) in
        {572}let v_1063: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1061),zero)) in
        {573}let v_1064: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1061),zero)) in
        {574}let v_1065: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1061)) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (if not-caught-fail(v_1064) then (v_1062,v_1063,v_1064) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {575}let v_1066: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1065)) then cipherstatepack(1-proj-3-tuple(v_1065),minnonce) else fail-any)) in
        {576}let v_1067: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1065)) then cipherstatepack(2-proj-3-tuple(v_1065),minnonce) else fail-any)) in
        {577}let v_1068: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1059)) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1067) then (1-proj-3-tuple(v_1059),v_1066,v_1067) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {578}let (hs_1069: handshakestate,plaintext_c_1070: bitstring,valid_1071: bool,cs1_1072: cipherstate,cs2_1073: cipherstate) = (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-7-tuple(v_1040))))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if not-caught-fail(v_1042) then (if not-caught-fail(v_1049) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (v_1042 && 3-proj-3-tuple(v_1059)) then (if not-caught-fail(v_1060) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (v_1060,2-proj-3-tuple(v_1059),true,2-proj-3-tuple(v_1068),3-proj-3-tuple(v_1068)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {579}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1070);
        {580}insert statestore(bob,charlie,sid,statepack_d(hs_1069,cs1_1072,cs2_1073))
    ) | (
        {582}!
        {601}get statestore(=bob,=charlie,=sid,statepack_d(hs_1074: handshakestate,cs1_1075: cipherstate,cs2_1076: cipherstate)) in
        {583}let hs_1077: handshakestate = handshakestatesetcs(hs_1074,cs2_1076) in
        {584}let v_1078: bitstring = catch-fail(handshakestateunpack(hs_1077)) in
        {585}let v_1079: bitstring = catch-fail((empty,empty,empty)) in
        {586}let v_1080: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1078))) in
        {587}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1080))) in
        {588}let v_1082: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1081),2-proj-2-tuple(v_1081),3-proj-3-tuple(v_1080),msg_d(bob,charlie,sid))) in
        {589}let v_1083: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1080))) in
        {590}let v_1084: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1081))) && success?(1-proj-3-tuple(v_1080))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-2-tuple(v_1083))))) then cipherstatepack(1-proj-2-tuple(v_1083),increment_nonce(2-proj-2-tuple(v_1081))) else fail-any) else fail-any)) in
        {591}let v_1085: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1080)) && success?(1-proj-3-tuple(v_1080))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then (if not-caught-fail(v_1082) then (if not-caught-fail(v_1084) then (v_1084,v_1082) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1086: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1085),2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)))) in
        {593}let v_1087: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1085)) && success?(symmetricstatepack(1-proj-2-tuple(v_1085),2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then symmetricstatepack(1-proj-3-tuple(v_1086),2-proj-3-tuple(v_1086),hash(3-proj-3-tuple(v_1086),2-proj-2-tuple(v_1085))) else fail-any) else fail-any)) in
        {594}let v_1088: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1078)) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then (if not-caught-fail(v_1087) then (v_1087,2-proj-2-tuple(v_1085)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1089: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1088),2-proj-7-tuple(v_1078),3-proj-7-tuple(v_1078),4-proj-7-tuple(v_1078),5-proj-7-tuple(v_1078),6-proj-7-tuple(v_1078),7-proj-7-tuple(v_1078))) in
        {596}let v_1090: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1079),2-proj-3-tuple(v_1079),2-proj-2-tuple(v_1088))) in
        {597}let (hs_1091: handshakestate,message_d_1092: bitstring) = (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-7-tuple(v_1078))))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then (if not-caught-fail(v_1089) then (if not-caught-fail(v_1090) then (v_1089,v_1090) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {598}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {599}insert statestore(bob,charlie,sid,statepack_e(hs_1091,cs1_1075,handshakestategetcs(hs_1091)));
        {600}out(pub, message_d_1092)
    ) | (
        {602}!
        {622}get statestore(=bob,=charlie,=sid,statepack_e(hs_1093: handshakestate,cs1_1094: cipherstate,cs2_1095: cipherstate)) in
        {603}let hs_1096: handshakestate = handshakestatesetcs(hs_1093,cs1_1094) in
        {604}in(pub, message_e_1097: bitstring);
        {605}let v_1098: bitstring = catch-fail(handshakestateunpack(hs_1096)) in
        {606}let v_1099: bitstring = catch-fail(deconcat3(message_e_1097)) in
        {607}let v_1100: bool = catch-fail(true) in
        {608}let v_1101: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1098))) in
        {609}let v_1102: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1101))) in
        {610}let v_1103: aead = catch-fail(decrypt(1-proj-2-tuple(v_1102),2-proj-2-tuple(v_1102),3-proj-3-tuple(v_1101),3-proj-3-tuple(v_1099))) in
        {611}let v_1104: bitstring = catch-fail(aeadunpack(v_1103)) in
        {612}let v_1105: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1101))) in
        {613}let v_1106: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1102))) && success?(1-proj-3-tuple(v_1101))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then cipherstatepack(1-proj-2-tuple(v_1105),increment_nonce(2-proj-2-tuple(v_1102))) else fail-any) else fail-any)) in
        {614}let v_1107: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1099)) && (success?(3-proj-3-tuple(v_1101)) && success?(1-proj-3-tuple(v_1101)))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then (if not-caught-fail(v_1103) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if not-caught-fail(v_1106) then (v_1106,3-proj-3-tuple(v_1104),1-proj-3-tuple(v_1104)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {615}let v_1108: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1101),3-proj-3-tuple(v_1101)))) in
        {616}let v_1109: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1099)) && success?(symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1101),3-proj-3-tuple(v_1101)))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-3-tuple(v_1108))))) then symmetricstatepack(1-proj-3-tuple(v_1108),2-proj-3-tuple(v_1108),hash(3-proj-3-tuple(v_1108),3-proj-3-tuple(v_1099))) else fail-any) else fail-any)) in
        {617}let v_1110: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1099)) && success?(1-proj-7-tuple(v_1098))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then (if not-caught-fail(v_1109) then (v_1109,2-proj-3-tuple(v_1107),3-proj-3-tuple(v_1107)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {618}let v_1111: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1110),2-proj-7-tuple(v_1098),3-proj-7-tuple(v_1098),4-proj-7-tuple(v_1098),5-proj-7-tuple(v_1098),6-proj-7-tuple(v_1098),7-proj-7-tuple(v_1098))) in
        {619}let (hs_1112: handshakestate,plaintext_e_1113: bitstring,valid_1114: bool) = (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-7-tuple(v_1098))))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then (if not-caught-fail(v_1100) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then (if (v_1100 && 3-proj-3-tuple(v_1110)) then (if not-caught-fail(v_1111) then (v_1111,2-proj-3-tuple(v_1110),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {620}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1113);
        {621}event RecvEnd(valid_1114)
    ) | (
        {623}event LeakS(phase0,bob);
        {624}out(pub, key_s(bob))
    ) | (
        {625}phase 1;
        {626}event LeakS(phase1,bob);
        {627}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 139 rules in the queue.
400 rules inserted. The rule base contains 387 rules. 43 rules in the queue.
600 rules inserted. The rule base contains 578 rules. 125 rules in the queue.
800 rules inserted. The rule base contains 774 rules. 218 rules in the queue.
1000 rules inserted. The rule base contains 964 rules. 330 rules in the queue.
1200 rules inserted. The rule base contains 1144 rules. 296 rules in the queue.
1400 rules inserted. The rule base contains 1336 rules. 399 rules in the queue.
1600 rules inserted. The rule base contains 1518 rules. 468 rules in the queue.
1800 rules inserted. The rule base contains 1667 rules. 417 rules in the queue.
2000 rules inserted. The rule base contains 1827 rules. 373 rules in the queue.
2200 rules inserted. The rule base contains 1996 rules. 388 rules in the queue.
2400 rules inserted. The rule base contains 2133 rules. 386 rules in the queue.
2600 rules inserted. The rule base contains 2225 rules. 374 rules in the queue.
2800 rules inserted. The rule base contains 2382 rules. 423 rules in the queue.
3000 rules inserted. The rule base contains 2519 rules. 461 rules in the queue.
3200 rules inserted. The rule base contains 2627 rules. 436 rules in the queue.
3400 rules inserted. The rule base contains 2746 rules. 433 rules in the queue.
3600 rules inserted. The rule base contains 2892 rules. 465 rules in the queue.
3800 rules inserted. The rule base contains 2974 rules. 454 rules in the queue.
4000 rules inserted. The rule base contains 3038 rules. 415 rules in the queue.
4200 rules inserted. The rule base contains 3163 rules. 398 rules in the queue.
4400 rules inserted. The rule base contains 3243 rules. 357 rules in the queue.
4600 rules inserted. The rule base contains 3414 rules. 375 rules in the queue.
4800 rules inserted. The rule base contains 3522 rules. 350 rules in the queue.
5000 rules inserted. The rule base contains 3635 rules. 279 rules in the queue.
5200 rules inserted. The rule base contains 3779 rules. 290 rules in the queue.
5400 rules inserted. The rule base contains 3916 rules. 316 rules in the queue.
5600 rules inserted. The rule base contains 4046 rules. 331 rules in the queue.
5800 rules inserted. The rule base contains 4186 rules. 285 rules in the queue.
6000 rules inserted. The rule base contains 4372 rules. 313 rules in the queue.
6200 rules inserted. The rule base contains 4551 rules. 347 rules in the queue.
6400 rules inserted. The rule base contains 4703 rules. 358 rules in the queue.
6600 rules inserted. The rule base contains 4862 rules. 340 rules in the queue.
6800 rules inserted. The rule base contains 4996 rules. 309 rules in the queue.
7000 rules inserted. The rule base contains 5120 rules. 307 rules in the queue.
7200 rules inserted. The rule base contains 5245 rules. 311 rules in the queue.
7400 rules inserted. The rule base contains 5436 rules. 349 rules in the queue.
7600 rules inserted. The rule base contains 5570 rules. 351 rules in the queue.
7800 rules inserted. The rule base contains 5694 rules. 330 rules in the queue.
8000 rules inserted. The rule base contains 5863 rules. 353 rules in the queue.
8200 rules inserted. The rule base contains 6020 rules. 316 rules in the queue.
8400 rules inserted. The rule base contains 6134 rules. 282 rules in the queue.
8600 rules inserted. The rule base contains 6276 rules. 290 rules in the queue.
8800 rules inserted. The rule base contains 6401 rules. 281 rules in the queue.
9000 rules inserted. The rule base contains 6514 rules. 274 rules in the queue.
9200 rules inserted. The rule base contains 6631 rules. 261 rules in the queue.
9400 rules inserted. The rule base contains 6758 rules. 211 rules in the queue.
9600 rules inserted. The rule base contains 6863 rules. 151 rules in the queue.
9800 rules inserted. The rule base contains 6914 rules. 85 rules in the queue.
10000 rules inserted. The rule base contains 6904 rules. 24 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922205]),msg_a(alice,bob,sid[!1 = @sid_69922205]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_69922206]),msg_a(alice,bob,sid[!1 = @sid_69922205])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922214]),msg_a(alice,bob,sid[!1 = @sid_69922214]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_69922215]),msg_a(alice,bob,sid[!1 = @sid_69922214])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922224]),msg_a(alice,bob,sid[!1 = @sid_69922224]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_69922225]),msg_a(alice,bob,sid[!1 = @sid_69922224])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922234]),msg_a(alice,bob,sid[!1 = @sid_69922234]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_69922235]),msg_a(alice,bob,sid[!1 = @sid_69922234])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922243]),msg_a(alice,bob,sid[!1 = @sid_69922243]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_69922244]),msg_a(alice,bob,sid[!1 = @sid_69922243])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922251]),msg_a(alice,bob,sid[!1 = @sid_69922251]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_69922251]))
Abbreviations:
sid_69922342 = sid[!1 = @sid_69922318]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_69922342,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_69922342,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_69922342,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_69922342),msg_a(alice,bob,sid_69922342)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {316}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {469}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {470}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922342),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922342),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922342),g))),msg_a(alice,bob,sid_69922342)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_69922342) in phase 1.
attacker_p1(msg_a(alice,bob,sid_69922342)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922344]),msg_a(alice,bob,sid[!1 = @sid_69922344]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_69922344]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922347]),msg_a(alice,bob,sid[!1 = @sid_69922347]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_69922347]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922354]),msg_a(alice,bob,sid[!1 = @sid_69922354]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_69922354]))
Abbreviations:
sid_69922447 = sid[!1 = @sid_69922423]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_69922447,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_69922447,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_69922447,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_69922447),msg_a(alice,bob,sid_69922447)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {316}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {469}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {470}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922447),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922447),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922447),g))),msg_a(alice,bob,sid_69922447)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_69922447) in phase 1.
attacker_p1(msg_a(alice,bob,sid_69922447)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922449]),msg_a(alice,bob,sid[!1 = @sid_69922449]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_69922449]))
Abbreviations:
sid_69922540 = sid[!1 = @sid_69922516]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_69922540,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_69922540,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_69922540,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_69922540),msg_a(alice,bob,sid_69922540)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {316}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {469}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {470}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_69922540),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69922540),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69922540),g))),msg_a(alice,bob,sid_69922540)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_69922540) in phase 1.
attacker_p1(msg_a(alice,bob,sid_69922540)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922543]),msg_b(bob,alice,sid[!1 = @sid_69922543]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922544]),msg_a(alice,bob,sid[!1 = @sid_69922544]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_69922544]),msg_b(bob,alice,sid[!1 = @sid_69922543])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922552]),msg_b(bob,alice,sid[!1 = @sid_69922552]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922553]),msg_a(alice,bob,sid[!1 = @sid_69922553]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_69922553]),msg_b(bob,alice,sid[!1 = @sid_69922552])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922562]),msg_b(bob,alice,sid[!1 = @sid_69922562]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922563]),msg_a(alice,bob,sid[!1 = @sid_69922563]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_69922563]),msg_b(bob,alice,sid[!1 = @sid_69922562])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922572]),msg_b(bob,alice,sid[!1 = @sid_69922572]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922573]),msg_a(alice,bob,sid[!1 = @sid_69922573]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_69922573]),msg_b(bob,alice,sid[!1 = @sid_69922572])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922581]),msg_b(bob,alice,sid[!1 = @sid_69922581]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922582]),msg_a(alice,bob,sid[!1 = @sid_69922582]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_69922582]),msg_b(bob,alice,sid[!1 = @sid_69922581])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922605]),msg_c(alice,bob,sid[!1 = @sid_69922605]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922606]),msg_b(bob,alice,sid[!1 = @sid_69922606]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922605]),msg_a(alice,bob,sid[!1 = @sid_69922605]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_69922606]),msg_c(alice,bob,sid[!1 = @sid_69922605])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922614]),msg_c(alice,bob,sid[!1 = @sid_69922614]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922615]),msg_b(bob,alice,sid[!1 = @sid_69922615]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922614]),msg_a(alice,bob,sid[!1 = @sid_69922614]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_69922615]),msg_c(alice,bob,sid[!1 = @sid_69922614])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922624]),msg_c(alice,bob,sid[!1 = @sid_69922624]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922625]),msg_b(bob,alice,sid[!1 = @sid_69922625]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922624]),msg_a(alice,bob,sid[!1 = @sid_69922624]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_69922625]),msg_c(alice,bob,sid[!1 = @sid_69922624])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922634]),msg_c(alice,bob,sid[!1 = @sid_69922634]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922635]),msg_b(bob,alice,sid[!1 = @sid_69922635]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922634]),msg_a(alice,bob,sid[!1 = @sid_69922634]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_69922635]),msg_c(alice,bob,sid[!1 = @sid_69922634])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922643]),msg_c(alice,bob,sid[!1 = @sid_69922643]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922644]),msg_b(bob,alice,sid[!1 = @sid_69922644]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922643]),msg_a(alice,bob,sid[!1 = @sid_69922643]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_69922644]),msg_c(alice,bob,sid[!1 = @sid_69922643])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922667]),msg_d(bob,alice,sid[!1 = @sid_69922667]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922668]),msg_c(alice,bob,sid[!1 = @sid_69922668]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922667]),msg_b(bob,alice,sid[!1 = @sid_69922667]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922668]),msg_a(alice,bob,sid[!1 = @sid_69922668]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_69922668]),msg_d(bob,alice,sid[!1 = @sid_69922667])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922676]),msg_d(bob,alice,sid[!1 = @sid_69922676]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922677]),msg_c(alice,bob,sid[!1 = @sid_69922677]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922676]),msg_b(bob,alice,sid[!1 = @sid_69922676]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922677]),msg_a(alice,bob,sid[!1 = @sid_69922677]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_69922677]),msg_d(bob,alice,sid[!1 = @sid_69922676])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922686]),msg_d(bob,alice,sid[!1 = @sid_69922686]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922687]),msg_c(alice,bob,sid[!1 = @sid_69922687]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922686]),msg_b(bob,alice,sid[!1 = @sid_69922686]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922687]),msg_a(alice,bob,sid[!1 = @sid_69922687]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_69922687]),msg_d(bob,alice,sid[!1 = @sid_69922686])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1224,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922696]),msg_d(bob,alice,sid[!1 = @sid_69922696]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922697]),msg_c(alice,bob,sid[!1 = @sid_69922697]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922696]),msg_b(bob,alice,sid[!1 = @sid_69922696]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922697]),msg_a(alice,bob,sid[!1 = @sid_69922697]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_69922697]),msg_d(bob,alice,sid[!1 = @sid_69922696])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922705]),msg_d(bob,alice,sid[!1 = @sid_69922705]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922706]),msg_c(alice,bob,sid[!1 = @sid_69922706]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922705]),msg_b(bob,alice,sid[!1 = @sid_69922705]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922706]),msg_a(alice,bob,sid[!1 = @sid_69922706]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_69922706]),msg_d(bob,alice,sid[!1 = @sid_69922705])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(px,alice)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_69922729]),msg_e(alice,bob,sid[!1 = @sid_69922729]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922730]),msg_d(bob,alice,sid[!1 = @sid_69922730]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922729]),msg_c(alice,bob,sid[!1 = @sid_69922729]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922730]),msg_b(bob,alice,sid[!1 = @sid_69922730]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922729]),msg_a(alice,bob,sid[!1 = @sid_69922729]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_69922730]),msg_e(alice,bob,sid[!1 = @sid_69922729])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_69922738]),msg_e(alice,bob,sid[!1 = @sid_69922738]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922739]),msg_d(bob,alice,sid[!1 = @sid_69922739]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922738]),msg_c(alice,bob,sid[!1 = @sid_69922738]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922739]),msg_b(bob,alice,sid[!1 = @sid_69922739]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922738]),msg_a(alice,bob,sid[!1 = @sid_69922738]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_69922739]),msg_e(alice,bob,sid[!1 = @sid_69922738])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_69922748]),msg_e(alice,bob,sid[!1 = @sid_69922748]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922749]),msg_d(bob,alice,sid[!1 = @sid_69922749]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922748]),msg_c(alice,bob,sid[!1 = @sid_69922748]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922749]),msg_b(bob,alice,sid[!1 = @sid_69922749]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922748]),msg_a(alice,bob,sid[!1 = @sid_69922748]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_69922749]),msg_e(alice,bob,sid[!1 = @sid_69922748])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1224,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_69922758]),msg_e(alice,bob,sid[!1 = @sid_69922758]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922759]),msg_d(bob,alice,sid[!1 = @sid_69922759]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922758]),msg_c(alice,bob,sid[!1 = @sid_69922758]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922759]),msg_b(bob,alice,sid[!1 = @sid_69922759]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922758]),msg_a(alice,bob,sid[!1 = @sid_69922758]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_69922759]),msg_e(alice,bob,sid[!1 = @sid_69922758])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_69922767]),msg_e(alice,bob,sid[!1 = @sid_69922767]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922768]),msg_d(bob,alice,sid[!1 = @sid_69922768]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922767]),msg_c(alice,bob,sid[!1 = @sid_69922767]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922768]),msg_b(bob,alice,sid[!1 = @sid_69922768]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922767]),msg_a(alice,bob,sid[!1 = @sid_69922767]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_69922768]),msg_e(alice,bob,sid[!1 = @sid_69922767])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_69922789]),msg_e(alice,bob,sid[!1 = @sid_69922789]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_69922790]),msg_d(bob,alice,sid[!1 = @sid_69922790]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_69922789]),msg_c(alice,bob,sid[!1 = @sid_69922789]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_69922790]),msg_b(bob,alice,sid[!1 = @sid_69922790]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_69922789]),msg_a(alice,bob,sid[!1 = @sid_69922789]))) -> end(RecvEnd(true))
Abbreviations:
sid_69923185 = sid[!1 = @sid_69923106]
sid_69923186 = sid[!1 = @sid_69923174]

1. The entry statestore(bob,alice,sid_69923186,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) may be inserted in a table at insert {331}.
table(statestore(bob,alice,sid_69923186,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false)))).

2. The entry statestore(alice,bob,sid_69923185,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_69923185,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_69923185,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_69923185),msg_a(alice,bob,sid_69923185)) may be executed at {48}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))) may be sent on channel pub at output {50}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))).

4. The entry statestore(bob,alice,sid_69923186,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))) that may be sent on channel pub by 3 may be received at input {332}.
So the entry statestore(bob,alice,sid_69923186,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,sid_69923186,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_69923186,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false))) that may be in a table by 4 may be read at get {390}.
The event SendMsg(bob,alice,stagepack_b(sid_69923186),msg_b(bob,alice,sid_69923186)) may be executed at {387}.
So the entry statestore(bob,alice,sid_69923186,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false))) may be inserted in a table at insert {388}.
table(statestore(bob,alice,sid_69923186,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false)))).

6. The entry statestore(alice,bob,sid_69923185,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_69923185),msg_a(alice,bob,sid_69923185)) may be executed at {48}.
So the entry statestore(alice,bob,sid_69923185,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_69923185,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

7. The entry statestore(bob,alice,sid_69923186,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false))) that may be in a table by 4 may be read at get {390}.
The event SendMsg(bob,alice,stagepack_b(sid_69923186),msg_b(bob,alice,sid_69923186)) may be executed at {387}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))) may be sent on channel pub at output {389}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))).

8. The entry statestore(alice,bob,sid_69923185,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 6 may be read at get {80}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))) that may be sent on channel pub by 7 may be received at input {52}.
So the entry statestore(alice,bob,sid_69923185,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,sid_69923185,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true)))).

9. The entry statestore(alice,bob,sid_69923185,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true))) that may be in a table by 8 may be read at get {113}.
The event SendMsg(alice,bob,stagepack_c(sid_69923185),msg_c(alice,bob,sid_69923185)) may be executed at {110}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))) may be sent on channel pub at output {112}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))).

10. The entry statestore(bob,alice,sid_69923186,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false))) that may be in a table by 5 may be read at get {424}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))) that may be sent on channel pub by 9 may be received at input {391}.
So the entry statestore(bob,alice,sid_69923186,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce))) may be inserted in a table at insert {423}.
table(statestore(bob,alice,sid_69923186,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_69923186,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce))) that may be in a table by 10 may be read at get {444}.
The event SendMsg(bob,alice,stagepack_d(sid_69923186),msg_d(bob,alice,sid_69923186)) may be executed at {441}.
So the entry statestore(bob,alice,sid_69923186,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {442}.
table(statestore(bob,alice,sid_69923186,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_69923185,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true))) that may be in a table by 8 may be read at get {113}.
The event SendMsg(alice,bob,stagepack_c(sid_69923185),msg_c(alice,bob,sid_69923185)) may be executed at {110}.
So the entry statestore(alice,bob,sid_69923185,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce))) may be inserted in a table at insert {111}.
table(statestore(alice,bob,sid_69923185,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_69923186,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce))) that may be in a table by 10 may be read at get {444}.
The event SendMsg(bob,alice,stagepack_d(sid_69923186),msg_d(bob,alice,sid_69923186)) may be executed at {441}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186))) may be sent on channel pub at output {443}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))).

14. The entry statestore(alice,bob,sid_69923185,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce))) that may be in a table by 12 may be read at get {134}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186))) that may be sent on channel pub by 13 may be received at input {116}.
So the entry statestore(alice,bob,sid_69923185,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {133}.
table(statestore(alice,bob,sid_69923185,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_69923185,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),key_e(alice,bob,sid_69923185)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {153}.
The event SendMsg(alice,bob,stagepack_e(sid_69923185),msg_e(alice,bob,sid_69923185)) may be executed at {151}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186))),msg_e(alice,bob,sid_69923185))) may be sent on channel pub at output {152}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186))),msg_e(alice,bob,sid_69923185)))).

16. The entry statestore(bob,alice,sid_69923186,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_69923186),g)),key_e(bob,alice,sid_69923186)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {465}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(alice,bob,sid_69923185),dhexp_real(key_e(bob,alice,sid_69923186),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_69923186),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),dhexp_real(key_e(bob,alice,sid_69923186),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_69923185),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_69923185),g))),msg_a(alice,bob,sid_69923185))),validkey(dhexp_real(key_e(bob,alice,sid_69923186),g))),msg_b(bob,alice,sid_69923186))),msg_c(alice,bob,sid_69923185))),msg_d(bob,alice,sid_69923186))),msg_e(alice,bob,sid_69923185))) that may be sent on channel pub by 15 may be received at input {447}.
So event RecvEnd(true) may be executed at {464}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
